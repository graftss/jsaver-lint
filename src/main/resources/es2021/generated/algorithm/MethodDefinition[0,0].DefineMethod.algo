def [SYNTAX] MethodDefinition[0,0].DefineMethod[R]<(PropertyName, UniqueFormalParameters, FunctionBody),true>(object, functionPrototype?) = 0:{
  0:access __x0__ = (PropertyName "Evaluation")
  0:let propKey = __x0__
  1:[? propKey]
  2:let scope = CONTEXT.LexicalEnvironment
  3:if (! (= functionPrototype absent)) 4:let prototype = functionPrototype else 3:let prototype = INTRINSICS["%Function.prototype%"]
  7:let sourceText = (get-syntax MethodDefinition)
  8:app __x1__ = (OrdinaryFunctionCreate prototype sourceText UniqueFormalParameters FunctionBody ~non-lexical-this~ scope)
  8:let closure = __x1__
  9:app __x2__ = (MakeMethod closure object)
  9:__x2__
  10:return (new Record("Key" -> propKey, "Closure" -> closure))
}
- id: "sec-runtime-semantics-definemethod"
- code:
        1. Let _propKey_ be the result of evaluating |PropertyName|.
        1. ReturnIfAbrupt(_propKey_).
        1. Let _scope_ be the running execution context's LexicalEnvironment.
        1. If _functionPrototype_ is present, then
          1. Let _prototype_ be _functionPrototype_.
        1. Else,
          1. Let _prototype_ be %Function.prototype%.
        1. Let _sourceText_ be the source text matched by |MethodDefinition|.
        1. Let _closure_ be OrdinaryFunctionCreate(_prototype_, _sourceText_, |UniqueFormalParameters|, |FunctionBody|, ~non-lexical-this~, _scope_).
        1. Perform MakeMethod(_closure_, _object_).
        1. Return the Record { [[Key]]: _propKey_, [[Closure]]: _closure_ }.