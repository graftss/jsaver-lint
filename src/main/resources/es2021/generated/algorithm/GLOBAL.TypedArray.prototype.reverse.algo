def [BUILTIN] TypedArray.prototype.reverse() = 0:{
  0:let O = this
  1:app __x0__ = (ValidateTypedArray O)
  1:[? __x0__]
  2:let len = O.ArrayLength
  3:app __x1__ = (floor (/ len 2i))
  3:let middle = __x1__
  4:let lower = 0i
  5:while (! (== lower middle)) 5:{
    6:let upper = (- (- len lower) 1i)
    7:app __x2__ = (ToString upper)
    7:let upperP = [! __x2__]
    8:app __x3__ = (ToString lower)
    8:let lowerP = [! __x3__]
    9:app __x4__ = (Get O lowerP)
    9:let lowerValue = [! __x4__]
    10:app __x5__ = (Get O upperP)
    10:let upperValue = [! __x5__]
    11:app __x6__ = (Set O lowerP upperValue true)
    11:[! __x6__]
    12:app __x7__ = (Set O upperP lowerValue true)
    12:[! __x7__]
    13:lower = (+ lower 1i)
  }
  14:return O
}
- id: "sec-%typedarray%.prototype.reverse"
- code:
          1. Let _O_ be the *this* value.
          1. Perform ? ValidateTypedArray(_O_).
          1. Let _len_ be _O_.[[ArrayLength]].
          1. Let _middle_ be floor(_len_ / 2).
          1. Let _lower_ be 0.
          1. Repeat, while _lower_ ‚â† _middle_,
            1. Let _upper_ be _len_ - _lower_ - 1.
            1. Let _upperP_ be ! ToString(ùîΩ(_upper_)).
            1. Let _lowerP_ be ! ToString(ùîΩ(_lower_)).
            1. Let _lowerValue_ be ! Get(_O_, _lowerP_).
            1. Let _upperValue_ be ! Get(_O_, _upperP_).
            1. Perform ! Set(_O_, _lowerP_, _upperValue_, *true*).
            1. Perform ! Set(_O_, _upperP_, _lowerValue_, *true*).
            1. Set _lower_ to _lower_ + 1.
          1. Return _O_.