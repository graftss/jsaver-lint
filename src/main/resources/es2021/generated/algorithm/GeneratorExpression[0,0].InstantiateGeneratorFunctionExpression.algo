def [SYNTAX] GeneratorExpression[0,0].InstantiateGeneratorFunctionExpression[R]<(BindingIdentifier, FormalParameters, GeneratorBody),true>(name?) = 0:{
  0:if (= name absent) 0:name = "" else 0:{}
  1:access __x0__ = (CONTEXT "LexicalEnvironment")
  1:let scope = __x0__
  2:let sourceText = (get-syntax GeneratorExpression)
  3:app __x1__ = (OrdinaryFunctionCreate INTRINSICS["%GeneratorFunction.prototype%"] sourceText FormalParameters GeneratorBody ~non-lexical-this~ scope)
  3:let closure = __x1__
  4:app __x2__ = (SetFunctionName closure name)
  4:__x2__
  5:app __x3__ = (OrdinaryObjectCreate INTRINSICS["%GeneratorFunction.prototype.prototype%"])
  5:let prototype = [! __x3__]
  6:app __x4__ = (DefinePropertyOrThrow closure "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  6:__x4__
  7:return closure
}
- id: "sec-runtime-semantics-instantiategeneratorfunctionexpression"
- code:
        1. If _name_ is not present, set _name_ to *""*.
        1. Let _scope_ be the LexicalEnvironment of the running execution context.
        1. Let _sourceText_ be the source text matched by |GeneratorExpression|.
        1. Let _closure_ be OrdinaryFunctionCreate(%GeneratorFunction.prototype%, _sourceText_, |FormalParameters|, |GeneratorBody|, ~non-lexical-this~, _scope_).
        1. Perform SetFunctionName(_closure_, _name_).
        1. Let _prototype_ be ! OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).
        1. Perform DefinePropertyOrThrow(_closure_, *"prototype"*, PropertyDescriptor { [[Value]]: _prototype_, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).
        1. Return _closure_.