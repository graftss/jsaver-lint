def [SYNTAX] LabelledStatement[0,0].LabelledEvaluation[R]<(LabelIdentifier, LabelledItem),true>(labelSet) = 0:{
  0:access __x0__ = (LabelIdentifier "StringValue")
  0:let label = __x0__
  1:append label -> labelSet
  2:access __x1__ = (LabelledItem "LabelledEvaluation" labelSet)
  2:let stmtResult = __x1__
  3:let __x2__ = true
  3:__x2__ = (= stmtResult.Type ~break~)
  3:if __x2__ 3:{
    3:app __x3__ = (SameValue stmtResult.Target label)
    3:__x2__ = (= __x3__ true)
  } else 3:{}
  3:if __x2__ 3:{
    4:app __x4__ = (NormalCompletion stmtResult.Value)
    4:stmtResult = __x4__
  } else 3:{}
  5:return stmtResult
}
- id: "sec-runtime-semantics-labelledevaluation"
- code:
        1. Let _label_ be the StringValue of |LabelIdentifier|.
        1. Append _label_ as an element of _labelSet_.
        1. Let _stmtResult_ be LabelledEvaluation of |LabelledItem| with argument _labelSet_.
        1. If _stmtResult_.[[Type]] is ~break~ and SameValue(_stmtResult_.[[Target]], _label_) is *true*, then
          1. Set _stmtResult_ to NormalCompletion(_stmtResult_.[[Value]]).
        1. Return Completion(_stmtResult_).