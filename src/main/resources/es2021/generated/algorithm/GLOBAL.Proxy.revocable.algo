def [BUILTIN] Proxy.revocable(target, handler) = 0:{
  0:app __x0__ = (ProxyCreate target handler)
  0:let p = [? __x0__]
  1:let steps = ALGORITHM["GLOBAL.ProxyRevocationFunctions"]
  2:let length = 0i
  3:app __x1__ = (CreateBuiltinFunction steps length "" (new ["RevocableProxy"]))
  3:let revoker = [! __x1__]
  4:revoker.RevocableProxy = p
  5:app __x2__ = (OrdinaryObjectCreate INTRINSICS["%Object.prototype%"])
  5:let result = [! __x2__]
  6:app __x3__ = (CreateDataPropertyOrThrow result "proxy" p)
  6:[! __x3__]
  7:app __x4__ = (CreateDataPropertyOrThrow result "revoke" revoker)
  7:[! __x4__]
  8:return result
}
- id: "sec-proxy.revocable"
- code:
          1. Let _p_ be ? ProxyCreate(_target_, _handler_).
          1. Let _steps_ be the algorithm steps defined in <emu-xref href="#sec-proxy-revocation-functions" title></emu-xref>.
          1. Let _length_ be the number of non-optional parameters of the function definition in <emu-xref href="#sec-proxy-revocation-functions" title></emu-xref>.
          1. Let _revoker_ be ! CreateBuiltinFunction(_steps_, _length_, *""*, « [[RevocableProxy]] »).
          1. Set _revoker_.[[RevocableProxy]] to _p_.
          1. Let _result_ be ! OrdinaryObjectCreate(%Object.prototype%).
          1. Perform ! CreateDataPropertyOrThrow(_result_, *"proxy"*, _p_).
          1. Perform ! CreateDataPropertyOrThrow(_result_, *"revoke"*, _revoker_).
          1. Return _result_.