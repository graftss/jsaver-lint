def ToInt8(argument) = 0:{
  0:app __x0__ = (ToNumber argument)
  0:let number = [? __x0__]
  1:if (|| (|| (|| (|| (= number NaN) (= number 0i)) (= number -0.0)) (= number Infinity)) (= number -Infinity)) 1:return 0i else 1:{}
  2:let int = (convert number num2int)
  3:let int8bit = (%% int (** 2i 8i))
  4:if (! (< int8bit (** 2i 7i))) 4:return (- int8bit (** 2i 8i)) else 4:return int8bit
}
- id: "sec-toint8"
- code:
        1. Let _number_ be ? ToNumber(_argument_).
        1. If _number_ is *NaN*, *+0*<sub>𝔽</sub>, *-0*<sub>𝔽</sub>, *+∞*<sub>𝔽</sub>, or *-∞*<sub>𝔽</sub>, return *+0*<sub>𝔽</sub>.
        1. Let _int_ be the mathematical value that is the same sign as _number_ and whose magnitude is floor(abs(ℝ(_number_))).
        1. Let _int8bit_ be _int_ modulo 2<sup>8</sup>.
        1. If _int8bit_ ≥ 2<sup>7</sup>, return 𝔽(_int8bit_ - 2<sup>8</sup>); otherwise return 𝔽(_int8bit_).