def [SYNTAX] ReturnStatement[1,0].Evaluation[R]<(Expression),true>() = 0:{
  0:access __x0__ = (Expression "Evaluation")
  0:let exprRef = __x0__
  1:app __x1__ = (GetValue exprRef)
  1:let exprValue = [? __x1__]
  2:app __x2__ = (GetGeneratorKind)
  2:if (= [! __x2__] ~async~) 2:{
    2:app __x3__ = (Await exprValue)
    2:exprValue = [? __x3__]
  } else 2:{}
  3:return (comp[~return~] exprValue => ~empty~)
}
- id: "sec-return-statement-runtime-semantics-evaluation"
- code:
        1. Let _exprRef_ be the result of evaluating |Expression|.
        1. Let _exprValue_ be ? GetValue(_exprRef_).
        1. If ! GetGeneratorKind() is ~async~, set _exprValue_ to ? Await(_exprValue_).
        1. Return Completion { [[Type]]: ~return~, [[Value]]: _exprValue_, [[Target]]: ~empty~ }.