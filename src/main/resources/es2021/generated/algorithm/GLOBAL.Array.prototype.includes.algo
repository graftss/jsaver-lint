def [BUILTIN] Array.prototype.includes(searchElement, fromIndex?) = 0:{
  0:app __x0__ = (ToObject this)
  0:let O = [? __x0__]
  1:app __x1__ = (LengthOfArrayLike O)
  1:let len = [? __x1__]
  2:if (= len 0i) 2:return false else 2:{}
  3:app __x2__ = (ToIntegerOrInfinity fromIndex)
  3:let n = [? __x2__]
  5:if (= n Infinity) 5:return false else 5:if (= n -Infinity) 6:n = 0i else 5:{}
  7:if (! (< n 0i)) 8:let k = n else 9:{
    10:let k = (+ len n)
    11:if (< k 0i) 11:k = 0i else 11:{}
  }
  12:while (< k len) 12:{
    13:app __x3__ = (ToString k)
    13:app __x4__ = (Get O [! __x3__])
    13:let elementK = [? __x4__]
    14:app __x5__ = (SameValueZero searchElement elementK)
    14:if (= __x5__ true) 14:return true else 14:{}
    15:k = (+ k 1i)
  }
  16:return false
}
- id: "sec-array.prototype.includes"
- code:
          1. Let _O_ be ? ToObject(*this* value).
          1. Let _len_ be ? LengthOfArrayLike(_O_).
          1. If _len_ is 0, return *false*.
          1. Let _n_ be ? ToIntegerOrInfinity(_fromIndex_).
          1. Assert: If _fromIndex_ is *undefined*, then _n_ is 0.
          1. If _n_ is +∞, return *false*.
          1. Else if _n_ is -∞, set _n_ to 0.
          1. If _n_ ≥ 0, then
            1. Let _k_ be _n_.
          1. Else,
            1. Let _k_ be _len_ + _n_.
            1. If _k_ < 0, set _k_ to 0.
          1. Repeat, while _k_ < _len_,
            1. Let _elementK_ be ? Get(_O_, ! ToString(𝔽(_k_))).
            1. If SameValueZero(_searchElement_, _elementK_) is *true*, return *true*.
            1. Set _k_ to _k_ + 1.
          1. Return *false*.