def [SYNTAX] OptionalExpression[0,0].Evaluation[R]<(MemberExpression, OptionalChain),true>() = 0:{
  0:access __x0__ = (MemberExpression "Evaluation")
  0:let baseReference = __x0__
  1:app __x1__ = (GetValue baseReference)
  1:let baseValue = [? __x1__]
  2:if (|| (= baseValue undefined) (= baseValue null)) 3:return undefined else 2:{}
  4:access __x2__ = (OptionalChain "ChainEvaluation" baseValue baseReference)
  4:return __x2__
}
- id: "sec-optional-chaining-evaluation"
- code:
          1. Let _baseReference_ be the result of evaluating |MemberExpression|.
          1. Let _baseValue_ be ? GetValue(_baseReference_).
          1. If _baseValue_ is *undefined* or *null*, then
            1. Return *undefined*.
          1. Return the result of performing ChainEvaluation of |OptionalChain| with arguments _baseValue_ and _baseReference_.