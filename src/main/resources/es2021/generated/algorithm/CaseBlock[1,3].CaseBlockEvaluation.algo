def [SYNTAX] CaseBlock[1,3].CaseBlockEvaluation[R]<(CaseClauses0, DefaultClause, CaseClauses1),true>(input) = 0:{
  0:let V = undefined
  1:if (! (= CaseClauses0 absent)) 2:let A = (get-elems CaseClauses0 CaseClause) else 1:let A = (new [])
  5:let found = false
  6:let __x0__ = A
  6:let __x1__ = 0i
  6:while (< __x1__ __x0__.length) 6:{
    6:let C = __x0__[__x1__]
    6:__x1__ = (+ __x1__ 1i)
    7:if (= found false) 7:{
      8:app __x2__ = (CaseClauseIsSelected C input)
      8:found = [? __x2__]
    } else 7:{}
    9:if (= found true) 9:{
      10:access __x3__ = (C "Evaluation")
      10:let R = __x3__
      11:if (! (= R.Value ~empty~)) 11:V = R.Value else 11:{}
      12:app __x4__ = (IsAbruptCompletion R)
      12:if __x4__ 12:{
        12:app __x5__ = (UpdateEmpty R V)
        12:return __x5__
      } else 12:{}
    } else 9:{}
  }
  13:let foundInB = false
  14:if (! (= CaseClauses1 absent)) 15:let B = (get-elems CaseClauses1 CaseClause) else 14:let B = (new [])
  18:if (= found false) 18:{
    19:let __x6__ = B
    19:let __x7__ = 0i
    19:while (< __x7__ __x6__.length) 19:{
      19:let C = __x6__[__x7__]
      19:__x7__ = (+ __x7__ 1i)
      20:if (= foundInB false) 20:{
        21:app __x8__ = (CaseClauseIsSelected C input)
        21:foundInB = [? __x8__]
      } else 20:{}
      22:if (= foundInB true) 22:{
        23:access __x9__ = (C "Evaluation")
        23:let R = __x9__
        24:if (! (= R.Value ~empty~)) 24:V = R.Value else 24:{}
        25:app __x10__ = (IsAbruptCompletion R)
        25:if __x10__ 25:{
          25:app __x11__ = (UpdateEmpty R V)
          25:return __x11__
        } else 25:{}
      } else 22:{}
    }
  } else 18:{}
  26:if (= foundInB true) 26:return V else 26:{}
  27:access __x12__ = (DefaultClause "Evaluation")
  27:let R = __x12__
  28:if (! (= R.Value ~empty~)) 28:V = R.Value else 28:{}
  29:app __x13__ = (IsAbruptCompletion R)
  29:if __x13__ 29:{
    29:app __x14__ = (UpdateEmpty R V)
    29:return __x14__
  } else 29:{}
  31:let __x15__ = B
  31:let __x16__ = 0i
  31:while (< __x16__ __x15__.length) 31:{
    31:let C = __x15__[__x16__]
    31:__x16__ = (+ __x16__ 1i)
    32:access __x17__ = (C "Evaluation")
    32:let R = __x17__
    33:if (! (= R.Value ~empty~)) 33:V = R.Value else 33:{}
    34:app __x18__ = (IsAbruptCompletion R)
    34:if __x18__ 34:{
      34:app __x19__ = (UpdateEmpty R V)
      34:return __x19__
    } else 34:{}
  }
  35:return V
}
- id: "sec-runtime-semantics-caseblockevaluation"
- code:
        1. Let _V_ be *undefined*.
        1. If the first |CaseClauses| is present, then
          1. Let _A_ be the List of |CaseClause| items in the first |CaseClauses|, in source text order.
        1. Else,
          1. Let _A_ be « ».
        1. Let _found_ be *false*.
        1. For each |CaseClause| _C_ of _A_, do
          1. If _found_ is *false*, then
            1. Set _found_ to ? CaseClauseIsSelected(_C_, _input_).
          1. If _found_ is *true*, then
            1. Let _R_ be the result of evaluating _C_.
            1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].
            1. If _R_ is an abrupt completion, return Completion(UpdateEmpty(_R_, _V_)).
        1. Let _foundInB_ be *false*.
        1. If the second |CaseClauses| is present, then
          1. Let _B_ be the List of |CaseClause| items in the second |CaseClauses|, in source text order.
        1. Else,
          1. Let _B_ be « ».
        1. If _found_ is *false*, then
          1. For each |CaseClause| _C_ of _B_, do
            1. If _foundInB_ is *false*, then
              1. Set _foundInB_ to ? CaseClauseIsSelected(_C_, _input_).
            1. If _foundInB_ is *true*, then
              1. Let _R_ be the result of evaluating |CaseClause| _C_.
              1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].
              1. If _R_ is an abrupt completion, return Completion(UpdateEmpty(_R_, _V_)).
        1. If _foundInB_ is *true*, return NormalCompletion(_V_).
        1. Let _R_ be the result of evaluating |DefaultClause|.
        1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].
        1. If _R_ is an abrupt completion, return Completion(UpdateEmpty(_R_, _V_)).
        1. NOTE: The following is another complete iteration of the second |CaseClauses|.
        1. For each |CaseClause| _C_ of _B_, do
          1. Let _R_ be the result of evaluating |CaseClause| _C_.
          1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].
          1. If _R_ is an abrupt completion, return Completion(UpdateEmpty(_R_, _V_)).
        1. Return NormalCompletion(_V_).