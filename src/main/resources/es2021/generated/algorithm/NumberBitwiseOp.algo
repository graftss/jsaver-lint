def NumberBitwiseOp(op, x, y) = 0:{
  0:assert (|| (|| (= op "&") (= op "^")) (= op "|"))
  1:app __x0__ = (ToInt32 x)
  1:let lnum = [! __x0__]
  2:app __x1__ = (ToInt32 y)
  2:let rnum = [! __x1__]
  3:let lbits = lnum
  4:let rbits = rnum
  5:??? "If id:{op} is code:{&} , let id:{result} be the result of applying the bitwise AND operation to id:{lbits} and id:{rbits} ."
  6:??? "Else if id:{op} is code:{^} , let id:{result} be the result of applying the bitwise exclusive OR ( XOR ) operation to id:{lbits} and id:{rbits} ."
  7:if (= op "|") 7:let result = (| lbits rbits) else 7:{}
  8:return result
}
- id: "sec-numberbitwiseop"
- code:
            1. Assert: _op_ is `&`, `^`, or `|`.
            1. Let _lnum_ be ! ToInt32(_x_).
            1. Let _rnum_ be ! ToInt32(_y_).
            1. Let _lbits_ be the 32-bit two's complement bit string representing ℝ(_lnum_).
            1. Let _rbits_ be the 32-bit two's complement bit string representing ℝ(_rnum_).
            1. If _op_ is `&`, let _result_ be the result of applying the bitwise AND operation to _lbits_ and _rbits_.
            1. Else if _op_ is `^`, let _result_ be the result of applying the bitwise exclusive OR (XOR) operation to _lbits_ and _rbits_.
            1. Else, _op_ is `|`. Let _result_ be the result of applying the bitwise inclusive OR operation to _lbits_ and _rbits_.
            1. Return the Number value for the integer represented by the 32-bit two's complement bit string _result_.