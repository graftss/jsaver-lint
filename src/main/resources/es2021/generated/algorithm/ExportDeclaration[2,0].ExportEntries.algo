def [SYNTAX] ExportDeclaration[2,0].ExportEntries[S]<(VariableStatement),true>() = 0:{
  0:let entries = (new [])
  1:access __x0__ = (VariableStatement "BoundNames")
  1:let names = __x0__
  2:let __x1__ = names
  2:let __x2__ = 0i
  2:while (< __x2__ __x1__.length) 2:{
    2:let name = __x1__[__x2__]
    2:__x2__ = (+ __x2__ 1i)
    3:append (new ExportEntryRecord("ModuleRequest" -> null, "ImportName" -> null, "LocalName" -> name, "ExportName" -> name)) -> entries
  }
  4:return entries
}
- id: "sec-static-semantics-exportentries"
- code:
          1. Let _entries_ be a new empty List.
          1. Let _names_ be the BoundNames of |VariableStatement|.
          1. For each element _name_ of _names_, do
            1. Append the ExportEntry Record { [[ModuleRequest]]: *null*, [[ImportName]]: *null*, [[LocalName]]: _name_, [[ExportName]]: _name_ } to _entries_.
          1. Return _entries_.