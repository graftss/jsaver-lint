def IsValidRegularExpressionLiteral(literal) = 0:{
  0:assert (is-instance-of literal RegularExpressionLiteral)
  1:??? "If FlagText of id:{literal} contains any code points other than code:{g} , code:{i} , code:{m} , code:{s} , code:{u} , or code:{y} , or if it contains the same code point more than once , return value:{false} ."
  2:access __x0__ = (literal "BodyText")
  2:let patternText = __x0__
  3:access __x1__ = (literal "FlagText")
  3:if (contains __x1__ ??? "u") 3:let u = true else 3:let u = false
  4:if (= u false) 4:{
    5:app __x2__ = (CodePointsToString patternText)
    5:let stringValue = __x2__
    6:??? "Set id:{patternText} to the sequence of code points resulting from interpreting each of the 16 - bit elements of id:{stringValue} as a Unicode BMP code point . UTF - 16 decoding is not applied to the elements ."
  } else 4:{}
  7:app __x3__ = (ParsePattern patternText u)
  7:let parseResult = __x3__
  8:if (= (typeof parseResult) "AST") 8:return true else 8:return false
}
- id: "sec-isvalidregularexpressionliteral"
- code:
          1. Assert: _literal_ is a |RegularExpressionLiteral|.
          1. If FlagText of _literal_ contains any code points other than `g`, `i`, `m`, `s`, `u`, or `y`, or if it contains the same code point more than once, return *false*.
          1. Let _patternText_ be BodyText of _literal_.
          1. If FlagText of _literal_ contains `u`, let _u_ be *true*; else let _u_ be *false*.
          1. If _u_ is *false*, then
            1. Let _stringValue_ be CodePointsToString(_patternText_).
            1. Set _patternText_ to the sequence of code points resulting from interpreting each of the 16-bit elements of _stringValue_ as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.
          1. Let _parseResult_ be ParsePattern(_patternText_, _u_).
          1. If _parseResult_ is a Parse Node, return *true*; else return *false*.