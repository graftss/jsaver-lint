def Number::leftShift(x, y) = 0:{
  0:app __x0__ = (ToInt32 x)
  0:let lnum = [! __x0__]
  1:app __x1__ = (ToUint32 y)
  1:let rnum = [! __x1__]
  2:let shiftCount = (%% rnum 32i)
  3:return (<< lnum shiftCount)
}
- id: "sec-numeric-types-number-leftShift"
- code:
            1. Let _lnum_ be ! ToInt32(_x_).
            1. Let _rnum_ be ! ToUint32(_y_).
            1. Let _shiftCount_ be ℝ(_rnum_) modulo 32.
            1. Return the result of left shifting _lnum_ by _shiftCount_ bits. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.