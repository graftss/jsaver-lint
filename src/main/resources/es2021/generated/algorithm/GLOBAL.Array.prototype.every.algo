def [BUILTIN] Array.prototype.every(callbackfn, thisArg?) = 0:{
  0:app __x0__ = (ToObject this)
  0:let O = [? __x0__]
  1:app __x1__ = (LengthOfArrayLike O)
  1:let len = [? __x1__]
  2:app __x2__ = (IsCallable callbackfn)
  2:if (= __x2__ false) 2:throw TypeError else 2:{}
  3:let k = 0i
  4:while (< k len) 4:{
    5:app __x3__ = (ToString k)
    5:let Pk = [! __x3__]
    6:app __x4__ = (HasProperty O Pk)
    6:let kPresent = [? __x4__]
    7:if (= kPresent true) 7:{
      8:app __x5__ = (Get O Pk)
      8:let kValue = [? __x5__]
      9:app __x6__ = (Call callbackfn thisArg (new [kValue, k, O]))
      9:app __x7__ = (ToBoolean [? __x6__])
      9:let testResult = [! __x7__]
      10:if (= testResult false) 10:return false else 10:{}
    } else 7:{}
    11:k = (+ k 1i)
  }
  12:return true
}
- id: "sec-array.prototype.every"
- code:
          1. Let _O_ be ? ToObject(*this* value).
          1. Let _len_ be ? LengthOfArrayLike(_O_).
          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.
          1. Let _k_ be 0.
          1. Repeat, while _k_ < _len_,
            1. Let _Pk_ be ! ToString(𝔽(_k_)).
            1. Let _kPresent_ be ? HasProperty(_O_, _Pk_).
            1. If _kPresent_ is *true*, then
              1. Let _kValue_ be ? Get(_O_, _Pk_).
              1. Let _testResult_ be ! ToBoolean(? Call(_callbackfn_, _thisArg_, « _kValue_, 𝔽(_k_), _O_ »)).
              1. If _testResult_ is *false*, return *false*.
            1. Set _k_ to _k_ + 1.
          1. Return *true*.