Algo: %TypedArray%.prototype.sort [0]
  [0] Entry[0]
  [1] (1/1) If[1] (! (= comparefn undefined))
  [2] (6/3) Call[2] app __x2__ = (IsDetachedBuffer buffer)
  [3] (7/3) If[3] (= __x2__ true)
  [4] (13/5) Normal[4] return v
  [5] (15/6) If[5] (&& (= x NaN) (= y NaN))
  [6] (19/7) Normal[6] return 1i
  [7] (21/8) If[7] (= y NaN)
  [8] (28/10) Normal[8] return 1i
  [9] (30/11) If[9] (&& (= x -0.0) (= y 0i))
  [10] (3/2) Call[10] app __x0__ = (Call comparefn undefined (new [x, y]))
  [11] (8/3) Normal[11] throw TypeError
  [12] (10/4) If[12] (= v NaN)
  [13] (31/11) Normal[13] return -1i
  [14] (33/12) If[14] (&& (= x 0i) (= y -0.0))
  [15] (11/4) Normal[15] return 0i
  [16] (18/7) If[16] (= x NaN)
  [17] (4/2) Call[17] app __x1__ = (ToNumber [? __x0__])
  [18] (24/9) If[18] (< x y)
  [19] (25/9) Normal[19] return -1i
  [20] (27/10) If[20] (< y x)
  [21] (16/6) Normal[21] return 0i
  [22] (5/2) Normal[22] let v = [? __x1__]
  [23] (22/8) Normal[23] return -1i
  [24] (34/12) Normal[24] return 1i
  [25] (36/13) Normal[25] return 0i
  [26] Exit[26]
Algo: AbstractEqualityComparison [1]
  [27] Entry[27]
  [28] (38/0) If[28] (= (typeof x) (typeof y))
  [29] (44/2) Normal[29] return true
  [30] (46/3) If[30] (&& (= x undefined) (= y null))
  [31] (52/5) Call[31] app __x2__ = (AbstractEqualityComparison x [! __x1__])
  [32] (53/5) Normal[32] return __x2__
  [33] (58/6) Call[33] app __x4__ = (AbstractEqualityComparison [! __x3__] y)
  [34] (59/6) Normal[34] return __x4__
  [35] (40/1) Call[35] app __x0__ = (StrictEqualityComparison x y)
  [36] (43/2) If[36] (&& (= x null) (= y undefined))
  [37] (47/3) Normal[37] return true
  [38] (49/5) If[38] (&& (= (typeof x) Number) (= (typeof y) String))
  [39] (51/5) Call[39] app __x1__ = (ToNumber y)
  [40] (41/1) Normal[40] return __x0__
  [41] (55/6) If[41] (&& (= (typeof x) String) (= (typeof y) Number))
  [42] (57/6) Call[42] app __x3__ = (ToNumber x)
  [43] (61/7) If[43] (&& (= (typeof x) BigInt) (= (typeof y) String))
  [44] (100/16) If[44] (|| (&& (= (typeof x) BigInt) (= (typeof y) Number)) (&& (= (typeof x) Number) (= (typeof y) BigInt)))
  [45] (102/17) If[45] (|| (|| (|| (= x NaN) (= x Infinity)) (= x -Infinity)) (|| (|| (= y NaN) (= y Infinity)) (= y -Infinity)))
  [46] (109/19) Normal[46] return false
  [47] (73/11) Call[47] app __x7__ = (AbstractEqualityComparison y x)
  [48] (74/11) Normal[48] return __x7__
  [49] (92/14) Normal[49] return __x13__
  [50] (94/15) If[50] (&& (= (typeof x) Object) (|| (|| (|| (= (typeof y) String) (= (typeof y) Number)) (= (typeof y) BigInt)) (= (typeof y) Symbol)))
  [51] (76/12) If[51] (= (typeof x) Boolean)
  [52] (66/9) Normal[52] return false
  [53] (68/10) Call[53] app __x6__ = (AbstractEqualityComparison x n)
  [54] (106/18) Normal[54] return true
  [55] (80/12) Normal[55] return __x9__
  [56] (82/13) If[56] (= (typeof y) Boolean)
  [57] (69/10) Normal[57] return __x6__
  [58] (86/13) Normal[58] return __x11__
  [59] (88/14) If[59] (&& (|| (|| (|| (= (typeof x) String) (= (typeof x) Number)) (= (typeof x) BigInt)) (= (typeof x) Symbol)) (= (typeof y) Object))
  [60] (79/12) Call[60] app __x9__ = (AbstractEqualityComparison [! __x8__] y)
  [61] (96/15) Call[61] app __x14__ = (ToPrimitive x)
  [62] (98/15) Normal[62] return __x15__
  [63] (105/18) If[63] (== x y)
  [64] (107/18) Normal[64] return false
  [65] (63/8) Call[65] app __x5__ = (StringToBigInt y)
  [66] (64/8) Normal[66] let n = [! __x5__]
  [67] (85/13) Call[67] app __x11__ = (AbstractEqualityComparison x [! __x10__])
  [68] (90/14) Call[68] app __x12__ = (ToPrimitive y)
  [69] (71/11) If[69] (&& (= (typeof x) String) (= (typeof y) BigInt))
  [70] (103/17) Normal[70] return false
  [71] (78/12) Call[71] app __x8__ = (ToNumber x)
  [72] (97/15) Call[72] app __x15__ = (AbstractEqualityComparison [? __x14__] y)
  [73] (91/14) Call[73] app __x13__ = (AbstractEqualityComparison x [? __x12__])
  [74] Exit[74]
  [75] (65/9) If[75] (= n NaN)
  [76] (84/13) Call[76] app __x10__ = (ToNumber y)
Algo: AbstractRelationalComparison [2]
  [77] Entry[77]
  [78] (111)If[78] (= LeftFirst absent)
  [79] (118/1) Normal[79] let px = [? __x0__]
  [80] (119/2) Call[80] app __x1__ = (ToPrimitive y ~number~)
  [81] (124/6) Call[81] app __x3__ = (ToPrimitive x ~number~)
  [82] (125/6) Normal[82] let px = [? __x3__]
  [83] (113)Normal[83] LeftFirst = true
  [84] (115/0) If[84] (= LeftFirst true)
  [85] (120/2) Normal[85] let py = [? __x1__]
  [86] (122/5) Call[86] app __x2__ = (ToPrimitive y ~number~)
  [87] (123/5) Normal[87] let py = [? __x2__]
  [88] (117/1) Call[88] app __x0__ = (ToPrimitive x ~number~)
  [89] (166/25) Normal[89] let ny = [? __x11__]
  [90] (167/26) If[90] (= (typeof nx) (typeof ny))
  [91] (141/13) Normal[91] return false
  [92] Exit[92]
  [93] (160/22) Call[93] app __x9__ = (PRIMITIVE[BigInt].lessThan nx py)
  [94] (161/22) Normal[94] return __x9__
  [95] (143/15) If[95] (&& (= (typeof px) BigInt) (= (typeof py) String))
  [96] (145/16) Call[96] app __x6__ = (StringToBigInt py)
  [97] (153/19) If[97] (&& (= (typeof px) String) (= (typeof py) BigInt))
  [98] (180/30) Normal[98] return false
  [99] (182/31) If[99] (< nx ny)
  [100] (129/8) If[100] (= __x4__ true)
  [101] (130/8) Normal[101] return false
  [102] (132/9) Call[102] app __x5__ = (IsStringPrefix px py)
  [103] (137/11) Normal[103] ??? "Let id:{m} be the integer that is the numeric value of the code unit at index id:{k} within id:{px} ."
  [104] (138/12) Normal[104] ??? "Let id:{n} be the integer that is the numeric value of the code unit at index id:{k} within id:{py} ."
  [105] (172/27) Normal[105] assert (|| (&& (= (typeof nx) BigInt) (= (typeof ny) Number)) (&& (= (typeof nx) Number) (= (typeof ny) BigInt)))
  [106] (173/28) If[106] (|| (= nx NaN) (= ny NaN))
  [107] (148/17) Normal[107] return undefined
  [108] (150/18) Call[108] app __x7__ = (PRIMITIVE[BigInt].lessThan px ny)
  [109] (139/13) If[109] (< m n)
  [110] (155/20) Call[110] app __x8__ = (StringToBigInt px)
  [111] (156/20) Normal[111] let nx = [! __x8__]
  [112] (147/17) If[112] (= ny NaN)
  [113] (163/24) Call[113] app __x10__ = (ToNumeric px)
  [114] (183/31) Normal[114] return true
  [115] (184/31) Normal[115] return false
  [116] (128/8) Call[116] app __x4__ = (IsStringPrefix py px)
  [117] (165/25) Call[117] app __x11__ = (ToNumeric py)
  [118] (170/26) Normal[118] return __x12__
  [119] (133/9) If[119] (= __x5__ true)
  [120] (134/9) Normal[120] return true
  [121] (136/10) Normal[121] ??? "Let id:{k} be the smallest non - negative integer such that the code unit at index id:{k} within id:{px} is different from the code unit at index id:{k} within id:{py} . ( There must be such a id:{k} , for neither String is a prefix of the other . )"
  [122] (157/21) If[122] (= nx NaN)
  [123] (140/13) Normal[123] return true
  [124] (169/26) Call[124] app __x12__ = (PRIMITIVE[(typeof nx)].lessThan nx ny)
  [125] (146/16) Normal[125] let ny = [! __x6__]
  [126] (126/7) If[126] (&& (= (typeof px) String) (= (typeof py) String))
  [127] (176/29) If[127] (|| (= nx -Infinity) (= ny Infinity))
  [128] (177/29) Normal[128] return true
  [129] (179/30) If[129] (|| (= nx Infinity) (= ny -Infinity))
  [130] (164/24) Normal[130] let nx = [? __x10__]
  [131] (158/21) Normal[131] return undefined
  [132] (174/28) Normal[132] return undefined
  [133] (151/18) Normal[133] return __x7__
Algo: AddEntriesFromIterable [3]
  [134] Entry[134]
  [135] (186/0) Call[135] app __x0__ = (IsCallable adder)
  [136] (191/2) Normal[136] let iteratorRecord = [? __x1__]
  [137] (192/3) Loop[137] true
  [138] (197/5) Normal[138] return target
  [139] (199/6) Call[139] app __x3__ = (IteratorValue next)
  [140] (203/8) Call[140] app __x4__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSICS["%TypeError.prototype%"], "ErrorData" -> undefined)))
  [141] (204/8) Normal[141] let error = __x4__
  [142] (187/0) If[142] (= __x0__ false)
  [143] (194/4) Call[143] app __x2__ = (IteratorStep iteratorRecord)
  [144] Exit[144]
  [145] (196/5) If[145] (= next false)
  [146] (201/7) If[146] (! (= (typeof nextItem) Object))
  [147] (208/10) Call[147] app __x6__ = (Get nextItem "0")
  [148] (188/0) Normal[148] throw TypeError
  [149] (190/2) Call[149] app __x1__ = (GetIterator iterable)
  [150] (200/6) Normal[150] let nextItem = [? __x3__]
  [151] (195/4) Normal[151] let next = [? __x2__]
  [152] (209/10) Normal[152] let k = __x6__
  [153] (205/9) Call[153] app __x5__ = (IteratorClose iteratorRecord error)
  [154] (216/12) Call[154] app __x9__ = (Get nextItem "1")
  [155] (217/12) Normal[155] let v = __x9__
  [156] (218/13) Call[156] app __x10__ = (IsAbruptCompletion v)
  [157] (210/11) Call[157] app __x7__ = (IsAbruptCompletion k)
  [158] (211/11) If[158] __x7__
  [159] (222/13) Normal[159] return [? __x11__]
  [160] (224/14) Call[160] app __x12__ = (Call adder target (new [k.Value, v.Value]))
  [161] (221/13) Call[161] app __x11__ = (IteratorClose iteratorRecord v)
  [162] (213/11) Call[162] app __x8__ = (IteratorClose iteratorRecord k)
  [163] (227/15) If[163] __x13__
  [164] (229/15) Call[164] app __x14__ = (IteratorClose iteratorRecord status)
  [165] LoopCont[165]
  [166] (206/9) Normal[166] return [? __x5__]
  [167] (226/15) Call[167] app __x13__ = (IsAbruptCompletion status)
  [168] (230/15) Normal[168] return [? __x14__]
  [169] (214/11) Normal[169] return [? __x8__]
  [170] (219/13) If[170] __x10__
  [171] (225/14) Normal[171] let status = __x12__
Algo: AddRestrictedFunctionProperties [4]
  [172] Entry[172]
  [173] (233/1) Normal[173] let thrower = realm.Intrinsics["%ThrowTypeError%"]
  [174] (237/3) Normal[174] return [! __x1__]
  [175] Exit[175]
  [176] (234/2) Call[176] app __x0__ = (DefinePropertyOrThrow F "caller" (new PropertyDescriptor("Get" -> thrower, "Set" -> thrower, "Enumerable" -> false, "Configurable" -> true)))
  [177] (235/2) Normal[177] [! __x0__]
  [178] (236/3) Call[178] app __x1__ = (DefinePropertyOrThrow F "arguments" (new PropertyDescriptor("Get" -> thrower, "Set" -> thrower, "Enumerable" -> false, "Configurable" -> true)))
Algo: AddToKeptObjects [5]
  [179] Entry[179]
  [180] (239/0) Normal[180] let agentRecord = AGENT
  [181] (240/1) Normal[181] append object -> agentRecord.KeptAlive
  [182] Exit[182]
Algo: AddWaiter [6]
  [183] Entry[183]
  [184] (241/2) Normal[184] append W -> WL
  [185] Exit[185]
Algo: AdditiveExpression[1,0].AssignmentTargetType [7]
  [186] Entry[186]
  [187] (242/0) Normal[187] return ~invalid~
  [188] Exit[188]
Algo: AdditiveExpression[1,0].Evaluation [8]
  [189] Entry[189]
  [190] (244/0) Call[190] app __x0__ = (EvaluateStringOrNumericBinaryExpression AdditiveExpression "+" MultiplicativeExpression)
  [191] (245/0) Normal[191] return [? __x0__]
  [192] Exit[192]
Algo: AdditiveExpression[1,0].HasCallInTailPosition [9]
  [193] Entry[193]
  [194] (246/0) Normal[194] return false
  [195] Exit[195]
Algo: AdditiveExpression[1,0].IsFunctionDefinition [10]
  [196] Entry[196]
  [197] (247/0) Normal[197] return false
  [198] Exit[198]
Algo: AdditiveExpression[2,0].AssignmentTargetType [11]
  [199] Entry[199]
  [200] (248/0) Normal[200] return ~invalid~
  [201] Exit[201]
Algo: AdditiveExpression[2,0].Evaluation [12]
  [202] Entry[202]
  [203] (250/0) Call[203] app __x0__ = (EvaluateStringOrNumericBinaryExpression AdditiveExpression "-" MultiplicativeExpression)
  [204] (251/0) Normal[204] return [? __x0__]
  [205] Exit[205]
Algo: AdditiveExpression[2,0].HasCallInTailPosition [13]
  [206] Entry[206]
  [207] (252/0) Normal[207] return false
  [208] Exit[208]
Algo: AdditiveExpression[2,0].IsFunctionDefinition [14]
  [209] Entry[209]
  [210] (253/0) Normal[210] return false
  [211] Exit[211]
Algo: AdvanceStringIndex [15]
  [212] Entry[212]
  [213] (255/0) Normal[213] assert (! (< (- (** 2i 53i) 1i) index))
  [214] (260/3) If[214] (! (< (+ index 1i) length))
  [215] (261/3) Normal[215] return (+ index 1i)
  [216] (263/4) Call[216] app __x0__ = (CodePointAt S index)
  [217] (256/1) If[217] (= unicode false)
  [218] (265/5) Normal[218] return (+ index cp.CodeUnitCount)
  [219] Exit[219]
  [220] (257/1) Normal[220] return (+ index 1i)
  [221] (259/2) Normal[221] let length = S.length
  [222] (264/4) Normal[222] let cp = [! __x0__]
Algo: AgentCanSuspend [16]
  [223] Entry[223]
  [224] (267/0) Normal[224] let AR = AGENT
  [225] (268/1) Normal[225] return AR.CanBlock
  [226] Exit[226]
Algo: AgentSignifier [17]
  [227] Entry[227]
  [228] (270/0) Normal[228] let AR = AGENT
  [229] (271/1) Normal[229] return AR.Signifier
  [230] Exit[230]
Algo: AllocateArrayBuffer [18]
  [231] Entry[231]
  [232] (273/0) Call[232] app __x0__ = (OrdinaryCreateFromConstructor constructor "%ArrayBuffer.prototype%" (new ["ArrayBufferData", "ArrayBufferByteLength", "ArrayBufferDetachKey"]))
  [233] (277/2) Normal[233] obj.ArrayBufferData = block
  [234] (278/3) Normal[234] obj.ArrayBufferByteLength = byteLength
  [235] (274/0) Normal[235] let obj = [? __x0__]
  [236] (279/4) Normal[236] return obj
  [237] (275/1) Call[237] app __x1__ = (CreateByteDataBlock byteLength)
  [238] Exit[238]
  [239] (276/1) Normal[239] let block = [? __x1__]
Algo: AllocateSharedArrayBuffer [19]
  [240] Entry[240]
  [241] (281/0) Call[241] app __x0__ = (OrdinaryCreateFromConstructor constructor "%SharedArrayBuffer.prototype%" (new ["ArrayBufferData", "ArrayBufferByteLength"]))
  [242] (285/2) Normal[242] obj.ArrayBufferData = block
  [243] (286/3) Normal[243] obj.ArrayBufferByteLength = byteLength
  [244] (282/0) Normal[244] let obj = [? __x0__]
  [245] (287/4) Normal[245] return obj
  [246] (283/1) Call[246] app __x1__ = (CreateSharedByteDataBlock byteLength)
  [247] Exit[247]
  [248] (284/1) Normal[248] let block = [? __x1__]
Algo: AllocateTypedArray [20]
  [249] Entry[249]
  [250] (289/0) Call[250] app __x0__ = (GetPrototypeFromConstructor newTarget defaultProto)
  [251] (293/2) Normal[251] assert (= obj.ViewedArrayBuffer undefined)
  [252] (294/3) Normal[252] obj.TypedArrayName = constructorName
  [253] (298/6) If[253] (= length absent)
  [254] (300/7) Normal[254] obj.ByteLength = 0i
  [255] (304/11) Call[255] app __x2__ = (AllocateTypedArrayBuffer obj length)
  [256] (305/11) Normal[256] [? __x2__]
  [257] (290/0) Normal[257] let proto = [? __x0__]
  [258] (295/4) If[258] (|| (= constructorName "BigInt64Array") (= constructorName "BigUint64Array"))
  [259] (297/4) Normal[259] obj.ContentType = ~Number~
  [260] (302/9) Normal[260] obj.ArrayLength = 0i
  [261] (306/12) Normal[261] return obj
  [262] (291/1) Call[262] app __x1__ = (IntegerIndexedObjectCreate proto)
  [263] (301/8) Normal[263] obj.ByteOffset = 0i
  [264] (296/4) Normal[264] obj.ContentType = ~BigInt~
  [265] (292/1) Normal[265] let obj = [! __x1__]
  [266] Exit[266]
Algo: AllocateTypedArrayBuffer [21]
  [267] Entry[267]
  [268] (308/1) Normal[268] assert (= O.ViewedArrayBuffer undefined)
  [269] (312/5) Call[269] app __x0__ = (AllocateArrayBuffer INTRINSICS["%ArrayBuffer%"] byteLength)
  [270] (313/5) Normal[270] let data = [? __x0__]
  [271] (317/9) Normal[271] O.ArrayLength = length
  [272] (318/10) Normal[272] return O
  [273] (309/2) Normal[273] let constructorName = O.TypedArrayName
  [274] (314/6) Normal[274] O.ViewedArrayBuffer = data
  [275] (316/8) Normal[275] O.ByteOffset = 0i
  [276] (310/3) Normal[276] ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for id:{constructorName} ."
  [277] (315/7) Normal[277] O.ByteLength = byteLength
  [278] (311/4) Normal[278] let byteLength = (* elementSize length)
  [279] Exit[279]
Algo: Alternative[0,0].Evaluation [22]
  [280] Entry[280]
  [281] (320)Normal[281] let Alternative = this
  [282] (321/0) Normal[282] ??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures nothing and performs the following steps when called : in:{} out:{}"
  [283] Exit[283]
Algo: Alternative[1,0].Evaluation [23]
  [284] Entry[284]
  [285] (323/0) Call[285] access __x0__ = (Alternative "Evaluation" direction)
  [286] (327/2) If[286] (== direction 1i)
  [287] (328/3) Normal[287] ??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{m1} and id:{m2} and performs the following steps when called : in:{} out:{}"
  [288] (330/11) Normal[288] assert (= direction -1i)
  [289] (324/0) Normal[289] let m1 = __x0__
  [290] Exit[290]
  [291] (325/1) Call[291] access __x1__ = (Term "Evaluation" direction)
  [292] (331/12) Normal[292] ??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{m1} and id:{m2} and performs the following steps when called : in:{} out:{}"
  [293] (326/1) Normal[293] let m2 = __x1__
Algo: ApplyStringOrNumericBinaryOperator [24]
  [294] Entry[294]
  [295] (333/1) If[295] (= opText "+")
  [296] (338/3) Normal[296] let rprim = [? __x1__]
  [297] (339/4) If[297] (|| (= (typeof lprim) String) (= (typeof rprim) String))
  [298] (344/6) Normal[298] let rstr = [? __x3__]
  [299] (345/7) Normal[299] return (+ lstr rstr)
  [300] (350/11) Call[300] app __x4__ = (ToNumeric lval)
  [301] (351/11) Normal[301] let lnum = [? __x4__]
  [302] (335/2) Call[302] app __x0__ = (ToPrimitive lval)
  [303] (341/5) Call[303] app __x2__ = (ToString lprim)
  [304] (347/8) Normal[304] lval = lprim
  [305] (343/6) Call[305] app __x3__ = (ToString rprim)
  [306] (336/2) Normal[306] let lprim = [? __x0__]
  [307] (348/9) Normal[307] rval = rprim
  [308] (342/5) Normal[308] let lstr = [? __x2__]
  [309] (337/3) Call[309] app __x1__ = (ToPrimitive rval)
  [310] (379/15) If[310] (= opText "^")
  [311] (380/25) Normal[311] let operation = m.bitwiseXOR
  [312] (381/15) If[312] (= opText "|")
  [313] (361/15) If[313] (= opText "*")
  [314] (362/16) Normal[314] let operation = m.multiply
  [315] (363/15) If[315] (= opText "/")
  [316] (374/22) Normal[316] let operation = m.signedRightShift
  [317] (384/35) Call[317] app __x6__ = (operation lnum rnum)
  [318] (357/14) Normal[318] let T = (typeof lnum)
  [319] (358/15) Normal[319] let m = PRIMITIVE[T]
  [320] (383/15) Normal[320] return 0i
  [321] (366/18) Normal[321] let operation = m.remainder
  [322] (359/15) If[322] (= opText "**")
  [323] (370/20) Normal[323] let operation = m.subtract
  [324] (365/15) If[324] (= opText "%")
  [325] (367/15) If[325] (= opText "+")
  [326] (375/15) If[326] (= opText ">>>")
  [327] (376/23) Normal[327] let operation = m.unsignedRightShift
  [328] (377/15) If[328] (= opText "&")
  [329] (378/24) Normal[329] let operation = m.bitwiseAND
  [330] (382/26) Normal[330] let operation = m.bitwiseOR
  [331] (353/12) Normal[331] let rnum = [? __x5__]
  [332] (354/13) If[332] (! (= (typeof lnum) (typeof rnum)))
  [333] (369/15) If[333] (= opText "-")
  [334] (371/15) If[334] (= opText "<<")
  [335] (372/21) Normal[335] let operation = m.leftShift
  [336] (373/15) If[336] (= opText ">>")
  [337] (360/15) Normal[337] let operation = m.exponentiate
  [338] (364/17) Normal[338] let operation = m.divide
  [339] (385/35) Normal[339] return [? __x6__]
  [340] Exit[340]
  [341] (355/13) Normal[341] throw TypeError
  [342] (352/12) Call[342] app __x5__ = (ToNumeric rval)
  [343] (368/19) Normal[343] let operation = m.add
Algo: ArgumentList[0,0].ArgumentListEvaluation [25]
  [344] Entry[344]
  [345] (387)Normal[345] let ArgumentList = this
  [346] (391/1) Normal[346] let arg = [? __x1__]
  [347] (392/2) Normal[347] return (new [arg])
  [348] (388/0) Call[348] access __x0__ = (AssignmentExpression "Evaluation")
  [349] Exit[349]
  [350] (389/0) Normal[350] let ref = __x0__
  [351] (390/1) Call[351] app __x1__ = (GetValue ref)
Algo: ArgumentList[1,0].ArgumentListEvaluation [26]
  [352] Entry[352]
  [353] (394)Normal[353] let ArgumentList = this
  [354] (398/2) Call[354] app __x1__ = (GetValue spreadRef)
  [355] (399/2) Normal[355] let spreadObj = [? __x1__]
  [356] (404/5) Call[356] app __x3__ = (IteratorStep iteratorRecord)
  [357] (405/5) Normal[357] let next = [? __x3__]
  [358] (409/7) Call[358] app __x4__ = (IteratorValue next)
  [359] (410/7) Normal[359] let nextArg = [? __x4__]
  [360] (395/0) Normal[360] let list = (new [])
  [361] (400/3) Call[361] app __x2__ = (GetIterator spreadObj)
  [362] (402/4) Loop[362] true
  [363] Exit[363]
  [364] (407/6) Normal[364] return list
  [365] (396/1) Call[365] access __x0__ = (AssignmentExpression "Evaluation")
  [366] LoopCont[366]
  [367] (406/6) If[367] (= next false)
  [368] (401/3) Normal[368] let iteratorRecord = [? __x2__]
  [369] (397/1) Normal[369] let spreadRef = __x0__
  [370] (411/8) Normal[370] append nextArg -> list
Algo: ArgumentList[2,0].ArgumentListEvaluation [27]
  [371] Entry[371]
  [372] (413/0) Call[372] access __x0__ = (ArgumentList "ArgumentListEvaluation")
  [373] (417/2) Call[373] app __x2__ = (GetValue ref)
  [374] (418/2) Normal[374] let arg = [? __x2__]
  [375] (414/0) Normal[375] let precedingArgs = [? __x0__]
  [376] (419/3) Normal[376] append arg -> precedingArgs
  [377] (415/1) Call[377] access __x1__ = (AssignmentExpression "Evaluation")
  [378] (420/4) Normal[378] return precedingArgs
  [379] (416/1) Normal[379] let ref = __x1__
  [380] Exit[380]
Algo: ArgumentList[3,0].ArgumentListEvaluation [28]
  [381] Entry[381]
  [382] (422/0) Call[382] access __x0__ = (ArgumentList "ArgumentListEvaluation")
  [383] (426/2) Call[383] app __x2__ = (GetValue spreadRef)
  [384] (427/2) Call[384] app __x3__ = (GetIterator [? __x2__])
  [385] (432/4) Normal[385] let next = [? __x4__]
  [386] (433/5) If[386] (= next false)
  [387] (437/6) Normal[387] let nextArg = [? __x5__]
  [388] (438/7) Normal[388] append nextArg -> precedingArgs
  [389] (423/0) Normal[389] let precedingArgs = [? __x0__]
  [390] (428/2) Normal[390] let iteratorRecord = [? __x3__]
  [391] (431/4) Call[391] app __x4__ = (IteratorStep iteratorRecord)
  [392] (436/6) Call[392] app __x5__ = (IteratorValue next)
  [393] (424/1) Call[393] access __x1__ = (AssignmentExpression "Evaluation")
  [394] (434/5) Normal[394] return precedingArgs
  [395] (429/3) Loop[395] true
  [396] (425/1) Normal[396] let spreadRef = __x1__
  [397] LoopCont[397]
  [398] Exit[398]
Algo: ArgumentsExoticObject.DefineOwnProperty [29]
  [399] Entry[399]
  [400] (440/0) Normal[400] let map = args.ParameterMap
  [401] (444/3) Normal[401] let __x1__ = true
  [402] (445/3) Normal[402] __x1__ = (= isMapped true)
  [403] (451/3) If[403] __x1__
  [404] (452/4) If[404] (&& (= Desc.Value absent) (= Desc.Writable false))
  [405] (459/7) Call[405] app __x4__ = (OrdinaryDefineOwnProperty args P newArgDesc)
  [406] (456/6) Normal[406] newArgDesc.Value = __x3__
  [407] (441/1) Call[407] app __x0__ = (HasOwnProperty map P)
  [408] (446/3) If[408] __x1__
  [409] (449/3) Normal[409] __x1__ = (= __x2__ true)
  [410] (455/6) Call[410] app __x3__ = (Get map P)
  [411] (442/1) Normal[411] let isMapped = __x0__
  [412] (461/8) If[412] (= allowed false)
  [413] (462/8) Normal[413] return false
  [414] (464/9) If[414] (= isMapped true)
  [415] (454/5) Normal[415] newArgDesc = (copy-obj Desc)
  [416] (448/3) Call[416] app __x2__ = (IsDataDescriptor Desc)
  [417] (443/2) Normal[417] let newArgDesc = Desc
  [418] (460/7) Normal[418] let allowed = [? __x4__]
  [419] (472/13) If[419] (! (= Desc.Value absent))
  [420] (474/14) Call[420] app __x7__ = (Set map P Desc.Value false)
  [421] (477/16) If[421] (= Desc.Writable false)
  [422] (475/14) Normal[422] let setStatus = __x7__
  [423] (466/10) Call[423] app __x5__ = (IsAccessorDescriptor Desc)
  [424] (467/10) If[424] (= __x5__ true)
  [425] (480/17) Normal[425] __x8__
  [426] (483/18) Normal[426] return true
  [427] (479/17) Call[427] app __x8__ = (map.Delete map P)
  [428] (469/11) Call[428] app __x6__ = (map.Delete map P)
  [429] (470/11) Normal[429] __x6__
  [430] Exit[430]
Algo: ArgumentsExoticObject.Delete [30]
  [431] Entry[431]
  [432] (485/0) Normal[432] let map = args.ParameterMap
  [433] (489/2) Normal[433] let result = [? __x1__]
  [434] (490/3) If[434] (&& (= result true) (= isMapped true))
  [435] (486/1) Call[435] app __x0__ = (HasOwnProperty map P)
  [436] (492/4) Call[436] app __x2__ = (map.Delete map P)
  [437] (495/5) Normal[437] return result
  [438] Exit[438]
  [439] (487/1) Normal[439] let isMapped = [! __x0__]
  [440] (493/4) Normal[440] __x2__
  [441] (488/2) Call[441] app __x1__ = (OrdinaryDelete args P)
Algo: ArgumentsExoticObject.Get [31]
  [442] Entry[442]
  [443] (497/0) Normal[443] let map = args.ParameterMap
  [444] (502/3) Call[444] app __x1__ = (OrdinaryGet args P Receiver)
  [445] (503/3) Normal[445] return [? __x1__]
  [446] (498/1) Call[446] app __x0__ = (HasOwnProperty map P)
  [447] Exit[447]
  [448] (499/1) Normal[448] let isMapped = [! __x0__]
  [449] (505/6) Call[449] app __x2__ = (Get map P)
  [450] (506/6) Normal[450] return __x2__
  [451] (500/2) If[451] (= isMapped false)
Algo: ArgumentsExoticObject.GetOwnProperty [32]
  [452] Entry[452]
  [453] (508/0) Call[453] app __x0__ = (OrdinaryGetOwnProperty args P)
  [454] (513/2) Normal[454] let map = args.ParameterMap
  [455] (514/3) Call[455] app __x1__ = (HasOwnProperty map P)
  [456] (519/5) Normal[456] desc.Value = __x2__
  [457] (521/6) Normal[457] return desc
  [458] (509/0) Normal[458] let desc = __x0__
  [459] (515/3) Normal[459] let isMapped = [! __x1__]
  [460] (518/5) Call[460] app __x2__ = (Get map P)
  [461] (510/1) If[461] (= desc undefined)
  [462] (516/4) If[462] (= isMapped true)
  [463] (511/1) Normal[463] return desc
  [464] Exit[464]
Algo: ArgumentsExoticObject.Set [33]
  [465] Entry[465]
  [466] (523/0) Call[466] app __x0__ = (SameValue args Receiver)
  [467] (528/4) Call[467] app __x1__ = (HasOwnProperty map P)
  [468] (529/4) Normal[468] let isMapped = [! __x1__]
  [469] (535/8) Call[469] app __x3__ = (OrdinarySet args P V Receiver)
  [470] (536/8) Normal[470] return [? __x3__]
  [471] (524/0) If[471] (= __x0__ false)
  [472] (530/5) If[472] (= isMapped true)
  [473] (533/6) Normal[473] let setStatus = __x2__
  [474] (525/1) Normal[474] let isMapped = false
  [475] (527/3) Normal[475] let map = args.ParameterMap
  [476] (532/6) Call[476] app __x2__ = (Set map P V false)
  [477] Exit[477]
Algo: Arguments[0,0].ArgumentListEvaluation [34]
  [478] Entry[478]
  [479] (538)Normal[479] let Arguments = this
  [480] (539/0) Normal[480] return (new [])
  [481] Exit[481]
Algo: ArrayAssignmentPattern[0,0].DestructuringAssignmentEvaluation [35]
  [482] Entry[482]
  [483] (541)Normal[483] let ArrayAssignmentPattern = this
  [484] (545/1) Call[484] app __x2__ = (IteratorClose iteratorRecord __x1__)
  [485] (546/1) Normal[485] return [? __x2__]
  [486] (542/0) Call[486] app __x0__ = (GetIterator value)
  [487] Exit[487]
  [488] (543/0) Normal[488] let iteratorRecord = [? __x0__]
  [489] (544/1) Call[489] app __x1__ = (NormalCompletion ~empty~)
Algo: ArrayAssignmentPattern[0,1].DestructuringAssignmentEvaluation [36]
  [490] Entry[490]
  [491] (548)Normal[491] let ArrayAssignmentPattern = this
  [492] (553/2) Call[492] access __x1__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [493] (554/2) Normal[493] let status = __x1__
  [494] (559/5) Normal[494] return status
  [495] (562/6) Call[495] access __x3__ = (AssignmentRestElement "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [496] (566/7) Call[496] app __x4__ = (IteratorClose iteratorRecord result)
  [497] (567/7) Normal[497] return [? __x4__]
  [498] (549/0) Call[498] app __x0__ = (GetIterator value)
  [499] (555/3) Call[499] app __x2__ = (IsAbruptCompletion status)
  [500] (558/4) Normal[500] assert (= iteratorRecord.Done true)
  [501] (564/7) If[501] (= iteratorRecord.Done false)
  [502] (569/8) Normal[502] return result
  [503] (550/0) Normal[503] let iteratorRecord = [? __x0__]
  [504] (563/6) Normal[504] let result = __x3__
  [505] (556/3) If[505] __x2__
  [506] (551/1) If[506] (! (= Elision absent))
  [507] Exit[507]
Algo: ArrayAssignmentPattern[0,2].DestructuringAssignmentEvaluation [37]
  [508] Entry[508]
  [509] (571)Normal[509] let ArrayAssignmentPattern = this
  [510] (575/1) Normal[510] let result = __x1__
  [511] (576/2) If[511] (= iteratorRecord.Done false)
  [512] (572/0) Call[512] app __x0__ = (GetIterator value)
  [513] (578/2) Call[513] app __x2__ = (IteratorClose iteratorRecord result)
  [514] (581/3) Normal[514] return result
  [515] Exit[515]
  [516] (573/0) Normal[516] let iteratorRecord = [? __x0__]
  [517] (579/2) Normal[517] return [? __x2__]
  [518] (574/1) Call[518] access __x1__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
Algo: ArrayAssignmentPattern[0,3].DestructuringAssignmentEvaluation [38]
  [519] Entry[519]
  [520] (583)Normal[520] let ArrayAssignmentPattern = this
  [521] (588/2) Call[521] access __x1__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [522] (589/2) Normal[522] let status = __x1__
  [523] (594/5) Normal[523] return status
  [524] (597/6) Call[524] access __x3__ = (AssignmentRestElement "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [525] (601/7) Call[525] app __x4__ = (IteratorClose iteratorRecord result)
  [526] (602/7) Normal[526] return [? __x4__]
  [527] (584/0) Call[527] app __x0__ = (GetIterator value)
  [528] (590/3) Call[528] app __x2__ = (IsAbruptCompletion status)
  [529] (593/4) Normal[529] assert (= iteratorRecord.Done true)
  [530] (599/7) If[530] (= iteratorRecord.Done false)
  [531] (604/8) Normal[531] return result
  [532] (585/0) Normal[532] let iteratorRecord = [? __x0__]
  [533] (598/6) Normal[533] let result = __x3__
  [534] (591/3) If[534] __x2__
  [535] (586/1) If[535] (! (= Elision absent))
  [536] Exit[536]
Algo: ArrayAssignmentPattern[1,0].DestructuringAssignmentEvaluation [39]
  [537] Entry[537]
  [538] (606)Normal[538] let ArrayAssignmentPattern = this
  [539] (610/1) Normal[539] let result = __x1__
  [540] (611/2) If[540] (= iteratorRecord.Done false)
  [541] (607/0) Call[541] app __x0__ = (GetIterator value)
  [542] (613/2) Call[542] app __x2__ = (IteratorClose iteratorRecord result)
  [543] (616/3) Normal[543] return result
  [544] Exit[544]
  [545] (608/0) Normal[545] let iteratorRecord = [? __x0__]
  [546] (614/2) Normal[546] return [? __x2__]
  [547] (609/1) Call[547] access __x1__ = (AssignmentElementList "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
Algo: ArrayAssignmentPattern[2,0].DestructuringAssignmentEvaluation [40]
  [548] Entry[548]
  [549] (618)Normal[549] let ArrayAssignmentPattern = this
  [550] (622/1) Normal[550] let status = __x1__
  [551] (623/2) Call[551] app __x2__ = (IsAbruptCompletion status)
  [552] (629/3) Normal[552] return [? __x3__]
  [553] (631/4) Normal[553] return status
  [554] (636/6) Normal[554] status = __x4__
  [555] (637/7) Call[555] app __x5__ = (IsAbruptCompletion status)
  [556] (646/11) Call[556] access __x6__ = (AssignmentRestElement "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [557] (647/11) Normal[557] status = __x6__
  [558] (619/0) Call[558] app __x0__ = (GetIterator value)
  [559] (624/2) If[559] __x2__
  [560] (649/12) If[560] (= iteratorRecord.Done false)
  [561] (628/3) Call[561] app __x3__ = (IteratorClose iteratorRecord status)
  [562] (635/6) Call[562] access __x4__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [563] (620/0) Normal[563] let iteratorRecord = [? __x0__]
  [564] (640/8) Normal[564] assert (= iteratorRecord.Done true)
  [565] (641/9) Normal[565] return status
  [566] (651/12) Call[566] app __x7__ = (IteratorClose iteratorRecord status)
  [567] (654/13) Normal[567] return status
  [568] (633/5) If[568] (! (= Elision absent))
  [569] (644/10) If[569] (! (= AssignmentRestElement absent))
  [570] (626/3) If[570] (= iteratorRecord.Done false)
  [571] (621/1) Call[571] access __x1__ = (AssignmentElementList "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [572] (638/7) If[572] __x5__
  [573] (652/12) Normal[573] return [? __x7__]
  [574] Exit[574]
Algo: ArrayAssignmentPattern[2,1].DestructuringAssignmentEvaluation [41]
  [575] Entry[575]
  [576] (656)Normal[576] let ArrayAssignmentPattern = this
  [577] (660/1) Normal[577] let status = __x1__
  [578] (661/2) Call[578] app __x2__ = (IsAbruptCompletion status)
  [579] (667/3) Normal[579] return [? __x3__]
  [580] (669/4) Normal[580] return status
  [581] (674/6) Normal[581] status = __x4__
  [582] (675/7) Call[582] app __x5__ = (IsAbruptCompletion status)
  [583] (684/11) Call[583] access __x6__ = (AssignmentRestElement "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [584] (685/11) Normal[584] status = __x6__
  [585] (657/0) Call[585] app __x0__ = (GetIterator value)
  [586] (662/2) If[586] __x2__
  [587] (687/12) If[587] (= iteratorRecord.Done false)
  [588] (666/3) Call[588] app __x3__ = (IteratorClose iteratorRecord status)
  [589] (673/6) Call[589] access __x4__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [590] (658/0) Normal[590] let iteratorRecord = [? __x0__]
  [591] (678/8) Normal[591] assert (= iteratorRecord.Done true)
  [592] (679/9) Normal[592] return status
  [593] (689/12) Call[593] app __x7__ = (IteratorClose iteratorRecord status)
  [594] (692/13) Normal[594] return status
  [595] (671/5) If[595] (! (= Elision absent))
  [596] (682/10) If[596] (! (= AssignmentRestElement absent))
  [597] (664/3) If[597] (= iteratorRecord.Done false)
  [598] (659/1) Call[598] access __x1__ = (AssignmentElementList "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [599] (676/7) If[599] __x5__
  [600] (690/12) Normal[600] return [? __x7__]
  [601] Exit[601]
Algo: ArrayAssignmentPattern[2,2].DestructuringAssignmentEvaluation [42]
  [602] Entry[602]
  [603] (694)Normal[603] let ArrayAssignmentPattern = this
  [604] (698/1) Normal[604] let status = __x1__
  [605] (699/2) Call[605] app __x2__ = (IsAbruptCompletion status)
  [606] (705/3) Normal[606] return [? __x3__]
  [607] (707/4) Normal[607] return status
  [608] (712/6) Normal[608] status = __x4__
  [609] (713/7) Call[609] app __x5__ = (IsAbruptCompletion status)
  [610] (722/11) Call[610] access __x6__ = (AssignmentRestElement "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [611] (723/11) Normal[611] status = __x6__
  [612] (695/0) Call[612] app __x0__ = (GetIterator value)
  [613] (700/2) If[613] __x2__
  [614] (725/12) If[614] (= iteratorRecord.Done false)
  [615] (704/3) Call[615] app __x3__ = (IteratorClose iteratorRecord status)
  [616] (711/6) Call[616] access __x4__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [617] (696/0) Normal[617] let iteratorRecord = [? __x0__]
  [618] (716/8) Normal[618] assert (= iteratorRecord.Done true)
  [619] (717/9) Normal[619] return status
  [620] (727/12) Call[620] app __x7__ = (IteratorClose iteratorRecord status)
  [621] (730/13) Normal[621] return status
  [622] (709/5) If[622] (! (= Elision absent))
  [623] (720/10) If[623] (! (= AssignmentRestElement absent))
  [624] (702/3) If[624] (= iteratorRecord.Done false)
  [625] (697/1) Call[625] access __x1__ = (AssignmentElementList "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [626] (714/7) If[626] __x5__
  [627] (728/12) Normal[627] return [? __x7__]
  [628] Exit[628]
Algo: ArrayAssignmentPattern[2,3].DestructuringAssignmentEvaluation [43]
  [629] Entry[629]
  [630] (732)Normal[630] let ArrayAssignmentPattern = this
  [631] (736/1) Normal[631] let status = __x1__
  [632] (737/2) Call[632] app __x2__ = (IsAbruptCompletion status)
  [633] (743/3) Normal[633] return [? __x3__]
  [634] (745/4) Normal[634] return status
  [635] (750/6) Normal[635] status = __x4__
  [636] (751/7) Call[636] app __x5__ = (IsAbruptCompletion status)
  [637] (760/11) Call[637] access __x6__ = (AssignmentRestElement "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [638] (761/11) Normal[638] status = __x6__
  [639] (733/0) Call[639] app __x0__ = (GetIterator value)
  [640] (738/2) If[640] __x2__
  [641] (763/12) If[641] (= iteratorRecord.Done false)
  [642] (742/3) Call[642] app __x3__ = (IteratorClose iteratorRecord status)
  [643] (749/6) Call[643] access __x4__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [644] (734/0) Normal[644] let iteratorRecord = [? __x0__]
  [645] (754/8) Normal[645] assert (= iteratorRecord.Done true)
  [646] (755/9) Normal[646] return status
  [647] (765/12) Call[647] app __x7__ = (IteratorClose iteratorRecord status)
  [648] (768/13) Normal[648] return status
  [649] (747/5) If[649] (! (= Elision absent))
  [650] (758/10) If[650] (! (= AssignmentRestElement absent))
  [651] (740/3) If[651] (= iteratorRecord.Done false)
  [652] (735/1) Call[652] access __x1__ = (AssignmentElementList "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [653] (752/7) If[653] __x5__
  [654] (766/12) Normal[654] return [? __x7__]
  [655] Exit[655]
Algo: ArrayBindingPattern[0,0].BoundNames [44]
  [656] Entry[656]
  [657] (770)Normal[657] let ArrayBindingPattern = this
  [658] (771/0) Normal[658] return (new [])
  [659] Exit[659]
Algo: ArrayBindingPattern[0,0].ContainsExpression [45]
  [660] Entry[660]
  [661] (773)Normal[661] let ArrayBindingPattern = this
  [662] (774/0) Normal[662] return false
  [663] Exit[663]
Algo: ArrayBindingPattern[0,0].IteratorBindingInitialization [46]
  [664] Entry[664]
  [665] (776)Normal[665] let ArrayBindingPattern = this
  [666] (777/0) Normal[666] return ~empty~
  [667] Exit[667]
Algo: ArrayBindingPattern[0,1].BoundNames [47]
  [668] Entry[668]
  [669] (779)Normal[669] let ArrayBindingPattern = this
  [670] (780/0) Call[670] access __x0__ = (BindingRestElement "BoundNames")
  [671] (781/0) Normal[671] return __x0__
  [672] Exit[672]
Algo: ArrayBindingPattern[0,1].ContainsExpression [48]
  [673] Entry[673]
  [674] (783)Normal[674] let ArrayBindingPattern = this
  [675] (784/0) Call[675] access __x0__ = (BindingRestElement "ContainsExpression")
  [676] (785/0) Normal[676] return __x0__
  [677] Exit[677]
Algo: ArrayBindingPattern[0,1].IteratorBindingInitialization [49]
  [678] Entry[678]
  [679] (787)Normal[679] let ArrayBindingPattern = this
  [680] (793/2) Call[680] access __x1__ = (BindingRestElement "IteratorBindingInitialization" iteratorRecord environment)
  [681] (794/2) Normal[681] return __x1__
  [682] (788/0) If[682] (! (= Elision absent))
  [683] Exit[683]
  [684] (790/1) Call[684] access __x0__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [685] (791/1) Normal[685] [? __x0__]
Algo: ArrayBindingPattern[0,2].BoundNames [50]
  [686] Entry[686]
  [687] (796)Normal[687] let ArrayBindingPattern = this
  [688] (797/0) Normal[688] return (new [])
  [689] Exit[689]
Algo: ArrayBindingPattern[0,2].ContainsExpression [51]
  [690] Entry[690]
  [691] (799)Normal[691] let ArrayBindingPattern = this
  [692] (800/0) Normal[692] return false
  [693] Exit[693]
Algo: ArrayBindingPattern[0,2].IteratorBindingInitialization [52]
  [694] Entry[694]
  [695] (802)Normal[695] let ArrayBindingPattern = this
  [696] (803/0) Call[696] access __x0__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [697] (804/0) Normal[697] return __x0__
  [698] Exit[698]
Algo: ArrayBindingPattern[0,3].BoundNames [53]
  [699] Entry[699]
  [700] (806)Normal[700] let ArrayBindingPattern = this
  [701] (807/0) Call[701] access __x0__ = (BindingRestElement "BoundNames")
  [702] (808/0) Normal[702] return __x0__
  [703] Exit[703]
Algo: ArrayBindingPattern[0,3].ContainsExpression [54]
  [704] Entry[704]
  [705] (810)Normal[705] let ArrayBindingPattern = this
  [706] (811/0) Call[706] access __x0__ = (BindingRestElement "ContainsExpression")
  [707] (812/0) Normal[707] return __x0__
  [708] Exit[708]
Algo: ArrayBindingPattern[0,3].IteratorBindingInitialization [55]
  [709] Entry[709]
  [710] (814)Normal[710] let ArrayBindingPattern = this
  [711] (820/2) Call[711] access __x1__ = (BindingRestElement "IteratorBindingInitialization" iteratorRecord environment)
  [712] (821/2) Normal[712] return __x1__
  [713] (815/0) If[713] (! (= Elision absent))
  [714] Exit[714]
  [715] (817/1) Call[715] access __x0__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [716] (818/1) Normal[716] [? __x0__]
Algo: ArrayBindingPattern[2,0].BoundNames [56]
  [717] Entry[717]
  [718] (823)Normal[718] let ArrayBindingPattern = this
  [719] (824/0) Call[719] access __x0__ = (BindingElementList "BoundNames")
  [720] (825/0) Normal[720] return __x0__
  [721] Exit[721]
Algo: ArrayBindingPattern[2,0].ContainsExpression [57]
  [722] Entry[722]
  [723] (827)Normal[723] let ArrayBindingPattern = this
  [724] (828/0) Call[724] access __x0__ = (BindingElementList "ContainsExpression")
  [725] (829/0) Normal[725] return __x0__
  [726] Exit[726]
Algo: ArrayBindingPattern[2,1].BoundNames [58]
  [727] Entry[727]
  [728] (831)Normal[728] let ArrayBindingPattern = this
  [729] (835/1) Normal[729] let __x2__ = __x1__
  [730] (836/1) Normal[730] let __x3__ = 0i
  [731] (841/1) Normal[731] append __x4__ -> names
  [732] LoopCont[732]
  [733] (832/0) Call[733] access __x0__ = (BindingElementList "BoundNames")
  [734] (837/1) Loop[734] (< __x3__ __x2__.length)
  [735] (840/1) Normal[735] __x3__ = (+ __x3__ 1i)
  [736] (833/0) Normal[736] let names = __x0__
  [737] (842/2) Normal[737] return names
  [738] Exit[738]
  [739] (839/1) Normal[739] let __x4__ = __x2__[__x3__]
  [740] (834/1) Call[740] access __x1__ = (BindingRestElement "BoundNames")
Algo: ArrayBindingPattern[2,1].ContainsExpression [59]
  [741] Entry[741]
  [742] (844)Normal[742] let ArrayBindingPattern = this
  [743] (848/1) Normal[743] return true
  [744] (850/2) Call[744] access __x1__ = (BindingRestElement "ContainsExpression")
  [745] (845/0) Call[745] access __x0__ = (BindingElementList "ContainsExpression")
  [746] (851/2) Normal[746] return __x1__
  [747] (846/0) Normal[747] let has = __x0__
  [748] Exit[748]
  [749] (847/1) If[749] (= has true)
Algo: ArrayBindingPattern[2,1].IteratorBindingInitialization [60]
  [750] Entry[750]
  [751] (853)Normal[751] let ArrayBindingPattern = this
  [752] (858/2) Call[752] access __x1__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [753] (859/2) Normal[753] [? __x1__]
  [754] (854/0) Call[754] access __x0__ = (BindingElementList "IteratorBindingInitialization" iteratorRecord environment)
  [755] (861/3) Call[755] access __x2__ = (BindingRestElement "IteratorBindingInitialization" iteratorRecord environment)
  [756] (855/0) Normal[756] [? __x0__]
  [757] (862/3) Normal[757] return __x2__
  [758] (856/1) If[758] (! (= Elision absent))
  [759] Exit[759]
Algo: ArrayBindingPattern[2,2].BoundNames [61]
  [760] Entry[760]
  [761] (864)Normal[761] let ArrayBindingPattern = this
  [762] (865/0) Call[762] access __x0__ = (BindingElementList "BoundNames")
  [763] (866/0) Normal[763] return __x0__
  [764] Exit[764]
Algo: ArrayBindingPattern[2,2].ContainsExpression [62]
  [765] Entry[765]
  [766] (868)Normal[766] let ArrayBindingPattern = this
  [767] (869/0) Call[767] access __x0__ = (BindingElementList "ContainsExpression")
  [768] (870/0) Normal[768] return __x0__
  [769] Exit[769]
Algo: ArrayBindingPattern[2,2].IteratorBindingInitialization [63]
  [770] Entry[770]
  [771] (872)Normal[771] let ArrayBindingPattern = this
  [772] (876/1) Normal[772] return __x1__
  [773] Exit[773]
  [774] (873/0) Call[774] access __x0__ = (BindingElementList "IteratorBindingInitialization" iteratorRecord environment)
  [775] (874/0) Normal[775] [? __x0__]
  [776] (875/1) Call[776] access __x1__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
Algo: ArrayBindingPattern[2,3].BoundNames [64]
  [777] Entry[777]
  [778] (878)Normal[778] let ArrayBindingPattern = this
  [779] (882/1) Normal[779] let __x2__ = __x1__
  [780] (883/1) Normal[780] let __x3__ = 0i
  [781] (888/1) Normal[781] append __x4__ -> names
  [782] LoopCont[782]
  [783] (879/0) Call[783] access __x0__ = (BindingElementList "BoundNames")
  [784] (884/1) Loop[784] (< __x3__ __x2__.length)
  [785] (887/1) Normal[785] __x3__ = (+ __x3__ 1i)
  [786] (880/0) Normal[786] let names = __x0__
  [787] (889/2) Normal[787] return names
  [788] Exit[788]
  [789] (886/1) Normal[789] let __x4__ = __x2__[__x3__]
  [790] (881/1) Call[790] access __x1__ = (BindingRestElement "BoundNames")
Algo: ArrayBindingPattern[2,3].ContainsExpression [65]
  [791] Entry[791]
  [792] (891)Normal[792] let ArrayBindingPattern = this
  [793] (895/1) Normal[793] return true
  [794] (897/2) Call[794] access __x1__ = (BindingRestElement "ContainsExpression")
  [795] (892/0) Call[795] access __x0__ = (BindingElementList "ContainsExpression")
  [796] (898/2) Normal[796] return __x1__
  [797] (893/0) Normal[797] let has = __x0__
  [798] Exit[798]
  [799] (894/1) If[799] (= has true)
Algo: ArrayBindingPattern[2,3].IteratorBindingInitialization [66]
  [800] Entry[800]
  [801] (900)Normal[801] let ArrayBindingPattern = this
  [802] (905/2) Call[802] access __x1__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [803] (906/2) Normal[803] [? __x1__]
  [804] (901/0) Call[804] access __x0__ = (BindingElementList "IteratorBindingInitialization" iteratorRecord environment)
  [805] (908/3) Call[805] access __x2__ = (BindingRestElement "IteratorBindingInitialization" iteratorRecord environment)
  [806] (902/0) Normal[806] [? __x0__]
  [807] (909/3) Normal[807] return __x2__
  [808] (903/1) If[808] (! (= Elision absent))
  [809] Exit[809]
Algo: ArrayCreate [67]
  [810] Entry[810]
  [811] (911/0) If[811] (< (- (** 2i 32i) 1i) length)
  [812] (917/2) Call[812] app __x0__ = (MakeBasicObject (new ["Prototype", "Extensible"]))
  [813] (918/2) Normal[813] let A = [! __x0__]
  [814] (922/5) Normal[814] [! __x1__]
  [815] (923/6) Normal[815] return A
  [816] (912/0) Normal[816] throw RangeError
  [817] (914/1) If[817] (= proto absent)
  [818] (919/3) Normal[818] A.Prototype = proto
  [819] (921/5) Call[819] app __x1__ = (OrdinaryDefineOwnProperty A "length" (new PropertyDescriptor("Value" -> length, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [820] (920/4) Normal[820] A.DefineOwnProperty = ALGORITHM["ArrayExoticObject.DefineOwnProperty"]
  [821] (915/1) Normal[821] proto = INTRINSICS["%Array.prototype%"]
  [822] Exit[822]
Algo: ArrayExoticObject.DefineOwnProperty [68]
  [823] Entry[823]
  [824] (925/0) Call[824] app __x0__ = (IsPropertyKey P)
  [825] (930/2) Normal[825] return [? __x1__]
  [826] (960/18) Call[826] app __x8__ = (OrdinaryDefineOwnProperty A P Desc)
  [827] (937/5) Call[827] app __x4__ = (IsDataDescriptor oldLenDesc)
  [828] (938/5) Normal[828] assert (= [! __x4__] true)
  [829] (941/9) Call[829] app __x5__ = (ToUint32 P)
  [830] (942/9) Normal[830] let index = [! __x5__]
  [831] (926/0) Normal[831] assert (= __x0__ true)
  [832] (932/3) Call[832] app __x2__ = (IsArrayIndex P)
  [833] (933/3) If[833] __x2__
  [834] (936/4) Normal[834] let oldLenDesc = [! __x3__]
  [835] (940/7) Normal[835] let oldLen = oldLenDesc.Value
  [836] (927/1) If[836] (= P "length")
  [837] (944/10) Normal[837] return false
  [838] (946/11) Call[838] app __x6__ = (OrdinaryDefineOwnProperty A P Desc)
  [839] (939/6) Normal[839] assert (= oldLenDesc.Configurable false)
  [840] (935/4) Call[840] app __x3__ = (OrdinaryGetOwnProperty A "length")
  [841] (929/2) Call[841] app __x1__ = (ArraySetLength A Desc)
  [842] (947/11) Normal[842] let succeeded = [! __x6__]
  [843] (943/10) If[843] (&& (! (< index oldLen)) (= oldLenDesc.Writable false))
  [844] (948/12) If[844] (= succeeded false)
  [845] (954/15) Call[845] app __x7__ = (OrdinaryDefineOwnProperty A "length" oldLenDesc)
  [846] (955/15) Normal[846] let succeeded = __x7__
  [847] (956/16) Normal[847] assert (= succeeded true)
  [848] (949/12) Normal[848] return false
  [849] (951/13) If[849] (! (< index oldLen))
  [850] (961/18) Normal[850] return __x8__
  [851] Exit[851]
  [852] (953/14) Normal[852] oldLenDesc.Value = (+ index 1i)
  [853] (958/17) Normal[853] return true
Algo: ArrayLiteral[0,0].Evaluation [69]
  [854] Entry[854]
  [855] (963)Normal[855] let ArrayLiteral = this
  [856] (968/2) Call[856] access __x1__ = (Elision "ArrayAccumulation" array 0i)
  [857] (969/2) Normal[857] let len = __x1__
  [858] (964/0) Call[858] app __x0__ = (ArrayCreate 0i)
  [859] (970/3) Normal[859] [? len]
  [860] (965/0) Normal[860] let array = [! __x0__]
  [861] (972/4) Normal[861] return array
  [862] (966/1) If[862] (! (= Elision absent))
  [863] Exit[863]
Algo: ArrayLiteral[0,1].Evaluation [70]
  [864] Entry[864]
  [865] (974)Normal[865] let ArrayLiteral = this
  [866] (979/2) Call[866] access __x1__ = (Elision "ArrayAccumulation" array 0i)
  [867] (980/2) Normal[867] let len = __x1__
  [868] (975/0) Call[868] app __x0__ = (ArrayCreate 0i)
  [869] (981/3) Normal[869] [? len]
  [870] (976/0) Normal[870] let array = [! __x0__]
  [871] (983/4) Normal[871] return array
  [872] (977/1) If[872] (! (= Elision absent))
  [873] Exit[873]
Algo: ArrayLiteral[1,0].Evaluation [71]
  [874] Entry[874]
  [875] (985)Normal[875] let ArrayLiteral = this
  [876] (989/1) Normal[876] let len = __x1__
  [877] (990/2) Normal[877] [? len]
  [878] (986/0) Call[878] app __x0__ = (ArrayCreate 0i)
  [879] (991/3) Normal[879] return array
  [880] (987/0) Normal[880] let array = [! __x0__]
  [881] Exit[881]
  [882] (988/1) Call[882] access __x1__ = (ElementList "ArrayAccumulation" array 0i)
Algo: ArrayLiteral[2,0].Evaluation [72]
  [883] Entry[883]
  [884] (993)Normal[884] let ArrayLiteral = this
  [885] (997/1) Normal[885] let nextIndex = __x1__
  [886] (998/2) Normal[886] [? nextIndex]
  [887] (1003/5) Normal[887] [? len]
  [888] (1005/6) Normal[888] return array
  [889] (994/0) Call[889] app __x0__ = (ArrayCreate 0i)
  [890] (999/3) If[890] (! (= Elision absent))
  [891] (1002/4) Normal[891] let len = __x2__
  [892] (995/0) Normal[892] let array = [! __x0__]
  [893] (1001/4) Call[893] access __x2__ = (Elision "ArrayAccumulation" array nextIndex)
  [894] (996/1) Call[894] access __x1__ = (ElementList "ArrayAccumulation" array 0i)
  [895] Exit[895]
Algo: ArrayLiteral[2,1].Evaluation [73]
  [896] Entry[896]
  [897] (1007)Normal[897] let ArrayLiteral = this
  [898] (1011/1) Normal[898] let nextIndex = __x1__
  [899] (1012/2) Normal[899] [? nextIndex]
  [900] (1017/5) Normal[900] [? len]
  [901] (1019/6) Normal[901] return array
  [902] (1008/0) Call[902] app __x0__ = (ArrayCreate 0i)
  [903] (1013/3) If[903] (! (= Elision absent))
  [904] (1016/4) Normal[904] let len = __x2__
  [905] (1009/0) Normal[905] let array = [! __x0__]
  [906] (1015/4) Call[906] access __x2__ = (Elision "ArrayAccumulation" array nextIndex)
  [907] (1010/1) Call[907] access __x1__ = (ElementList "ArrayAccumulation" array 0i)
  [908] Exit[908]
Algo: ArraySetLength [74]
  [909] Entry[909]
  [910] (1021/0) If[910] (= Desc.Value absent)
  [911] (1027/3) Call[911] app __x1__ = (ToUint32 Desc.Value)
  [912] (1028/3) Normal[912] let newLen = [? __x1__]
  [913] (1032/5) If[913] (= __x3__ false)
  [914] (1033/5) Normal[914] throw RangeError
  [915] (1035/6) Normal[915] newLenDesc.Value = newLen
  [916] (1023/1) Call[916] app __x0__ = (OrdinaryDefineOwnProperty A "length" Desc)
  [917] (1026/2) Normal[917] let newLenDesc = (copy-obj Desc)
  [918] (1029/4) Call[918] app __x2__ = (ToNumber Desc.Value)
  [919] (1024/1) Normal[919] return __x0__
  [920] (1030/4) Normal[920] let numberLen = [? __x2__]
  [921] (1031/5) Call[921] app __x3__ = (SameValueZero newLen numberLen)
  [922] (1072/23) If[922] (= deleteSucceeded false)
  [923] (1074/24) Call[923] app __x13__ = (ToUint32 P)
  [924] LoopCont[924]
  [925] (1050/14) If[925] (|| (= newLenDesc.Writable absent) (= newLenDesc.Writable true))
  [926] (1051/14) Normal[926] let newWritable = true
  [927] (1053/17) Normal[927] let newWritable = false
  [928] (1066/21) Normal[928] let __x10__ = (convert P str2num)
  [929] (1067/21) Call[929] app __x11__ = (IsArrayIndex P)
  [930] (1055/19) Call[930] app __x7__ = (OrdinaryDefineOwnProperty A "length" newLenDesc)
  [931] (1086/29) Call[931] app __x15__ = (OrdinaryDefineOwnProperty A "length" (new PropertyDescriptor("Writable" -> false)))
  [932] (1087/29) Normal[932] let succeeded = [! __x15__]
  [933] (1037/7) Normal[933] let oldLenDesc = [! __x4__]
  [934] (1038/8) Call[934] app __x5__ = (IsDataDescriptor oldLenDesc)
  [935] (1044/12) Call[935] app __x6__ = (OrdinaryDefineOwnProperty A "length" newLenDesc)
  [936] (1045/12) Normal[936] return __x6__
  [937] (1077/25) Normal[937] newLenDesc.Writable = false
  [938] (1079/26) Call[938] app __x14__ = (OrdinaryDefineOwnProperty A "length" newLenDesc)
  [939] (1056/19) Normal[939] let succeeded = [! __x7__]
  [940] (1057/20) If[940] (= succeeded false)
  [941] (1047/13) If[941] (= oldLenDesc.Writable false)
  [942] (1061/21) Normal[942] let __x9__ = __x8__.length
  [943] (1062/21) Loop[943] (< 0i __x9__)
  [944] (1068/21) If[944] (&& __x11__ (! (< __x10__ newLen)))
  [945] (1088/30) Normal[945] assert (= succeeded true)
  [946] (1036/7) Call[946] app __x4__ = (OrdinaryGetOwnProperty A "length")
  [947] (1071/22) Normal[947] let deleteSucceeded = [! __x12__]
  [948] (1076/25) If[948] (= newWritable false)
  [949] (1040/9) Normal[949] assert (= oldLenDesc.Configurable false)
  [950] (1041/10) Normal[950] let oldLen = oldLenDesc.Value
  [951] (1060/21) Normal[951] let __x8__ = (map-keys A.SubMap [int-sorted])
  [952] (1064/21) Normal[952] __x9__ = (- __x9__ 1i)
  [953] (1084/28) If[953] (= newWritable false)
  [954] (1048/13) Normal[954] return false
  [955] (1075/24) Normal[955] newLenDesc.Value = [! (+ __x13__ 1i)]
  [956] (1054/18) Normal[956] newLenDesc.Writable = true
  [957] (1090/31) Normal[957] return true
  [958] (1081/27) Normal[958] return false
  [959] (1070/22) Call[959] app __x12__ = (A.Delete A P)
  [960] (1065/21) Normal[960] let P = __x8__[__x9__]
  [961] (1080/26) Normal[961] [! __x14__]
  [962] (1042/11) If[962] (! (< newLen oldLen))
  [963] (1039/8) Normal[963] assert (= [! __x5__] true)
  [964] (1058/20) Normal[964] return false
  [965] Exit[965]
Algo: ArraySpeciesCreate [75]
  [966] Entry[966]
  [967] (1092/0) Call[967] app __x0__ = (IsArray originalArray)
  [968] (1097/1) Normal[968] return [? __x1__]
  [969] (1099/2) Call[969] app __x2__ = (Get originalArray "constructor")
  [970] (1104/4) Normal[970] let thisRealm = REALM
  [971] (1105/5) Call[971] app __x4__ = (GetFunctionRealm C)
  [972] (1109/7) Call[972] app __x5__ = (SameValue C realmC.Intrinsics["%Array%"])
  [973] (1110/7) If[973] (= __x5__ true)
  [974] (1093/0) Normal[974] let isArray = [? __x0__]
  [975] (1100/2) Normal[975] let C = [? __x2__]
  [976] (1102/3) If[976] (= __x3__ true)
  [977] (1115/8) If[977] (= (typeof C) Object)
  [978] (1107/6) If[978] (! (= thisRealm realmC))
  [979] (1094/1) If[979] (= isArray false)
  [980] (1117/9) Call[980] app __x6__ = (Get C SYMBOL_species)
  [981] (1123/11) If[981] (= C undefined)
  [982] (1106/5) Normal[982] let realmC = [? __x4__]
  [983] (1101/3) Call[983] app __x3__ = (IsConstructor C)
  [984] (1096/1) Call[984] app __x1__ = (ArrayCreate length)
  [985] (1118/9) Normal[985] C = [? __x6__]
  [986] (1111/7) Normal[986] C = undefined
  [987] (1119/10) If[987] (= C null)
  [988] (1126/11) Normal[988] return [? __x7__]
  [989] (1128/12) Call[989] app __x8__ = (IsConstructor C)
  [990] (1129/12) If[990] (= __x8__ false)
  [991] (1120/10) Normal[991] C = undefined
  [992] (1133/13) Normal[992] return [? __x9__]
  [993] Exit[993]
  [994] (1132/13) Call[994] app __x9__ = (Construct C (new [length]))
  [995] (1125/11) Call[995] app __x7__ = (ArrayCreate length)
  [996] (1130/12) Normal[996] throw TypeError
Algo: ArrowFunction[0,0].Contains [76]
  [997] Entry[997]
  [998] (1135)Normal[998] let ArrowFunction = this
  [999] (1140/1) If[999] (= __x0__ true)
  [1000] (1141/1) Normal[1000] return true
  [1001] (1143/2) Call[1001] access __x1__ = (ConciseBody "Contains" symbol)
  [1002] (1136/0) If[1002] (! (|| (|| (|| (|| (is-instance-of symbol NewTarget) (is-instance-of symbol SuperProperty)) (is-instance-of symbol SuperCall)) (= symbol "super")) (= symbol "this")))
  [1003] (1137/0) Normal[1003] return false
  [1004] (1139/1) Call[1004] access __x0__ = (ArrowParameters "Contains" symbol)
  [1005] (1144/2) Normal[1005] return __x1__
  [1006] Exit[1006]
Algo: ArrowFunction[0,0].EarlyErrors [77]
  [1007] Entry[1007]
  [1008] (1146)Normal[1008] let ArrowFunction = this
  [1009] (1151/1) Call[1009] access __x1__ = (ArrowParameters "Contains" "AwaitExpression")
  [1010] (1152/1) If[1010] (= __x1__ true)
  [1011] (1157/2) Normal[1011] __x2__ = (= __x3__ true)
  [1012] (1158/2) If[1012] __x2__
  [1013] (1163/2) If[1013] __x2__
  [1014] (1164/2) Normal[1014] throw SyntaxError
  [1015] (1166/3) Call[1015] access __x5__ = (ArrowParameters "BoundNames")
  [1016] (1147/0) Call[1016] access __x0__ = (ArrowParameters "Contains" "YieldExpression")
  [1017] (1153/1) Normal[1017] throw SyntaxError
  [1018] (1155/2) Normal[1018] let __x2__ = true
  [1019] (1156/2) Call[1019] access __x3__ = (ConciseBody "ConciseBodyContainsUseStrict")
  [1020] (1161/2) Normal[1020] __x2__ = (= __x4__ false)
  [1021] (1148/0) If[1021] (= __x0__ true)
  [1022] (1167/3) Call[1022] access __x6__ = (ConciseBody "LexicallyDeclaredNames")
  [1023] (1168/3) Normal[1023] let __x7__ = __x5__
  [1024] (1160/2) Call[1024] access __x4__ = (ArrowParameters "IsSimpleParameterList")
  [1025] (1149/0) Normal[1025] throw SyntaxError
  [1026] (1169/3) Normal[1026] let __x8__ = __x6__
  [1027] (1175/3) Normal[1027] __x10__ = 0i
  [1028] (1176/3) Loop[1028] (< __x10__ __x8__.length)
  [1029] (1177/3) If[1029] (= __x7__[__x9__] __x8__[__x10__])
  [1030] LoopCont[1030]
  [1031] (1170/3) Normal[1031] let __x9__ = 0i
  [1032] (1171/3) Normal[1032] let __x10__ = 0i
  [1033] (1173/3) Loop[1033] (< __x9__ __x7__.length)
  [1034] LoopCont[1034]
  [1035] (1172/3) Normal[1035] let __x11__ = false
  [1036] (1178/3) Normal[1036] __x11__ = true
  [1037] (1181/3) Normal[1037] throw SyntaxError
  [1038] Exit[1038]
  [1039] (1180/3) If[1039] __x11__
Algo: ArrowFunction[0,0].Evaluation [78]
  [1040] Entry[1040]
  [1041] (1184)Normal[1041] let ArrowFunction = this
  [1042] (1185/0) Call[1042] access __x0__ = (ArrowFunction "InstantiateArrowFunctionExpression")
  [1043] (1186/0) Normal[1043] return __x0__
  [1044] Exit[1044]
Algo: ArrowFunction[0,0].HasName [79]
  [1045] Entry[1045]
  [1046] (1188)Normal[1046] let ArrowFunction = this
  [1047] (1189/0) Normal[1047] return false
  [1048] Exit[1048]
Algo: ArrowFunction[0,0].InstantiateArrowFunctionExpression [80]
  [1049] Entry[1049]
  [1050] (1191)Normal[1050] let ArrowFunction = this
  [1051] (1196/1) Normal[1051] let scope = __x0__
  [1052] (1197/2) Normal[1052] let sourceText = (get-syntax ArrowFunction)
  [1053] (1201/4) Normal[1053] let closure = __x2__
  [1054] (1202/5) Call[1054] app __x3__ = (SetFunctionName closure name)
  [1055] (1192/0) If[1055] (= name absent)
  [1056] (1198/3) Call[1056] access __x1__ = (ArrowParameters "CoveredFormalsList")
  [1057] (1200/4) Call[1057] app __x2__ = (OrdinaryFunctionCreate INTRINSICS["%Function.prototype%"] sourceText parameters ConciseBody ~lexical-this~ scope)
  [1058] (1204/6) Normal[1058] return closure
  [1059] Exit[1059]
  [1060] (1193/0) Normal[1060] name = ""
  [1061] (1195/1) Call[1061] access __x0__ = (CONTEXT "LexicalEnvironment")
  [1062] (1203/5) Normal[1062] __x3__
  [1063] (1199/3) Normal[1063] let parameters = __x1__
Algo: ArrowFunction[0,0].NamedEvaluation [81]
  [1064] Entry[1064]
  [1065] (1206)Normal[1065] let ArrowFunction = this
  [1066] (1207/0) Call[1066] access __x0__ = (ArrowFunction "InstantiateArrowFunctionExpression" name)
  [1067] (1208/0) Normal[1067] return __x0__
  [1068] Exit[1068]
Algo: ArrowParameters[0,0].ContainsExpression [82]
  [1069] Entry[1069]
  [1070] (1210)Normal[1070] let ArrowParameters = this
  [1071] (1211/0) Normal[1071] return false
  [1072] Exit[1072]
Algo: ArrowParameters[0,0].CoveredFormalsList [83]
  [1073] Entry[1073]
  [1074] (1213)Normal[1074] let ArrowParameters = this
  [1075] (1214/0) Normal[1075] return this
  [1076] Exit[1076]
Algo: ArrowParameters[0,0].ExpectedArgumentCount [84]
  [1077] Entry[1077]
  [1078] (1216)Normal[1078] let ArrowParameters = this
  [1079] (1217/0) Normal[1079] return 1i
  [1080] Exit[1080]
Algo: ArrowParameters[0,0].IsSimpleParameterList [85]
  [1081] Entry[1081]
  [1082] (1219)Normal[1082] let ArrowParameters = this
  [1083] (1220/0) Normal[1083] return true
  [1084] Exit[1084]
Algo: ArrowParameters[0,0].IteratorBindingInitialization [86]
  [1085] Entry[1085]
  [1086] (1222)Normal[1086] let ArrowParameters = this
  [1087] (1226/2) Call[1087] app __x1__ = (IsAbruptCompletion next)
  [1088] (1227/2) If[1088] __x1__
  [1089] (1232/4) Normal[1089] iteratorRecord.Done = true
  [1090] (1241/9) If[1090] (= iteratorRecord.Done true)
  [1091] (1237/7) If[1091] __x3__
  [1092] (1238/7) Normal[1092] iteratorRecord.Done = true
  [1093] (1240/8) Normal[1093] [? v]
  [1094] (1245/10) Normal[1094] return __x4__
  [1095] Exit[1095]
  [1096] (1223/0) Normal[1096] assert (= iteratorRecord.Done false)
  [1097] (1228/2) Normal[1097] iteratorRecord.Done = true
  [1098] (1230/3) Normal[1098] [? next]
  [1099] (1231/4) If[1099] (= next false)
  [1100] (1234/6) Call[1100] app __x2__ = (IteratorValue next)
  [1101] (1236/7) Call[1101] app __x3__ = (IsAbruptCompletion v)
  [1102] (1224/1) Call[1102] app __x0__ = (IteratorStep iteratorRecord)
  [1103] (1242/9) Normal[1103] let v = undefined
  [1104] (1244/10) Call[1104] access __x4__ = (BindingIdentifier "BindingInitialization" v environment)
  [1105] (1235/6) Normal[1105] let v = __x2__
  [1106] (1225/1) Normal[1106] let next = __x0__
Algo: ArrowParameters[1,0].BoundNames [87]
  [1107] Entry[1107]
  [1108] (1247)Normal[1108] let ArrowParameters = this
  [1109] (1251/1) Normal[1109] return __x1__
  [1110] Exit[1110]
  [1111] (1248/0) Call[1111] access __x0__ = (CoverParenthesizedExpressionAndArrowParameterList "CoveredFormalsList")
  [1112] (1249/0) Normal[1112] let formals = __x0__
  [1113] (1250/1) Call[1113] access __x1__ = (formals "BoundNames")
Algo: ArrowParameters[1,0].Contains [88]
  [1114] Entry[1114]
  [1115] (1253)Normal[1115] let ArrowParameters = this
  [1116] (1257/1) Normal[1116] return __x1__
  [1117] Exit[1117]
  [1118] (1254/0) Call[1118] access __x0__ = (CoverParenthesizedExpressionAndArrowParameterList "CoveredFormalsList")
  [1119] (1255/0) Normal[1119] let formals = __x0__
  [1120] (1256/1) Call[1120] access __x1__ = (formals "Contains" symbol)
Algo: ArrowParameters[1,0].ContainsExpression [89]
  [1121] Entry[1121]
  [1122] (1259)Normal[1122] let ArrowParameters = this
  [1123] (1263/1) Normal[1123] return __x1__
  [1124] Exit[1124]
  [1125] (1260/0) Call[1125] access __x0__ = (CoverParenthesizedExpressionAndArrowParameterList "CoveredFormalsList")
  [1126] (1261/0) Normal[1126] let formals = __x0__
  [1127] (1262/1) Call[1127] access __x1__ = (formals "ContainsExpression")
Algo: ArrowParameters[1,0].EarlyErrors [90]
  [1128] Entry[1128]
  [1129] (1265)Normal[1129] let ArrowParameters = this
  [1130] (1270/0) If[1130] __x0__
  [1131] (1271/0) Normal[1131] throw SyntaxError
  [1132] (1273/1) Normal[1132] ??? "All early error rules for nt:{ArrowFormalParameters} and its derived productions also apply to CoveredFormalsList of nt:{CoverParenthesizedExpressionAndArrowParameterList} ."
  [1133] (1266/0) Normal[1133] let __x0__ = false
  [1134] (1267/0) If[1134] (= absent (parse-syntax CoverParenthesizedExpressionAndArrowParameterList "ArrowFormalParameters"))
  [1135] Exit[1135]
  [1136] (1268/0) Normal[1136] __x0__ = true
Algo: ArrowParameters[1,0].ExpectedArgumentCount [91]
  [1137] Entry[1137]
  [1138] (1275)Normal[1138] let ArrowParameters = this
  [1139] (1279/1) Normal[1139] return __x1__
  [1140] Exit[1140]
  [1141] (1276/0) Call[1141] access __x0__ = (CoverParenthesizedExpressionAndArrowParameterList "CoveredFormalsList")
  [1142] (1277/0) Normal[1142] let formals = __x0__
  [1143] (1278/1) Call[1143] access __x1__ = (formals "ExpectedArgumentCount")
Algo: ArrowParameters[1,0].IsSimpleParameterList [92]
  [1144] Entry[1144]
  [1145] (1281)Normal[1145] let ArrowParameters = this
  [1146] (1285/1) Normal[1146] return __x1__
  [1147] Exit[1147]
  [1148] (1282/0) Call[1148] access __x0__ = (CoverParenthesizedExpressionAndArrowParameterList "CoveredFormalsList")
  [1149] (1283/0) Normal[1149] let formals = __x0__
  [1150] (1284/1) Call[1150] access __x1__ = (formals "IsSimpleParameterList")
Algo: ArrowParameters[1,0].IteratorBindingInitialization [93]
  [1151] Entry[1151]
  [1152] (1287)Normal[1152] let ArrowParameters = this
  [1153] (1291/1) Normal[1153] return __x1__
  [1154] Exit[1154]
  [1155] (1288/0) Call[1155] access __x0__ = (CoverParenthesizedExpressionAndArrowParameterList "CoveredFormalsList")
  [1156] (1289/0) Normal[1156] let formals = __x0__
  [1157] (1290/1) Call[1157] access __x1__ = (formals "IteratorBindingInitialization" iteratorRecord environment)
Algo: Assertion[0,0].Evaluation [94]
  [1158] Entry[1158]
  [1159] (1293)Normal[1159] let Assertion = this
  [1160] (1294/0) Normal[1160] ??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures nothing and performs the following steps when called : in:{} out:{}"
  [1161] Exit[1161]
Algo: Assertion[1,0].Evaluation [95]
  [1162] Entry[1162]
  [1163] (1296)Normal[1163] let Assertion = this
  [1164] (1297/0) Normal[1164] ??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures nothing and performs the following steps when called : in:{} out:{}"
  [1165] Exit[1165]
Algo: Assertion[2,0].Evaluation [96]
  [1166] Entry[1166]
  [1167] (1299)Normal[1167] let Assertion = this
  [1168] (1300/0) Normal[1168] ??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures nothing and performs the following steps when called : in:{} out:{}"
  [1169] Exit[1169]
Algo: Assertion[3,0].Evaluation [97]
  [1170] Entry[1170]
  [1171] (1302)Normal[1171] let Assertion = this
  [1172] (1303/0) Normal[1172] ??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures nothing and performs the following steps when called : in:{} out:{}"
  [1173] Exit[1173]
Algo: Assertion[4,0].Evaluation [98]
  [1174] Entry[1174]
  [1175] (1305)Normal[1175] let Assertion = this
  [1176] (1306/0) Call[1176] access __x0__ = (Disjunction "Evaluation" 1i)
  [1177] (1307/0) Normal[1177] let m = __x0__
  [1178] (1308/1) Normal[1178] ??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{m} and performs the following steps when called : in:{} out:{}"
  [1179] Exit[1179]
Algo: Assertion[5,0].Evaluation [99]
  [1180] Entry[1180]
  [1181] (1310)Normal[1181] let Assertion = this
  [1182] (1311/0) Call[1182] access __x0__ = (Disjunction "Evaluation" 1i)
  [1183] (1312/0) Normal[1183] let m = __x0__
  [1184] (1313/1) Normal[1184] ??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{m} and performs the following steps when called : in:{} out:{}"
  [1185] Exit[1185]
Algo: Assertion[6,0].Evaluation [100]
  [1186] Entry[1186]
  [1187] (1315)Normal[1187] let Assertion = this
  [1188] (1316/0) Call[1188] access __x0__ = (Disjunction "Evaluation" -1i)
  [1189] (1317/0) Normal[1189] let m = __x0__
  [1190] (1318/1) Normal[1190] ??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{m} and performs the following steps when called : in:{} out:{}"
  [1191] Exit[1191]
Algo: Assertion[7,0].Evaluation [101]
  [1192] Entry[1192]
  [1193] (1320)Normal[1193] let Assertion = this
  [1194] (1321/0) Call[1194] access __x0__ = (Disjunction "Evaluation" -1i)
  [1195] (1322/0) Normal[1195] let m = __x0__
  [1196] (1323/1) Normal[1196] ??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{m} and performs the following steps when called : in:{} out:{}"
  [1197] Exit[1197]
Algo: AssignmentElementList[0,0].IteratorDestructuringAssignmentEvaluation [102]
  [1198] Entry[1198]
  [1199] (1325)Normal[1199] let AssignmentElementList = this
  [1200] (1326/0) Call[1200] access __x0__ = (AssignmentElisionElement "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [1201] (1327/0) Normal[1201] return __x0__
  [1202] Exit[1202]
Algo: AssignmentElementList[1,0].IteratorDestructuringAssignmentEvaluation [103]
  [1203] Entry[1203]
  [1204] (1329/0) Call[1204] access __x0__ = (AssignmentElementList "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [1205] (1330/0) Normal[1205] [? __x0__]
  [1206] (1331/1) Call[1206] access __x1__ = (AssignmentElisionElement "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [1207] (1332/1) Normal[1207] return __x1__
  [1208] Exit[1208]
Algo: AssignmentElement[0,0].IteratorDestructuringAssignmentEvaluation [104]
  [1209] Entry[1209]
  [1210] (1334)Normal[1210] let AssignmentElement = this
  [1211] (1339/2) Normal[1211] [? lref]
  [1212] (1341/3) If[1212] (= iteratorRecord.Done false)
  [1213] (1346/5) If[1213] __x2__
  [1214] (1347/5) Normal[1214] iteratorRecord.Done = true
  [1215] (1349/6) Normal[1215] [? next]
  [1216] (1351/7) Normal[1216] iteratorRecord.Done = true
  [1217] (1361/12) If[1217] (= iteratorRecord.Done true)
  [1218] (1335/0) If[1218] (! (|| (is-instance-of DestructuringAssignmentTarget ObjectLiteral) (is-instance-of DestructuringAssignmentTarget ArrayLiteral)))
  [1219] (1343/4) Call[1219] app __x1__ = (IteratorStep iteratorRecord)
  [1220] (1345/5) Call[1220] app __x2__ = (IsAbruptCompletion next)
  [1221] (1337/1) Call[1221] access __x0__ = (DestructuringAssignmentTarget "Evaluation")
  [1222] (1350/7) If[1222] (= next false)
  [1223] (1356/10) If[1223] __x4__
  [1224] (1357/10) Normal[1224] iteratorRecord.Done = true
  [1225] (1359/11) Normal[1225] [? value]
  [1226] (1344/4) Normal[1226] let next = __x1__
  [1227] (1338/1) Normal[1227] let lref = __x0__
  [1228] (1353/9) Call[1228] app __x3__ = (IteratorValue next)
  [1229] (1354/9) Normal[1229] let value = __x3__
  [1230] (1390/23) Call[1230] app __x12__ = (PutValue lref v)
  [1231] (1391/23) Normal[1231] return [? __x12__]
  [1232] (1366/14) Normal[1232] let __x5__ = true
  [1233] (1367/14) Call[1233] app __x6__ = (IsAnonymousFunctionDefinition Initializer)
  [1234] (1383/13) Normal[1234] let v = value
  [1235] (1384/20) If[1235] (|| (is-instance-of DestructuringAssignmentTarget ObjectLiteral) (is-instance-of DestructuringAssignmentTarget ArrayLiteral))
  [1236] (1368/14) Normal[1236] __x5__ = (= __x6__ true)
  [1237] (1372/14) Normal[1237] __x5__ = (= __x7__ true)
  [1238] (1374/14) If[1238] __x5__
  [1239] (1362/12) Normal[1239] let value = undefined
  [1240] (1364/13) If[1240] (&& (! (= Initializer absent)) (= value undefined))
  [1241] (1379/17) Call[1241] access __x9__ = (Initializer "Evaluation")
  [1242] (1380/17) Normal[1242] let defaultValue = __x9__
  [1243] (1371/14) Call[1243] access __x7__ = (DestructuringAssignmentTarget "IsIdentifierRef")
  [1244] (1386/21) Normal[1244] let nestedAssignmentPattern = (parse-syntax DestructuringAssignmentTarget "AssignmentPattern")
  [1245] (1388/22) Normal[1245] return __x11__
  [1246] (1355/10) Call[1246] app __x4__ = (IsAbruptCompletion value)
  [1247] (1377/15) Normal[1247] let v = [? __x8__]
  [1248] (1381/18) Call[1248] app __x10__ = (GetValue defaultValue)
  [1249] (1369/14) If[1249] __x5__
  [1250] (1387/22) Call[1250] access __x11__ = (nestedAssignmentPattern "DestructuringAssignmentEvaluation" v)
  [1251] (1382/18) Normal[1251] let v = [? __x10__]
  [1252] (1376/15) Call[1252] access __x8__ = (Initializer "NamedEvaluation" lref.ReferencedName)
  [1253] Exit[1253]
Algo: AssignmentElement[0,0].KeyedDestructuringAssignmentEvaluation [105]
  [1254] Entry[1254]
  [1255] (1393)Normal[1255] let AssignmentElement = this
  [1256] (1398/2) Normal[1256] [? lref]
  [1257] (1400/3) Call[1257] app __x1__ = (GetV value propertyName)
  [1258] (1405/5) Call[1258] access __x3__ = (DestructuringAssignmentTarget "IsIdentifierRef")
  [1259] (1406/5) If[1259] (&& (= __x2__ true) (= __x3__ true))
  [1260] (1423/14) Normal[1260] return [? __x8__]
  [1261] Exit[1261]
  [1262] (1411/8) Call[1262] access __x5__ = (Initializer "Evaluation")
  [1263] (1412/8) Normal[1263] let defaultValue = __x5__
  [1264] (1418/12) Normal[1264] let assignmentPattern = (parse-syntax DestructuringAssignmentTarget "AssignmentPattern")
  [1265] (1419/13) Call[1265] access __x7__ = (assignmentPattern "DestructuringAssignmentEvaluation" rhsValue)
  [1266] (1394/0) If[1266] (! (|| (is-instance-of DestructuringAssignmentTarget ObjectLiteral) (is-instance-of DestructuringAssignmentTarget ArrayLiteral)))
  [1267] (1401/3) Normal[1267] let v = [? __x1__]
  [1268] (1420/13) Normal[1268] return __x7__
  [1269] (1404/5) Call[1269] app __x2__ = (IsAnonymousFunctionDefinition Initializer)
  [1270] (1409/6) Normal[1270] let rhsValue = [? __x4__]
  [1271] (1416/11) If[1271] (|| (is-instance-of DestructuringAssignmentTarget ObjectLiteral) (is-instance-of DestructuringAssignmentTarget ArrayLiteral))
  [1272] (1396/1) Call[1272] access __x0__ = (DestructuringAssignmentTarget "Evaluation")
  [1273] (1414/9) Normal[1273] let rhsValue = [? __x6__]
  [1274] (1422/14) Call[1274] app __x8__ = (PutValue lref rhsValue)
  [1275] (1408/6) Call[1275] access __x4__ = (Initializer "NamedEvaluation" lref.ReferencedName)
  [1276] (1402/4) If[1276] (&& (! (= Initializer absent)) (= v undefined))
  [1277] (1397/1) Normal[1277] let lref = __x0__
  [1278] (1415/4) Normal[1278] let rhsValue = v
  [1279] (1413/9) Call[1279] app __x6__ = (GetValue defaultValue)
Algo: AssignmentElement[0,1].IteratorDestructuringAssignmentEvaluation [106]
  [1280] Entry[1280]
  [1281] (1425)Normal[1281] let AssignmentElement = this
  [1282] (1430/2) Normal[1282] [? lref]
  [1283] (1432/3) If[1283] (= iteratorRecord.Done false)
  [1284] (1437/5) If[1284] __x2__
  [1285] (1438/5) Normal[1285] iteratorRecord.Done = true
  [1286] (1440/6) Normal[1286] [? next]
  [1287] (1442/7) Normal[1287] iteratorRecord.Done = true
  [1288] (1452/12) If[1288] (= iteratorRecord.Done true)
  [1289] (1426/0) If[1289] (! (|| (is-instance-of DestructuringAssignmentTarget ObjectLiteral) (is-instance-of DestructuringAssignmentTarget ArrayLiteral)))
  [1290] (1434/4) Call[1290] app __x1__ = (IteratorStep iteratorRecord)
  [1291] (1436/5) Call[1291] app __x2__ = (IsAbruptCompletion next)
  [1292] (1428/1) Call[1292] access __x0__ = (DestructuringAssignmentTarget "Evaluation")
  [1293] (1441/7) If[1293] (= next false)
  [1294] (1447/10) If[1294] __x4__
  [1295] (1448/10) Normal[1295] iteratorRecord.Done = true
  [1296] (1450/11) Normal[1296] [? value]
  [1297] (1435/4) Normal[1297] let next = __x1__
  [1298] (1429/1) Normal[1298] let lref = __x0__
  [1299] (1444/9) Call[1299] app __x3__ = (IteratorValue next)
  [1300] (1445/9) Normal[1300] let value = __x3__
  [1301] (1481/23) Call[1301] app __x12__ = (PutValue lref v)
  [1302] (1482/23) Normal[1302] return [? __x12__]
  [1303] (1457/14) Normal[1303] let __x5__ = true
  [1304] (1458/14) Call[1304] app __x6__ = (IsAnonymousFunctionDefinition Initializer)
  [1305] (1474/13) Normal[1305] let v = value
  [1306] (1475/20) If[1306] (|| (is-instance-of DestructuringAssignmentTarget ObjectLiteral) (is-instance-of DestructuringAssignmentTarget ArrayLiteral))
  [1307] (1459/14) Normal[1307] __x5__ = (= __x6__ true)
  [1308] (1463/14) Normal[1308] __x5__ = (= __x7__ true)
  [1309] (1465/14) If[1309] __x5__
  [1310] (1453/12) Normal[1310] let value = undefined
  [1311] (1455/13) If[1311] (&& (! (= Initializer absent)) (= value undefined))
  [1312] (1470/17) Call[1312] access __x9__ = (Initializer "Evaluation")
  [1313] (1471/17) Normal[1313] let defaultValue = __x9__
  [1314] (1462/14) Call[1314] access __x7__ = (DestructuringAssignmentTarget "IsIdentifierRef")
  [1315] (1477/21) Normal[1315] let nestedAssignmentPattern = (parse-syntax DestructuringAssignmentTarget "AssignmentPattern")
  [1316] (1479/22) Normal[1316] return __x11__
  [1317] (1446/10) Call[1317] app __x4__ = (IsAbruptCompletion value)
  [1318] (1468/15) Normal[1318] let v = [? __x8__]
  [1319] (1472/18) Call[1319] app __x10__ = (GetValue defaultValue)
  [1320] (1460/14) If[1320] __x5__
  [1321] (1478/22) Call[1321] access __x11__ = (nestedAssignmentPattern "DestructuringAssignmentEvaluation" v)
  [1322] (1473/18) Normal[1322] let v = [? __x10__]
  [1323] (1467/15) Call[1323] access __x8__ = (Initializer "NamedEvaluation" lref.ReferencedName)
  [1324] Exit[1324]
Algo: AssignmentElement[0,1].KeyedDestructuringAssignmentEvaluation [107]
  [1325] Entry[1325]
  [1326] (1484)Normal[1326] let AssignmentElement = this
  [1327] (1489/2) Normal[1327] [? lref]
  [1328] (1491/3) Call[1328] app __x1__ = (GetV value propertyName)
  [1329] (1496/5) Call[1329] access __x3__ = (DestructuringAssignmentTarget "IsIdentifierRef")
  [1330] (1497/5) If[1330] (&& (= __x2__ true) (= __x3__ true))
  [1331] (1514/14) Normal[1331] return [? __x8__]
  [1332] Exit[1332]
  [1333] (1502/8) Call[1333] access __x5__ = (Initializer "Evaluation")
  [1334] (1503/8) Normal[1334] let defaultValue = __x5__
  [1335] (1509/12) Normal[1335] let assignmentPattern = (parse-syntax DestructuringAssignmentTarget "AssignmentPattern")
  [1336] (1510/13) Call[1336] access __x7__ = (assignmentPattern "DestructuringAssignmentEvaluation" rhsValue)
  [1337] (1485/0) If[1337] (! (|| (is-instance-of DestructuringAssignmentTarget ObjectLiteral) (is-instance-of DestructuringAssignmentTarget ArrayLiteral)))
  [1338] (1492/3) Normal[1338] let v = [? __x1__]
  [1339] (1511/13) Normal[1339] return __x7__
  [1340] (1495/5) Call[1340] app __x2__ = (IsAnonymousFunctionDefinition Initializer)
  [1341] (1500/6) Normal[1341] let rhsValue = [? __x4__]
  [1342] (1507/11) If[1342] (|| (is-instance-of DestructuringAssignmentTarget ObjectLiteral) (is-instance-of DestructuringAssignmentTarget ArrayLiteral))
  [1343] (1487/1) Call[1343] access __x0__ = (DestructuringAssignmentTarget "Evaluation")
  [1344] (1505/9) Normal[1344] let rhsValue = [? __x6__]
  [1345] (1513/14) Call[1345] app __x8__ = (PutValue lref rhsValue)
  [1346] (1499/6) Call[1346] access __x4__ = (Initializer "NamedEvaluation" lref.ReferencedName)
  [1347] (1493/4) If[1347] (&& (! (= Initializer absent)) (= v undefined))
  [1348] (1488/1) Normal[1348] let lref = __x0__
  [1349] (1506/4) Normal[1349] let rhsValue = v
  [1350] (1504/9) Call[1350] app __x6__ = (GetValue defaultValue)
Algo: AssignmentElisionElement[0,0].IteratorDestructuringAssignmentEvaluation [108]
  [1351] Entry[1351]
  [1352] (1516)Normal[1352] let AssignmentElisionElement = this
  [1353] (1517/0) Call[1353] access __x0__ = (AssignmentElement "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [1354] (1518/0) Normal[1354] return __x0__
  [1355] Exit[1355]
Algo: AssignmentElisionElement[0,1].IteratorDestructuringAssignmentEvaluation [109]
  [1356] Entry[1356]
  [1357] (1520)Normal[1357] let AssignmentElisionElement = this
  [1358] (1524/1) Normal[1358] return __x1__
  [1359] Exit[1359]
  [1360] (1521/0) Call[1360] access __x0__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [1361] (1522/0) Normal[1361] [? __x0__]
  [1362] (1523/1) Call[1362] access __x1__ = (AssignmentElement "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
Algo: AssignmentExpression[1,0].AssignmentTargetType [110]
  [1363] Entry[1363]
  [1364] (1526)Normal[1364] let AssignmentExpression = this
  [1365] (1527/0) Normal[1365] return ~invalid~
  [1366] Exit[1366]
Algo: AssignmentExpression[1,0].HasCallInTailPosition [111]
  [1367] Entry[1367]
  [1368] (1529)Normal[1368] let AssignmentExpression = this
  [1369] (1530/0) Normal[1369] return false
  [1370] Exit[1370]
Algo: AssignmentExpression[1,0].IsFunctionDefinition [112]
  [1371] Entry[1371]
  [1372] (1532)Normal[1372] let AssignmentExpression = this
  [1373] (1533/0) Normal[1373] return false
  [1374] Exit[1374]
Algo: AssignmentExpression[2,0].AssignmentTargetType [113]
  [1375] Entry[1375]
  [1376] (1535)Normal[1376] let AssignmentExpression = this
  [1377] (1536/0) Normal[1377] return ~invalid~
  [1378] Exit[1378]
Algo: AssignmentExpression[2,0].HasCallInTailPosition [114]
  [1379] Entry[1379]
  [1380] (1538)Normal[1380] let AssignmentExpression = this
  [1381] (1539/0) Normal[1381] return false
  [1382] Exit[1382]
Algo: AssignmentExpression[2,0].IsFunctionDefinition [115]
  [1383] Entry[1383]
  [1384] (1541)Normal[1384] let AssignmentExpression = this
  [1385] (1542/0) Normal[1385] return true
  [1386] Exit[1386]
Algo: AssignmentExpression[3,0].AssignmentTargetType [116]
  [1387] Entry[1387]
  [1388] (1544)Normal[1388] let AssignmentExpression = this
  [1389] (1545/0) Normal[1389] return ~invalid~
  [1390] Exit[1390]
Algo: AssignmentExpression[3,0].HasCallInTailPosition [117]
  [1391] Entry[1391]
  [1392] (1547)Normal[1392] let AssignmentExpression = this
  [1393] (1548/0) Normal[1393] return false
  [1394] Exit[1394]
Algo: AssignmentExpression[3,0].IsFunctionDefinition [118]
  [1395] Entry[1395]
  [1396] (1550)Normal[1396] let AssignmentExpression = this
  [1397] (1551/0) Normal[1397] return true
  [1398] Exit[1398]
Algo: AssignmentExpression[4,0].AssignmentTargetType [119]
  [1399] Entry[1399]
  [1400] (1552/0) Normal[1400] return ~invalid~
  [1401] Exit[1401]
Algo: AssignmentExpression[4,0].Evaluation [120]
  [1402] Entry[1402]
  [1403] (1554/0) If[1403] (! (|| (is-instance-of LeftHandSideExpression ObjectLiteral) (is-instance-of LeftHandSideExpression ArrayLiteral)))
  [1404] (1559/3) Call[1404] app __x1__ = (IsAnonymousFunctionDefinition AssignmentExpression)
  [1405] (1560/3) Call[1405] access __x2__ = (LeftHandSideExpression "IsIdentifierRef")
  [1406] (1566/6) Call[1406] access __x4__ = (AssignmentExpression "Evaluation")
  [1407] (1567/6) Normal[1407] let rref = __x4__
  [1408] (1581/14) Normal[1408] return rval
  [1409] Exit[1409]
  [1410] (1570/8) Call[1410] app __x6__ = (PutValue lref rval)
  [1411] (1571/8) Normal[1411] [? __x6__]
  [1412] (1577/12) Call[1412] app __x8__ = (GetValue rref)
  [1413] (1578/12) Normal[1413] let rval = [? __x8__]
  [1414] (1556/1) Call[1414] access __x0__ = (LeftHandSideExpression "Evaluation")
  [1415] (1574/10) Normal[1415] let assignmentPattern = (parse-syntax LeftHandSideExpression "AssignmentPattern")
  [1416] (1561/3) If[1416] (&& (= __x1__ true) (= __x2__ true))
  [1417] (1579/13) Call[1417] access __x9__ = (assignmentPattern "DestructuringAssignmentEvaluation" rval)
  [1418] (1564/4) Normal[1418] let rval = __x3__
  [1419] (1569/7) Normal[1419] let rval = [? __x5__]
  [1420] (1557/1) Normal[1420] let lref = __x0__
  [1421] (1575/11) Call[1421] access __x7__ = (AssignmentExpression "Evaluation")
  [1422] (1580/13) Normal[1422] [? __x9__]
  [1423] (1568/7) Call[1423] app __x5__ = (GetValue rref)
  [1424] (1563/4) Call[1424] access __x3__ = (AssignmentExpression "NamedEvaluation" lref.ReferencedName)
  [1425] (1558/2) Normal[1425] [? lref]
  [1426] (1576/11) Normal[1426] let rref = __x7__
  [1427] (1572/9) Normal[1427] return rval
Algo: AssignmentExpression[4,0].HasCallInTailPosition [121]
  [1428] Entry[1428]
  [1429] (1582/0) Normal[1429] return false
  [1430] Exit[1430]
Algo: AssignmentExpression[4,0].IsFunctionDefinition [122]
  [1431] Entry[1431]
  [1432] (1583/0) Normal[1432] return false
  [1433] Exit[1433]
Algo: AssignmentExpression[5,0].AssignmentTargetType [123]
  [1434] Entry[1434]
  [1435] (1584/0) Normal[1435] return ~invalid~
  [1436] Exit[1436]
Algo: AssignmentExpression[5,0].EarlyErrors [124]
  [1437] Entry[1437]
  [1438] (1586/0) Call[1438] access __x0__ = (LeftHandSideExpression "AssignmentTargetType")
  [1439] (1587/0) If[1439] (! (= __x0__ ~simple~))
  [1440] (1588/0) Normal[1440] throw SyntaxError
  [1441] Exit[1441]
Algo: AssignmentExpression[5,0].Evaluation [125]
  [1442] Entry[1442]
  [1443] (1591/0) Call[1443] access __x0__ = (LeftHandSideExpression "Evaluation")
  [1444] (1595/2) Call[1444] access __x2__ = (AssignmentExpression "Evaluation")
  [1445] (1596/2) Normal[1445] let rref = __x2__
  [1446] (1600/5) Normal[1446] let opText = (- assignmentOpText 1i)
  [1447] (1601/25) Call[1447] app __x4__ = (ApplyStringOrNumericBinaryOperator lval opText rval)
  [1448] (1604/26) Normal[1448] [? __x5__]
  [1449] (1605/27) Normal[1449] return r
  [1450] (1592/0) Normal[1450] let lref = __x0__
  [1451] (1597/3) Call[1451] app __x3__ = (GetValue rref)
  [1452] (1599/4) Normal[1452] let assignmentOpText = (get-syntax AssignmentOperator)
  [1453] (1603/26) Call[1453] app __x5__ = (PutValue lref r)
  [1454] (1593/1) Call[1454] app __x1__ = (GetValue lref)
  [1455] (1602/25) Normal[1455] let r = __x4__
  [1456] (1598/3) Normal[1456] let rval = [? __x3__]
  [1457] (1594/1) Normal[1457] let lval = [? __x1__]
  [1458] Exit[1458]
Algo: AssignmentExpression[5,0].HasCallInTailPosition [126]
  [1459] Entry[1459]
  [1460] (1606/0) Normal[1460] return false
  [1461] Exit[1461]
Algo: AssignmentExpression[5,0].IsFunctionDefinition [127]
  [1462] Entry[1462]
  [1463] (1607/0) Normal[1463] return false
  [1464] Exit[1464]
Algo: AssignmentExpression[6,0].AssignmentTargetType [128]
  [1465] Entry[1465]
  [1466] (1608/0) Normal[1466] return ~invalid~
  [1467] Exit[1467]
Algo: AssignmentExpression[6,0].EarlyErrors [129]
  [1468] Entry[1468]
  [1469] (1610/0) Call[1469] access __x0__ = (LeftHandSideExpression "AssignmentTargetType")
  [1470] (1611/0) If[1470] (! (= __x0__ ~simple~))
  [1471] (1612/0) Normal[1471] throw SyntaxError
  [1472] Exit[1472]
Algo: AssignmentExpression[6,0].Evaluation [130]
  [1473] Entry[1473]
  [1474] (1615/0) Call[1474] access __x0__ = (LeftHandSideExpression "Evaluation")
  [1475] (1619/2) Call[1475] app __x2__ = (ToBoolean lval)
  [1476] (1620/2) Normal[1476] let lbool = [! __x2__]
  [1477] (1625/4) Call[1477] app __x4__ = (IsAnonymousFunctionDefinition AssignmentExpression)
  [1478] (1626/4) Normal[1478] __x3__ = (= __x4__ true)
  [1479] (1643/10) Normal[1479] return rval
  [1480] Exit[1480]
  [1481] (1630/4) Normal[1481] __x3__ = (= __x5__ true)
  [1482] (1632/4) If[1482] __x3__
  [1483] (1639/8) Call[1483] app __x8__ = (GetValue rref)
  [1484] (1640/8) Normal[1484] let rval = [? __x8__]
  [1485] (1616/0) Normal[1485] let lref = __x0__
  [1486] (1621/3) If[1486] (= lbool false)
  [1487] (1641/9) Call[1487] app __x9__ = (PutValue lref rval)
  [1488] (1624/4) Normal[1488] let __x3__ = true
  [1489] (1629/4) Call[1489] access __x5__ = (LeftHandSideExpression "IsIdentifierRef")
  [1490] (1617/1) Call[1490] app __x1__ = (GetValue lref)
  [1491] (1635/5) Normal[1491] let rval = __x6__
  [1492] (1642/9) Normal[1492] [? __x9__]
  [1493] (1627/4) If[1493] __x3__
  [1494] (1622/3) Normal[1494] return lval
  [1495] (1618/1) Normal[1495] let lval = [? __x1__]
  [1496] (1637/7) Call[1496] access __x7__ = (AssignmentExpression "Evaluation")
  [1497] (1638/7) Normal[1497] let rref = __x7__
  [1498] (1634/5) Call[1498] access __x6__ = (AssignmentExpression "NamedEvaluation" lref.ReferencedName)
Algo: AssignmentExpression[6,0].HasCallInTailPosition [131]
  [1499] Entry[1499]
  [1500] (1644/0) Normal[1500] return false
  [1501] Exit[1501]
Algo: AssignmentExpression[6,0].IsFunctionDefinition [132]
  [1502] Entry[1502]
  [1503] (1645/0) Normal[1503] return false
  [1504] Exit[1504]
Algo: AssignmentExpression[7,0].AssignmentTargetType [133]
  [1505] Entry[1505]
  [1506] (1646/0) Normal[1506] return ~invalid~
  [1507] Exit[1507]
Algo: AssignmentExpression[7,0].EarlyErrors [134]
  [1508] Entry[1508]
  [1509] (1648/0) Call[1509] access __x0__ = (LeftHandSideExpression "AssignmentTargetType")
  [1510] (1649/0) If[1510] (! (= __x0__ ~simple~))
  [1511] (1650/0) Normal[1511] throw SyntaxError
  [1512] Exit[1512]
Algo: AssignmentExpression[7,0].Evaluation [135]
  [1513] Entry[1513]
  [1514] (1653/0) Call[1514] access __x0__ = (LeftHandSideExpression "Evaluation")
  [1515] (1657/2) Call[1515] app __x2__ = (ToBoolean lval)
  [1516] (1658/2) Normal[1516] let lbool = [! __x2__]
  [1517] (1663/4) Call[1517] app __x4__ = (IsAnonymousFunctionDefinition AssignmentExpression)
  [1518] (1664/4) Normal[1518] __x3__ = (= __x4__ true)
  [1519] (1681/10) Normal[1519] return rval
  [1520] Exit[1520]
  [1521] (1668/4) Normal[1521] __x3__ = (= __x5__ true)
  [1522] (1670/4) If[1522] __x3__
  [1523] (1677/8) Call[1523] app __x8__ = (GetValue rref)
  [1524] (1678/8) Normal[1524] let rval = [? __x8__]
  [1525] (1654/0) Normal[1525] let lref = __x0__
  [1526] (1659/3) If[1526] (= lbool true)
  [1527] (1679/9) Call[1527] app __x9__ = (PutValue lref rval)
  [1528] (1662/4) Normal[1528] let __x3__ = true
  [1529] (1667/4) Call[1529] access __x5__ = (LeftHandSideExpression "IsIdentifierRef")
  [1530] (1655/1) Call[1530] app __x1__ = (GetValue lref)
  [1531] (1673/5) Normal[1531] let rval = __x6__
  [1532] (1680/9) Normal[1532] [? __x9__]
  [1533] (1665/4) If[1533] __x3__
  [1534] (1660/3) Normal[1534] return lval
  [1535] (1656/1) Normal[1535] let lval = [? __x1__]
  [1536] (1675/7) Call[1536] access __x7__ = (AssignmentExpression "Evaluation")
  [1537] (1676/7) Normal[1537] let rref = __x7__
  [1538] (1672/5) Call[1538] access __x6__ = (AssignmentExpression "NamedEvaluation" lref.ReferencedName)
Algo: AssignmentExpression[7,0].HasCallInTailPosition [136]
  [1539] Entry[1539]
  [1540] (1682/0) Normal[1540] return false
  [1541] Exit[1541]
Algo: AssignmentExpression[7,0].IsFunctionDefinition [137]
  [1542] Entry[1542]
  [1543] (1683/0) Normal[1543] return false
  [1544] Exit[1544]
Algo: AssignmentExpression[8,0].AssignmentTargetType [138]
  [1545] Entry[1545]
  [1546] (1684/0) Normal[1546] return ~invalid~
  [1547] Exit[1547]
Algo: AssignmentExpression[8,0].EarlyErrors [139]
  [1548] Entry[1548]
  [1549] (1686/0) Call[1549] access __x0__ = (LeftHandSideExpression "AssignmentTargetType")
  [1550] (1687/0) If[1550] (! (= __x0__ ~simple~))
  [1551] (1688/0) Normal[1551] throw SyntaxError
  [1552] Exit[1552]
Algo: AssignmentExpression[8,0].Evaluation [140]
  [1553] Entry[1553]
  [1554] (1691/0) Call[1554] access __x0__ = (LeftHandSideExpression "Evaluation")
  [1555] (1695/2) If[1555] (! (|| (= lval undefined) (= lval null)))
  [1556] (1696/2) Normal[1556] return lval
  [1557] (1698/3) Normal[1557] let __x2__ = true
  [1558] (1701/3) If[1558] __x2__
  [1559] (1703/3) Call[1559] access __x4__ = (LeftHandSideExpression "IsIdentifierRef")
  [1560] (1706/3) If[1560] __x2__
  [1561] (1708/4) Call[1561] access __x5__ = (AssignmentExpression "NamedEvaluation" lref.ReferencedName)
  [1562] (1709/4) Normal[1562] let rval = __x5__
  [1563] (1715/8) Call[1563] app __x8__ = (PutValue lref rval)
  [1564] (1716/8) Normal[1564] [? __x8__]
  [1565] (1692/0) Normal[1565] let lref = __x0__
  [1566] (1717/9) Normal[1566] return rval
  [1567] (1700/3) Normal[1567] __x2__ = (= __x3__ true)
  [1568] (1711/6) Call[1568] access __x6__ = (AssignmentExpression "Evaluation")
  [1569] (1693/1) Call[1569] app __x1__ = (GetValue lref)
  [1570] (1712/6) Normal[1570] let rref = __x6__
  [1571] (1713/7) Call[1571] app __x7__ = (GetValue rref)
  [1572] Exit[1572]
  [1573] (1704/3) Normal[1573] __x2__ = (= __x4__ true)
  [1574] (1699/3) Call[1574] app __x3__ = (IsAnonymousFunctionDefinition AssignmentExpression)
  [1575] (1694/1) Normal[1575] let lval = [? __x1__]
  [1576] (1714/7) Normal[1576] let rval = [? __x7__]
Algo: AssignmentExpression[8,0].HasCallInTailPosition [141]
  [1577] Entry[1577]
  [1578] (1718/0) Normal[1578] return false
  [1579] Exit[1579]
Algo: AssignmentExpression[8,0].IsFunctionDefinition [142]
  [1580] Entry[1580]
  [1581] (1719/0) Normal[1581] return false
  [1582] Exit[1582]
Algo: AssignmentPropertyList[1,0].PropertyDestructuringAssignmentEvaluation [143]
  [1583] Entry[1583]
  [1584] (1721/0) Call[1584] access __x0__ = (AssignmentPropertyList "PropertyDestructuringAssignmentEvaluation" value)
  [1585] (1725/2) Normal[1585] let __x2__ = nextNames
  [1586] (1726/2) Normal[1586] let __x3__ = 0i
  [1587] (1731/2) Normal[1587] append __x4__ -> propertyNames
  [1588] LoopCont[1588]
  [1589] (1722/0) Normal[1589] let propertyNames = [? __x0__]
  [1590] (1727/2) Loop[1590] (< __x3__ __x2__.length)
  [1591] (1730/2) Normal[1591] __x3__ = (+ __x3__ 1i)
  [1592] (1723/1) Call[1592] access __x1__ = (AssignmentProperty "PropertyDestructuringAssignmentEvaluation" value)
  [1593] (1732/3) Normal[1593] return propertyNames
  [1594] Exit[1594]
  [1595] (1729/2) Normal[1595] let __x4__ = __x2__[__x3__]
  [1596] (1724/1) Normal[1596] let nextNames = [? __x1__]
Algo: AssignmentProperty[0,0].EarlyErrors [144]
  [1597] Entry[1597]
  [1598] (1734)Normal[1598] let AssignmentProperty = this
  [1599] (1735/0) Call[1599] access __x0__ = (IdentifierReference "AssignmentTargetType")
  [1600] (1736/0) If[1600] (! (= __x0__ ~simple~))
  [1601] (1737/0) Normal[1601] throw SyntaxError
  [1602] Exit[1602]
Algo: AssignmentProperty[0,0].PropertyDestructuringAssignmentEvaluation [145]
  [1603] Entry[1603]
  [1604] (1740)Normal[1604] let AssignmentProperty = this
  [1605] (1744/1) Normal[1605] let lref = [? __x1__]
  [1606] (1745/2) Call[1606] app __x2__ = (GetV value P)
  [1607] (1750/4) If[1607] (= __x3__ true)
  [1608] (1752/5) Call[1608] access __x4__ = (Initializer "NamedEvaluation" P)
  [1609] (1755/7) Call[1609] access __x5__ = (Initializer "Evaluation")
  [1610] (1756/7) Normal[1610] let defaultValue = __x5__
  [1611] (1757/8) Call[1611] app __x6__ = (GetValue defaultValue)
  [1612] (1741/0) Call[1612] access __x0__ = (IdentifierReference "StringValue")
  [1613] (1746/2) Normal[1613] let v = [? __x2__]
  [1614] (1749/4) Call[1614] app __x3__ = (IsAnonymousFunctionDefinition Initializer)
  [1615] (1742/0) Normal[1615] let P = __x0__
  [1616] (1760/9) Call[1616] app __x7__ = (PutValue lref v)
  [1617] (1761/9) Normal[1617] [? __x7__]
  [1618] (1753/5) Normal[1618] v = __x4__
  [1619] (1747/3) If[1619] (&& (! (= Initializer absent)) (= v undefined))
  [1620] (1743/1) Call[1620] app __x1__ = (ResolveBinding P)
  [1621] (1762/10) Normal[1621] return (new [P])
  [1622] (1758/8) Normal[1622] v = [? __x6__]
  [1623] Exit[1623]
Algo: AssignmentProperty[0,1].EarlyErrors [146]
  [1624] Entry[1624]
  [1625] (1764)Normal[1625] let AssignmentProperty = this
  [1626] (1765/0) Call[1626] access __x0__ = (IdentifierReference "AssignmentTargetType")
  [1627] (1766/0) If[1627] (! (= __x0__ ~simple~))
  [1628] (1767/0) Normal[1628] throw SyntaxError
  [1629] Exit[1629]
Algo: AssignmentProperty[0,1].PropertyDestructuringAssignmentEvaluation [147]
  [1630] Entry[1630]
  [1631] (1770)Normal[1631] let AssignmentProperty = this
  [1632] (1774/1) Normal[1632] let lref = [? __x1__]
  [1633] (1775/2) Call[1633] app __x2__ = (GetV value P)
  [1634] (1780/4) If[1634] (= __x3__ true)
  [1635] (1782/5) Call[1635] access __x4__ = (Initializer "NamedEvaluation" P)
  [1636] (1785/7) Call[1636] access __x5__ = (Initializer "Evaluation")
  [1637] (1786/7) Normal[1637] let defaultValue = __x5__
  [1638] (1787/8) Call[1638] app __x6__ = (GetValue defaultValue)
  [1639] (1771/0) Call[1639] access __x0__ = (IdentifierReference "StringValue")
  [1640] (1776/2) Normal[1640] let v = [? __x2__]
  [1641] (1779/4) Call[1641] app __x3__ = (IsAnonymousFunctionDefinition Initializer)
  [1642] (1772/0) Normal[1642] let P = __x0__
  [1643] (1790/9) Call[1643] app __x7__ = (PutValue lref v)
  [1644] (1791/9) Normal[1644] [? __x7__]
  [1645] (1783/5) Normal[1645] v = __x4__
  [1646] (1777/3) If[1646] (&& (! (= Initializer absent)) (= v undefined))
  [1647] (1773/1) Call[1647] app __x1__ = (ResolveBinding P)
  [1648] (1792/10) Normal[1648] return (new [P])
  [1649] (1788/8) Normal[1649] v = [? __x6__]
  [1650] Exit[1650]
Algo: AssignmentProperty[1,0].PropertyDestructuringAssignmentEvaluation [148]
  [1651] Entry[1651]
  [1652] (1794)Normal[1652] let AssignmentProperty = this
  [1653] (1798/2) Call[1653] access __x1__ = (AssignmentElement "KeyedDestructuringAssignmentEvaluation" value name)
  [1654] (1799/2) Normal[1654] [? __x1__]
  [1655] (1795/0) Call[1655] access __x0__ = (PropertyName "Evaluation")
  [1656] (1800/3) Normal[1656] return (new [name])
  [1657] (1796/0) Normal[1657] let name = __x0__
  [1658] Exit[1658]
  [1659] (1797/1) Normal[1659] [? name]
Algo: AssignmentRestElement[0,0].IteratorDestructuringAssignmentEvaluation [149]
  [1660] Entry[1660]
  [1661] (1802)Normal[1661] let AssignmentRestElement = this
  [1662] (1807/2) Normal[1662] [? lref]
  [1663] (1809/3) Call[1663] app __x1__ = (ArrayCreate 0i)
  [1664] (1814/6) Call[1664] app __x2__ = (IteratorStep iteratorRecord)
  [1665] (1815/6) Normal[1665] let next = __x2__
  [1666] (1818/7) Normal[1666] iteratorRecord.Done = true
  [1667] (1820/8) Normal[1667] [? next]
  [1668] (1803/0) If[1668] (! (|| (is-instance-of DestructuringAssignmentTarget ObjectLiteral) (is-instance-of DestructuringAssignmentTarget ArrayLiteral)))
  [1669] (1810/3) Normal[1669] let A = [! __x1__]
  [1670] (1812/5) Loop[1670] (= iteratorRecord.Done false)
  [1671] (1835/16) If[1671] (! (|| (is-instance-of DestructuringAssignmentTarget ObjectLiteral) (is-instance-of DestructuringAssignmentTarget ArrayLiteral)))
  [1672] (1817/7) If[1672] __x3__
  [1673] (1805/1) Call[1673] access __x0__ = (DestructuringAssignmentTarget "Evaluation")
  [1674] (1816/7) Call[1674] app __x3__ = (IsAbruptCompletion next)
  [1675] (1811/4) Normal[1675] let n = 0i
  [1676] (1806/1) Normal[1676] let lref = __x0__
  [1677] (1824/11) Call[1677] app __x4__ = (IteratorValue next)
  [1678] (1825/11) Normal[1678] let nextValue = __x4__
  [1679] (1821/9) If[1679] (= next false)
  [1680] (1831/14) Call[1680] app __x6__ = (ToString n)
  [1681] (1832/14) Call[1681] app __x7__ = (CreateDataPropertyOrThrow A [! __x6__] nextValue)
  [1682] (1833/14) Normal[1682] [! __x7__]
  [1683] (1826/12) Call[1683] app __x5__ = (IsAbruptCompletion nextValue)
  [1684] (1827/12) If[1684] __x5__
  [1685] (1837/17) Call[1685] app __x8__ = (PutValue lref A)
  [1686] (1840/18) Normal[1686] let nestedAssignmentPattern = (parse-syntax DestructuringAssignmentTarget "AssignmentPattern")
  [1687] LoopCont[1687]
  [1688] (1828/12) Normal[1688] iteratorRecord.Done = true
  [1689] (1830/13) Normal[1689] [? nextValue]
  [1690] (1841/19) Call[1690] access __x9__ = (nestedAssignmentPattern "DestructuringAssignmentEvaluation" A)
  [1691] (1842/19) Normal[1691] return __x9__
  [1692] (1822/9) Normal[1692] iteratorRecord.Done = true
  [1693] Exit[1693]
  [1694] (1834/15) Normal[1694] n = (+ n 1i)
  [1695] (1838/17) Normal[1695] return [? __x8__]
Algo: AssignmentRestProperty[0,0].EarlyErrors [150]
  [1696] Entry[1696]
  [1697] (1844)Normal[1697] let AssignmentRestProperty = this
  [1698] (1845/0) If[1698] (|| (is-instance-of DestructuringAssignmentTarget ArrayLiteral) (is-instance-of DestructuringAssignmentTarget ObjectLiteral))
  [1699] (1846/0) Normal[1699] throw SyntaxError
  [1700] Exit[1700]
Algo: AssignmentRestProperty[0,0].RestDestructuringAssignmentEvaluation [151]
  [1701] Entry[1701]
  [1702] (1849)Normal[1702] let AssignmentRestProperty = this
  [1703] (1853/2) Call[1703] app __x1__ = (OrdinaryObjectCreate INTRINSICS["%Object.prototype%"])
  [1704] (1854/2) Normal[1704] let restObj = [! __x1__]
  [1705] (1858/4) Normal[1705] return __x3__
  [1706] Exit[1706]
  [1707] (1850/0) Call[1707] access __x0__ = (DestructuringAssignmentTarget "Evaluation")
  [1708] (1855/3) Call[1708] app __x2__ = (CopyDataProperties restObj value excludedNames)
  [1709] (1857/4) Call[1709] app __x3__ = (PutValue lref restObj)
  [1710] (1851/0) Normal[1710] let lref = __x0__
  [1711] (1856/3) Normal[1711] [? __x2__]
  [1712] (1852/1) Normal[1712] [? lref]
Algo: AsyncArrowBindingIdentifier[0,0].ContainsExpression [152]
  [1713] Entry[1713]
  [1714] (1860)Normal[1714] let AsyncArrowBindingIdentifier = this
  [1715] (1861/0) Normal[1715] return false
  [1716] Exit[1716]
Algo: AsyncArrowBindingIdentifier[0,0].ExpectedArgumentCount [153]
  [1717] Entry[1717]
  [1718] (1863)Normal[1718] let AsyncArrowBindingIdentifier = this
  [1719] (1864/0) Normal[1719] return 1i
  [1720] Exit[1720]
Algo: AsyncArrowBindingIdentifier[0,0].IsSimpleParameterList [154]
  [1721] Entry[1721]
  [1722] (1866)Normal[1722] let AsyncArrowBindingIdentifier = this
  [1723] (1867/0) Normal[1723] return true
  [1724] Exit[1724]
Algo: AsyncArrowBindingIdentifier[0,0].IteratorBindingInitialization [155]
  [1725] Entry[1725]
  [1726] (1869)Normal[1726] let AsyncArrowBindingIdentifier = this
  [1727] (1873/2) Call[1727] app __x1__ = (IsAbruptCompletion next)
  [1728] (1874/2) If[1728] __x1__
  [1729] (1879/4) Normal[1729] iteratorRecord.Done = true
  [1730] (1888/9) If[1730] (= iteratorRecord.Done true)
  [1731] (1884/7) If[1731] __x3__
  [1732] (1885/7) Normal[1732] iteratorRecord.Done = true
  [1733] (1887/8) Normal[1733] [? v]
  [1734] (1892/10) Normal[1734] return __x4__
  [1735] Exit[1735]
  [1736] (1870/0) Normal[1736] assert (= iteratorRecord.Done false)
  [1737] (1875/2) Normal[1737] iteratorRecord.Done = true
  [1738] (1877/3) Normal[1738] [? next]
  [1739] (1878/4) If[1739] (= next false)
  [1740] (1881/6) Call[1740] app __x2__ = (IteratorValue next)
  [1741] (1883/7) Call[1741] app __x3__ = (IsAbruptCompletion v)
  [1742] (1871/1) Call[1742] app __x0__ = (IteratorStep iteratorRecord)
  [1743] (1889/9) Normal[1743] let v = undefined
  [1744] (1891/10) Call[1744] access __x4__ = (BindingIdentifier "BindingInitialization" v environment)
  [1745] (1882/6) Normal[1745] let v = __x2__
  [1746] (1872/1) Normal[1746] let next = __x0__
Algo: AsyncArrowFunction[0,0].Contains [156]
  [1747] Entry[1747]
  [1748] (1894)Normal[1748] let AsyncArrowFunction = this
  [1749] (1899/1) Normal[1749] return __x0__
  [1750] Exit[1750]
  [1751] (1895/0) If[1751] (! (|| (|| (|| (|| (is-instance-of symbol NewTarget) (is-instance-of symbol SuperProperty)) (is-instance-of symbol SuperCall)) (= symbol "super")) (= symbol "this")))
  [1752] (1896/0) Normal[1752] return false
  [1753] (1898/1) Call[1753] access __x0__ = (AsyncConciseBody "Contains" symbol)
Algo: AsyncArrowFunction[0,0].EarlyErrors [157]
  [1754] Entry[1754]
  [1755] (1901)Normal[1755] let AsyncArrowFunction = this
  [1756] (1905/0) Normal[1756] let __x3__ = __x1__
  [1757] (1906/0) Normal[1757] let __x4__ = 0i
  [1758] (1911/0) Normal[1758] __x5__ = 0i
  [1759] (1912/0) Loop[1759] (< __x5__ __x3__.length)
  [1760] LoopCont[1760]
  [1761] (1902/0) Call[1761] access __x0__ = (AsyncArrowBindingIdentifier "BoundNames")
  [1762] (1907/0) Normal[1762] let __x5__ = 0i
  [1763] (1909/0) Loop[1763] (< __x4__ __x2__.length)
  [1764] (1916/0) If[1764] __x6__
  [1765] (1914/0) Normal[1765] __x6__ = true
  [1766] (1903/0) Call[1766] access __x1__ = (AsyncConciseBody "LexicallyDeclaredNames")
  [1767] (1917/0) Normal[1767] throw SyntaxError
  [1768] Exit[1768]
  [1769] (1913/0) If[1769] (= __x2__[__x4__] __x3__[__x5__])
  [1770] (1908/0) Normal[1770] let __x6__ = false
  [1771] (1904/0) Normal[1771] let __x2__ = __x0__
  [1772] LoopCont[1772]
Algo: AsyncArrowFunction[0,0].Evaluation [158]
  [1773] Entry[1773]
  [1774] (1920)Normal[1774] let AsyncArrowFunction = this
  [1775] (1921/0) Call[1775] access __x0__ = (AsyncArrowFunction "InstantiateAsyncArrowFunctionExpression")
  [1776] (1922/0) Normal[1776] return __x0__
  [1777] Exit[1777]
Algo: AsyncArrowFunction[0,0].HasName [159]
  [1778] Entry[1778]
  [1779] (1924)Normal[1779] let AsyncArrowFunction = this
  [1780] (1925/0) Normal[1780] return false
  [1781] Exit[1781]
Algo: AsyncArrowFunction[0,0].InstantiateAsyncArrowFunctionExpression [160]
  [1782] Entry[1782]
  [1783] (1927)Normal[1783] let AsyncArrowFunction = this
  [1784] (1932/1) Normal[1784] let scope = __x0__
  [1785] (1933/2) Normal[1785] let sourceText = (get-syntax AsyncArrowFunction)
  [1786] (1937/5) Call[1786] app __x2__ = (SetFunctionName closure name)
  [1787] (1938/5) Normal[1787] __x2__
  [1788] (1928/0) If[1788] (= name absent)
  [1789] (1934/3) Normal[1789] let parameters = AsyncArrowBindingIdentifier
  [1790] (1936/4) Normal[1790] let closure = [! __x1__]
  [1791] (1929/0) Normal[1791] name = ""
  [1792] (1931/1) Call[1792] access __x0__ = (CONTEXT "LexicalEnvironment")
  [1793] (1939/6) Normal[1793] return closure
  [1794] Exit[1794]
  [1795] (1935/4) Call[1795] app __x1__ = (OrdinaryFunctionCreate INTRINSICS["%AsyncFunction.prototype%"] sourceText parameters AsyncConciseBody ~lexical-this~ scope)
Algo: AsyncArrowFunction[0,0].NamedEvaluation [161]
  [1796] Entry[1796]
  [1797] (1941)Normal[1797] let AsyncArrowFunction = this
  [1798] (1942/0) Call[1798] access __x0__ = (AsyncArrowFunction "InstantiateAsyncArrowFunctionExpression" name)
  [1799] (1943/0) Normal[1799] return __x0__
  [1800] Exit[1800]
Algo: AsyncArrowFunction[1,0].Contains [162]
  [1801] Entry[1801]
  [1802] (1945)Normal[1802] let AsyncArrowFunction = this
  [1803] (1950/1) Normal[1803] let head = __x0__
  [1804] (1951/2) Call[1804] access __x1__ = (head "Contains" symbol)
  [1805] (1956/3) Normal[1805] return __x2__
  [1806] Exit[1806]
  [1807] (1946/0) If[1807] (! (|| (|| (|| (|| (is-instance-of symbol NewTarget) (is-instance-of symbol SuperProperty)) (is-instance-of symbol SuperCall)) (= symbol "super")) (= symbol "this")))
  [1808] (1952/2) If[1808] (= __x1__ true)
  [1809] (1955/3) Call[1809] access __x2__ = (AsyncConciseBody "Contains" symbol)
  [1810] (1947/0) Normal[1810] return false
  [1811] (1949/1) Call[1811] access __x0__ = (CoverCallExpressionAndAsyncArrowHead "CoveredAsyncArrowHead")
  [1812] (1953/2) Normal[1812] return true
Algo: AsyncArrowFunction[1,0].EarlyErrors [163]
  [1813] Entry[1813]
  [1814] (1958)Normal[1814] let AsyncArrowFunction = this
  [1815] (1963/1) Call[1815] access __x1__ = (CoverCallExpressionAndAsyncArrowHead "Contains" "AwaitExpression")
  [1816] (1964/1) If[1816] (= __x1__ true)
  [1817] (1969/2) Normal[1817] __x2__ = true
  [1818] (1971/2) If[1818] __x2__
  [1819] (1975/3) Call[1819] access __x4__ = (AsyncConciseBody "LexicallyDeclaredNames")
  [1820] (1976/3) Normal[1820] let __x5__ = __x3__
  [1821] (1959/0) Call[1821] access __x0__ = (CoverCallExpressionAndAsyncArrowHead "Contains" "YieldExpression")
  [1822] (1965/1) Normal[1822] throw SyntaxError
  [1823] (1967/2) Normal[1823] let __x2__ = false
  [1824] (1968/2) If[1824] (= absent (parse-syntax CoverCallExpressionAndAsyncArrowHead "AsyncArrowHead"))
  [1825] (1974/3) Call[1825] access __x3__ = (CoverCallExpressionAndAsyncArrowHead "BoundNames")
  [1826] (1960/0) If[1826] (= __x0__ true)
  [1827] (1972/2) Normal[1827] throw SyntaxError
  [1828] (1979/3) Normal[1828] let __x8__ = 0i
  [1829] (1980/3) Normal[1829] let __x9__ = false
  [1830] (1961/0) Normal[1830] throw SyntaxError
  [1831] (1977/3) Normal[1831] let __x6__ = __x4__
  [1832] (1986/3) Normal[1832] __x9__ = true
  [1833] LoopCont[1833]
  [1834] (2002/5) Normal[1834] ??? "All Early Error rules for nt:{AsyncArrowHead} and its derived productions apply to CoveredAsyncArrowHead of nt:{CoverCallExpressionAndAsyncArrowHead} ."
  [1835] Exit[1835]
  [1836] (1984/3) Loop[1836] (< __x8__ __x6__.length)
  [1837] (1981/3) Loop[1837] (< __x7__ __x5__.length)
  [1838] (1983/3) Normal[1838] __x8__ = 0i
  [1839] (1988/3) If[1839] __x9__
  [1840] (1991/4) Normal[1840] let __x10__ = true
  [1841] (1992/4) Call[1841] access __x11__ = (AsyncConciseBody "AsyncConciseBodyContainsUseStrict")
  [1842] (1989/3) Normal[1842] throw SyntaxError
  [1843] (1996/4) Call[1843] access __x12__ = (CoverCallExpressionAndAsyncArrowHead "IsSimpleParameterList")
  [1844] (1997/4) Normal[1844] __x10__ = (= __x12__ false)
  [1845] (1978/3) Normal[1845] let __x7__ = 0i
  [1846] (1994/4) If[1846] __x10__
  [1847] (1999/4) If[1847] __x10__
  [1848] (1985/3) If[1848] (= __x5__[__x7__] __x6__[__x8__])
  [1849] LoopCont[1849]
  [1850] (2000/4) Normal[1850] throw SyntaxError
  [1851] (1993/4) Normal[1851] __x10__ = (= __x11__ true)
Algo: AsyncArrowFunction[1,0].Evaluation [164]
  [1852] Entry[1852]
  [1853] (2004)Normal[1853] let AsyncArrowFunction = this
  [1854] (2005/0) Call[1854] access __x0__ = (AsyncArrowFunction "InstantiateAsyncArrowFunctionExpression")
  [1855] (2006/0) Normal[1855] return __x0__
  [1856] Exit[1856]
Algo: AsyncArrowFunction[1,0].HasName [165]
  [1857] Entry[1857]
  [1858] (2008)Normal[1858] let AsyncArrowFunction = this
  [1859] (2009/0) Normal[1859] return false
  [1860] Exit[1860]
Algo: AsyncArrowFunction[1,0].InstantiateAsyncArrowFunctionExpression [166]
  [1861] Entry[1861]
  [1862] (2011)Normal[1862] let AsyncArrowFunction = this
  [1863] (2016/1) Normal[1863] let scope = __x0__
  [1864] (2017/2) Normal[1864] let sourceText = (get-syntax AsyncArrowFunction)
  [1865] (2021/4) Normal[1865] let parameters = __x2__
  [1866] (2022/5) Call[1866] app __x3__ = (OrdinaryFunctionCreate INTRINSICS["%AsyncFunction.prototype%"] sourceText parameters AsyncConciseBody ~lexical-this~ scope)
  [1867] (2025/6) Normal[1867] __x4__
  [1868] (2026/7) Normal[1868] return closure
  [1869] (2012/0) If[1869] (= name absent)
  [1870] (2018/3) Call[1870] access __x1__ = (CoverCallExpressionAndAsyncArrowHead "CoveredAsyncArrowHead")
  [1871] (2020/4) Call[1871] access __x2__ = (head "ArrowFormalParameters")
  [1872] (2024/6) Call[1872] app __x4__ = (SetFunctionName closure name)
  [1873] (2013/0) Normal[1873] name = ""
  [1874] (2015/1) Call[1874] access __x0__ = (CONTEXT "LexicalEnvironment")
  [1875] (2023/5) Normal[1875] let closure = [! __x3__]
  [1876] (2019/3) Normal[1876] let head = __x1__
  [1877] Exit[1877]
Algo: AsyncArrowFunction[1,0].NamedEvaluation [167]
  [1878] Entry[1878]
  [1879] (2028)Normal[1879] let AsyncArrowFunction = this
  [1880] (2029/0) Call[1880] access __x0__ = (AsyncArrowFunction "InstantiateAsyncArrowFunctionExpression" name)
  [1881] (2030/0) Normal[1881] return __x0__
  [1882] Exit[1882]
Algo: AsyncConciseBody[0,0].AsyncConciseBodyContainsUseStrict [168]
  [1883] Entry[1883]
  [1884] (2032)Normal[1884] let AsyncConciseBody = this
  [1885] (2033/0) Normal[1885] return false
  [1886] Exit[1886]
Algo: AsyncConciseBody[0,0].EvaluateAsyncConciseBody [169]
  [1887] Entry[1887]
  [1888] (2035)Normal[1888] let AsyncConciseBody = this
  [1889] (2039/1) Normal[1889] let declResult = __x1__
  [1890] (2040/2) Call[1890] app __x2__ = (IsAbruptCompletion declResult)
  [1891] (2046/5) Call[1891] app __x4__ = (Call promiseCapability.Reject undefined (new [declResult.Value]))
  [1892] (2047/5) Normal[1892] [! __x4__]
  [1893] (2036/0) Call[1893] app __x0__ = (NewPromiseCapability INTRINSICS["%Promise%"])
  [1894] (2041/2) If[1894] (! __x2__)
  [1895] (2044/3) Normal[1895] [! __x3__]
  [1896] (2048/6) Normal[1896] return (comp[~return~] promiseCapability.Promise => ~empty~)
  [1897] (2037/0) Normal[1897] let promiseCapability = [! __x0__]
  [1898] Exit[1898]
  [1899] (2043/3) Call[1899] app __x3__ = (AsyncFunctionStart promiseCapability ExpressionBody)
  [1900] (2038/1) Call[1900] app __x1__ = (FunctionDeclarationInstantiation functionObject argumentsList)
Algo: AsyncConciseBody[0,0].EvaluateBody [170]
  [1901] Entry[1901]
  [1902] (2050)Normal[1902] let AsyncConciseBody = this
  [1903] (2051/0) Call[1903] access __x0__ = (AsyncConciseBody "EvaluateAsyncConciseBody" functionObject argumentsList)
  [1904] (2052/0) Normal[1904] return [? __x0__]
  [1905] Exit[1905]
Algo: AsyncConciseBody[0,0].LexicallyDeclaredNames [171]
  [1906] Entry[1906]
  [1907] (2054)Normal[1907] let AsyncConciseBody = this
  [1908] (2055/0) Normal[1908] return (new [])
  [1909] Exit[1909]
Algo: AsyncConciseBody[0,0].LexicallyScopedDeclarations [172]
  [1910] Entry[1910]
  [1911] (2057)Normal[1911] let AsyncConciseBody = this
  [1912] (2058/0) Normal[1912] return (new [])
  [1913] Exit[1913]
Algo: AsyncConciseBody[0,0].VarDeclaredNames [173]
  [1914] Entry[1914]
  [1915] (2060)Normal[1915] let AsyncConciseBody = this
  [1916] (2061/0) Normal[1916] return (new [])
  [1917] Exit[1917]
Algo: AsyncConciseBody[0,0].VarScopedDeclarations [174]
  [1918] Entry[1918]
  [1919] (2063)Normal[1919] let AsyncConciseBody = this
  [1920] (2064/0) Normal[1920] return (new [])
  [1921] Exit[1921]
Algo: AsyncConciseBody[1,0].AsyncConciseBodyContainsUseStrict [175]
  [1922] Entry[1922]
  [1923] (2066)Normal[1923] let AsyncConciseBody = this
  [1924] (2067/0) Call[1924] access __x0__ = (AsyncFunctionBody "FunctionBodyContainsUseStrict")
  [1925] (2068/0) Normal[1925] return __x0__
  [1926] Exit[1926]
Algo: AsyncFromSyncIteratorContinuation [176]
  [1927] Entry[1927]
  [1928] (2070/0) Call[1928] app __x0__ = (IteratorComplete result)
  [1929] (2074/1) Normal[1929] done = done.Value
  [1930] (2082/1) Normal[1930] done
  [1931] (2083/2) Call[1931] app __x2__ = (IteratorValue result)
  [1932] (2086/3) If[1932] (= value.Type ~normal~)
  [1933] (2087/3) Normal[1933] value = value.Value
  [1934] (2089/4) Call[1934] app __x3__ = (Call promiseCapability.Reject undefined (new [value.Value]))
  [1935] (2071/0) Normal[1935] let done = __x0__
  [1936] (2076/2) Call[1936] app __x1__ = (Call promiseCapability.Reject undefined (new [done.Value]))
  [1937] (2077/2) If[1937] (&& (is-completion __x1__) (! (= __x1__.Type ~normal~)))
  [1938] (2080/2) Normal[1938] return promiseCapability.Promise
  [1939] (2085/3) If[1939] (is-completion value)
  [1940] (2095/3) Normal[1940] value
  [1941] (2072/1) If[1941] (is-completion done)
  [1942] (2084/2) Normal[1942] let value = __x2__
  [1943] (2078/2) Normal[1943] return __x1__
  [1944] (2091/4) Normal[1944] return __x3__
  [1945] (2093/4) Normal[1945] return promiseCapability.Promise
  [1946] (2073/1) If[1946] (= done.Type ~normal~)
  [1947] (2099/5) If[1947] (= valueWrapper.Type ~normal~)
  [1948] (2100/5) Normal[1948] valueWrapper = valueWrapper.Value
  [1949] (2102/6) Call[1949] app __x5__ = (Call promiseCapability.Reject undefined (new [valueWrapper.Value]))
  [1950] (2115/10) Normal[1950] [! __x7__]
  [1951] (2116/11) Normal[1951] return promiseCapability.Promise
  [1952] (2108/5) Normal[1952] valueWrapper
  [1953] (2096/4) Call[1953] app __x4__ = (PromiseResolve INTRINSICS["%Promise%"] value)
  [1954] (2106/6) Normal[1954] return promiseCapability.Promise
  [1955] (2097/4) Normal[1955] let valueWrapper = __x4__
  [1956] (2111/8) Call[1956] app __x6__ = (CreateBuiltinFunction steps length "" (new ["Done"]))
  [1957] (2112/8) Normal[1957] let onFulfilled = [! __x6__]
  [1958] (2104/6) Normal[1958] return __x5__
  [1959] Exit[1959]
  [1960] (2090/4) If[1960] (&& (is-completion __x3__) (! (= __x3__.Type ~normal~)))
  [1961] (2110/7) Normal[1961] let length = 1i
  [1962] (2113/9) Normal[1962] onFulfilled.Done = done
  [1963] (2098/5) If[1963] (is-completion valueWrapper)
  [1964] (2103/6) If[1964] (&& (is-completion __x5__) (! (= __x5__.Type ~normal~)))
  [1965] (2114/10) Call[1965] app __x7__ = (PerformPromiseThen valueWrapper onFulfilled undefined promiseCapability)
  [1966] (2109/6) Normal[1966] let steps = ALGORITHM["GLOBAL.AsyncfromSyncIteratorValueUnwrapFunctions"]
Algo: AsyncFunctionBody[0,0].EvaluateAsyncFunctionBody [177]
  [1967] Entry[1967]
  [1968] (2118)Normal[1968] let AsyncFunctionBody = this
  [1969] (2122/1) Normal[1969] let declResult = __x1__
  [1970] (2123/2) Call[1970] app __x2__ = (IsAbruptCompletion declResult)
  [1971] (2129/5) Call[1971] app __x4__ = (Call promiseCapability.Reject undefined (new [declResult.Value]))
  [1972] (2130/5) Normal[1972] [! __x4__]
  [1973] (2119/0) Call[1973] app __x0__ = (NewPromiseCapability INTRINSICS["%Promise%"])
  [1974] (2124/2) If[1974] (! __x2__)
  [1975] (2127/3) Normal[1975] [! __x3__]
  [1976] (2131/6) Normal[1976] return (comp[~return~] promiseCapability.Promise => ~empty~)
  [1977] (2120/0) Normal[1977] let promiseCapability = [! __x0__]
  [1978] Exit[1978]
  [1979] (2126/3) Call[1979] app __x3__ = (AsyncFunctionStart promiseCapability FunctionBody)
  [1980] (2121/1) Call[1980] app __x1__ = (FunctionDeclarationInstantiation functionObject argumentsList)
Algo: AsyncFunctionBody[0,0].EvaluateBody [178]
  [1981] Entry[1981]
  [1982] (2133)Normal[1982] let AsyncFunctionBody = this
  [1983] (2134/0) Call[1983] access __x0__ = (AsyncFunctionBody "EvaluateAsyncFunctionBody" functionObject argumentsList)
  [1984] (2135/0) Normal[1984] return [? __x0__]
  [1985] Exit[1985]
Algo: AsyncFunctionDeclaration[0,0].BoundNames [179]
  [1986] Entry[1986]
  [1987] (2137)Normal[1987] let AsyncFunctionDeclaration = this
  [1988] (2138/0) Call[1988] access __x0__ = (BindingIdentifier "BoundNames")
  [1989] (2139/0) Normal[1989] return __x0__
  [1990] Exit[1990]
Algo: AsyncFunctionDeclaration[0,0].Contains [180]
  [1991] Entry[1991]
  [1992] (2141)Normal[1992] let AsyncFunctionDeclaration = this
  [1993] (2142/0) Normal[1993] return false
  [1994] Exit[1994]
Algo: AsyncFunctionDeclaration[0,0].EarlyErrors [181]
  [1995] Entry[1995]
  [1996] (2144)Normal[1996] let AsyncFunctionDeclaration = this
  [1997] (2148/0) If[1997] __x0__
  [1998] (2150/0) Call[1998] access __x2__ = (FormalParameters "IsSimpleParameterList")
  [1999] (2153/0) If[1999] __x0__
  [2000] (2156/1) Call[2000] access __x3__ = (FormalParameters "Contains" "AwaitExpression")
  [2001] (2157/1) If[2001] (= __x3__ true)
  [2002] (2161/3) If[2002] (&& (! (= BindingIdentifier absent)) true)
  [2003] (2163/3) Call[2003] access __x4__ = (BindingIdentifier "StringValue")
  [2004] (2168/4) Call[2004] access __x5__ = (FormalParameters "BoundNames")
  [2005] (2145/0) Normal[2005] let __x0__ = true
  [2006] (2151/0) Normal[2006] __x0__ = (= __x2__ false)
  [2007] (2154/0) Normal[2007] throw SyntaxError
  [2008] (2146/0) Call[2008] access __x1__ = (AsyncFunctionBody "FunctionBodyContainsUseStrict")
  [2009] (2158/1) Normal[2009] throw SyntaxError
  [2010] (2160/2) Normal[2010] ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  [2011] (2169/4) Call[2011] access __x6__ = (AsyncFunctionBody "LexicallyDeclaredNames")
  [2012] (2147/0) Normal[2012] __x0__ = (= __x1__ true)
  [2013] (2164/3) If[2013] (|| (= __x4__ "eval") (= __x4__ "arguments"))
  [2014] (2195/7) Normal[2014] throw SyntaxError
  [2015] (2197/8) Call[2015] access __x15__ = (AsyncFunctionBody "Contains" "SuperCall")
  [2016] (2174/4) Normal[2016] let __x11__ = false
  [2017] (2175/4) Loop[2017] (< __x9__ __x7__.length)
  [2018] (2189/6) Call[2018] access __x13__ = (AsyncFunctionBody "Contains" "SuperProperty")
  [2019] (2190/6) If[2019] (= __x13__ true)
  [2020] (2177/4) Normal[2020] __x10__ = 0i
  [2021] (2182/4) If[2021] __x11__
  [2022] (2170/4) Normal[2022] let __x7__ = __x5__
  [2023] (2171/4) Normal[2023] let __x8__ = __x6__
  [2024] (2180/4) Normal[2024] __x11__ = true
  [2025] LoopCont[2025]
  [2026] (2172/4) Normal[2026] let __x9__ = 0i
  [2027] (2183/4) Normal[2027] throw SyntaxError
  [2028] (2185/5) Call[2028] access __x12__ = (FormalParameters "Contains" "SuperProperty")
  [2029] (2179/4) If[2029] (= __x7__[__x9__] __x8__[__x10__])
  [2030] (2191/6) Normal[2030] throw SyntaxError
  [2031] (2193/7) Call[2031] access __x14__ = (FormalParameters "Contains" "SuperCall")
  [2032] (2194/7) If[2032] (= __x14__ true)
  [2033] (2199/8) Normal[2033] throw SyntaxError
  [2034] Exit[2034]
  [2035] (2165/3) Normal[2035] throw SyntaxError
  [2036] (2186/5) If[2036] (= __x12__ true)
  [2037] (2173/4) Normal[2037] let __x10__ = 0i
  [2038] (2198/8) If[2038] (= __x15__ true)
  [2039] (2178/4) Loop[2039] (< __x10__ __x8__.length)
  [2040] LoopCont[2040]
  [2041] (2187/5) Normal[2041] throw SyntaxError
Algo: AsyncFunctionDeclaration[0,0].Evaluation [182]
  [2042] Entry[2042]
  [2043] (2202)Normal[2043] let AsyncFunctionDeclaration = this
  [2044] (2203/0) Normal[2044] return ~empty~
  [2045] Exit[2045]
Algo: AsyncFunctionDeclaration[0,0].InstantiateAsyncFunctionObject [183]
  [2046] Entry[2046]
  [2047] (2205)Normal[2047] let AsyncFunctionDeclaration = this
  [2048] (2209/2) Call[2048] app __x1__ = (OrdinaryFunctionCreate INTRINSICS["%AsyncFunction.prototype%"] sourceText FormalParameters AsyncFunctionBody ~non-lexical-this~ scope)
  [2049] (2210/2) Normal[2049] let F = [! __x1__]
  [2050] (2206/0) Call[2050] access __x0__ = (BindingIdentifier "StringValue")
  [2051] (2211/3) Call[2051] app __x2__ = (SetFunctionName F name)
  [2052] (2213/4) Normal[2052] return F
  [2053] Exit[2053]
  [2054] (2207/0) Normal[2054] let name = __x0__
  [2055] (2212/3) Normal[2055] [! __x2__]
  [2056] (2208/1) Normal[2056] let sourceText = (get-syntax AsyncFunctionDeclaration)
Algo: AsyncFunctionDeclaration[0,0].InstantiateFunctionObject [184]
  [2057] Entry[2057]
  [2058] (2215)Normal[2058] let AsyncFunctionDeclaration = this
  [2059] (2216/0) Call[2059] access __x0__ = (AsyncFunctionDeclaration "InstantiateAsyncFunctionObject" scope)
  [2060] (2217/0) Normal[2060] return [? __x0__]
  [2061] Exit[2061]
Algo: AsyncFunctionDeclaration[0,0].IsConstantDeclaration [185]
  [2062] Entry[2062]
  [2063] (2219)Normal[2063] let AsyncFunctionDeclaration = this
  [2064] (2220/0) Normal[2064] return false
  [2065] Exit[2065]
Algo: AsyncFunctionDeclaration[1,0].BoundNames [186]
  [2066] Entry[2066]
  [2067] (2222)Normal[2067] let AsyncFunctionDeclaration = this
  [2068] (2223/0) Normal[2068] return (new ["*default*"])
  [2069] Exit[2069]
Algo: AsyncFunctionDeclaration[1,0].Contains [187]
  [2070] Entry[2070]
  [2071] (2225)Normal[2071] let AsyncFunctionDeclaration = this
  [2072] (2226/0) Normal[2072] return false
  [2073] Exit[2073]
Algo: AsyncFunctionDeclaration[1,0].EarlyErrors [188]
  [2074] Entry[2074]
  [2075] (2228)Normal[2075] let AsyncFunctionDeclaration = this
  [2076] (2232/0) If[2076] __x0__
  [2077] (2234/0) Call[2077] access __x2__ = (FormalParameters "IsSimpleParameterList")
  [2078] (2237/0) If[2078] __x0__
  [2079] (2240/1) Call[2079] access __x3__ = (FormalParameters "Contains" "AwaitExpression")
  [2080] (2241/1) If[2080] (= __x3__ true)
  [2081] (2245/3) If[2081] (&& (! (= BindingIdentifier absent)) true)
  [2082] (2247/3) Call[2082] access __x4__ = (BindingIdentifier "StringValue")
  [2083] (2252/4) Call[2083] access __x5__ = (FormalParameters "BoundNames")
  [2084] (2229/0) Normal[2084] let __x0__ = true
  [2085] (2235/0) Normal[2085] __x0__ = (= __x2__ false)
  [2086] (2238/0) Normal[2086] throw SyntaxError
  [2087] (2230/0) Call[2087] access __x1__ = (AsyncFunctionBody "FunctionBodyContainsUseStrict")
  [2088] (2242/1) Normal[2088] throw SyntaxError
  [2089] (2244/2) Normal[2089] ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  [2090] (2253/4) Call[2090] access __x6__ = (AsyncFunctionBody "LexicallyDeclaredNames")
  [2091] (2231/0) Normal[2091] __x0__ = (= __x1__ true)
  [2092] (2248/3) If[2092] (|| (= __x4__ "eval") (= __x4__ "arguments"))
  [2093] (2279/7) Normal[2093] throw SyntaxError
  [2094] (2281/8) Call[2094] access __x15__ = (AsyncFunctionBody "Contains" "SuperCall")
  [2095] (2258/4) Normal[2095] let __x11__ = false
  [2096] (2259/4) Loop[2096] (< __x9__ __x7__.length)
  [2097] (2273/6) Call[2097] access __x13__ = (AsyncFunctionBody "Contains" "SuperProperty")
  [2098] (2274/6) If[2098] (= __x13__ true)
  [2099] (2261/4) Normal[2099] __x10__ = 0i
  [2100] (2266/4) If[2100] __x11__
  [2101] (2254/4) Normal[2101] let __x7__ = __x5__
  [2102] (2255/4) Normal[2102] let __x8__ = __x6__
  [2103] (2264/4) Normal[2103] __x11__ = true
  [2104] LoopCont[2104]
  [2105] (2256/4) Normal[2105] let __x9__ = 0i
  [2106] (2267/4) Normal[2106] throw SyntaxError
  [2107] (2269/5) Call[2107] access __x12__ = (FormalParameters "Contains" "SuperProperty")
  [2108] (2263/4) If[2108] (= __x7__[__x9__] __x8__[__x10__])
  [2109] (2275/6) Normal[2109] throw SyntaxError
  [2110] (2277/7) Call[2110] access __x14__ = (FormalParameters "Contains" "SuperCall")
  [2111] (2278/7) If[2111] (= __x14__ true)
  [2112] (2283/8) Normal[2112] throw SyntaxError
  [2113] Exit[2113]
  [2114] (2249/3) Normal[2114] throw SyntaxError
  [2115] (2270/5) If[2115] (= __x12__ true)
  [2116] (2257/4) Normal[2116] let __x10__ = 0i
  [2117] (2282/8) If[2117] (= __x15__ true)
  [2118] (2262/4) Loop[2118] (< __x10__ __x8__.length)
  [2119] LoopCont[2119]
  [2120] (2271/5) Normal[2120] throw SyntaxError
Algo: AsyncFunctionDeclaration[1,0].Evaluation [189]
  [2121] Entry[2121]
  [2122] (2286)Normal[2122] let AsyncFunctionDeclaration = this
  [2123] (2287/0) Normal[2123] return ~empty~
  [2124] Exit[2124]
Algo: AsyncFunctionDeclaration[1,0].InstantiateAsyncFunctionObject [190]
  [2125] Entry[2125]
  [2126] (2289)Normal[2126] let AsyncFunctionDeclaration = this
  [2127] (2293/2) Call[2127] app __x1__ = (SetFunctionName F "default")
  [2128] (2294/2) Normal[2128] [! __x1__]
  [2129] (2290/0) Normal[2129] let sourceText = (get-syntax AsyncFunctionDeclaration)
  [2130] (2295/3) Normal[2130] return F
  [2131] (2291/1) Call[2131] app __x0__ = (OrdinaryFunctionCreate INTRINSICS["%AsyncFunction.prototype%"] sourceText FormalParameters AsyncFunctionBody ~non-lexical-this~ scope)
  [2132] Exit[2132]
  [2133] (2292/1) Normal[2133] let F = [! __x0__]
Algo: AsyncFunctionDeclaration[1,0].InstantiateFunctionObject [191]
  [2134] Entry[2134]
  [2135] (2297)Normal[2135] let AsyncFunctionDeclaration = this
  [2136] (2298/0) Call[2136] access __x0__ = (AsyncFunctionDeclaration "InstantiateAsyncFunctionObject" scope)
  [2137] (2299/0) Normal[2137] return [? __x0__]
  [2138] Exit[2138]
Algo: AsyncFunctionDeclaration[1,0].IsConstantDeclaration [192]
  [2139] Entry[2139]
  [2140] (2301)Normal[2140] let AsyncFunctionDeclaration = this
  [2141] (2302/0) Normal[2141] return false
  [2142] Exit[2142]
Algo: AsyncFunctionExpression[0,0].Contains [193]
  [2143] Entry[2143]
  [2144] (2304)Normal[2144] let AsyncFunctionExpression = this
  [2145] (2305/0) Normal[2145] return false
  [2146] Exit[2146]
Algo: AsyncFunctionExpression[0,0].EarlyErrors [194]
  [2147] Entry[2147]
  [2148] (2307)Normal[2148] let AsyncFunctionExpression = this
  [2149] (2311/0) If[2149] __x0__
  [2150] (2313/0) Call[2150] access __x2__ = (FormalParameters "IsSimpleParameterList")
  [2151] (2316/0) If[2151] __x0__
  [2152] (2319/1) Call[2152] access __x3__ = (FormalParameters "Contains" "AwaitExpression")
  [2153] (2320/1) If[2153] (= __x3__ true)
  [2154] (2324/3) If[2154] (&& (! (= BindingIdentifier absent)) true)
  [2155] (2326/3) Call[2155] access __x4__ = (BindingIdentifier "StringValue")
  [2156] (2331/4) Call[2156] access __x5__ = (FormalParameters "BoundNames")
  [2157] (2308/0) Normal[2157] let __x0__ = true
  [2158] (2314/0) Normal[2158] __x0__ = (= __x2__ false)
  [2159] (2317/0) Normal[2159] throw SyntaxError
  [2160] (2309/0) Call[2160] access __x1__ = (AsyncFunctionBody "FunctionBodyContainsUseStrict")
  [2161] (2321/1) Normal[2161] throw SyntaxError
  [2162] (2323/2) Normal[2162] ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  [2163] (2332/4) Call[2163] access __x6__ = (AsyncFunctionBody "LexicallyDeclaredNames")
  [2164] (2310/0) Normal[2164] __x0__ = (= __x1__ true)
  [2165] (2327/3) If[2165] (|| (= __x4__ "eval") (= __x4__ "arguments"))
  [2166] (2358/7) Normal[2166] throw SyntaxError
  [2167] (2360/8) Call[2167] access __x15__ = (AsyncFunctionBody "Contains" "SuperCall")
  [2168] (2337/4) Normal[2168] let __x11__ = false
  [2169] (2338/4) Loop[2169] (< __x9__ __x7__.length)
  [2170] (2352/6) Call[2170] access __x13__ = (AsyncFunctionBody "Contains" "SuperProperty")
  [2171] (2353/6) If[2171] (= __x13__ true)
  [2172] (2340/4) Normal[2172] __x10__ = 0i
  [2173] (2345/4) If[2173] __x11__
  [2174] (2333/4) Normal[2174] let __x7__ = __x5__
  [2175] (2334/4) Normal[2175] let __x8__ = __x6__
  [2176] (2343/4) Normal[2176] __x11__ = true
  [2177] LoopCont[2177]
  [2178] (2335/4) Normal[2178] let __x9__ = 0i
  [2179] (2346/4) Normal[2179] throw SyntaxError
  [2180] (2348/5) Call[2180] access __x12__ = (FormalParameters "Contains" "SuperProperty")
  [2181] (2342/4) If[2181] (= __x7__[__x9__] __x8__[__x10__])
  [2182] (2354/6) Normal[2182] throw SyntaxError
  [2183] (2356/7) Call[2183] access __x14__ = (FormalParameters "Contains" "SuperCall")
  [2184] (2357/7) If[2184] (= __x14__ true)
  [2185] (2362/8) Normal[2185] throw SyntaxError
  [2186] Exit[2186]
  [2187] (2328/3) Normal[2187] throw SyntaxError
  [2188] (2349/5) If[2188] (= __x12__ true)
  [2189] (2336/4) Normal[2189] let __x10__ = 0i
  [2190] (2361/8) If[2190] (= __x15__ true)
  [2191] (2341/4) Loop[2191] (< __x10__ __x8__.length)
  [2192] LoopCont[2192]
  [2193] (2350/5) Normal[2193] throw SyntaxError
Algo: AsyncFunctionExpression[0,0].Evaluation [195]
  [2194] Entry[2194]
  [2195] (2365)Normal[2195] let AsyncFunctionExpression = this
  [2196] (2366/0) Call[2196] access __x0__ = (AsyncFunctionExpression "InstantiateAsyncFunctionExpression")
  [2197] (2367/0) Normal[2197] return __x0__
  [2198] Exit[2198]
Algo: AsyncFunctionExpression[0,0].HasName [196]
  [2199] Entry[2199]
  [2200] (2369)Normal[2200] let AsyncFunctionExpression = this
  [2201] (2370/0) Normal[2201] return false
  [2202] Exit[2202]
Algo: AsyncFunctionExpression[0,0].InstantiateAsyncFunctionExpression [197]
  [2203] Entry[2203]
  [2204] (2372)Normal[2204] let AsyncFunctionExpression = this
  [2205] (2377/1) Normal[2205] let scope = __x0__
  [2206] (2378/2) Normal[2206] let sourceText = (get-syntax AsyncFunctionExpression)
  [2207] (2382/4) Normal[2207] __x2__
  [2208] (2383/5) Normal[2208] return closure
  [2209] (2373/0) If[2209] (= name absent)
  [2210] (2379/3) Call[2210] app __x1__ = (OrdinaryFunctionCreate INTRINSICS["%AsyncFunction.prototype%"] sourceText FormalParameters AsyncFunctionBody ~non-lexical-this~ scope)
  [2211] (2381/4) Call[2211] app __x2__ = (SetFunctionName closure name)
  [2212] (2374/0) Normal[2212] name = ""
  [2213] (2376/1) Call[2213] access __x0__ = (CONTEXT "LexicalEnvironment")
  [2214] (2380/3) Normal[2214] let closure = [! __x1__]
  [2215] Exit[2215]
Algo: AsyncFunctionExpression[0,0].IsFunctionDefinition [198]
  [2216] Entry[2216]
  [2217] (2385)Normal[2217] let AsyncFunctionExpression = this
  [2218] (2386/0) Normal[2218] return true
  [2219] Exit[2219]
Algo: AsyncFunctionExpression[0,0].NamedEvaluation [199]
  [2220] Entry[2220]
  [2221] (2388)Normal[2221] let AsyncFunctionExpression = this
  [2222] (2389/0) Call[2222] access __x0__ = (AsyncFunctionExpression "InstantiateAsyncFunctionExpression" name)
  [2223] (2390/0) Normal[2223] return __x0__
  [2224] Exit[2224]
Algo: AsyncFunctionExpression[0,1].Contains [200]
  [2225] Entry[2225]
  [2226] (2392)Normal[2226] let AsyncFunctionExpression = this
  [2227] (2393/0) Normal[2227] return false
  [2228] Exit[2228]
Algo: AsyncFunctionExpression[0,1].EarlyErrors [201]
  [2229] Entry[2229]
  [2230] (2395)Normal[2230] let AsyncFunctionExpression = this
  [2231] (2399/0) If[2231] __x0__
  [2232] (2401/0) Call[2232] access __x2__ = (FormalParameters "IsSimpleParameterList")
  [2233] (2404/0) If[2233] __x0__
  [2234] (2407/1) Call[2234] access __x3__ = (FormalParameters "Contains" "AwaitExpression")
  [2235] (2408/1) If[2235] (= __x3__ true)
  [2236] (2412/3) If[2236] (&& (! (= BindingIdentifier absent)) true)
  [2237] (2414/3) Call[2237] access __x4__ = (BindingIdentifier "StringValue")
  [2238] (2419/4) Call[2238] access __x5__ = (FormalParameters "BoundNames")
  [2239] (2396/0) Normal[2239] let __x0__ = true
  [2240] (2402/0) Normal[2240] __x0__ = (= __x2__ false)
  [2241] (2405/0) Normal[2241] throw SyntaxError
  [2242] (2397/0) Call[2242] access __x1__ = (AsyncFunctionBody "FunctionBodyContainsUseStrict")
  [2243] (2409/1) Normal[2243] throw SyntaxError
  [2244] (2411/2) Normal[2244] ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  [2245] (2420/4) Call[2245] access __x6__ = (AsyncFunctionBody "LexicallyDeclaredNames")
  [2246] (2398/0) Normal[2246] __x0__ = (= __x1__ true)
  [2247] (2415/3) If[2247] (|| (= __x4__ "eval") (= __x4__ "arguments"))
  [2248] (2446/7) Normal[2248] throw SyntaxError
  [2249] (2448/8) Call[2249] access __x15__ = (AsyncFunctionBody "Contains" "SuperCall")
  [2250] (2425/4) Normal[2250] let __x11__ = false
  [2251] (2426/4) Loop[2251] (< __x9__ __x7__.length)
  [2252] (2440/6) Call[2252] access __x13__ = (AsyncFunctionBody "Contains" "SuperProperty")
  [2253] (2441/6) If[2253] (= __x13__ true)
  [2254] (2428/4) Normal[2254] __x10__ = 0i
  [2255] (2433/4) If[2255] __x11__
  [2256] (2421/4) Normal[2256] let __x7__ = __x5__
  [2257] (2422/4) Normal[2257] let __x8__ = __x6__
  [2258] (2431/4) Normal[2258] __x11__ = true
  [2259] LoopCont[2259]
  [2260] (2423/4) Normal[2260] let __x9__ = 0i
  [2261] (2434/4) Normal[2261] throw SyntaxError
  [2262] (2436/5) Call[2262] access __x12__ = (FormalParameters "Contains" "SuperProperty")
  [2263] (2430/4) If[2263] (= __x7__[__x9__] __x8__[__x10__])
  [2264] (2442/6) Normal[2264] throw SyntaxError
  [2265] (2444/7) Call[2265] access __x14__ = (FormalParameters "Contains" "SuperCall")
  [2266] (2445/7) If[2266] (= __x14__ true)
  [2267] (2450/8) Normal[2267] throw SyntaxError
  [2268] Exit[2268]
  [2269] (2416/3) Normal[2269] throw SyntaxError
  [2270] (2437/5) If[2270] (= __x12__ true)
  [2271] (2424/4) Normal[2271] let __x10__ = 0i
  [2272] (2449/8) If[2272] (= __x15__ true)
  [2273] (2429/4) Loop[2273] (< __x10__ __x8__.length)
  [2274] LoopCont[2274]
  [2275] (2438/5) Normal[2275] throw SyntaxError
Algo: AsyncFunctionExpression[0,1].Evaluation [202]
  [2276] Entry[2276]
  [2277] (2453)Normal[2277] let AsyncFunctionExpression = this
  [2278] (2454/0) Call[2278] access __x0__ = (AsyncFunctionExpression "InstantiateAsyncFunctionExpression")
  [2279] (2455/0) Normal[2279] return __x0__
  [2280] Exit[2280]
Algo: AsyncFunctionExpression[0,1].HasName [203]
  [2281] Entry[2281]
  [2282] (2457)Normal[2282] let AsyncFunctionExpression = this
  [2283] (2458/0) Normal[2283] return true
  [2284] Exit[2284]
Algo: AsyncFunctionExpression[0,1].InstantiateAsyncFunctionExpression [204]
  [2285] Entry[2285]
  [2286] (2460)Normal[2286] let AsyncFunctionExpression = this
  [2287] (2464/2) Call[2287] access __x1__ = (CONTEXT "LexicalEnvironment")
  [2288] (2465/2) Normal[2288] let scope = __x1__
  [2289] (2469/4) Normal[2289] [! __x3__]
  [2290] (2470/5) Normal[2290] let sourceText = (get-syntax AsyncFunctionExpression)
  [2291] (2473/7) Call[2291] app __x5__ = (SetFunctionName closure name)
  [2292] (2474/7) Normal[2292] [! __x5__]
  [2293] (2461/0) Normal[2293] assert (= name absent)
  [2294] (2466/3) Call[2294] app __x2__ = (NewDeclarativeEnvironment scope)
  [2295] (2468/4) Call[2295] app __x3__ = (funcEnv.CreateImmutableBinding funcEnv name false)
  [2296] (2472/6) Normal[2296] let closure = [! __x4__]
  [2297] (2462/1) Call[2297] access __x0__ = (BindingIdentifier "StringValue")
  [2298] (2476/8) Normal[2298] [! __x6__]
  [2299] (2477/9) Normal[2299] return closure
  [2300] (2471/6) Call[2300] app __x4__ = (OrdinaryFunctionCreate INTRINSICS["%AsyncFunction.prototype%"] sourceText FormalParameters AsyncFunctionBody ~non-lexical-this~ funcEnv)
  [2301] (2467/3) Normal[2301] let funcEnv = [! __x2__]
  [2302] (2463/1) Normal[2302] name = __x0__
  [2303] Exit[2303]
  [2304] (2475/8) Call[2304] app __x6__ = (funcEnv.InitializeBinding funcEnv name closure)
Algo: AsyncFunctionExpression[0,1].IsFunctionDefinition [205]
  [2305] Entry[2305]
  [2306] (2479)Normal[2306] let AsyncFunctionExpression = this
  [2307] (2480/0) Normal[2307] return true
  [2308] Exit[2308]
Algo: AsyncFunctionStart [208]
  [2333] Entry[2333]
  [2334] (2482/0) Normal[2334] let runningContext = CONTEXT
  [2335] (2507/15) Normal[2335] append asyncContext -> EXECUTION_STACK
  [2336] (2508/15) Normal[2336] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [2337] (2483/1) Normal[2337] let asyncContext = (copy-obj runningContext)
  [2338] (2509/16) Arrow[2338] withcont __x5__ (result) = {
  if (= asyncContext.ReturnCont absent) asyncContext.ReturnCont = (new []) else {}
  append __x5__ -> asyncContext.ReturnCont
  app _ = (asyncContext.ResumeCont)
} [fid: 207]
  [2339] (2484/3) Arrow[2339] cont __x0__ = () [=>] {
  access __x1__ = (asyncFunctionBody "Evaluation")
  let result = __x1__
  RET_CONT = (pop asyncContext.ReturnCont 0i)
  if (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] asyncContext) (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) else {}
  CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  if (= result.Type ~normal~) {
    app __x2__ = (Call promiseCapability.Resolve undefined (new [undefined]))
    [! __x2__]
  } else if (= result.Type ~return~) {
    app __x3__ = (Call promiseCapability.Resolve undefined (new [result.Value]))
    [! __x3__]
  } else {
    assert (= result.Type ~throw~)
    app __x4__ = (Call promiseCapability.Reject undefined (new [result.Value]))
    [! __x4__]
  }
  app _ = (RET_CONT undefined)
} [fid: 206]
  [2340] (2516/19) Normal[2340] return undefined
  [2341] (2506/3) Normal[2341] asyncContext.ResumeCont = __x0__
  [2342] Exit[2342]
Algo: AsyncFunctionStart:3 [206]
  [2309] Entry[2309]
  [2310] (2486/4) Call[2310] access __x1__ = (asyncFunctionBody "Evaluation")
  [2311] (2490/6) Normal[2311] (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i))
  [2312] (2492/6) Normal[2312] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [2313] (2497/7) If[2313] (= result.Type ~return~)
  [2314] (2499/10) Call[2314] app __x3__ = (Call promiseCapability.Resolve undefined (new [result.Value]))
  [2315] (2502/12) Normal[2315] assert (= result.Type ~throw~)
  [2316] (2503/13) Call[2316] app __x4__ = (Call promiseCapability.Reject undefined (new [result.Value]))
  [2317] (2504/13) Normal[2317] [! __x4__]
  [2318] (2487/4) Normal[2318] let result = __x1__
  [2319] (2493/7) If[2319] (= result.Type ~normal~)
  [2320] (2496/8) Normal[2320] [! __x2__]
  [2321] (2505/14) Call[2321] app _ = (RET_CONT undefined)
  [2322] (2488/5) Normal[2322] RET_CONT = (pop asyncContext.ReturnCont 0i)
  [2323] (2500/10) Normal[2323] [! __x3__]
  [2324] (2495/8) Call[2324] app __x2__ = (Call promiseCapability.Resolve undefined (new [undefined]))
  [2325] (2489/6) If[2325] (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] asyncContext)
  [2326] Exit[2326]
Algo: AsyncFunctionStart:16 [207]
  [2327] Entry[2327]
  [2328] (2511/16) If[2328] (= asyncContext.ReturnCont absent)
  [2329] (2512/16) Normal[2329] asyncContext.ReturnCont = (new [])
  [2330] (2514/16) Normal[2330] append __x5__ -> asyncContext.ReturnCont
  [2331] (2515/16) Call[2331] app _ = (asyncContext.ResumeCont)
  [2332] Exit[2332]
Algo: AsyncGeneratorBody[0,0].EvaluateAsyncGeneratorBody [209]
  [2343] Entry[2343]
  [2344] (2518)Normal[2344] let AsyncGeneratorBody = this
  [2345] (2522/1) Normal[2345] let generator = [? __x1__]
  [2346] (2523/2) Normal[2346] generator.GeneratorBrand = ~empty~
  [2347] (2519/0) Call[2347] app __x0__ = (FunctionDeclarationInstantiation functionObject argumentsList)
  [2348] (2524/3) Call[2348] app __x2__ = (AsyncGeneratorStart generator FunctionBody)
  [2349] (2526/4) Normal[2349] return (comp[~return~] generator => ~empty~)
  [2350] Exit[2350]
  [2351] (2520/0) Normal[2351] [? __x0__]
  [2352] (2525/3) Normal[2352] [! __x2__]
  [2353] (2521/1) Call[2353] app __x1__ = (OrdinaryCreateFromConstructor functionObject "%AsyncGeneratorFunction.prototype.prototype%" (new ["AsyncGeneratorState", "AsyncGeneratorContext", "AsyncGeneratorQueue", "GeneratorBrand"]))
Algo: AsyncGeneratorBody[0,0].EvaluateBody [210]
  [2354] Entry[2354]
  [2355] (2528)Normal[2355] let AsyncGeneratorBody = this
  [2356] (2529/0) Call[2356] access __x0__ = (AsyncGeneratorBody "EvaluateAsyncGeneratorBody" functionObject argumentsList)
  [2357] (2530/0) Normal[2357] return [? __x0__]
  [2358] Exit[2358]
Algo: AsyncGeneratorDeclaration[0,0].BoundNames [211]
  [2359] Entry[2359]
  [2360] (2532)Normal[2360] let AsyncGeneratorDeclaration = this
  [2361] (2533/0) Call[2361] access __x0__ = (BindingIdentifier "BoundNames")
  [2362] (2534/0) Normal[2362] return __x0__
  [2363] Exit[2363]
Algo: AsyncGeneratorDeclaration[0,0].Contains [212]
  [2364] Entry[2364]
  [2365] (2536)Normal[2365] let AsyncGeneratorDeclaration = this
  [2366] (2537/0) Normal[2366] return false
  [2367] Exit[2367]
Algo: AsyncGeneratorDeclaration[0,0].EarlyErrors [213]
  [2368] Entry[2368]
  [2369] (2539)Normal[2369] let AsyncGeneratorDeclaration = this
  [2370] (2544/1) If[2370] (|| (= __x0__ "eval") (= __x0__ "arguments"))
  [2371] (2545/1) Normal[2371] throw SyntaxError
  [2372] (2548/2) Normal[2372] let __x1__ = true
  [2373] (2551/2) If[2373] __x1__
  [2374] (2553/2) Call[2374] access __x3__ = (FormalParameters "IsSimpleParameterList")
  [2375] (2556/2) If[2375] __x1__
  [2376] (2557/2) Normal[2376] throw SyntaxError
  [2377] (2559/3) Call[2377] access __x4__ = (FormalParameters "BoundNames")
  [2378] (2540/0) Normal[2378] ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  [2379] (2550/2) Normal[2379] __x1__ = (= __x2__ true)
  [2380] (2541/1) If[2380] (&& (! (= BindingIdentifier absent)) true)
  [2381] (2554/2) Normal[2381] __x1__ = (= __x3__ false)
  [2382] (2549/2) Call[2382] access __x2__ = (AsyncGeneratorBody "FunctionBodyContainsUseStrict")
  [2383] (2543/1) Call[2383] access __x0__ = (BindingIdentifier "StringValue")
  [2384] (2590/7) Normal[2384] throw SyntaxError
  [2385] (2592/8) Call[2385] access __x15__ = (FormalParameters "Contains" "SuperCall")
  [2386] (2569/3) Loop[2386] (< __x9__ __x7__.length)
  [2387] (2570/3) If[2387] (= __x6__[__x8__] __x7__[__x9__])
  [2388] LoopCont[2388]
  [2389] (2584/6) Call[2389] access __x13__ = (FormalParameters "Contains" "SuperProperty")
  [2390] (2585/6) If[2390] (= __x13__ true)
  [2391] (2571/3) Normal[2391] __x10__ = true
  [2392] LoopCont[2392]
  [2393] (2564/3) Normal[2393] let __x9__ = 0i
  [2394] (2565/3) Normal[2394] let __x10__ = false
  [2395] (2596/9) Call[2395] access __x16__ = (AsyncGeneratorBody "Contains" "SuperCall")
  [2396] (2597/9) If[2396] (= __x16__ true)
  [2397] (2573/3) If[2397] __x10__
  [2398] (2574/3) Normal[2398] throw SyntaxError
  [2399] (2576/4) Call[2399] access __x11__ = (FormalParameters "Contains" "YieldExpression")
  [2400] (2566/3) Loop[2400] (< __x8__ __x6__.length)
  [2401] (2578/4) Normal[2401] throw SyntaxError
  [2402] (2580/5) Call[2402] access __x12__ = (FormalParameters "Contains" "AwaitExpression")
  [2403] (2586/6) Normal[2403] throw SyntaxError
  [2404] (2588/7) Call[2404] access __x14__ = (AsyncGeneratorBody "Contains" "SuperProperty")
  [2405] (2589/7) If[2405] (= __x14__ true)
  [2406] (2594/8) Normal[2406] throw SyntaxError
  [2407] (2561/3) Normal[2407] let __x6__ = __x4__
  [2408] (2562/3) Normal[2408] let __x7__ = __x5__
  [2409] (2577/4) If[2409] (= __x11__ true)
  [2410] (2581/5) If[2410] (= __x12__ true)
  [2411] (2568/3) Normal[2411] __x9__ = 0i
  [2412] (2593/8) If[2412] (= __x15__ true)
  [2413] (2582/5) Normal[2413] throw SyntaxError
  [2414] (2598/9) Normal[2414] throw SyntaxError
  [2415] Exit[2415]
  [2416] (2563/3) Normal[2416] let __x8__ = 0i
  [2417] (2560/3) Call[2417] access __x5__ = (AsyncGeneratorBody "LexicallyDeclaredNames")
Algo: AsyncGeneratorDeclaration[0,0].InstantiateAsyncGeneratorFunctionObject [214]
  [2418] Entry[2418]
  [2419] (2601)Normal[2419] let AsyncGeneratorDeclaration = this
  [2420] (2605/2) Call[2420] app __x1__ = (OrdinaryFunctionCreate INTRINSICS["%AsyncGeneratorFunction.prototype%"] sourceText FormalParameters AsyncGeneratorBody ~non-lexical-this~ scope)
  [2421] (2606/2) Normal[2421] let F = [! __x1__]
  [2422] (2610/4) Normal[2422] let prototype = [! __x3__]
  [2423] (2611/5) Call[2423] app __x4__ = (DefinePropertyOrThrow F "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [2424] (2602/0) Call[2424] access __x0__ = (BindingIdentifier "StringValue")
  [2425] (2607/3) Call[2425] app __x2__ = (SetFunctionName F name)
  [2426] (2609/4) Call[2426] app __x3__ = (OrdinaryObjectCreate INTRINSICS["%AsyncGeneratorFunction.prototype.prototype%"])
  [2427] (2613/6) Normal[2427] return F
  [2428] Exit[2428]
  [2429] (2603/0) Normal[2429] let name = __x0__
  [2430] (2612/5) Normal[2430] [! __x4__]
  [2431] (2608/3) Normal[2431] [! __x2__]
  [2432] (2604/1) Normal[2432] let sourceText = (get-syntax AsyncGeneratorDeclaration)
Algo: AsyncGeneratorDeclaration[0,0].InstantiateFunctionObject [215]
  [2433] Entry[2433]
  [2434] (2615)Normal[2434] let AsyncGeneratorDeclaration = this
  [2435] (2616/0) Call[2435] access __x0__ = (AsyncGeneratorDeclaration "InstantiateAsyncGeneratorFunctionObject" scope)
  [2436] (2617/0) Normal[2436] return [? __x0__]
  [2437] Exit[2437]
Algo: AsyncGeneratorDeclaration[0,0].IsConstantDeclaration [216]
  [2438] Entry[2438]
  [2439] (2619)Normal[2439] let AsyncGeneratorDeclaration = this
  [2440] (2620/0) Normal[2440] return false
  [2441] Exit[2441]
Algo: AsyncGeneratorDeclaration[1,0].BoundNames [217]
  [2442] Entry[2442]
  [2443] (2622)Normal[2443] let AsyncGeneratorDeclaration = this
  [2444] (2623/0) Normal[2444] return (new ["*default*"])
  [2445] Exit[2445]
Algo: AsyncGeneratorDeclaration[1,0].Contains [218]
  [2446] Entry[2446]
  [2447] (2625)Normal[2447] let AsyncGeneratorDeclaration = this
  [2448] (2626/0) Normal[2448] return false
  [2449] Exit[2449]
Algo: AsyncGeneratorDeclaration[1,0].EarlyErrors [219]
  [2450] Entry[2450]
  [2451] (2628)Normal[2451] let AsyncGeneratorDeclaration = this
  [2452] (2633/1) If[2452] (|| (= __x0__ "eval") (= __x0__ "arguments"))
  [2453] (2634/1) Normal[2453] throw SyntaxError
  [2454] (2637/2) Normal[2454] let __x1__ = true
  [2455] (2640/2) If[2455] __x1__
  [2456] (2642/2) Call[2456] access __x3__ = (FormalParameters "IsSimpleParameterList")
  [2457] (2645/2) If[2457] __x1__
  [2458] (2646/2) Normal[2458] throw SyntaxError
  [2459] (2648/3) Call[2459] access __x4__ = (FormalParameters "BoundNames")
  [2460] (2629/0) Normal[2460] ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  [2461] (2639/2) Normal[2461] __x1__ = (= __x2__ true)
  [2462] (2630/1) If[2462] (&& (! (= BindingIdentifier absent)) true)
  [2463] (2643/2) Normal[2463] __x1__ = (= __x3__ false)
  [2464] (2638/2) Call[2464] access __x2__ = (AsyncGeneratorBody "FunctionBodyContainsUseStrict")
  [2465] (2632/1) Call[2465] access __x0__ = (BindingIdentifier "StringValue")
  [2466] (2679/7) Normal[2466] throw SyntaxError
  [2467] (2681/8) Call[2467] access __x15__ = (FormalParameters "Contains" "SuperCall")
  [2468] (2658/3) Loop[2468] (< __x9__ __x7__.length)
  [2469] (2659/3) If[2469] (= __x6__[__x8__] __x7__[__x9__])
  [2470] LoopCont[2470]
  [2471] (2673/6) Call[2471] access __x13__ = (FormalParameters "Contains" "SuperProperty")
  [2472] (2674/6) If[2472] (= __x13__ true)
  [2473] (2660/3) Normal[2473] __x10__ = true
  [2474] LoopCont[2474]
  [2475] (2653/3) Normal[2475] let __x9__ = 0i
  [2476] (2654/3) Normal[2476] let __x10__ = false
  [2477] (2685/9) Call[2477] access __x16__ = (AsyncGeneratorBody "Contains" "SuperCall")
  [2478] (2686/9) If[2478] (= __x16__ true)
  [2479] (2662/3) If[2479] __x10__
  [2480] (2663/3) Normal[2480] throw SyntaxError
  [2481] (2665/4) Call[2481] access __x11__ = (FormalParameters "Contains" "YieldExpression")
  [2482] (2655/3) Loop[2482] (< __x8__ __x6__.length)
  [2483] (2667/4) Normal[2483] throw SyntaxError
  [2484] (2669/5) Call[2484] access __x12__ = (FormalParameters "Contains" "AwaitExpression")
  [2485] (2675/6) Normal[2485] throw SyntaxError
  [2486] (2677/7) Call[2486] access __x14__ = (AsyncGeneratorBody "Contains" "SuperProperty")
  [2487] (2678/7) If[2487] (= __x14__ true)
  [2488] (2683/8) Normal[2488] throw SyntaxError
  [2489] (2650/3) Normal[2489] let __x6__ = __x4__
  [2490] (2651/3) Normal[2490] let __x7__ = __x5__
  [2491] (2666/4) If[2491] (= __x11__ true)
  [2492] (2670/5) If[2492] (= __x12__ true)
  [2493] (2657/3) Normal[2493] __x9__ = 0i
  [2494] (2682/8) If[2494] (= __x15__ true)
  [2495] (2671/5) Normal[2495] throw SyntaxError
  [2496] (2687/9) Normal[2496] throw SyntaxError
  [2497] Exit[2497]
  [2498] (2652/3) Normal[2498] let __x8__ = 0i
  [2499] (2649/3) Call[2499] access __x5__ = (AsyncGeneratorBody "LexicallyDeclaredNames")
Algo: AsyncGeneratorDeclaration[1,0].InstantiateAsyncGeneratorFunctionObject [220]
  [2500] Entry[2500]
  [2501] (2690)Normal[2501] let AsyncGeneratorDeclaration = this
  [2502] (2694/2) Call[2502] app __x1__ = (SetFunctionName F "default")
  [2503] (2695/2) Normal[2503] __x1__
  [2504] (2699/4) Normal[2504] __x3__
  [2505] (2700/5) Normal[2505] return F
  [2506] (2691/0) Normal[2506] let sourceText = (get-syntax AsyncGeneratorDeclaration)
  [2507] (2696/3) Call[2507] app __x2__ = (OrdinaryObjectCreate INTRINSICS["%AsyncGeneratorFunction.prototype.prototype%"])
  [2508] (2698/4) Call[2508] app __x3__ = (DefinePropertyOrThrow F "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [2509] (2692/1) Call[2509] app __x0__ = (OrdinaryFunctionCreate INTRINSICS["%AsyncGeneratorFunction.prototype%"] sourceText FormalParameters AsyncGeneratorBody ~non-lexical-this~ scope)
  [2510] (2697/3) Normal[2510] let prototype = [! __x2__]
  [2511] (2693/1) Normal[2511] let F = __x0__
  [2512] Exit[2512]
Algo: AsyncGeneratorDeclaration[1,0].InstantiateFunctionObject [221]
  [2513] Entry[2513]
  [2514] (2702)Normal[2514] let AsyncGeneratorDeclaration = this
  [2515] (2703/0) Call[2515] access __x0__ = (AsyncGeneratorDeclaration "InstantiateAsyncGeneratorFunctionObject" scope)
  [2516] (2704/0) Normal[2516] return [? __x0__]
  [2517] Exit[2517]
Algo: AsyncGeneratorDeclaration[1,0].IsConstantDeclaration [222]
  [2518] Entry[2518]
  [2519] (2706)Normal[2519] let AsyncGeneratorDeclaration = this
  [2520] (2707/0) Normal[2520] return false
  [2521] Exit[2521]
Algo: AsyncGeneratorEnqueue [223]
  [2522] Entry[2522]
  [2523] (2709/0) Call[2523] app __x0__ = (NewPromiseCapability INTRINSICS["%Promise%"])
  [2524] (2713/2) Call[2524] app __x2__ = (IsAbruptCompletion check)
  [2525] (2714/2) If[2525] __x2__
  [2526] (2719/5) Normal[2526] return promiseCapability.Promise
  [2527] (2721/6) Normal[2527] let queue = generator.AsyncGeneratorQueue
  [2528] (2724/9) Normal[2528] let state = generator.AsyncGeneratorState
  [2529] (2725/10) If[2529] (! (= state ~executing~))
  [2530] (2710/0) Normal[2530] let promiseCapability = [! __x0__]
  [2531] (2716/3) Normal[2531] let badGeneratorError = (new OrdinaryObject("Prototype" -> INTRINSICS["%TypeError.prototype%"], "ErrorData" -> undefined))
  [2532] (2718/4) Normal[2532] [! __x3__]
  [2533] (2723/8) Normal[2533] append request -> queue
  [2534] (2711/1) Call[2534] app __x1__ = (AsyncGeneratorValidate generator generatorBrand)
  [2535] (2728/11) Normal[2535] [! __x4__]
  [2536] (2730/12) Normal[2536] return promiseCapability.Promise
  [2537] (2722/7) Normal[2537] let request = (new AsyncGeneratorRequest("Completion" -> completion, "Capability" -> promiseCapability))
  [2538] (2717/4) Call[2538] app __x3__ = (Call promiseCapability.Reject undefined (new [badGeneratorError]))
  [2539] (2712/1) Normal[2539] let check = __x1__
  [2540] Exit[2540]
  [2541] (2727/11) Call[2541] app __x4__ = (AsyncGeneratorResumeNext generator)
Algo: AsyncGeneratorExpression[0,0].Contains [224]
  [2542] Entry[2542]
  [2543] (2732)Normal[2543] let AsyncGeneratorExpression = this
  [2544] (2733/0) Normal[2544] return false
  [2545] Exit[2545]
Algo: AsyncGeneratorExpression[0,0].EarlyErrors [225]
  [2546] Entry[2546]
  [2547] (2735)Normal[2547] let AsyncGeneratorExpression = this
  [2548] (2740/1) If[2548] (|| (= __x0__ "eval") (= __x0__ "arguments"))
  [2549] (2741/1) Normal[2549] throw SyntaxError
  [2550] (2744/2) Normal[2550] let __x1__ = true
  [2551] (2747/2) If[2551] __x1__
  [2552] (2749/2) Call[2552] access __x3__ = (FormalParameters "IsSimpleParameterList")
  [2553] (2752/2) If[2553] __x1__
  [2554] (2753/2) Normal[2554] throw SyntaxError
  [2555] (2755/3) Call[2555] access __x4__ = (FormalParameters "BoundNames")
  [2556] (2736/0) Normal[2556] ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  [2557] (2746/2) Normal[2557] __x1__ = (= __x2__ true)
  [2558] (2737/1) If[2558] (&& (! (= BindingIdentifier absent)) true)
  [2559] (2750/2) Normal[2559] __x1__ = (= __x3__ false)
  [2560] (2745/2) Call[2560] access __x2__ = (AsyncGeneratorBody "FunctionBodyContainsUseStrict")
  [2561] (2739/1) Call[2561] access __x0__ = (BindingIdentifier "StringValue")
  [2562] (2786/7) Normal[2562] throw SyntaxError
  [2563] (2788/8) Call[2563] access __x15__ = (FormalParameters "Contains" "SuperCall")
  [2564] (2765/3) Loop[2564] (< __x9__ __x7__.length)
  [2565] (2766/3) If[2565] (= __x6__[__x8__] __x7__[__x9__])
  [2566] LoopCont[2566]
  [2567] (2780/6) Call[2567] access __x13__ = (FormalParameters "Contains" "SuperProperty")
  [2568] (2781/6) If[2568] (= __x13__ true)
  [2569] (2767/3) Normal[2569] __x10__ = true
  [2570] LoopCont[2570]
  [2571] (2760/3) Normal[2571] let __x9__ = 0i
  [2572] (2761/3) Normal[2572] let __x10__ = false
  [2573] (2792/9) Call[2573] access __x16__ = (AsyncGeneratorBody "Contains" "SuperCall")
  [2574] (2793/9) If[2574] (= __x16__ true)
  [2575] (2769/3) If[2575] __x10__
  [2576] (2770/3) Normal[2576] throw SyntaxError
  [2577] (2772/4) Call[2577] access __x11__ = (FormalParameters "Contains" "YieldExpression")
  [2578] (2762/3) Loop[2578] (< __x8__ __x6__.length)
  [2579] (2774/4) Normal[2579] throw SyntaxError
  [2580] (2776/5) Call[2580] access __x12__ = (FormalParameters "Contains" "AwaitExpression")
  [2581] (2782/6) Normal[2581] throw SyntaxError
  [2582] (2784/7) Call[2582] access __x14__ = (AsyncGeneratorBody "Contains" "SuperProperty")
  [2583] (2785/7) If[2583] (= __x14__ true)
  [2584] (2790/8) Normal[2584] throw SyntaxError
  [2585] (2757/3) Normal[2585] let __x6__ = __x4__
  [2586] (2758/3) Normal[2586] let __x7__ = __x5__
  [2587] (2773/4) If[2587] (= __x11__ true)
  [2588] (2777/5) If[2588] (= __x12__ true)
  [2589] (2764/3) Normal[2589] __x9__ = 0i
  [2590] (2789/8) If[2590] (= __x15__ true)
  [2591] (2778/5) Normal[2591] throw SyntaxError
  [2592] (2794/9) Normal[2592] throw SyntaxError
  [2593] Exit[2593]
  [2594] (2759/3) Normal[2594] let __x8__ = 0i
  [2595] (2756/3) Call[2595] access __x5__ = (AsyncGeneratorBody "LexicallyDeclaredNames")
Algo: AsyncGeneratorExpression[0,0].Evaluation [226]
  [2596] Entry[2596]
  [2597] (2797)Normal[2597] let AsyncGeneratorExpression = this
  [2598] (2798/0) Call[2598] access __x0__ = (AsyncGeneratorExpression "InstantiateAsyncGeneratorFunctionExpression")
  [2599] (2799/0) Normal[2599] return __x0__
  [2600] Exit[2600]
Algo: AsyncGeneratorExpression[0,0].HasName [227]
  [2601] Entry[2601]
  [2602] (2801)Normal[2602] let AsyncGeneratorExpression = this
  [2603] (2802/0) Normal[2603] return false
  [2604] Exit[2604]
Algo: AsyncGeneratorExpression[0,0].InstantiateAsyncGeneratorFunctionExpression [228]
  [2605] Entry[2605]
  [2606] (2804)Normal[2606] let AsyncGeneratorExpression = this
  [2607] (2809/1) Normal[2607] let scope = __x0__
  [2608] (2810/2) Normal[2608] let sourceText = (get-syntax AsyncGeneratorExpression)
  [2609] (2814/4) Normal[2609] __x2__
  [2610] (2815/5) Call[2610] app __x3__ = (OrdinaryObjectCreate INTRINSICS["%AsyncGeneratorFunction.prototype.prototype%"])
  [2611] (2818/6) Normal[2611] [! __x4__]
  [2612] (2819/7) Normal[2612] return closure
  [2613] (2805/0) If[2613] (= name absent)
  [2614] (2811/3) Call[2614] app __x1__ = (OrdinaryFunctionCreate INTRINSICS["%AsyncGeneratorFunction.prototype%"] sourceText FormalParameters AsyncGeneratorBody ~non-lexical-this~ scope)
  [2615] (2813/4) Call[2615] app __x2__ = (SetFunctionName closure name)
  [2616] (2817/6) Call[2616] app __x4__ = (DefinePropertyOrThrow closure "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [2617] (2806/0) Normal[2617] name = ""
  [2618] (2808/1) Call[2618] access __x0__ = (CONTEXT "LexicalEnvironment")
  [2619] (2816/5) Normal[2619] let prototype = [! __x3__]
  [2620] (2812/3) Normal[2620] let closure = [! __x1__]
  [2621] Exit[2621]
Algo: AsyncGeneratorExpression[0,0].IsFunctionDefinition [229]
  [2622] Entry[2622]
  [2623] (2821)Normal[2623] let AsyncGeneratorExpression = this
  [2624] (2822/0) Normal[2624] return true
  [2625] Exit[2625]
Algo: AsyncGeneratorExpression[0,0].NamedEvaluation [230]
  [2626] Entry[2626]
  [2627] (2824)Normal[2627] let AsyncGeneratorExpression = this
  [2628] (2825/0) Call[2628] access __x0__ = (AsyncGeneratorExpression "InstantiateAsyncGeneratorFunctionExpression" name)
  [2629] (2826/0) Normal[2629] return __x0__
  [2630] Exit[2630]
Algo: AsyncGeneratorExpression[0,1].Contains [231]
  [2631] Entry[2631]
  [2632] (2828)Normal[2632] let AsyncGeneratorExpression = this
  [2633] (2829/0) Normal[2633] return false
  [2634] Exit[2634]
Algo: AsyncGeneratorExpression[0,1].EarlyErrors [232]
  [2635] Entry[2635]
  [2636] (2831)Normal[2636] let AsyncGeneratorExpression = this
  [2637] (2836/1) If[2637] (|| (= __x0__ "eval") (= __x0__ "arguments"))
  [2638] (2837/1) Normal[2638] throw SyntaxError
  [2639] (2840/2) Normal[2639] let __x1__ = true
  [2640] (2843/2) If[2640] __x1__
  [2641] (2845/2) Call[2641] access __x3__ = (FormalParameters "IsSimpleParameterList")
  [2642] (2848/2) If[2642] __x1__
  [2643] (2849/2) Normal[2643] throw SyntaxError
  [2644] (2851/3) Call[2644] access __x4__ = (FormalParameters "BoundNames")
  [2645] (2832/0) Normal[2645] ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  [2646] (2842/2) Normal[2646] __x1__ = (= __x2__ true)
  [2647] (2833/1) If[2647] (&& (! (= BindingIdentifier absent)) true)
  [2648] (2846/2) Normal[2648] __x1__ = (= __x3__ false)
  [2649] (2841/2) Call[2649] access __x2__ = (AsyncGeneratorBody "FunctionBodyContainsUseStrict")
  [2650] (2835/1) Call[2650] access __x0__ = (BindingIdentifier "StringValue")
  [2651] (2882/7) Normal[2651] throw SyntaxError
  [2652] (2884/8) Call[2652] access __x15__ = (FormalParameters "Contains" "SuperCall")
  [2653] (2861/3) Loop[2653] (< __x9__ __x7__.length)
  [2654] (2862/3) If[2654] (= __x6__[__x8__] __x7__[__x9__])
  [2655] LoopCont[2655]
  [2656] (2876/6) Call[2656] access __x13__ = (FormalParameters "Contains" "SuperProperty")
  [2657] (2877/6) If[2657] (= __x13__ true)
  [2658] (2863/3) Normal[2658] __x10__ = true
  [2659] LoopCont[2659]
  [2660] (2856/3) Normal[2660] let __x9__ = 0i
  [2661] (2857/3) Normal[2661] let __x10__ = false
  [2662] (2888/9) Call[2662] access __x16__ = (AsyncGeneratorBody "Contains" "SuperCall")
  [2663] (2889/9) If[2663] (= __x16__ true)
  [2664] (2865/3) If[2664] __x10__
  [2665] (2866/3) Normal[2665] throw SyntaxError
  [2666] (2868/4) Call[2666] access __x11__ = (FormalParameters "Contains" "YieldExpression")
  [2667] (2858/3) Loop[2667] (< __x8__ __x6__.length)
  [2668] (2870/4) Normal[2668] throw SyntaxError
  [2669] (2872/5) Call[2669] access __x12__ = (FormalParameters "Contains" "AwaitExpression")
  [2670] (2878/6) Normal[2670] throw SyntaxError
  [2671] (2880/7) Call[2671] access __x14__ = (AsyncGeneratorBody "Contains" "SuperProperty")
  [2672] (2881/7) If[2672] (= __x14__ true)
  [2673] (2886/8) Normal[2673] throw SyntaxError
  [2674] (2853/3) Normal[2674] let __x6__ = __x4__
  [2675] (2854/3) Normal[2675] let __x7__ = __x5__
  [2676] (2869/4) If[2676] (= __x11__ true)
  [2677] (2873/5) If[2677] (= __x12__ true)
  [2678] (2860/3) Normal[2678] __x9__ = 0i
  [2679] (2885/8) If[2679] (= __x15__ true)
  [2680] (2874/5) Normal[2680] throw SyntaxError
  [2681] (2890/9) Normal[2681] throw SyntaxError
  [2682] Exit[2682]
  [2683] (2855/3) Normal[2683] let __x8__ = 0i
  [2684] (2852/3) Call[2684] access __x5__ = (AsyncGeneratorBody "LexicallyDeclaredNames")
Algo: AsyncGeneratorExpression[0,1].Evaluation [233]
  [2685] Entry[2685]
  [2686] (2893)Normal[2686] let AsyncGeneratorExpression = this
  [2687] (2894/0) Call[2687] access __x0__ = (AsyncGeneratorExpression "InstantiateAsyncGeneratorFunctionExpression")
  [2688] (2895/0) Normal[2688] return __x0__
  [2689] Exit[2689]
Algo: AsyncGeneratorExpression[0,1].HasName [234]
  [2690] Entry[2690]
  [2691] (2897)Normal[2691] let AsyncGeneratorExpression = this
  [2692] (2898/0) Normal[2692] return true
  [2693] Exit[2693]
Algo: AsyncGeneratorExpression[0,1].InstantiateAsyncGeneratorFunctionExpression [235]
  [2694] Entry[2694]
  [2695] (2900)Normal[2695] let AsyncGeneratorExpression = this
  [2696] (2904/2) Normal[2696] let scope = CONTEXT.LexicalEnvironment
  [2697] (2905/3) Call[2697] app __x1__ = (NewDeclarativeEnvironment scope)
  [2698] (2909/5) Normal[2698] let sourceText = (get-syntax AsyncGeneratorExpression)
  [2699] (2910/6) Call[2699] app __x3__ = (OrdinaryFunctionCreate INTRINSICS["%AsyncGeneratorFunction.prototype%"] sourceText FormalParameters AsyncGeneratorBody ~non-lexical-this~ funcEnv)
  [2700] (2913/7) Normal[2700] [! __x4__]
  [2701] (2914/8) Call[2701] app __x5__ = (OrdinaryObjectCreate INTRINSICS["%AsyncGeneratorFunction.prototype.prototype%"])
  [2702] (2919/10) Normal[2702] [! __x7__]
  [2703] (2920/11) Normal[2703] return closure
  [2704] (2901/0) Normal[2704] assert (= name absent)
  [2705] (2906/3) Normal[2705] let funcEnv = [! __x1__]
  [2706] Exit[2706]
  [2707] (2908/4) Normal[2707] [! __x2__]
  [2708] (2912/7) Call[2708] app __x4__ = (SetFunctionName closure name)
  [2709] (2902/1) Call[2709] access __x0__ = (BindingIdentifier "StringValue")
  [2710] (2916/9) Call[2710] app __x6__ = (DefinePropertyOrThrow closure "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [2711] (2917/9) Normal[2711] [! __x6__]
  [2712] (2911/6) Normal[2712] let closure = [! __x3__]
  [2713] (2907/4) Call[2713] app __x2__ = (funcEnv.CreateImmutableBinding funcEnv name false)
  [2714] (2903/1) Normal[2714] name = __x0__
  [2715] (2918/10) Call[2715] app __x7__ = (funcEnv.InitializeBinding funcEnv name closure)
  [2716] (2915/8) Normal[2716] let prototype = [! __x5__]
Algo: AsyncGeneratorExpression[0,1].IsFunctionDefinition [236]
  [2717] Entry[2717]
  [2718] (2922)Normal[2718] let AsyncGeneratorExpression = this
  [2719] (2923/0) Normal[2719] return true
  [2720] Exit[2720]
Algo: AsyncGeneratorMethod[0,0].ComputedPropertyContains [237]
  [2721] Entry[2721]
  [2722] (2925)Normal[2722] let AsyncGeneratorMethod = this
  [2723] (2926/0) Call[2723] access __x0__ = (PropertyName "ComputedPropertyContains" symbol)
  [2724] (2927/0) Normal[2724] return __x0__
  [2725] Exit[2725]
Algo: AsyncGeneratorMethod[0,0].EarlyErrors [238]
  [2726] Entry[2726]
  [2727] (2929)Normal[2727] let AsyncGeneratorMethod = this
  [2728] (2934/1) Call[2728] access __x1__ = (UniqueFormalParameters "Contains" "YieldExpression")
  [2729] (2935/1) If[2729] (= __x1__ true)
  [2730] (2940/2) Normal[2730] throw SyntaxError
  [2731] (2942/3) Normal[2731] let __x3__ = true
  [2732] (2945/3) If[2732] __x3__
  [2733] (2947/3) Call[2733] access __x5__ = (UniqueFormalParameters "IsSimpleParameterList")
  [2734] (2950/3) If[2734] __x3__
  [2735] (2930/0) Call[2735] access __x0__ = (AsyncGeneratorMethod "HasDirectSuper")
  [2736] (2936/1) Normal[2736] throw SyntaxError
  [2737] (2938/2) Call[2737] access __x2__ = (UniqueFormalParameters "Contains" "AwaitExpression")
  [2738] (2939/2) If[2738] (= __x2__ true)
  [2739] (2944/3) Normal[2739] __x3__ = (= __x4__ true)
  [2740] (2931/0) If[2740] (= __x0__ true)
  [2741] (2943/3) Call[2741] access __x4__ = (AsyncGeneratorBody "FunctionBodyContainsUseStrict")
  [2742] (2932/0) Normal[2742] throw SyntaxError
  [2743] (2951/3) Normal[2743] throw SyntaxError
  [2744] (2953/4) Call[2744] access __x6__ = (UniqueFormalParameters "BoundNames")
  [2745] (2948/3) Normal[2745] __x3__ = (= __x5__ false)
  [2746] (2958/4) Normal[2746] let __x11__ = 0i
  [2747] (2959/4) Normal[2747] let __x12__ = false
  [2748] (2960/4) Loop[2748] (< __x10__ __x8__.length)
  [2749] (2954/4) Call[2749] access __x7__ = (AsyncGeneratorBody "LexicallyDeclaredNames")
  [2750] (2955/4) Normal[2750] let __x8__ = __x6__
  [2751] (2964/4) If[2751] (= __x8__[__x10__] __x9__[__x11__])
  [2752] (2965/4) Normal[2752] __x12__ = true
  [2753] LoopCont[2753]
  [2754] (2963/4) Loop[2754] (< __x11__ __x9__.length)
  [2755] LoopCont[2755]
  [2756] (2956/4) Normal[2756] let __x9__ = __x7__
  [2757] (2967/4) If[2757] __x12__
  [2758] (2968/4) Normal[2758] throw SyntaxError
  [2759] Exit[2759]
  [2760] (2957/4) Normal[2760] let __x10__ = 0i
  [2761] (2962/4) Normal[2761] __x11__ = 0i
Algo: AsyncGeneratorMethod[0,0].HasDirectSuper [239]
  [2762] Entry[2762]
  [2763] (2971)Normal[2763] let AsyncGeneratorMethod = this
  [2764] (2976/1) Call[2764] access __x1__ = (AsyncGeneratorBody "Contains" "SuperCall")
  [2765] (2977/1) Normal[2765] return __x1__
  [2766] (2972/0) Call[2766] access __x0__ = (UniqueFormalParameters "Contains" "SuperCall")
  [2767] Exit[2767]
  [2768] (2973/0) If[2768] (= __x0__ true)
  [2769] (2974/0) Normal[2769] return true
Algo: AsyncGeneratorMethod[0,0].MethodDefinitionEvaluation [240]
  [2770] Entry[2770]
  [2771] (2979)Normal[2771] let AsyncGeneratorMethod = this
  [2772] (2983/2) Normal[2772] let scope = CONTEXT.LexicalEnvironment
  [2773] (2984/3) Normal[2773] let sourceText = (get-syntax AsyncGeneratorMethod)
  [2774] (2988/5) Normal[2774] [! __x2__]
  [2775] (2989/6) Call[2775] app __x3__ = (SetFunctionName closure propKey)
  [2776] (2992/7) Normal[2776] let prototype = [! __x4__]
  [2777] (2993/8) Call[2777] app __x5__ = (DefinePropertyOrThrow closure "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [2778] (2980/0) Call[2778] access __x0__ = (PropertyName "Evaluation")
  [2779] (2985/4) Call[2779] app __x1__ = (OrdinaryFunctionCreate INTRINSICS["%AsyncGeneratorFunction.prototype%"] sourceText UniqueFormalParameters AsyncGeneratorBody ~non-lexical-this~ scope)
  [2780] (2987/5) Call[2780] app __x2__ = (MakeMethod closure object)
  [2781] (2991/7) Call[2781] app __x4__ = (OrdinaryObjectCreate INTRINSICS["%AsyncGeneratorFunction.prototype.prototype%"])
  [2782] (2981/0) Normal[2782] let propKey = __x0__
  [2783] (2995/9) Normal[2783] let desc = (new PropertyDescriptor("Value" -> closure, "Writable" -> true, "Enumerable" -> enumerable, "Configurable" -> true))
  [2784] (2996/10) Call[2784] app __x6__ = (DefinePropertyOrThrow object propKey desc)
  [2785] (2990/6) Normal[2785] [! __x3__]
  [2786] (2986/4) Normal[2786] let closure = [! __x1__]
  [2787] (2982/1) Normal[2787] [? propKey]
  [2788] (2997/10) Normal[2788] return [? __x6__]
  [2789] (2994/8) Normal[2789] [! __x5__]
  [2790] Exit[2790]
Algo: AsyncGeneratorMethod[0,0].PropName [241]
  [2791] Entry[2791]
  [2792] (2999)Normal[2792] let AsyncGeneratorMethod = this
  [2793] (3000/0) Call[2793] access __x0__ = (PropertyName "PropName")
  [2794] (3001/0) Normal[2794] return __x0__
  [2795] Exit[2795]
Algo: AsyncGeneratorMethod[0,0].PropertyDefinitionEvaluation [242]
  [2796] Entry[2796]
  [2797] (3003)Normal[2797] let AsyncGeneratorMethod = this
  [2798] (3004/0) Call[2798] access __x0__ = (AsyncGeneratorMethod "MethodDefinitionEvaluation" object enumerable)
  [2799] (3005/0) Normal[2799] return [? __x0__]
  [2800] Exit[2800]
Algo: AsyncGeneratorReject [243]
  [2801] Entry[2801]
  [2802] (3007/1) Normal[2802] let queue = generator.AsyncGeneratorQueue
  [2803] (3011/5) Normal[2803] let promiseCapability = next.Capability
  [2804] (3012/6) Call[2804] app __x1__ = (Call promiseCapability.Reject undefined (new [exception]))
  [2805] (3016/8) Normal[2805] return undefined
  [2806] Exit[2806]
  [2807] (3008/2) Normal[2807] assert (< 0i queue.length)
  [2808] (3013/6) Normal[2808] [! __x1__]
  [2809] (3015/7) Normal[2809] [! __x2__]
  [2810] (3009/3) Normal[2810] let next = queue[0i]
  [2811] (3014/7) Call[2811] app __x2__ = (AsyncGeneratorResumeNext generator)
  [2812] (3010/4) Normal[2812] let __x0__ = (pop queue 0i)
Algo: AsyncGeneratorResolve [244]
  [2813] Entry[2813]
  [2814] (3018/1) Normal[2814] let queue = generator.AsyncGeneratorQueue
  [2815] (3022/5) Normal[2815] let promiseCapability = next.Capability
  [2816] (3023/6) Call[2816] app __x1__ = (CreateIterResultObject value done)
  [2817] (3027/8) Call[2817] app __x3__ = (AsyncGeneratorResumeNext generator)
  [2818] (3028/8) Normal[2818] [! __x3__]
  [2819] (3019/2) Normal[2819] assert (< 0i queue.length)
  [2820] (3024/6) Normal[2820] let iteratorResult = [! __x1__]
  [2821] (3026/7) Normal[2821] [! __x2__]
  [2822] (3020/3) Normal[2822] let next = queue[0i]
  [2823] (3029/9) Normal[2823] return undefined
  [2824] Exit[2824]
  [2825] (3025/7) Call[2825] app __x2__ = (Call promiseCapability.Resolve undefined (new [iteratorResult]))
  [2826] (3021/4) Normal[2826] let __x0__ = (pop queue 0i)
Algo: AsyncGeneratorResumeNext [246]
  [2833] Entry[2833]
  [2834] (3031/1) Normal[2834] let state = generator.AsyncGeneratorState
  [2835] (3036/4) Normal[2835] let queue = generator.AsyncGeneratorQueue
  [2836] (3037/5) If[2836] (= queue.length 0i)
  [2837] (3042/9) Call[2837] app __x0__ = (IsAbruptCompletion completion)
  [2838] (3043/9) If[2838] __x0__
  [2839] (3048/12) Normal[2839] state = ~completed~
  [2840] (3050/13) If[2840] (= state ~completed~)
  [2841] (3032/2) Normal[2841] assert (! (= state ~executing~))
  [2842] (3038/5) Normal[2842] return undefined
  [2843] (3040/6) Normal[2843] let next = queue[0i]
  [2844] (3041/8) Normal[2844] let completion = next.Completion
  [2845] (3033/3) If[2845] (= state ~awaiting-return~)
  [2846] (3045/10) If[2846] (= state ~suspendedStart~)
  [2847] (3047/11) Normal[2847] generator.AsyncGeneratorState = ~completed~
  [2848] (3034/3) Normal[2848] return undefined
  [2849] (3082/34) Normal[2849] let callerContext = CONTEXT
  [2850] (3083/35) Normal[2850] CONTEXT = null
  [2851] (3060/20) Normal[2851] onFulfilled.Generator = generator
  [2852] (3061/21) Normal[2852] let stepsRejected = ALGORITHM["GLOBAL.AsyncGeneratorResumeNextReturnProcessorRejectedFunctions"]
  [2853] (3075/9) If[2853] (= state ~completed~)
  [2854] (3077/14) Call[2854] app __x6__ = (AsyncGeneratorResolve generator undefined true)
  [2855] (3080/32) Normal[2855] assert (|| (= state ~suspendedStart~) (= state ~suspendedYield~))
  [2856] (3062/22) Normal[2856] let lengthRejected = 1i
  [2857] (3056/17) Normal[2857] let stepsFulfilled = ALGORITHM["GLOBAL.AsyncGeneratorResumeNextReturnProcessorFulfilledFunctions"]
  [2858] (3057/18) Normal[2858] let lengthFulfilled = 1i
  [2859] (3086/37) Normal[2859] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [2860] (3087/38) Arrow[2860] withcont __x7__ (result) = {
  if (= genContext.ReturnCont absent) genContext.ReturnCont = (new []) else {}
  append __x7__ -> genContext.ReturnCont
  app _ = (genContext.ResumeCont completion)
} [fid: 245]
  [2861] (3065/24) Normal[2861] onRejected.Generator = generator
  [2862] (3066/25) Call[2862] app __x4__ = (PerformPromiseThen promise onFulfilled onRejected)
  [2863] (3058/19) Call[2863] app __x2__ = (CreateBuiltinFunction stepsFulfilled lengthFulfilled "" (new ["Generator"]))
  [2864] (3070/28) Normal[2864] assert (= completion.Type ~throw~)
  [2865] (3071/29) Call[2865] app __x5__ = (AsyncGeneratorReject generator completion.Value)
  [2866] (3064/23) Normal[2866] let onRejected = [! __x3__]
  [2867] (3078/14) Normal[2867] return [! __x6__]
  [2868] (3081/33) Normal[2868] let genContext = generator.AsyncGeneratorContext
  [2869] (3085/37) Normal[2869] append genContext -> EXECUTION_STACK
  [2870] (3053/15) Normal[2870] generator.AsyncGeneratorState = ~awaiting-return~
  [2871] (3054/16) Call[2871] app __x1__ = (PromiseResolve INTRINSICS["%Promise%"] completion.Value)
  [2872] (3068/26) Normal[2872] return undefined
  [2873] (3072/29) Normal[2873] [! __x5__]
  [2874] (3059/19) Normal[2874] let onFulfilled = [! __x2__]
  [2875] (3084/36) Normal[2875] generator.AsyncGeneratorState = ~executing~
  [2876] (3063/23) Call[2876] app __x3__ = (CreateBuiltinFunction stepsRejected lengthRejected "" (new ["Generator"]))
  [2877] (3073/30) Normal[2877] return undefined
  [2878] (3094/41) Normal[2878] return undefined
  [2879] Exit[2879]
  [2880] (3055/16) Normal[2880] let promise = [? __x1__]
  [2881] (3051/14) If[2881] (= completion.Type ~return~)
  [2882] (3067/25) Normal[2882] [! __x4__]
Algo: AsyncGeneratorResumeNext:38 [245]
  [2827] Entry[2827]
  [2828] (3089/38) If[2828] (= genContext.ReturnCont absent)
  [2829] (3090/38) Normal[2829] genContext.ReturnCont = (new [])
  [2830] (3092/38) Normal[2830] append __x7__ -> genContext.ReturnCont
  [2831] (3093/38) Call[2831] app _ = (genContext.ResumeCont completion)
  [2832] Exit[2832]
Algo: AsyncGeneratorStart [248]
  [2903] Entry[2903]
  [2904] (3096/1) Normal[2904] assert (= generator.AsyncGeneratorState undefined)
  [2905] (3125/4) Normal[2905] genContext.ResumeCont = __x0__
  [2906] (3126/19) Normal[2906] generator.AsyncGeneratorContext = genContext
  [2907] (3097/2) Normal[2907] let genContext = CONTEXT
  [2908] (3127/20) Normal[2908] generator.AsyncGeneratorState = ~suspendedStart~
  [2909] (3129/22) Normal[2909] return undefined
  [2910] Exit[2910]
  [2911] (3098/3) Normal[2911] genContext.Generator = generator
  [2912] (3128/21) Normal[2912] generator.AsyncGeneratorQueue = (new [])
  [2913] (3099/4) Arrow[2913] cont __x0__ = () [=>] {
  if (= (typeof generatorBody) "AST") {
    access __x1__ = (generatorBody "Evaluation")
    let result = __x1__
  } else {
    app __x2__ = (generatorBody)
    let result = __x2__
  }
  RET_CONT = (pop genContext.ReturnCont 0i)
  if (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] genContext) (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) else {}
  CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  generator.AsyncGeneratorState = ~completed~
  if (&& (is-completion result) (= result.Type ~normal~)) let resultValue = undefined else {
    let resultValue = result.Value
    if (! (= result.Type ~return~)) {
      app __x3__ = (AsyncGeneratorReject generator resultValue)
      app _ = (RET_CONT [! __x3__])
    } else {}
  }
  app __x4__ = (AsyncGeneratorResolve generator resultValue true)
  app _ = (RET_CONT [! __x4__])
} [fid: 247]
Algo: AsyncGeneratorStart:4 [247]
  [2883] Entry[2883]
  [2884] (3101/5) If[2884] (= (typeof generatorBody) "AST")
  [2885] (3107/9) Normal[2885] let result = __x2__
  [2886] (3108/10) Normal[2886] RET_CONT = (pop genContext.ReturnCont 0i)
  [2887] (3113/12) Normal[2887] generator.AsyncGeneratorState = ~completed~
  [2888] (3114/13) If[2888] (&& (is-completion result) (= result.Type ~normal~))
  [2889] (3118/16) If[2889] (! (= result.Type ~return~))
  [2890] (3120/17) Call[2890] app __x3__ = (AsyncGeneratorReject generator resultValue)
  [2891] (3123/18) Call[2891] app __x4__ = (AsyncGeneratorResolve generator resultValue true)
  [2892] (3103/6) Call[2892] access __x1__ = (generatorBody "Evaluation")
  [2893] (3106/9) Call[2893] app __x2__ = (generatorBody)
  [2894] (3109/11) If[2894] (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] genContext)
  [2895] (3112/11) Normal[2895] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [2896] (3117/15) Normal[2896] let resultValue = result.Value
  [2897] (3104/6) Normal[2897] let result = __x1__
  [2898] (3124/18) Call[2898] app _ = (RET_CONT [! __x4__])
  [2899] (3115/13) Normal[2899] let resultValue = undefined
  [2900] (3110/11) Normal[2900] (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i))
  [2901] Exit[2901]
  [2902] (3121/17) Call[2902] app _ = (RET_CONT [! __x3__])
Algo: AsyncGeneratorValidate [249]
  [2914] Entry[2914]
  [2915] (3131/0) Call[2915] app __x0__ = (RequireInternalSlot generator "AsyncGeneratorContext")
  [2916] (3135/2) Call[2916] app __x2__ = (RequireInternalSlot generator "AsyncGeneratorQueue")
  [2917] (3136/2) Normal[2917] [? __x2__]
  [2918] (3132/0) Normal[2918] [? __x0__]
  [2919] (3137/3) If[2919] (! (= generator.GeneratorBrand generatorBrand))
  [2920] (3133/1) Call[2920] app __x1__ = (RequireInternalSlot generator "AsyncGeneratorState")
  [2921] (3138/3) Normal[2921] throw TypeError
  [2922] Exit[2922]
  [2923] (3134/1) Normal[2923] [? __x1__]
Algo: AsyncGeneratorYield [251]
  [2934] Entry[2934]
  [2935] (3141/0) Normal[2935] let genContext = CONTEXT
  [2936] (3145/4) Call[2936] app __x1__ = (Await value)
  [2937] (3146/4) Normal[2937] value = [? __x1__]
  [2938] (3151/6) Normal[2938] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [2939] (3152/7) Arrow[2939] cont __x2__ = (resumptionValue) [=>] {
  if (! (= resumptionValue.Type ~return~)) return resumptionValue else {}
  app __x3__ = (Await resumptionValue.Value)
  let awaited = __x3__
  if (= awaited.Type ~throw~) return awaited else {}
  assert (= awaited.Type ~normal~)
  return (comp[~return~] awaited.Value => ~empty~)
} [fid: 250]
  [2940] (3166/15) Call[2940] app _ = ((pop genContext.ReturnCont 0i) [! __x4__])
  [2941] Exit[2941]
  [2942] (3142/2) Normal[2942] let generator = genContext.Generator
  [2943] (3147/5) Normal[2943] generator.AsyncGeneratorState = ~suspendedYield~
  [2944] (3149/6) Normal[2944] (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i))
  [2945] (3165/15) Call[2945] app __x4__ = (AsyncGeneratorResolve generator value false)
  [2946] (3143/3) Call[2946] app __x0__ = (GetGeneratorKind)
  [2947] (3164/7) Normal[2947] genContext.ResumeCont = __x2__
  [2948] (3148/6) If[2948] (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] genContext)
  [2949] (3144/3) Normal[2949] assert (= __x0__ ~async~)
Algo: AsyncGeneratorYield:7 [250]
  [2924] Entry[2924]
  [2925] (3154/8) If[2925] (! (= resumptionValue.Type ~return~))
  [2926] (3159/10) If[2926] (= awaited.Type ~throw~)
  [2927] (3160/10) Normal[2927] return awaited
  [2928] (3162/11) Normal[2928] assert (= awaited.Type ~normal~)
  [2929] (3155/8) Normal[2929] return resumptionValue
  [2930] (3157/9) Call[2930] app __x3__ = (Await resumptionValue.Value)
  [2931] (3163/12) Normal[2931] return (comp[~return~] awaited.Value => ~empty~)
  [2932] (3158/9) Normal[2932] let awaited = __x3__
  [2933] Exit[2933]
Algo: AsyncIteratorClose [252]
  [2950] Entry[2950]
  [2951] (3168/0) Normal[2951] assert (= (typeof iteratorRecord.Iterator) Object)
  [2952] (3172/3) Normal[2952] let innerResult = __x0__
  [2953] (3173/4) If[2953] (= innerResult.Type ~normal~)
  [2954] (3179/7) Call[2954] app __x1__ = (Call return iterator)
  [2955] (3180/7) Normal[2955] innerResult = __x1__
  [2956] (3184/8) Normal[2956] innerResult = __x2__
  [2957] (3187/9) If[2957] (= completion.Type ~throw~)
  [2958] (3194/11) Normal[2958] throw TypeError
  [2959] (3196/12) Normal[2959] return completion
  [2960] (3169/1) Normal[2960] assert (is-completion completion)
  [2961] (3175/5) Normal[2961] let return = innerResult.Value
  [2962] Exit[2962]
  [2963] (3177/6) Normal[2963] return completion
  [2964] (3183/8) Call[2964] app __x2__ = (Await innerResult.Value)
  [2965] (3170/2) Normal[2965] let iterator = iteratorRecord.Iterator
  [2966] (3190/10) If[2966] (= innerResult.Type ~throw~)
  [2967] (3191/10) Normal[2967] return innerResult
  [2968] (3193/11) If[2968] (! (= (typeof innerResult.Value) Object))
  [2969] (3181/8) If[2969] (= innerResult.Type ~normal~)
  [2970] (3176/6) If[2970] (= return undefined)
  [2971] (3171/3) Call[2971] app __x0__ = (GetMethod iterator "return")
  [2972] (3188/9) Normal[2972] return completion
Algo: AsyncMethod[0,0].ComputedPropertyContains [253]
  [2973] Entry[2973]
  [2974] (3198)Normal[2974] let AsyncMethod = this
  [2975] (3199/0) Call[2975] access __x0__ = (PropertyName "ComputedPropertyContains" symbol)
  [2976] (3200/0) Normal[2976] return __x0__
  [2977] Exit[2977]
Algo: AsyncMethod[0,0].EarlyErrors [254]
  [2978] Entry[2978]
  [2979] (3202)Normal[2979] let AsyncMethod = this
  [2980] (3206/0) If[2980] __x0__
  [2981] (3208/0) Call[2981] access __x2__ = (UniqueFormalParameters "IsSimpleParameterList")
  [2982] (3211/0) If[2982] __x0__
  [2983] (3214/1) Call[2983] access __x3__ = (AsyncMethod "HasDirectSuper")
  [2984] (3215/1) If[2984] (= __x3__ true)
  [2985] (3219/2) If[2985] (= __x4__ true)
  [2986] (3220/2) Normal[2986] throw SyntaxError
  [2987] (3222/3) Call[2987] access __x5__ = (UniqueFormalParameters "BoundNames")
  [2988] (3203/0) Normal[2988] let __x0__ = true
  [2989] (3209/0) Normal[2989] __x0__ = (= __x2__ false)
  [2990] (3212/0) Normal[2990] throw SyntaxError
  [2991] (3218/2) Call[2991] access __x4__ = (UniqueFormalParameters "Contains" "AwaitExpression")
  [2992] (3204/0) Call[2992] access __x1__ = (AsyncFunctionBody "FunctionBodyContainsUseStrict")
  [2993] (3223/3) Call[2993] access __x6__ = (AsyncFunctionBody "LexicallyDeclaredNames")
  [2994] (3224/3) Normal[2994] let __x7__ = __x5__
  [2995] (3216/1) Normal[2995] throw SyntaxError
  [2996] (3205/0) Normal[2996] __x0__ = (= __x1__ true)
  [2997] (3225/3) Normal[2997] let __x8__ = __x6__
  [2998] (3231/3) Normal[2998] __x10__ = 0i
  [2999] (3232/3) Loop[2999] (< __x10__ __x8__.length)
  [3000] (3233/3) If[3000] (= __x7__[__x9__] __x8__[__x10__])
  [3001] LoopCont[3001]
  [3002] (3226/3) Normal[3002] let __x9__ = 0i
  [3003] (3227/3) Normal[3003] let __x10__ = 0i
  [3004] (3229/3) Loop[3004] (< __x9__ __x7__.length)
  [3005] LoopCont[3005]
  [3006] (3228/3) Normal[3006] let __x11__ = false
  [3007] (3234/3) Normal[3007] __x11__ = true
  [3008] (3237/3) Normal[3008] throw SyntaxError
  [3009] Exit[3009]
  [3010] (3236/3) If[3010] __x11__
Algo: AsyncMethod[0,0].HasDirectSuper [255]
  [3011] Entry[3011]
  [3012] (3240)Normal[3012] let AsyncMethod = this
  [3013] (3245/1) Call[3013] access __x1__ = (AsyncFunctionBody "Contains" "SuperCall")
  [3014] (3246/1) Normal[3014] return __x1__
  [3015] (3241/0) Call[3015] access __x0__ = (UniqueFormalParameters "Contains" "SuperCall")
  [3016] Exit[3016]
  [3017] (3242/0) If[3017] (= __x0__ true)
  [3018] (3243/0) Normal[3018] return true
Algo: AsyncMethod[0,0].MethodDefinitionEvaluation [256]
  [3019] Entry[3019]
  [3020] (3248)Normal[3020] let AsyncMethod = this
  [3021] (3252/2) Call[3021] access __x1__ = (CONTEXT "LexicalEnvironment")
  [3022] (3253/2) Normal[3022] let scope = __x1__
  [3023] (3257/5) Call[3023] app __x3__ = (MakeMethod closure object)
  [3024] (3258/5) Normal[3024] [! __x3__]
  [3025] (3261/7) Normal[3025] let desc = (new PropertyDescriptor("Value" -> closure, "Writable" -> true, "Enumerable" -> enumerable, "Configurable" -> true))
  [3026] (3262/8) Call[3026] app __x5__ = (DefinePropertyOrThrow object propKey desc)
  [3027] (3249/0) Call[3027] access __x0__ = (PropertyName "Evaluation")
  [3028] (3254/3) Normal[3028] let sourceText = (get-syntax AsyncMethod)
  [3029] (3256/4) Normal[3029] let closure = [! __x2__]
  [3030] (3260/6) Normal[3030] [! __x4__]
  [3031] (3250/0) Normal[3031] let propKey = __x0__
  [3032] (3259/6) Call[3032] app __x4__ = (SetFunctionName closure propKey)
  [3033] (3255/4) Call[3033] app __x2__ = (OrdinaryFunctionCreate INTRINSICS["%AsyncFunction.prototype%"] sourceText UniqueFormalParameters AsyncFunctionBody ~non-lexical-this~ scope)
  [3034] (3251/1) Normal[3034] [? propKey]
  [3035] (3263/8) Normal[3035] return [? __x5__]
  [3036] Exit[3036]
Algo: AsyncMethod[0,0].PropName [257]
  [3037] Entry[3037]
  [3038] (3265)Normal[3038] let AsyncMethod = this
  [3039] (3266/0) Call[3039] access __x0__ = (PropertyName "PropName")
  [3040] (3267/0) Normal[3040] return __x0__
  [3041] Exit[3041]
Algo: AsyncMethod[0,0].PropertyDefinitionEvaluation [258]
  [3042] Entry[3042]
  [3043] (3269)Normal[3043] let AsyncMethod = this
  [3044] (3270/0) Call[3044] access __x0__ = (AsyncMethod "MethodDefinitionEvaluation" object enumerable)
  [3045] (3271/0) Normal[3045] return [? __x0__]
  [3046] Exit[3046]
Algo: AtomEscape[0,0].EarlyErrors [259]
  [3047] Entry[3047]
  [3048] (3273)Normal[3048] let AtomEscape = this
  [3049] (3274/0) Normal[3049] ??? "It is a Syntax Error if the CapturingGroupNumber of nt:{DecimalEscape} is larger than id:{NcapturingParens} ( link:{sec-notation} ) ."
  [3050] Exit[3050]
Algo: AtomEscape[0,0].Evaluation [260]
  [3051] Entry[3051]
  [3052] (3276)Normal[3052] let AtomEscape = this
  [3053] (3280/2) Call[3053] app __x1__ = (BackreferenceMatcher n direction)
  [3054] (3281/2) Normal[3054] return [! __x1__]
  [3055] (3277/0) Call[3055] access __x0__ = (DecimalEscape "Evaluation")
  [3056] Exit[3056]
  [3057] (3278/0) Normal[3057] let n = __x0__
  [3058] (3279/1) Normal[3058] assert (! (< NcapturingParens n))
Algo: AtomEscape[1,0].Evaluation [261]
  [3059] Entry[3059]
  [3060] (3283)Normal[3060] let AtomEscape = this
  [3061] (3287/1) Normal[3061] return [! __x1__]
  [3062] Exit[3062]
  [3063] (3284/0) Call[3063] access __x0__ = (CharacterClassEscape "Evaluation")
  [3064] (3285/0) Normal[3064] let A = __x0__
  [3065] (3286/1) Call[3065] app __x1__ = (CharacterSetMatcher A false direction)
Algo: AtomEscape[2,0].Evaluation [262]
  [3066] Entry[3066]
  [3067] (3289)Normal[3067] let AtomEscape = this
  [3068] (3293/2) Call[3068] app __x1__ = (CharacterSetMatcher A false direction)
  [3069] (3294/2) Normal[3069] return [! __x1__]
  [3070] (3290/0) Call[3070] access __x0__ = (CharacterEscape "Evaluation")
  [3071] Exit[3071]
  [3072] (3291/0) Normal[3072] let ch = __x0__
  [3073] (3292/1) Normal[3073] let A = (new [ch])
Algo: AtomEscape[3,0].EarlyErrors [263]
  [3074] Entry[3074]
  [3075] (3296)Normal[3075] let AtomEscape = this
  [3076] (3297/0) Normal[3076] ??? "It is a Syntax Error if the enclosing nt:{Pattern} does not contain a nt:{GroupSpecifier} with an enclosed nt:{RegExpIdentifierName} whose CapturingGroupName equals the CapturingGroupName of the nt:{RegExpIdentifierName} of this production ' s nt:{GroupName} ."
  [3077] Exit[3077]
Algo: AtomEscape[3,0].Evaluation [264]
  [3078] Entry[3078]
  [3079] (3299)Normal[3079] let AtomEscape = this
  [3080] (3303/3) Normal[3080] return [! __x0__]
  [3081] Exit[3081]
  [3082] (3300/0) Normal[3082] ??? "Search the enclosing nt:{Pattern} for an instance of a nt:{GroupSpecifier} containing a nt:{RegExpIdentifierName} which has a CapturingGroupName equal to the CapturingGroupName of the nt:{RegExpIdentifierName} contained in nt:{GroupName} ."
  [3083] (3301/2) Normal[3083] ??? "Let id:{parenIndex} be the number of left - capturing parentheses in the entire regular expression that occur to the left of the located nt:{GroupSpecifier} . This is the total number of grammar:{Atom4, [GroupSpecifier, Disjunction]} Parse Nodes prior to or enclosing the located nt:{GroupSpecifier} , including its immediately enclosing nt:{Atom} ."
  [3084] (3302/3) Call[3084] app __x0__ = (BackreferenceMatcher parenIndex direction)
Algo: Atom[0,0].Evaluation [265]
  [3085] Entry[3085]
  [3086] (3305)Normal[3086] let Atom = this
  [3087] (3309/2) Normal[3087] return [! __x0__]
  [3088] Exit[3088]
  [3089] (3306/0) Normal[3089] let ch = PatternCharacter
  [3090] (3307/1) Normal[3090] let A = (new [ch])
  [3091] (3308/2) Call[3091] app __x0__ = (CharacterSetMatcher A false direction)
Algo: Atom[1,0].Evaluation [266]
  [3092] Entry[3092]
  [3093] (3311)Normal[3093] let Atom = this
  [3094] (3316/3) Call[3094] app __x0__ = (CharacterSetMatcher A false direction)
  [3095] (3317/3) Normal[3095] return [! __x0__]
  [3096] (3312/0) Normal[3096] ??? "Let id:{A} be the CharSet of all characters ."
  [3097] Exit[3097]
  [3098] (3313/1) If[3098] (! (= DotAll true))
  [3099] (3314/2) Normal[3099] ??? "Remove from id:{A} all characters corresponding to a code point on the right - hand side of the nt:{LineTerminator} production ."
Algo: Atom[2,0].Evaluation [267]
  [3100] Entry[3100]
  [3101] (3319)Normal[3101] let Atom = this
  [3102] (3320/0) Normal[3102] ??? "Return the Matcher that is the result of evaluating nt:{AtomEscape} with argument id:{direction} ."
  [3103] Exit[3103]
Algo: Atom[3,0].Evaluation [268]
  [3104] Entry[3104]
  [3105] (3322)Normal[3105] let Atom = this
  [3106] (3326/1) Call[3106] app __x1__ = (CharacterSetMatcher A invert direction)
  [3107] (3327/1) Normal[3107] return [! __x1__]
  [3108] (3323/0) Call[3108] access __x0__ = (CharacterClass "Evaluation")
  [3109] Exit[3109]
  [3110] (3324/0) Normal[3110] let A = __x0__[0i]
  [3111] (3325/0) Normal[3111] let invert = __x0__[1i]
Algo: Atom[4,0].Evaluation [269]
  [3112] Entry[3112]
  [3113] (3329)Normal[3113] let Atom = this
  [3114] (3333/2) Normal[3114] ??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{direction} , id:{m} , and id:{parenIndex} and performs the following steps when called : in:{} out:{}"
  [3115] Exit[3115]
  [3116] (3330/0) Call[3116] access __x0__ = (Disjunction "Evaluation" direction)
  [3117] (3331/0) Normal[3117] let m = __x0__
  [3118] (3332/1) Normal[3118] ??? "Let id:{parenIndex} be the number of left - capturing parentheses in the entire regular expression that occur to the left of this nt:{Atom} . This is the total number of grammar:{Atom4, [GroupSpecifier, Disjunction]} Parse Nodes prior to or enclosing this nt:{Atom} ."
Algo: Atom[5,0].Evaluation [270]
  [3119] Entry[3119]
  [3120] (3335)Normal[3120] let Atom = this
  [3121] (3336/0) Normal[3121] ??? "Return the Matcher that is the result of evaluating nt:{Disjunction} with argument id:{direction} ."
  [3122] Exit[3122]
Algo: AtomicReadModifyWrite [271]
  [3123] Entry[3123]
  [3124] (3338/0) Call[3124] app __x0__ = (ValidateIntegerTypedArray typedArray)
  [3125] (3342/2) Normal[3125] let arrayTypeName = typedArray.TypedArrayName
  [3126] (3343/3) If[3126] (= typedArray.ContentType ~BigInt~)
  [3127] (3349/4) Normal[3127] let v = [? __x3__]
  [3128] (3350/5) Call[3128] app __x4__ = (IsDetachedBuffer buffer)
  [3129] (3354/6) Normal[3129] let elementType = ~Int8~
  [3130] (3355/8) Call[3130] app __x5__ = (GetModifySetValueInBuffer buffer indexedPosition elementType v op)
  [3131] (3339/0) Normal[3131] let buffer = [? __x0__]
  [3132] (3345/3) Call[3132] app __x2__ = (ToBigInt value)
  [3133] (3348/4) Call[3133] app __x3__ = (ToIntegerOrInfinity value)
  [3134] (3352/5) Normal[3134] throw TypeError
  [3135] (3340/1) Call[3135] app __x1__ = (ValidateAtomicAccess typedArray index)
  [3136] (3351/5) If[3136] (= __x4__ true)
  [3137] (3346/3) Normal[3137] let v = [? __x2__]
  [3138] (3341/1) Normal[3138] let indexedPosition = [? __x1__]
  [3139] (3356/8) Normal[3139] return __x5__
  [3140] Exit[3140]
Algo: Await [273]
  [3144] Entry[3144]
  [3145] (3358/0) Normal[3145] let asyncContext = CONTEXT
  [3146] (3362/3) Normal[3146] let lengthFulfilled = 1i
  [3147] (3363/4) Call[3147] app __x1__ = (CreateBuiltinFunction stepsFulfilled lengthFulfilled "" (new ["AsyncContext"]))
  [3148] (3367/7) Normal[3148] let lengthRejected = 1i
  [3149] (3368/8) Call[3149] app __x2__ = (CreateBuiltinFunction stepsRejected lengthRejected "" (new ["AsyncContext"]))
  [3150] (3371/10) Call[3150] app __x3__ = (PerformPromiseThen promise onFulfilled onRejected)
  [3151] (3372/10) Normal[3151] [! __x3__]
  [3152] (3378/12) Arrow[3152] cont __x4__ = (completion) [=>] return completion [fid: 272]
  [3153] (3380/12) Normal[3153] asyncContext.ResumeCont = __x4__
  [3154] (3359/1) Call[3154] app __x0__ = (PromiseResolve INTRINSICS["%Promise%"] value)
  [3155] (3364/4) Normal[3155] let onFulfilled = [! __x1__]
  [3156] (3381/14) Call[3156] app _ = (RET_CONT undefined)
  [3157] (3366/6) Normal[3157] let stepsRejected = ALGORITHM["GLOBAL.AwaitRejectedFunctions"]
  [3158] (3370/9) Normal[3158] onRejected.AsyncContext = asyncContext
  [3159] (3360/1) Normal[3159] let promise = [? __x0__]
  [3160] (3374/11) Normal[3160] (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i))
  [3161] (3376/11) Normal[3161] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [3162] Exit[3162]
  [3163] (3369/8) Normal[3163] let onRejected = [! __x2__]
  [3164] (3365/5) Normal[3164] onFulfilled.AsyncContext = asyncContext
  [3165] (3361/2) Normal[3165] let stepsFulfilled = ALGORITHM["GLOBAL.AwaitFulfilledFunctions"]
  [3166] (3377/12) Normal[3166] RET_CONT = (pop asyncContext.ReturnCont 0i)
  [3167] (3373/11) If[3167] (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] asyncContext)
Algo: Await:12 [272]
  [3141] Entry[3141]
  [3142] (3379/12) Normal[3142] return completion
  [3143] Exit[3143]
Algo: AwaitExpression[0,0].Evaluation [274]
  [3168] Entry[3168]
  [3169] (3383)Normal[3169] let AwaitExpression = this
  [3170] (3387/1) Normal[3170] let value = [? __x1__]
  [3171] (3388/2) Call[3171] app __x2__ = (Await value)
  [3172] (3384/0) Call[3172] access __x0__ = (UnaryExpression "Evaluation")
  [3173] (3389/2) Normal[3173] return [? __x2__]
  [3174] (3385/0) Normal[3174] let exprRef = __x0__
  [3175] Exit[3175]
  [3176] (3386/1) Call[3176] app __x1__ = (GetValue exprRef)
Algo: BackreferenceMatcher [275]
  [3177] Entry[3177]
  [3178] (3391/0) Normal[3178] assert (! (< n 1i))
  [3179] (3392/1) Normal[3179] ??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{n} and id:{direction} and performs the following steps when called : in:{} out:{}"
  [3180] Exit[3180]
Algo: BigInt::add [276]
  [3181] Entry[3181]
  [3182] (3394/0) Normal[3182] return (+ x y)
  [3183] Exit[3183]
Algo: BigInt::bitwiseAND [277]
  [3184] Entry[3184]
  [3185] (3396/0) Call[3185] app __x0__ = (BigIntBitwiseOp "&" x y)
  [3186] (3397/0) Normal[3186] return __x0__
  [3187] Exit[3187]
Algo: BigInt::bitwiseNOT [278]
  [3188] Entry[3188]
  [3189] (3399/0) Normal[3189] return (~ x)
  [3190] Exit[3190]
Algo: BigInt::bitwiseOR [279]
  [3191] Entry[3191]
  [3192] (3401/0) Call[3192] app __x0__ = (BigIntBitwiseOp "|" x y)
  [3193] (3402/0) Normal[3193] return __x0__
  [3194] Exit[3194]
Algo: BigInt::bitwiseXOR [280]
  [3195] Entry[3195]
  [3196] (3404/0) Call[3196] app __x0__ = (BigIntBitwiseOp "^" x y)
  [3197] (3405/0) Normal[3197] return __x0__
  [3198] Exit[3198]
Algo: BigInt::divide [281]
  [3199] Entry[3199]
  [3200] (3407/0) If[3200] (= y 0n)
  [3201] (3408/0) Normal[3201] throw RangeError
  [3202] (3410/1) Normal[3202] let quotient = (/ x y)
  [3203] (3411/2) Normal[3203] ??? "Return the BigInt value that represents id:{quotient} rounded towards 0 to the next integer value ."
  [3204] Exit[3204]
Algo: BigInt::equal [282]
  [3205] Entry[3205]
  [3206] (3413/0) Normal[3206] return (= x y)
  [3207] Exit[3207]
Algo: BigInt::exponentiate [283]
  [3208] Entry[3208]
  [3209] (3415/0) If[3209] (< exponent 0n)
  [3210] (3421/2) Normal[3210] return (convert (** base exponent) num2bigint)
  [3211] Exit[3211]
  [3212] (3416/0) Normal[3212] throw RangeError
  [3213] (3418/1) If[3213] (&& (= base 0n) (= exponent 0n))
  [3214] (3419/1) Normal[3214] return 1n
Algo: BigInt::leftShift [284]
  [3215] Entry[3215]
  [3216] (3423/0) If[3216] (< y 0n)
  [3217] (3424/1) Normal[3217] ??? "Return the BigInt value that represents ℝ ( id:{x} ) / 2 sup:{- id:{y}} , rounding down to the nearest integer , including for negative numbers ."
  [3218] (3426/2) Normal[3218] return (convert (* x (** 2i y)) num2bigint)
  [3219] Exit[3219]
Algo: BigInt::lessThan [285]
  [3220] Entry[3220]
  [3221] (3428/0) Normal[3221] return (< x y)
  [3222] Exit[3222]
Algo: BigInt::multiply [286]
  [3223] Entry[3223]
  [3224] (3430/0) Normal[3224] return (* x y)
  [3225] Exit[3225]
Algo: BigInt::remainder [287]
  [3226] Entry[3226]
  [3227] (3432/0) If[3227] (= d 0n)
  [3228] (3438/2) Normal[3228] let r = (% n d)
  [3229] (3439/3) Normal[3229] return r
  [3230] (3433/0) Normal[3230] throw RangeError
  [3231] (3435/1) If[3231] (= n 0n)
  [3232] Exit[3232]
  [3233] (3436/1) Normal[3233] return 0n
Algo: BigInt::sameValue [288]
  [3234] Entry[3234]
  [3235] (3441/0) Call[3235] app __x0__ = (PRIMITIVE[BigInt].equal x y)
  [3236] (3442/0) Normal[3236] return __x0__
  [3237] Exit[3237]
Algo: BigInt::sameValueZero [289]
  [3238] Entry[3238]
  [3239] (3444/0) Call[3239] app __x0__ = (PRIMITIVE[BigInt].equal x y)
  [3240] (3445/0) Normal[3240] return __x0__
  [3241] Exit[3241]
Algo: BigInt::signedRightShift [290]
  [3242] Entry[3242]
  [3243] (3447/0) Call[3243] app __x0__ = (PRIMITIVE[BigInt].leftShift x (- y))
  [3244] (3448/0) Normal[3244] return __x0__
  [3245] Exit[3245]
Algo: BigInt::subtract [291]
  [3246] Entry[3246]
  [3247] (3450/0) Normal[3247] return (- x y)
  [3248] Exit[3248]
Algo: BigInt::toString [292]
  [3249] Entry[3249]
  [3250] (3452/0) If[3250] (< x 0n)
  [3251] (3454/0) Call[3251] app __x0__ = (PRIMITIVE[BigInt].toString (- x))
  [3252] (3457/1) Normal[3252] return (convert x num2str)
  [3253] (3455/0) Normal[3253] return (+ "-" [! __x0__])
  [3254] Exit[3254]
Algo: BigInt::unaryMinus [293]
  [3255] Entry[3255]
  [3256] (3459/0) If[3256] (= x 0n)
  [3257] (3460/0) Normal[3257] return 0n
  [3258] (3462/1) Normal[3258] return (convert (- x) num2bigint)
  [3259] Exit[3259]
Algo: BigInt::unsignedRightShift [294]
  [3260] Entry[3260]
  [3261] (3463/0) Normal[3261] throw TypeError
  [3262] Exit[3262]
Algo: BigIntBitwiseOp [295]
  [3263] Entry[3263]
  [3264] (3465/0) Normal[3264] assert (|| (|| (= op "&") (= op "^")) (= op "|"))
  [3265] (3469/4) Normal[3265] let shift = 0i
  [3266] (3470/5) Normal[3266] ??? "Repeat , until ( id:{x} = 0 or id:{x} = - 1 ) and ( id:{y} = 0 or id:{y} = - 1 ) , in:{} out:{}"
  [3267] (3475/16) If[3267] (= op "|")
  [3268] (3477/17) Call[3268] app __x1__ = (BinaryOr (%% x 2i) (%% y 2i))
  [3269] (3480/19) Normal[3269] assert (= op "^")
  [3270] (3481/20) Call[3270] app __x2__ = (BinaryXor (%% x 2i) (%% y 2i))
  [3271] (3482/20) Normal[3271] let tmp = __x2__
  [3272] (3466/1) Normal[3272] x = x
  [3273] (3471/16) If[3273] (= op "&")
  [3274] (3474/16) Normal[3274] let tmp = __x0__
  [3275] (3483/21) If[3275] (! (== tmp 0i))
  [3276] (3467/2) Normal[3276] y = y
  [3277] (3484/22) Normal[3277] result = (- result (** 2i shift))
  [3278] (3486/24) Normal[3278] return (convert result num2bigint)
  [3279] (3478/17) Normal[3279] let tmp = __x1__
  [3280] (3473/16) Call[3280] app __x0__ = (BinaryAnd (%% x 2i) (%% y 2i))
  [3281] (3468/3) Normal[3281] let result = 0i
  [3282] Exit[3282]
Algo: BinaryAnd [296]
  [3283] Entry[3283]
  [3284] (3488/0) Normal[3284] assert (|| (= x 0i) (= x 1i))
  [3285] (3492/2) Normal[3285] return 0i
  [3286] Exit[3286]
  [3287] (3489/1) Normal[3287] assert (|| (= y 0i) (= y 1i))
  [3288] (3490/2) If[3288] (&& (= x 1i) (= y 1i))
  [3289] (3491/2) Normal[3289] return 1i
Algo: BinaryOr [297]
  [3290] Entry[3290]
  [3291] (3494/0) Normal[3291] assert (|| (= x 0i) (= x 1i))
  [3292] (3498/2) Normal[3292] return 0i
  [3293] Exit[3293]
  [3294] (3495/1) Normal[3294] assert (|| (= y 0i) (= y 1i))
  [3295] (3496/2) If[3295] (|| (= x 1i) (= y 1i))
  [3296] (3497/2) Normal[3296] return 1i
Algo: BinaryXor [298]
  [3297] Entry[3297]
  [3298] (3500/0) Normal[3298] assert (|| (= x 0i) (= x 1i))
  [3299] (3504/2) If[3299] (&& (= x 0i) (= y 1i))
  [3300] (3505/3) Normal[3300] return 1i
  [3301] (3506/2) Normal[3301] return 0i
  [3302] (3501/1) Normal[3302] assert (|| (= y 0i) (= y 1i))
  [3303] Exit[3303]
  [3304] (3502/2) If[3304] (&& (= x 1i) (= y 0i))
  [3305] (3503/2) Normal[3305] return 1i
Algo: BindingElementList[1,0].BoundNames [299]
  [3306] Entry[3306]
  [3307] (3508/0) Call[3307] access __x0__ = (BindingElementList "BoundNames")
  [3308] (3512/1) Normal[3308] let __x3__ = 0i
  [3309] (3513/1) Loop[3309] (< __x3__ __x2__.length)
  [3310] LoopCont[3310]
  [3311] (3509/0) Normal[3311] let names = __x0__
  [3312] (3515/1) Normal[3312] let __x4__ = __x2__[__x3__]
  [3313] (3518/2) Normal[3313] return names
  [3314] (3517/1) Normal[3314] append __x4__ -> names
  [3315] (3510/1) Call[3315] access __x1__ = (BindingElisionElement "BoundNames")
  [3316] (3516/1) Normal[3316] __x3__ = (+ __x3__ 1i)
  [3317] (3511/1) Normal[3317] let __x2__ = __x1__
  [3318] Exit[3318]
Algo: BindingElementList[1,0].ContainsExpression [300]
  [3319] Entry[3319]
  [3320] (3520/0) Call[3320] access __x0__ = (BindingElementList "ContainsExpression")
  [3321] (3525/2) Call[3321] access __x1__ = (BindingElisionElement "ContainsExpression")
  [3322] (3526/2) Normal[3322] return __x1__
  [3323] (3521/0) Normal[3323] let has = __x0__
  [3324] Exit[3324]
  [3325] (3522/1) If[3325] (= has true)
  [3326] (3523/1) Normal[3326] return true
Algo: BindingElementList[1,0].IteratorBindingInitialization [301]
  [3327] Entry[3327]
  [3328] (3528/0) Call[3328] access __x0__ = (BindingElementList "IteratorBindingInitialization" iteratorRecord environment)
  [3329] (3529/0) Normal[3329] [? __x0__]
  [3330] (3530/1) Call[3330] access __x1__ = (BindingElisionElement "IteratorBindingInitialization" iteratorRecord environment)
  [3331] (3531/1) Normal[3331] return __x1__
  [3332] Exit[3332]
Algo: BindingElement[1,0].BoundNames [302]
  [3333] Entry[3333]
  [3334] (3533)Normal[3334] let BindingElement = this
  [3335] (3534/0) Call[3335] access __x0__ = (BindingPattern "BoundNames")
  [3336] (3535/0) Normal[3336] return __x0__
  [3337] Exit[3337]
Algo: BindingElement[1,0].HasInitializer [303]
  [3338] Entry[3338]
  [3339] (3537)Normal[3339] let BindingElement = this
  [3340] (3538/0) Normal[3340] return false
  [3341] Exit[3341]
Algo: BindingElement[1,0].IsSimpleParameterList [304]
  [3342] Entry[3342]
  [3343] (3540)Normal[3343] let BindingElement = this
  [3344] (3541/0) Normal[3344] return false
  [3345] Exit[3345]
Algo: BindingElement[1,0].IteratorBindingInitialization [305]
  [3346] Entry[3346]
  [3347] (3543)Normal[3347] let BindingElement = this
  [3348] (3548/2) Call[3348] app __x1__ = (IsAbruptCompletion next)
  [3349] (3549/2) If[3349] __x1__
  [3350] (3554/4) Normal[3350] iteratorRecord.Done = true
  [3351] (3564/9) If[3351] (= iteratorRecord.Done true)
  [3352] (3559/7) If[3352] __x3__
  [3353] (3560/7) Normal[3353] iteratorRecord.Done = true
  [3354] (3562/8) Normal[3354] [? v]
  [3355] (3569/11) Call[3355] access __x4__ = (Initializer "Evaluation")
  [3356] (3570/11) Normal[3356] let defaultValue = __x4__
  [3357] (3544/0) If[3357] (= iteratorRecord.Done false)
  [3358] (3550/2) Normal[3358] iteratorRecord.Done = true
  [3359] (3552/3) Normal[3359] [? next]
  [3360] (3571/12) Call[3360] app __x5__ = (GetValue defaultValue)
  [3361] (3553/4) If[3361] (= next false)
  [3362] (3556/6) Call[3362] app __x2__ = (IteratorValue next)
  [3363] (3558/7) Call[3363] app __x3__ = (IsAbruptCompletion v)
  [3364] (3546/1) Call[3364] app __x0__ = (IteratorStep iteratorRecord)
  [3365] (3565/9) Normal[3365] let v = undefined
  [3366] (3567/10) If[3366] (&& (! (= Initializer absent)) (= v undefined))
  [3367] (3572/12) Normal[3367] v = [? __x5__]
  [3368] (3557/6) Normal[3368] let v = __x2__
  [3369] (3547/1) Normal[3369] let next = __x0__
  [3370] (3574/13) Call[3370] access __x6__ = (BindingPattern "BindingInitialization" v environment)
  [3371] (3575/13) Normal[3371] return __x6__
  [3372] Exit[3372]
Algo: BindingElement[1,0].KeyedBindingInitialization [306]
  [3373] Entry[3373]
  [3374] (3577)Normal[3374] let BindingElement = this
  [3375] (3582/2) Call[3375] access __x1__ = (Initializer "Evaluation")
  [3376] (3583/2) Normal[3376] let defaultValue = __x1__
  [3377] (3588/4) Normal[3377] return __x3__
  [3378] Exit[3378]
  [3379] (3578/0) Call[3379] app __x0__ = (GetV value propertyName)
  [3380] (3584/3) Call[3380] app __x2__ = (GetValue defaultValue)
  [3381] (3587/4) Call[3381] access __x3__ = (BindingPattern "BindingInitialization" v environment)
  [3382] (3579/0) Normal[3382] let v = [? __x0__]
  [3383] (3585/3) Normal[3383] v = [? __x2__]
  [3384] (3580/1) If[3384] (&& (! (= Initializer absent)) (= v undefined))
Algo: BindingElement[1,1].BoundNames [307]
  [3385] Entry[3385]
  [3386] (3590)Normal[3386] let BindingElement = this
  [3387] (3591/0) Call[3387] access __x0__ = (BindingPattern "BoundNames")
  [3388] (3592/0) Normal[3388] return __x0__
  [3389] Exit[3389]
Algo: BindingElement[1,1].ContainsExpression [308]
  [3390] Entry[3390]
  [3391] (3594)Normal[3391] let BindingElement = this
  [3392] (3595/0) Normal[3392] return true
  [3393] Exit[3393]
Algo: BindingElement[1,1].HasInitializer [309]
  [3394] Entry[3394]
  [3395] (3597)Normal[3395] let BindingElement = this
  [3396] (3598/0) Normal[3396] return true
  [3397] Exit[3397]
Algo: BindingElement[1,1].IsSimpleParameterList [310]
  [3398] Entry[3398]
  [3399] (3600)Normal[3399] let BindingElement = this
  [3400] (3601/0) Normal[3400] return false
  [3401] Exit[3401]
Algo: BindingElement[1,1].IteratorBindingInitialization [311]
  [3402] Entry[3402]
  [3403] (3603)Normal[3403] let BindingElement = this
  [3404] (3608/2) Call[3404] app __x1__ = (IsAbruptCompletion next)
  [3405] (3609/2) If[3405] __x1__
  [3406] (3614/4) Normal[3406] iteratorRecord.Done = true
  [3407] (3624/9) If[3407] (= iteratorRecord.Done true)
  [3408] (3619/7) If[3408] __x3__
  [3409] (3620/7) Normal[3409] iteratorRecord.Done = true
  [3410] (3622/8) Normal[3410] [? v]
  [3411] (3629/11) Call[3411] access __x4__ = (Initializer "Evaluation")
  [3412] (3630/11) Normal[3412] let defaultValue = __x4__
  [3413] (3604/0) If[3413] (= iteratorRecord.Done false)
  [3414] (3610/2) Normal[3414] iteratorRecord.Done = true
  [3415] (3612/3) Normal[3415] [? next]
  [3416] (3631/12) Call[3416] app __x5__ = (GetValue defaultValue)
  [3417] (3613/4) If[3417] (= next false)
  [3418] (3616/6) Call[3418] app __x2__ = (IteratorValue next)
  [3419] (3618/7) Call[3419] app __x3__ = (IsAbruptCompletion v)
  [3420] (3606/1) Call[3420] app __x0__ = (IteratorStep iteratorRecord)
  [3421] (3625/9) Normal[3421] let v = undefined
  [3422] (3627/10) If[3422] (&& (! (= Initializer absent)) (= v undefined))
  [3423] (3632/12) Normal[3423] v = [? __x5__]
  [3424] (3617/6) Normal[3424] let v = __x2__
  [3425] (3607/1) Normal[3425] let next = __x0__
  [3426] (3634/13) Call[3426] access __x6__ = (BindingPattern "BindingInitialization" v environment)
  [3427] (3635/13) Normal[3427] return __x6__
  [3428] Exit[3428]
Algo: BindingElement[1,1].KeyedBindingInitialization [312]
  [3429] Entry[3429]
  [3430] (3637)Normal[3430] let BindingElement = this
  [3431] (3642/2) Call[3431] access __x1__ = (Initializer "Evaluation")
  [3432] (3643/2) Normal[3432] let defaultValue = __x1__
  [3433] (3648/4) Normal[3433] return __x3__
  [3434] Exit[3434]
  [3435] (3638/0) Call[3435] app __x0__ = (GetV value propertyName)
  [3436] (3644/3) Call[3436] app __x2__ = (GetValue defaultValue)
  [3437] (3647/4) Call[3437] access __x3__ = (BindingPattern "BindingInitialization" v environment)
  [3438] (3639/0) Normal[3438] let v = [? __x0__]
  [3439] (3645/3) Normal[3439] v = [? __x2__]
  [3440] (3640/1) If[3440] (&& (! (= Initializer absent)) (= v undefined))
Algo: BindingElisionElement[0,0].BoundNames [313]
  [3441] Entry[3441]
  [3442] (3650)Normal[3442] let BindingElisionElement = this
  [3443] (3651/0) Call[3443] access __x0__ = (BindingElement "BoundNames")
  [3444] (3652/0) Normal[3444] return __x0__
  [3445] Exit[3445]
Algo: BindingElisionElement[0,0].ContainsExpression [314]
  [3446] Entry[3446]
  [3447] (3654)Normal[3447] let BindingElisionElement = this
  [3448] (3655/0) Call[3448] access __x0__ = (BindingElement "ContainsExpression")
  [3449] (3656/0) Normal[3449] return __x0__
  [3450] Exit[3450]
Algo: BindingElisionElement[0,1].BoundNames [315]
  [3451] Entry[3451]
  [3452] (3658)Normal[3452] let BindingElisionElement = this
  [3453] (3659/0) Call[3453] access __x0__ = (BindingElement "BoundNames")
  [3454] (3660/0) Normal[3454] return __x0__
  [3455] Exit[3455]
Algo: BindingElisionElement[0,1].ContainsExpression [316]
  [3456] Entry[3456]
  [3457] (3662)Normal[3457] let BindingElisionElement = this
  [3458] (3663/0) Call[3458] access __x0__ = (BindingElement "ContainsExpression")
  [3459] (3664/0) Normal[3459] return __x0__
  [3460] Exit[3460]
Algo: BindingElisionElement[0,1].IteratorBindingInitialization [317]
  [3461] Entry[3461]
  [3462] (3666)Normal[3462] let BindingElisionElement = this
  [3463] (3672/1) Call[3463] access __x1__ = (BindingElement "IteratorBindingInitialization" iteratorRecord environment)
  [3464] (3673/1) Normal[3464] return __x1__
  [3465] (3667/0) If[3465] (! (= Elision absent))
  [3466] Exit[3466]
  [3467] (3669/0) Call[3467] access __x0__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [3468] (3670/0) Normal[3468] [? __x0__]
Algo: BindingIdentifier[0,0].BindingInitialization [318]
  [3469] Entry[3469]
  [3470] (3675)Normal[3470] let BindingIdentifier = this
  [3471] (3679/1) Normal[3471] return [? __x1__]
  [3472] Exit[3472]
  [3473] (3676/0) Call[3473] access __x0__ = (Identifier "StringValue")
  [3474] (3677/0) Normal[3474] let name = __x0__
  [3475] (3678/1) Call[3475] app __x1__ = (InitializeBoundName name value environment)
Algo: BindingIdentifier[0,0].BoundNames [319]
  [3476] Entry[3476]
  [3477] (3681)Normal[3477] let BindingIdentifier = this
  [3478] (3682/0) Call[3478] access __x0__ = (Identifier "StringValue")
  [3479] (3683/0) Normal[3479] return (new [__x0__])
  [3480] Exit[3480]
Algo: BindingIdentifier[0,0].EarlyErrors [320]
  [3481] Entry[3481]
  [3482] (3685)Normal[3482] let BindingIdentifier = this
  [3483] (3686/0) Normal[3483] ??? "It is a Syntax Error if this production has a sub:{[ Yield ]} parameter and StringValue of nt:{Identifier} is value:{\"yield\"} ."
  [3484] (3687/1) Normal[3484] ??? "It is a Syntax Error if this production has an sub:{[ Await ]} parameter and StringValue of nt:{Identifier} is value:{\"await\"} ."
  [3485] Exit[3485]
Algo: BindingIdentifier[1,0].BindingInitialization [321]
  [3486] Entry[3486]
  [3487] (3689)Normal[3487] let BindingIdentifier = this
  [3488] (3690/0) Call[3488] app __x0__ = (InitializeBoundName "yield" value environment)
  [3489] (3691/0) Normal[3489] return [? __x0__]
  [3490] Exit[3490]
Algo: BindingIdentifier[1,0].BoundNames [322]
  [3491] Entry[3491]
  [3492] (3693)Normal[3492] let BindingIdentifier = this
  [3493] (3694/0) Normal[3493] return (new ["yield"])
  [3494] Exit[3494]
Algo: BindingIdentifier[1,0].EarlyErrors [323]
  [3495] Entry[3495]
  [3496] (3696)Normal[3496] let BindingIdentifier = this
  [3497] (3697/0) Normal[3497] ??? "It is a Syntax Error if this production has a sub:{[ Yield ]} parameter ."
  [3498] Exit[3498]
Algo: BindingIdentifier[1,0].StringValue [324]
  [3499] Entry[3499]
  [3500] (3699)Normal[3500] let BindingIdentifier = this
  [3501] (3700/0) Normal[3501] return "yield"
  [3502] Exit[3502]
Algo: BindingIdentifier[2,0].BindingInitialization [325]
  [3503] Entry[3503]
  [3504] (3702)Normal[3504] let BindingIdentifier = this
  [3505] (3703/0) Call[3505] app __x0__ = (InitializeBoundName "await" value environment)
  [3506] (3704/0) Normal[3506] return [? __x0__]
  [3507] Exit[3507]
Algo: BindingIdentifier[2,0].BoundNames [326]
  [3508] Entry[3508]
  [3509] (3706)Normal[3509] let BindingIdentifier = this
  [3510] (3707/0) Normal[3510] return (new ["await"])
  [3511] Exit[3511]
Algo: BindingIdentifier[2,0].EarlyErrors [327]
  [3512] Entry[3512]
  [3513] (3709)Normal[3513] let BindingIdentifier = this
  [3514] (3710/0) Normal[3514] ??? "It is a Syntax Error if this production has an sub:{[ Await ]} parameter ."
  [3515] Exit[3515]
Algo: BindingIdentifier[2,0].StringValue [328]
  [3516] Entry[3516]
  [3517] (3712)Normal[3517] let BindingIdentifier = this
  [3518] (3713/0) Normal[3518] return "await"
  [3519] Exit[3519]
Algo: BindingList[1,0].BoundNames [329]
  [3520] Entry[3520]
  [3521] (3715/0) Call[3521] access __x0__ = (BindingList "BoundNames")
  [3522] (3719/1) Normal[3522] let __x3__ = 0i
  [3523] (3720/1) Loop[3523] (< __x3__ __x2__.length)
  [3524] LoopCont[3524]
  [3525] (3716/0) Normal[3525] let names = __x0__
  [3526] (3722/1) Normal[3526] let __x4__ = __x2__[__x3__]
  [3527] (3725/2) Normal[3527] return names
  [3528] (3724/1) Normal[3528] append __x4__ -> names
  [3529] (3717/1) Call[3529] access __x1__ = (LexicalBinding "BoundNames")
  [3530] (3723/1) Normal[3530] __x3__ = (+ __x3__ 1i)
  [3531] (3718/1) Normal[3531] let __x2__ = __x1__
  [3532] Exit[3532]
Algo: BindingList[1,0].Evaluation [330]
  [3533] Entry[3533]
  [3534] (3727/0) Call[3534] access __x0__ = (BindingList "Evaluation")
  [3535] (3731/2) Normal[3535] return __x1__
  [3536] Exit[3536]
  [3537] (3728/0) Normal[3537] let next = __x0__
  [3538] (3729/1) Normal[3538] [? next]
  [3539] (3730/2) Call[3539] access __x1__ = (LexicalBinding "Evaluation")
Algo: BindingPattern[0,0].BindingInitialization [331]
  [3540] Entry[3540]
  [3541] (3733)Normal[3541] let BindingPattern = this
  [3542] (3737/1) Normal[3542] return __x1__
  [3543] Exit[3543]
  [3544] (3734/0) Call[3544] app __x0__ = (RequireObjectCoercible value)
  [3545] (3735/0) Normal[3545] [? __x0__]
  [3546] (3736/1) Call[3546] access __x1__ = (ObjectBindingPattern "BindingInitialization" value environment)
Algo: BindingPattern[1,0].BindingInitialization [332]
  [3547] Entry[3547]
  [3548] (3739)Normal[3548] let BindingPattern = this
  [3549] (3743/1) Normal[3549] let result = __x1__
  [3550] (3744/2) If[3550] (= iteratorRecord.Done false)
  [3551] (3740/0) Call[3551] app __x0__ = (GetIterator value)
  [3552] (3746/2) Call[3552] app __x2__ = (IteratorClose iteratorRecord result)
  [3553] (3749/3) Normal[3553] return result
  [3554] Exit[3554]
  [3555] (3741/0) Normal[3555] let iteratorRecord = [? __x0__]
  [3556] (3747/2) Normal[3556] return [? __x2__]
  [3557] (3742/1) Call[3557] access __x1__ = (ArrayBindingPattern "IteratorBindingInitialization" iteratorRecord environment)
Algo: BindingPropertyList[1,0].BoundNames [333]
  [3558] Entry[3558]
  [3559] (3751/0) Call[3559] access __x0__ = (BindingPropertyList "BoundNames")
  [3560] (3755/1) Normal[3560] let __x3__ = 0i
  [3561] (3756/1) Loop[3561] (< __x3__ __x2__.length)
  [3562] LoopCont[3562]
  [3563] (3752/0) Normal[3563] let names = __x0__
  [3564] (3758/1) Normal[3564] let __x4__ = __x2__[__x3__]
  [3565] (3761/2) Normal[3565] return names
  [3566] (3760/1) Normal[3566] append __x4__ -> names
  [3567] (3753/1) Call[3567] access __x1__ = (BindingProperty "BoundNames")
  [3568] (3759/1) Normal[3568] __x3__ = (+ __x3__ 1i)
  [3569] (3754/1) Normal[3569] let __x2__ = __x1__
  [3570] Exit[3570]
Algo: BindingPropertyList[1,0].ContainsExpression [334]
  [3571] Entry[3571]
  [3572] (3763/0) Call[3572] access __x0__ = (BindingPropertyList "ContainsExpression")
  [3573] (3768/2) Call[3573] access __x1__ = (BindingProperty "ContainsExpression")
  [3574] (3769/2) Normal[3574] return __x1__
  [3575] (3764/0) Normal[3575] let has = __x0__
  [3576] Exit[3576]
  [3577] (3765/1) If[3577] (= has true)
  [3578] (3766/1) Normal[3578] return true
Algo: BindingPropertyList[1,0].PropertyBindingInitialization [335]
  [3579] Entry[3579]
  [3580] (3771/0) Call[3580] access __x0__ = (BindingPropertyList "PropertyBindingInitialization" value environment)
  [3581] (3775/2) Normal[3581] let __x2__ = nextNames
  [3582] (3776/2) Normal[3582] let __x3__ = 0i
  [3583] (3781/2) Normal[3583] append __x4__ -> boundNames
  [3584] LoopCont[3584]
  [3585] (3772/0) Normal[3585] let boundNames = [? __x0__]
  [3586] (3777/2) Loop[3586] (< __x3__ __x2__.length)
  [3587] (3780/2) Normal[3587] __x3__ = (+ __x3__ 1i)
  [3588] (3773/1) Call[3588] access __x1__ = (BindingProperty "PropertyBindingInitialization" value environment)
  [3589] (3782/3) Normal[3589] return boundNames
  [3590] Exit[3590]
  [3591] (3779/2) Normal[3591] let __x4__ = __x2__[__x3__]
  [3592] (3774/1) Normal[3592] let nextNames = [? __x1__]
Algo: BindingProperty[0,0].PropertyBindingInitialization [336]
  [3593] Entry[3593]
  [3594] (3784)Normal[3594] let BindingProperty = this
  [3595] (3788/1) Normal[3595] [? __x0__]
  [3596] (3789/2) Normal[3596] return (new [name])
  [3597] (3785/0) Call[3597] access __snb__ = (SingleNameBinding "BoundNames")
  [3598] Exit[3598]
  [3599] (3786/0) Normal[3599] let name = __snb__[0i]
  [3600] (3787/1) Call[3600] access __x0__ = (SingleNameBinding "KeyedBindingInitialization" value environment name)
Algo: BindingProperty[1,0].BoundNames [337]
  [3601] Entry[3601]
  [3602] (3791)Normal[3602] let BindingProperty = this
  [3603] (3792/0) Call[3603] access __x0__ = (BindingElement "BoundNames")
  [3604] (3793/0) Normal[3604] return __x0__
  [3605] Exit[3605]
Algo: BindingProperty[1,0].ContainsExpression [338]
  [3606] Entry[3606]
  [3607] (3795)Normal[3607] let BindingProperty = this
  [3608] (3799/1) Normal[3608] return true
  [3609] (3801/2) Call[3609] access __x1__ = (BindingElement "ContainsExpression")
  [3610] (3796/0) Call[3610] access __x0__ = (PropertyName "IsComputedPropertyKey")
  [3611] (3802/2) Normal[3611] return __x1__
  [3612] (3797/0) Normal[3612] let has = __x0__
  [3613] Exit[3613]
  [3614] (3798/1) If[3614] (= has true)
Algo: BindingProperty[1,0].PropertyBindingInitialization [339]
  [3615] Entry[3615]
  [3616] (3804)Normal[3616] let BindingProperty = this
  [3617] (3808/2) Call[3617] access __x1__ = (BindingElement "KeyedBindingInitialization" value environment P)
  [3618] (3809/2) Normal[3618] [? __x1__]
  [3619] (3805/0) Call[3619] access __x0__ = (PropertyName "Evaluation")
  [3620] (3810/3) Normal[3620] return (new [P])
  [3621] (3806/0) Normal[3621] let P = __x0__
  [3622] Exit[3622]
  [3623] (3807/1) Normal[3623] [? P]
Algo: BindingRestElement[0,0].ContainsExpression [340]
  [3624] Entry[3624]
  [3625] (3812)Normal[3625] let BindingRestElement = this
  [3626] (3813/0) Normal[3626] return false
  [3627] Exit[3627]
Algo: BindingRestElement[0,0].IteratorBindingInitialization [341]
  [3628] Entry[3628]
  [3629] (3815)Normal[3629] let BindingRestElement = this
  [3630] (3819/1) Call[3630] app __x2__ = (ArrayCreate 0i)
  [3631] (3820/1) Normal[3631] let A = [! __x2__]
  [3632] (3826/5) Call[3632] app __x3__ = (IteratorStep iteratorRecord)
  [3633] (3827/5) Normal[3633] let next = __x3__
  [3634] (3830/6) Normal[3634] iteratorRecord.Done = true
  [3635] (3832/7) Normal[3635] [? next]
  [3636] (3816/0) Call[3636] access __x0__ = (BindingIdentifier "StringValue")
  [3637] (3821/2) Normal[3637] let n = 0i
  [3638] (3824/4) If[3638] (= iteratorRecord.Done false)
  [3639] (3837/9) If[3639] (= iteratorRecord.Done true)
  [3640] (3829/6) If[3640] __x4__
  [3641] (3817/0) Call[3641] app __x1__ = (ResolveBinding __x0__ environment)
  [3642] (3828/6) Call[3642] app __x4__ = (IsAbruptCompletion next)
  [3643] (3822/3) Loop[3643] true
  [3644] (3818/0) Normal[3644] let lhs = [? __x1__]
  [3645] (3839/10) If[3645] (= environment undefined)
  [3646] (3847/12) Call[3646] app __x7__ = (IteratorValue next)
  [3647] Exit[3647]
  [3648] (3833/8) If[3648] (= next false)
  [3649] (3848/12) Normal[3649] let nextValue = __x7__
  [3650] (3849/13) Call[3650] app __x8__ = (IsAbruptCompletion nextValue)
  [3651] (3841/10) Call[3651] app __x5__ = (PutValue lhs A)
  [3652] (3842/10) Normal[3652] return [? __x5__]
  [3653] (3853/14) Normal[3653] [? nextValue]
  [3654] (3854/15) Call[3654] app __x9__ = (ToString n)
  [3655] (3851/13) Normal[3655] iteratorRecord.Done = true
  [3656] (3844/11) Call[3656] app __x6__ = (InitializeReferencedBinding lhs A)
  [3657] (3857/16) Normal[3657] n = (+ n 1i)
  [3658] LoopCont[3658]
  [3659] (3834/8) Normal[3659] iteratorRecord.Done = true
  [3660] (3856/15) Normal[3660] [! __x10__]
  [3661] (3845/11) Normal[3661] return __x6__
  [3662] (3850/13) If[3662] __x8__
  [3663] (3855/15) Call[3663] app __x10__ = (CreateDataPropertyOrThrow A [! __x9__] nextValue)
Algo: BindingRestElement[1,0].ContainsExpression [342]
  [3664] Entry[3664]
  [3665] (3859)Normal[3665] let BindingRestElement = this
  [3666] (3860/0) Call[3666] access __x0__ = (BindingPattern "ContainsExpression")
  [3667] (3861/0) Normal[3667] return __x0__
  [3668] Exit[3668]
Algo: BindingRestElement[1,0].IteratorBindingInitialization [343]
  [3669] Entry[3669]
  [3670] (3863)Normal[3670] let BindingRestElement = this
  [3671] (3867/2) Loop[3671] true
  [3672] (3869/3) If[3672] (= iteratorRecord.Done false)
  [3673] Exit[3673]
  [3674] (3874/5) If[3674] __x2__
  [3675] (3875/5) Normal[3675] iteratorRecord.Done = true
  [3676] (3877/6) Normal[3676] [? next]
  [3677] (3879/7) Normal[3677] iteratorRecord.Done = true
  [3678] (3882/8) If[3678] (= iteratorRecord.Done true)
  [3679] (3889/11) Call[3679] app __x5__ = (IsAbruptCompletion nextValue)
  [3680] (3890/11) If[3680] __x5__
  [3681] (3864/0) Call[3681] app __x0__ = (ArrayCreate 0i)
  [3682] (3871/4) Call[3682] app __x1__ = (IteratorStep iteratorRecord)
  [3683] (3873/5) Call[3683] app __x2__ = (IsAbruptCompletion next)
  [3684] (3878/7) If[3684] (= next false)
  [3685] (3865/0) Normal[3685] let A = [! __x0__]
  [3686] (3885/9) Normal[3686] return __x3__
  [3687] (3887/10) Call[3687] app __x4__ = (IteratorValue next)
  [3688] (3872/4) Normal[3688] let next = __x1__
  [3689] (3866/1) Normal[3689] let n = 0i
  [3690] (3888/10) Normal[3690] let nextValue = __x4__
  [3691] (3884/9) Call[3691] access __x3__ = (BindingPattern "BindingInitialization" A environment)
  [3692] (3894/13) Call[3692] app __x6__ = (ToString n)
  [3693] (3895/13) Call[3693] app __x7__ = (CreateDataPropertyOrThrow A [! __x6__] nextValue)
  [3694] (3896/13) Normal[3694] [! __x7__]
  [3695] LoopCont[3695]
  [3696] (3891/11) Normal[3696] iteratorRecord.Done = true
  [3697] (3893/12) Normal[3697] [? nextValue]
  [3698] (3897/14) Normal[3698] n = (+ n 1i)
Algo: BindingRestProperty[0,0].RestBindingInitialization [344]
  [3699] Entry[3699]
  [3700] (3899)Normal[3700] let BindingRestProperty = this
  [3701] (3903/1) Call[3701] app __x2__ = (OrdinaryObjectCreate INTRINSICS["%Object.prototype%"])
  [3702] (3904/1) Normal[3702] let restObj = [! __x2__]
  [3703] (3909/3) Call[3703] app __x4__ = (PutValue lhs restObj)
  [3704] (3910/3) Normal[3704] return __x4__
  [3705] (3900/0) Call[3705] access __x0__ = (BindingIdentifier "StringValue")
  [3706] (3905/2) Call[3706] app __x3__ = (CopyDataProperties restObj value excludedNames)
  [3707] (3907/3) If[3707] (= environment undefined)
  [3708] (3912/4) Call[3708] app __x5__ = (InitializeReferencedBinding lhs restObj)
  [3709] (3913/4) Normal[3709] return __x5__
  [3710] Exit[3710]
  [3711] (3901/0) Call[3711] app __x1__ = (ResolveBinding __x0__ environment)
  [3712] (3906/2) Normal[3712] [? __x3__]
  [3713] (3902/0) Normal[3713] let lhs = [? __x1__]
Algo: BitwiseANDExpression[1,0].AssignmentTargetType [345]
  [3714] Entry[3714]
  [3715] (3914/0) Normal[3715] return ~invalid~
  [3716] Exit[3716]
Algo: BitwiseANDExpression[1,0].Evaluation [346]
  [3717] Entry[3717]
  [3718] (3916/0) Call[3718] app __x0__ = (EvaluateStringOrNumericBinaryExpression BitwiseANDExpression "&" EqualityExpression)
  [3719] (3917/0) Normal[3719] return [? __x0__]
  [3720] Exit[3720]
Algo: BitwiseANDExpression[1,0].HasCallInTailPosition [347]
  [3721] Entry[3721]
  [3722] (3918/0) Normal[3722] return false
  [3723] Exit[3723]
Algo: BitwiseANDExpression[1,0].IsFunctionDefinition [348]
  [3724] Entry[3724]
  [3725] (3919/0) Normal[3725] return false
  [3726] Exit[3726]
Algo: BitwiseORExpression[1,0].AssignmentTargetType [349]
  [3727] Entry[3727]
  [3728] (3920/0) Normal[3728] return ~invalid~
  [3729] Exit[3729]
Algo: BitwiseORExpression[1,0].Evaluation [350]
  [3730] Entry[3730]
  [3731] (3922/0) Call[3731] app __x0__ = (EvaluateStringOrNumericBinaryExpression BitwiseORExpression "|" BitwiseXORExpression)
  [3732] (3923/0) Normal[3732] return [? __x0__]
  [3733] Exit[3733]
Algo: BitwiseORExpression[1,0].HasCallInTailPosition [351]
  [3734] Entry[3734]
  [3735] (3924/0) Normal[3735] return false
  [3736] Exit[3736]
Algo: BitwiseORExpression[1,0].IsFunctionDefinition [352]
  [3737] Entry[3737]
  [3738] (3925/0) Normal[3738] return false
  [3739] Exit[3739]
Algo: BitwiseXORExpression[1,0].AssignmentTargetType [353]
  [3740] Entry[3740]
  [3741] (3926/0) Normal[3741] return ~invalid~
  [3742] Exit[3742]
Algo: BitwiseXORExpression[1,0].Evaluation [354]
  [3743] Entry[3743]
  [3744] (3928/0) Call[3744] app __x0__ = (EvaluateStringOrNumericBinaryExpression BitwiseXORExpression "^" BitwiseANDExpression)
  [3745] (3929/0) Normal[3745] return [? __x0__]
  [3746] Exit[3746]
Algo: BitwiseXORExpression[1,0].HasCallInTailPosition [355]
  [3747] Entry[3747]
  [3748] (3930/0) Normal[3748] return false
  [3749] Exit[3749]
Algo: BitwiseXORExpression[1,0].IsFunctionDefinition [356]
  [3750] Entry[3750]
  [3751] (3931/0) Normal[3751] return false
  [3752] Exit[3752]
Algo: BlockDeclarationInstantiation [357]
  [3753] Entry[3753]
  [3754] (3933/0) Normal[3754] assert (is-instance-of env DeclarativeEnvironmentRecord)
  [3755] (3937/2) Normal[3755] let __x2__ = 0i
  [3756] (3938/2) Loop[3756] (< __x2__ __x1__.length)
  [3757] (3943/3) Normal[3757] let __x4__ = __x3__
  [3758] (3944/3) Normal[3758] let __x5__ = 0i
  [3759] (3948/3) Normal[3759] __x5__ = (+ __x5__ 1i)
  [3760] (3949/4) Call[3760] access __x6__ = (d "IsConstantDeclaration")
  [3761] (3934/1) Call[3761] access __x0__ = (code "LexicallyScopedDeclarations")
  [3762] (3940/2) Normal[3762] let d = __x1__[__x2__]
  [3763] Exit[3763]
  [3764] (3942/3) Call[3764] access __x3__ = (d "BoundNames")
  [3765] (3947/3) Normal[3765] let dn = __x4__[__x5__]
  [3766] (3935/1) Normal[3766] let declarations = __x0__
  [3767] (3952/5) Call[3767] app __x7__ = (env.CreateImmutableBinding env dn true)
  [3768] (3953/5) Normal[3768] [! __x7__]
  [3769] (3945/3) Loop[3769] (< __x5__ __x4__.length)
  [3770] (3957/8) If[3770] (|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration))
  [3771] (3941/2) Normal[3771] __x2__ = (+ __x2__ 1i)
  [3772] (3936/2) Normal[3772] let __x1__ = declarations
  [3773] LoopCont[3773]
  [3774] (3950/4) If[3774] (= __x6__ true)
  [3775] (3955/7) Call[3775] app __x8__ = (env.CreateMutableBinding env dn false)
  [3776] (3956/7) Normal[3776] [! __x8__]
  [3777] (3960/9) Normal[3777] let fn = __x9__[0i]
  [3778] (3961/10) Call[3778] access __x10__ = (d "InstantiateFunctionObject" env)
  [3779] (3962/10) Normal[3779] let fo = __x10__
  [3780] LoopCont[3780]
  [3781] (3964/11) Normal[3781] __x11__
  [3782] (3959/9) Call[3782] access __x9__ = (d "BoundNames")
  [3783] (3963/11) Call[3783] app __x11__ = (env.InitializeBinding env fn fo)
Algo: Block[0,0].ContainsDuplicateLabels [358]
  [3784] Entry[3784]
  [3785] (3967)Normal[3785] let Block = this
  [3786] (3968/0) Normal[3786] return false
  [3787] Exit[3787]
Algo: Block[0,0].ContainsUndefinedBreakTarget [359]
  [3788] Entry[3788]
  [3789] (3970)Normal[3789] let Block = this
  [3790] (3971/0) Normal[3790] return false
  [3791] Exit[3791]
Algo: Block[0,0].ContainsUndefinedContinueTarget [360]
  [3792] Entry[3792]
  [3793] (3973)Normal[3793] let Block = this
  [3794] (3974/0) Normal[3794] return false
  [3795] Exit[3795]
Algo: Block[0,0].Evaluation [361]
  [3796] Entry[3796]
  [3797] (3976)Normal[3797] let Block = this
  [3798] (3977/0) Normal[3798] return ~empty~
  [3799] Exit[3799]
Algo: Block[0,0].HasCallInTailPosition [362]
  [3800] Entry[3800]
  [3801] (3979)Normal[3801] let Block = this
  [3802] (3980/0) Normal[3802] return false
  [3803] Exit[3803]
Algo: Block[0,0].LexicallyDeclaredNames [363]
  [3804] Entry[3804]
  [3805] (3982)Normal[3805] let Block = this
  [3806] (3983/0) Normal[3806] return (new [])
  [3807] Exit[3807]
Algo: Block[0,0].TopLevelLexicallyScopedDeclarations [364]
  [3808] Entry[3808]
  [3809] (3985)Normal[3809] let Block = this
  [3810] (3986/0) Normal[3810] return (new [])
  [3811] Exit[3811]
Algo: Block[0,0].TopLevelVarDeclaredNames [365]
  [3812] Entry[3812]
  [3813] (3988)Normal[3813] let Block = this
  [3814] (3989/0) Normal[3814] return (new [])
  [3815] Exit[3815]
Algo: Block[0,0].TopLevelVarScopedDeclarations [366]
  [3816] Entry[3816]
  [3817] (3991)Normal[3817] let Block = this
  [3818] (3992/0) Normal[3818] return (new [])
  [3819] Exit[3819]
Algo: Block[0,0].VarDeclaredNames [367]
  [3820] Entry[3820]
  [3821] (3994)Normal[3821] let Block = this
  [3822] (3995/0) Normal[3822] return (new [])
  [3823] Exit[3823]
Algo: Block[0,0].VarScopedDeclarations [368]
  [3824] Entry[3824]
  [3825] (3997)Normal[3825] let Block = this
  [3826] (3998/0) Normal[3826] return (new [])
  [3827] Exit[3827]
Algo: Block[0,1].EarlyErrors [369]
  [3828] Entry[3828]
  [3829] (4000)Normal[3829] let Block = this
  [3830] (4004/0) Normal[3830] throw SyntaxError
  [3831] (4006/1) Call[3831] access __x2__ = (StatementList "LexicallyDeclaredNames")
  [3832] (4010/1) Normal[3832] let __x6__ = 0i
  [3833] (4011/1) Normal[3833] let __x7__ = 0i
  [3834] (4015/1) Normal[3834] __x7__ = 0i
  [3835] (4016/1) Loop[3835] (< __x7__ __x5__.length)
  [3836] (4020/1) If[3836] __x8__
  [3837] (4021/1) Normal[3837] throw SyntaxError
  [3838] Exit[3838]
  [3839] (4001/0) Call[3839] access __x0__ = (StatementList "LexicallyDeclaredNames")
  [3840] (4007/1) Call[3840] access __x3__ = (StatementList "VarDeclaredNames")
  [3841] (4009/1) Normal[3841] let __x5__ = __x3__
  [3842] (4013/1) Loop[3842] (< __x6__ __x4__.length)
  [3843] (4002/0) Call[3843] app __x1__ = (IsDuplicate __x0__)
  [3844] (4018/1) Normal[3844] __x8__ = true
  [3845] LoopCont[3845]
  [3846] (4012/1) Normal[3846] let __x8__ = false
  [3847] (4008/1) Normal[3847] let __x4__ = __x2__
  [3848] (4003/0) If[3848] __x1__
  [3849] (4017/1) If[3849] (= __x4__[__x6__] __x5__[__x7__])
  [3850] LoopCont[3850]
Algo: Block[0,1].Evaluation [370]
  [3851] Entry[3851]
  [3852] (4024)Normal[3852] let Block = this
  [3853] (4028/2) Call[3853] app __x1__ = (BlockDeclarationInstantiation StatementList blockEnv)
  [3854] (4029/2) Normal[3854] __x1__
  [3855] (4033/5) Normal[3855] CONTEXT.LexicalEnvironment = oldEnv
  [3856] (4034/6) Normal[3856] return blockValue
  [3857] (4025/0) Normal[3857] let oldEnv = CONTEXT.LexicalEnvironment
  [3858] (4030/3) Normal[3858] CONTEXT.LexicalEnvironment = blockEnv
  [3859] (4032/4) Normal[3859] let blockValue = __x2__
  [3860] (4026/1) Call[3860] app __x0__ = (NewDeclarativeEnvironment oldEnv)
  [3861] (4031/4) Call[3861] access __x2__ = (StatementList "Evaluation")
  [3862] (4027/1) Normal[3862] let blockEnv = __x0__
  [3863] Exit[3863]
Algo: BoundFunctionCreate [371]
  [3864] Entry[3864]
  [3865] (4036/0) Normal[3865] assert (= (typeof targetFunction) Object)
  [3866] (4040/3) Call[3866] app __x1__ = (MakeBasicObject internalSlotsList)
  [3867] (4041/3) Normal[3867] let obj = [! __x1__]
  [3868] (4045/6) If[3868] (= __x2__ true)
  [3869] (4046/7) Normal[3869] obj.Construct = ALGORITHM["BoundFunctionExoticObject.Construct"]
  [3870] (4048/8) Normal[3870] obj.BoundTargetFunction = targetFunction
  [3871] (4050/10) Normal[3871] obj.BoundArguments = boundArgs
  [3872] (4051/11) Normal[3872] return obj
  [3873] (4037/1) Call[3873] app __x0__ = (targetFunction.GetPrototypeOf targetFunction)
  [3874] (4042/4) Normal[3874] obj.Prototype = proto
  [3875] (4044/6) Call[3875] app __x2__ = (IsConstructor targetFunction)
  [3876] (4049/9) Normal[3876] obj.BoundThis = boundThis
  [3877] (4038/1) Normal[3877] let proto = [? __x0__]
  [3878] (4043/5) Normal[3878] obj.Call = ALGORITHM["BoundFunctionExoticObject.Call"]
  [3879] (4039/2) Normal[3879] let internalSlotsList = (new ["BoundTargetFunction", "BoundThis", "BoundArguments", "Prototype", "Extensible"])
  [3880] Exit[3880]
Algo: BoundFunctionExoticObject.Call [372]
  [3881] Entry[3881]
  [3882] (4053/0) Normal[3882] let target = F.BoundTargetFunction
  [3883] (4057/3) Normal[3883] let __x1__ = argumentsList
  [3884] (4058/3) Normal[3884] let __x2__ = 0i
  [3885] (4063/3) Normal[3885] append __x3__ -> __x0__
  [3886] LoopCont[3886]
  [3887] (4066/4) Normal[3887] return [? __x4__]
  [3888] Exit[3888]
  [3889] (4054/1) Normal[3889] let boundThis = F.BoundThis
  [3890] (4059/3) Loop[3890] (< __x2__ __x1__.length)
  [3891] (4062/3) Normal[3891] __x2__ = (+ __x2__ 1i)
  [3892] (4065/4) Call[3892] app __x4__ = (Call target boundThis args)
  [3893] (4055/2) Normal[3893] let boundArgs = F.BoundArguments
  [3894] (4064/3) Normal[3894] let args = __x0__
  [3895] (4061/3) Normal[3895] let __x3__ = __x1__[__x2__]
  [3896] (4056/3) Normal[3896] let __x0__ = (copy-obj boundArgs)
Algo: BoundFunctionExoticObject.Construct [373]
  [3897] Entry[3897]
  [3898] (4068/0) Normal[3898] let target = F.BoundTargetFunction
  [3899] (4072/3) Normal[3899] let __x1__ = (copy-obj boundArgs)
  [3900] (4073/3) Normal[3900] let __x2__ = argumentsList
  [3901] (4078/3) Normal[3901] __x3__ = (+ __x3__ 1i)
  [3902] (4079/3) Normal[3902] append __x4__ -> __x1__
  [3903] (4081/4) Call[3903] app __x5__ = (SameValue F newTarget)
  [3904] (4082/4) If[3904] (= __x5__ true)
  [3905] (4069/1) Call[3905] app __x0__ = (IsConstructor target)
  [3906] (4074/3) Normal[3906] let __x3__ = 0i
  [3907] (4077/3) Normal[3907] let __x4__ = __x2__[__x3__]
  [3908] (4080/3) Normal[3908] let args = __x1__
  [3909] (4070/1) Normal[3909] assert (= __x0__ true)
  [3910] (4085/5) Call[3910] app __x6__ = (Construct target args newTarget)
  [3911] (4086/5) Normal[3911] return [? __x6__]
  [3912] LoopCont[3912]
  [3913] (4075/3) Loop[3913] (< __x3__ __x2__.length)
  [3914] (4071/2) Normal[3914] let boundArgs = F.BoundArguments
  [3915] Exit[3915]
  [3916] (4083/4) Normal[3916] newTarget = target
Algo: BreakStatement[0,0].ContainsUndefinedBreakTarget [374]
  [3917] Entry[3917]
  [3918] (4088)Normal[3918] let BreakStatement = this
  [3919] (4089/0) Normal[3919] return false
  [3920] Exit[3920]
Algo: BreakStatement[0,0].EarlyErrors [375]
  [3921] Entry[3921]
  [3922] (4091)Normal[3922] let BreakStatement = this
  [3923] (4092/0) Normal[3923] ??? "It is a Syntax Error if this nt:{BreakStatement} is not nested , directly or indirectly ( but not crossing function boundaries ) , within an nt:{IterationStatement} or a nt:{SwitchStatement} ."
  [3924] Exit[3924]
Algo: BreakStatement[0,0].Evaluation [376]
  [3925] Entry[3925]
  [3926] (4094)Normal[3926] let BreakStatement = this
  [3927] (4095/0) Normal[3927] return (comp[~break~] ~empty~ => ~empty~)
  [3928] Exit[3928]
Algo: BreakStatement[1,0].ContainsUndefinedBreakTarget [377]
  [3929] Entry[3929]
  [3930] (4097)Normal[3930] let BreakStatement = this
  [3931] (4102/1) Normal[3931] return false
  [3932] Exit[3932]
  [3933] (4098/0) Call[3933] access __x0__ = (LabelIdentifier "StringValue")
  [3934] (4099/0) If[3934] (! (contains labelSet __x0__))
  [3935] (4100/0) Normal[3935] return true
Algo: BreakStatement[1,0].Evaluation [378]
  [3936] Entry[3936]
  [3937] (4104)Normal[3937] let BreakStatement = this
  [3938] (4105/0) Call[3938] access __x0__ = (LabelIdentifier "StringValue")
  [3939] (4106/0) Normal[3939] let label = __x0__
  [3940] (4107/1) Normal[3940] return (comp[~break~] ~empty~ => label)
  [3941] Exit[3941]
Algo: BreakableStatement[0,0].ContainsUndefinedContinueTarget [379]
  [3942] Entry[3942]
  [3943] (4109)Normal[3943] let BreakableStatement = this
  [3944] (4113/0) Loop[3944] (< __x2__ __x1__.length)
  [3945] (4115/0) Normal[3945] let __x3__ = __x1__[__x2__]
  [3946] (4118/0) Normal[3946] let newIterationSet = __x0__
  [3947] (4119/1) Call[3947] access __x4__ = (IterationStatement "ContainsUndefinedContinueTarget" newIterationSet (new []))
  [3948] (4110/0) Normal[3948] let __x0__ = (copy-obj iterationSet)
  [3949] (4116/0) Normal[3949] __x2__ = (+ __x2__ 1i)
  [3950] LoopCont[3950]
  [3951] (4111/0) Normal[3951] let __x1__ = labelSet
  [3952] (4120/1) Normal[3952] return __x4__
  [3953] Exit[3953]
  [3954] (4117/0) Normal[3954] append __x3__ -> __x0__
  [3955] (4112/0) Normal[3955] let __x2__ = 0i
Algo: BreakableStatement[0,0].Evaluation [380]
  [3956] Entry[3956]
  [3957] (4122)Normal[3957] let BreakableStatement = this
  [3958] (4123/0) Normal[3958] let newLabelSet = (new [])
  [3959] (4124/1) Call[3959] access __x0__ = (this "LabelledEvaluation" newLabelSet)
  [3960] (4125/1) Normal[3960] return __x0__
  [3961] Exit[3961]
Algo: BreakableStatement[0,0].LabelledEvaluation [381]
  [3962] Entry[3962]
  [3963] (4127)Normal[3963] let BreakableStatement = this
  [3964] (4131/2) If[3964] (= stmtResult.Target ~empty~)
  [3965] (4132/3) If[3965] (= stmtResult.Value ~empty~)
  [3966] (4141/5) Normal[3966] return stmtResult
  [3967] (4138/4) Normal[3967] stmtResult = __x2__
  [3968] (4128/0) Call[3968] access __x0__ = (IterationStatement "LoopEvaluation" labelSet)
  [3969] (4134/3) Call[3969] app __x1__ = (NormalCompletion undefined)
  [3970] (4137/4) Call[3970] app __x2__ = (NormalCompletion stmtResult.Value)
  [3971] (4129/0) Normal[3971] let stmtResult = __x0__
  [3972] (4135/3) Normal[3972] stmtResult = __x1__
  [3973] (4130/1) If[3973] (= stmtResult.Type ~break~)
  [3974] Exit[3974]
Algo: BreakableStatement[1,0].Evaluation [382]
  [3975] Entry[3975]
  [3976] (4143)Normal[3976] let BreakableStatement = this
  [3977] (4144/0) Normal[3977] let newLabelSet = (new [])
  [3978] (4145/1) Call[3978] access __x0__ = (this "LabelledEvaluation" newLabelSet)
  [3979] (4146/1) Normal[3979] return __x0__
  [3980] Exit[3980]
Algo: BreakableStatement[1,0].LabelledEvaluation [383]
  [3981] Entry[3981]
  [3982] (4148)Normal[3982] let BreakableStatement = this
  [3983] (4152/2) If[3983] (= stmtResult.Target ~empty~)
  [3984] (4153/3) If[3984] (= stmtResult.Value ~empty~)
  [3985] (4162/5) Normal[3985] return stmtResult
  [3986] (4159/4) Normal[3986] stmtResult = __x2__
  [3987] (4149/0) Call[3987] access __x0__ = (SwitchStatement "Evaluation")
  [3988] (4155/3) Call[3988] app __x1__ = (NormalCompletion undefined)
  [3989] (4158/4) Call[3989] app __x2__ = (NormalCompletion stmtResult.Value)
  [3990] (4150/0) Normal[3990] let stmtResult = __x0__
  [3991] (4156/3) Normal[3991] stmtResult = __x1__
  [3992] (4151/1) If[3992] (= stmtResult.Type ~break~)
  [3993] Exit[3993]
Algo: BuiltinFunctionObject.Call [384]
  [3994] Entry[3994]
  [3995] (4164/0) Normal[3995] let callerContext = CONTEXT
  [3996] (4169/3) Normal[3996] calleeContext.Function = F
  [3997] (4170/4) Normal[3997] let calleeRealm = F.Realm
  [3998] (4174/8) Normal[3998] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [3999] (4175/9) Call[3999] app result = (F.Code thisArgument argumentsList undefined)
  [4000] (4179/10) Normal[4000] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [4001] (4180/11) Normal[4001] return result
  [4002] (4165/1) If[4002] (= callerContext null)
  [4003] (4171/5) Normal[4003] calleeContext.Realm = calleeRealm
  [4004] (4173/8) Normal[4004] append calleeContext -> EXECUTION_STACK
  [4005] (4177/10) Normal[4005] (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i))
  [4006] (4166/1) Normal[4006] CONTEXT = null
  [4007] (4168/2) Normal[4007] let calleeContext = (new ExecutionContext())
  [4008] (4176/10) If[4008] (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] calleeContext)
  [4009] (4172/6) Normal[4009] calleeContext.ScriptOrModule = null
  [4010] Exit[4010]
Algo: BuiltinFunctionObject.Construct [385]
  [4011] Entry[4011]
  [4012] (4182/0) Normal[4012] let callerContext = CONTEXT
  [4013] (4187/3) Normal[4013] calleeContext.Function = F
  [4014] (4188/4) Normal[4014] let calleeRealm = F.Realm
  [4015] (4192/8) Normal[4015] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [4016] (4193/9) Call[4016] app result = (F.Code undefined argumentsList newTarget)
  [4017] (4197/10) Normal[4017] (pop EXECUTION_STACK __x0__)
  [4018] (4199/10) Normal[4018] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [4019] (4183/1) If[4019] (= callerContext null)
  [4020] (4189/5) Normal[4020] calleeContext.Realm = calleeRealm
  [4021] (4191/8) Normal[4021] append calleeContext -> EXECUTION_STACK
  [4022] (4196/10) Normal[4022] let __x0__ = (- EXECUTION_STACK.length 1i)
  [4023] (4184/1) Normal[4023] CONTEXT = null
  [4024] (4186/2) Normal[4024] let calleeContext = (new ExecutionContext())
  [4025] (4194/10) If[4025] (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] calleeContext)
  [4026] (4190/6) Normal[4026] calleeContext.ScriptOrModule = null
  [4027] (4200/11) Normal[4027] return result
  [4028] Exit[4028]
Algo: ByteListBitwiseOp [386]
  [4029] Entry[4029]
  [4030] (4202/0) Normal[4030] assert (|| (|| (= op "&") (= op "^")) (= op "|"))
  [4031] (4206/4) Normal[4031] let __x1__ = 0i
  [4032] (4207/4) Loop[4032] (< __x1__ __x0__.length)
  [4033] (4212/6) Normal[4033] ??? "If id:{op} is code:{&} , let id:{resultByte} be the result of applying the bitwise AND operation to id:{xByte} and id:{yByte} ."
  [4034] (4213/7) Normal[4034] ??? "Else if id:{op} is code:{^} , let id:{resultByte} be the result of applying the bitwise exclusive OR ( XOR ) operation to id:{xByte} and id:{yByte} ."
  [4035] (4216/10) Normal[4035] append resultByte -> result
  [4036] LoopCont[4036]
  [4037] (4203/2) Normal[4037] let result = (new [])
  [4038] (4209/4) Normal[4038] let xByte = __x0__[__x1__]
  [4039] (4217/11) Normal[4039] return result
  [4040] (4211/5) Normal[4040] let yByte = yBytes[i]
  [4041] (4215/9) Normal[4041] i = (+ i 1i)
  [4042] (4204/3) Normal[4042] let i = 0i
  [4043] (4214/8) Normal[4043] ??? "Else , id:{op} is code:{|} . Let id:{resultByte} be the result of applying the bitwise inclusive OR operation to id:{xByte} and id:{yByte} ."
  [4044] (4210/4) Normal[4044] __x1__ = (+ __x1__ 1i)
  [4045] (4205/4) Normal[4045] let __x0__ = xBytes
  [4046] Exit[4046]
Algo: ByteListEqual [387]
  [4047] Entry[4047]
  [4048] (4219/0) Normal[4048] ??? "If id:{xBytes} and id:{yBytes} do not have the same number of elements , return value:{false} ."
  [4049] (4223/2) Loop[4049] (< __x1__ __x0__.length)
  [4050] (4225/2) Normal[4050] let xByte = __x0__[__x1__]
  [4051] (4232/6) Normal[4051] return true
  [4052] (4229/4) Normal[4052] return false
  [4053] (4231/5) Normal[4053] i = (+ i 1i)
  [4054] (4220/1) Normal[4054] let i = 0i
  [4055] (4226/2) Normal[4055] __x1__ = (+ __x1__ 1i)
  [4056] (4228/4) If[4056] (! (== xByte yByte))
  [4057] Exit[4057]
  [4058] (4221/2) Normal[4058] let __x0__ = xBytes
  [4059] LoopCont[4059]
  [4060] (4227/3) Normal[4060] let yByte = yBytes[i]
  [4061] (4222/2) Normal[4061] let __x1__ = 0i
Algo: Call [388]
  [4062] Entry[4062]
  [4063] (4234/0) If[4063] (= argumentsList absent)
  [4064] (4239/1) Normal[4064] throw TypeError
  [4065] (4241/2) Call[4065] app __x1__ = (F.Call F V argumentsList)
  [4066] (4235/0) Normal[4066] argumentsList = (new [])
  [4067] (4237/1) Call[4067] app __x0__ = (IsCallable F)
  [4068] (4242/2) Normal[4068] return [? __x1__]
  [4069] Exit[4069]
  [4070] (4238/1) If[4070] (= __x0__ false)
Algo: CallExpression[0,0].AssignmentTargetType [389]
  [4071] Entry[4071]
  [4072] (4244)Normal[4072] let CallExpression = this
  [4073] (4245/0) Normal[4073] return ~invalid~
  [4074] Exit[4074]
Algo: CallExpression[0,0].Evaluation [390]
  [4075] Entry[4075]
  [4076] (4247)Normal[4076] let CallExpression = this
  [4077] (4251/1) Normal[4077] let memberExpr = __x1__
  [4078] (4252/2) Call[4078] access __x2__ = (expr "Arguments")
  [4079] (4256/4) Call[4079] app __x4__ = (GetValue ref)
  [4080] (4257/4) Normal[4080] let func = [? __x4__]
  [4081] (4260/5) If[4081] __x5__
  [4082] (4262/5) Call[4082] app __x6__ = (IsPropertyReference ref)
  [4083] (4268/5) If[4083] __x5__
  [4084] (4248/0) Call[4084] access __x0__ = (CoverCallExpressionAndAsyncArrowHead "CoveredCallExpression")
  [4085] (4253/2) Normal[4085] let arguments = __x2__
  [4086] (4255/3) Normal[4086] let ref = __x3__
  [4087] (4259/5) Normal[4087] __x5__ = (is-instance-of ref ReferenceRecord)
  [4088] (4249/0) Normal[4088] let expr = __x0__
  [4089] (4258/5) Normal[4089] let __x5__ = true
  [4090] (4254/3) Call[4090] access __x3__ = (memberExpr "Evaluation")
  [4091] (4265/5) Normal[4091] __x5__ = (= ref.ReferencedName "eval")
  [4092] (4250/1) Call[4092] access __x1__ = (expr "MemberExpression")
  [4093] (4263/5) Normal[4093] __x5__ = (= __x6__ false)
  [4094] (4275/8) If[4094] (= argList.length 0i)
  [4095] (4276/8) Normal[4095] return undefined
  [4096] (4278/9) Normal[4096] let evalArg = argList[0i]
  [4097] (4291/15) Normal[4097] return [? __x11__]
  [4098] Exit[4098]
  [4099] (4270/6) Call[4099] app __x7__ = (SameValue func INTRINSICS["%eval%"])
  [4100] (4271/6) If[4100] (= __x7__ true)
  [4101] (4281/10) Normal[4101] let strictCaller = false
  [4102] (4282/11) Normal[4102] let evalRealm = REALM
  [4103] (4280/10) Normal[4103] let strictCaller = true
  [4104] (4273/7) Call[4104] access __x8__ = (arguments "ArgumentListEvaluation")
  [4105] (4287/13) Normal[4105] let thisCall = this
  [4106] (4288/14) Call[4106] app __x10__ = (IsInTailPosition thisCall)
  [4107] (4264/5) If[4107] __x5__
  [4108] (4284/12) Normal[4108] return [? __x9__]
  [4109] (4289/14) Normal[4109] let tailCall = __x10__
  [4110] (4274/7) Normal[4110] let argList = [? __x8__]
  [4111] (4279/10) If[4111] true
  [4112] (4290/15) Call[4112] app __x11__ = (EvaluateCall func ref arguments tailCall)
  [4113] (4283/12) Call[4113] app __x9__ = (PerformEval evalArg evalRealm strictCaller true)
Algo: CallExpression[0,0].HasCallInTailPosition [391]
  [4114] Entry[4114]
  [4115] (4293)Normal[4115] let CallExpression = this
  [4116] (4294/0) If[4116] (= this call)
  [4117] (4295/0) Normal[4117] return true
  [4118] (4297/1) Normal[4118] return false
  [4119] Exit[4119]
Algo: CallExpression[1,0].AssignmentTargetType [392]
  [4120] Entry[4120]
  [4121] (4299)Normal[4121] let CallExpression = this
  [4122] (4300/0) Normal[4122] return ~invalid~
  [4123] Exit[4123]
Algo: CallExpression[1,0].HasCallInTailPosition [393]
  [4124] Entry[4124]
  [4125] (4302)Normal[4125] let CallExpression = this
  [4126] (4303/0) Normal[4126] return false
  [4127] Exit[4127]
Algo: CallExpression[2,0].AssignmentTargetType [394]
  [4128] Entry[4128]
  [4129] (4305)Normal[4129] let CallExpression = this
  [4130] (4306/0) Normal[4130] return ~invalid~
  [4131] Exit[4131]
Algo: CallExpression[3,0].AssignmentTargetType [395]
  [4132] Entry[4132]
  [4133] (4307/0) Normal[4133] return ~invalid~
  [4134] Exit[4134]
Algo: CallExpression[3,0].Evaluation [396]
  [4135] Entry[4135]
  [4136] (4309/0) Call[4136] access __x0__ = (CallExpression "Evaluation")
  [4137] (4313/2) Normal[4137] let thisCall = this
  [4138] (4314/3) Call[4138] app __x2__ = (IsInTailPosition thisCall)
  [4139] (4310/0) Normal[4139] let ref = __x0__
  [4140] (4315/3) Normal[4140] let tailCall = __x2__
  [4141] (4317/4) Normal[4141] return [? __x3__]
  [4142] Exit[4142]
  [4143] (4311/1) Call[4143] app __x1__ = (GetValue ref)
  [4144] (4316/4) Call[4144] app __x3__ = (EvaluateCall func ref Arguments tailCall)
  [4145] (4312/1) Normal[4145] let func = [? __x1__]
Algo: CallExpression[3,0].HasCallInTailPosition [397]
  [4146] Entry[4146]
  [4147] (4319/0) If[4147] (= this call)
  [4148] (4320/0) Normal[4148] return true
  [4149] (4322/1) Normal[4149] return false
  [4150] Exit[4150]
Algo: CallExpression[4,0].AssignmentTargetType [398]
  [4151] Entry[4151]
  [4152] (4323/0) Normal[4152] return ~simple~
  [4153] Exit[4153]
Algo: CallExpression[4,0].Evaluation [399]
  [4154] Entry[4154]
  [4155] (4325/0) Call[4155] access __x0__ = (CallExpression "Evaluation")
  [4156] (4329/2) If[4156] true
  [4157] (4330/2) Normal[4157] let strict = true
  [4158] (4331/2) Normal[4158] let strict = false
  [4159] (4326/0) Normal[4159] let baseReference = __x0__
  [4160] (4332/3) Call[4160] app __x2__ = (EvaluatePropertyAccessWithExpressionKey baseValue Expression strict)
  [4161] (4333/3) Normal[4161] return [? __x2__]
  [4162] Exit[4162]
  [4163] (4327/1) Call[4163] app __x1__ = (GetValue baseReference)
  [4164] (4328/1) Normal[4164] let baseValue = [? __x1__]
Algo: CallExpression[4,0].HasCallInTailPosition [400]
  [4165] Entry[4165]
  [4166] (4334/0) Normal[4166] return false
  [4167] Exit[4167]
Algo: CallExpression[5,0].AssignmentTargetType [401]
  [4168] Entry[4168]
  [4169] (4335/0) Normal[4169] return ~simple~
  [4170] Exit[4170]
Algo: CallExpression[5,0].Contains [402]
  [4171] Entry[4171]
  [4172] (4337/0) Call[4172] access __x0__ = (CallExpression "Contains" symbol)
  [4173] (4338/0) If[4173] (= __x0__ true)
  [4174] (4339/0) Normal[4174] return true
  [4175] (4341/1) Normal[4175] return false
  [4176] Exit[4176]
Algo: CallExpression[5,0].Evaluation [403]
  [4177] Entry[4177]
  [4178] (4343/0) Call[4178] access __x0__ = (CallExpression "Evaluation")
  [4179] (4347/2) If[4179] true
  [4180] (4348/2) Normal[4180] let strict = true
  [4181] (4349/2) Normal[4181] let strict = false
  [4182] (4344/0) Normal[4182] let baseReference = __x0__
  [4183] (4350/3) Call[4183] app __x2__ = (EvaluatePropertyAccessWithIdentifierKey baseValue IdentifierName strict)
  [4184] (4351/3) Normal[4184] return [? __x2__]
  [4185] Exit[4185]
  [4186] (4345/1) Call[4186] app __x1__ = (GetValue baseReference)
  [4187] (4346/1) Normal[4187] let baseValue = [? __x1__]
Algo: CallExpression[5,0].HasCallInTailPosition [404]
  [4188] Entry[4188]
  [4189] (4352/0) Normal[4189] return false
  [4190] Exit[4190]
Algo: CallExpression[6,0].AssignmentTargetType [405]
  [4191] Entry[4191]
  [4192] (4353/0) Normal[4192] return ~invalid~
  [4193] Exit[4193]
Algo: CallExpression[6,0].Evaluation [406]
  [4194] Entry[4194]
  [4195] (4355/0) Call[4195] access __x0__ = (CallExpression "Evaluation")
  [4196] (4359/2) Normal[4196] let thisCall = this
  [4197] (4360/3) Call[4197] app __x2__ = (IsInTailPosition thisCall)
  [4198] (4356/0) Normal[4198] let tagRef = __x0__
  [4199] (4361/3) Normal[4199] let tailCall = __x2__
  [4200] (4363/4) Normal[4200] return [? __x3__]
  [4201] Exit[4201]
  [4202] (4357/1) Call[4202] app __x1__ = (GetValue tagRef)
  [4203] (4362/4) Call[4203] app __x3__ = (EvaluateCall tagFunc tagRef TemplateLiteral tailCall)
  [4204] (4358/1) Normal[4204] let tagFunc = [? __x1__]
Algo: CallExpression[6,0].HasCallInTailPosition [407]
  [4205] Entry[4205]
  [4206] (4365/0) If[4206] (= this call)
  [4207] (4366/0) Normal[4207] return true
  [4208] (4368/1) Normal[4208] return false
  [4209] Exit[4209]
Algo: CanonicalNumericIndexString [408]
  [4210] Entry[4210]
  [4211] (4370/0) Normal[4211] assert (= (typeof argument) String)
  [4212] (4375/2) Normal[4212] let n = [! __x0__]
  [4213] (4376/3) Call[4213] app __x1__ = (ToString n)
  [4214] (4381/4) Normal[4214] return n
  [4215] Exit[4215]
  [4216] (4371/1) If[4216] (= argument "-0")
  [4217] (4377/3) Call[4217] app __x2__ = (SameValue [! __x1__] argument)
  [4218] (4379/3) Normal[4218] return undefined
  [4219] (4372/1) Normal[4219] return -0.0
  [4220] (4374/2) Call[4220] app __x0__ = (ToNumber argument)
  [4221] (4378/3) If[4221] (= __x2__ false)
Algo: Canonicalize [409]
  [4222] Entry[4222]
  [4223] (4383/0) If[4223] (&& (= Unicode true) (= IgnoreCase true))
  [4224] (4389/3) Normal[4224] return ch
  [4225] (4391/5) Normal[4225] ??? "Let id:{cp} be the code point whose numeric value is that of id:{ch} ."
  [4226] (4395/8) Normal[4226] ??? "If id:{uStr} does not consist of a single code unit , return id:{ch} ."
  [4227] (4396/9) Normal[4227] ??? "Let id:{cu} be id:{uStr} ' s single code unit element ."
  [4228] (4385/1) Normal[4228] ??? "If the file CaseFolding . txt of the Unicode Character Database provides a simple or common case folding mapping for id:{ch} , return the result of applying that mapping to id:{ch} ."
  [4229] (4388/3) If[4229] (= IgnoreCase false)
  [4230] (4392/6) Normal[4230] ??? "Let id:{u} be the result of toUppercase ( « id:{cp} » ) , according to the Unicode Default Case Conversion algorithm ."
  [4231] (4394/7) Normal[4231] let uStr = [! __x0__]
  [4232] (4398/11) Normal[4232] return cu
  [4233] Exit[4233]
  [4234] (4386/2) Normal[4234] return ch
  [4235] (4397/10) Normal[4235] ??? "If the numeric value of id:{ch} ≥ 128 and the numeric value of id:{cu} < 128 , return id:{ch} ."
  [4236] (4393/7) Call[4236] app __x0__ = (CodePointsToString u)
Algo: CaseBlock[0,0].CaseBlockEvaluation [410]
  [4237] Entry[4237]
  [4238] (4400)Normal[4238] let CaseBlock = this
  [4239] (4401/0) Normal[4239] return undefined
  [4240] Exit[4240]
Algo: CaseBlock[0,0].ContainsDuplicateLabels [411]
  [4241] Entry[4241]
  [4242] (4403)Normal[4242] let CaseBlock = this
  [4243] (4404/0) Normal[4243] return false
  [4244] Exit[4244]
Algo: CaseBlock[0,0].ContainsUndefinedBreakTarget [412]
  [4245] Entry[4245]
  [4246] (4406)Normal[4246] let CaseBlock = this
  [4247] (4407/0) Normal[4247] return false
  [4248] Exit[4248]
Algo: CaseBlock[0,0].ContainsUndefinedContinueTarget [413]
  [4249] Entry[4249]
  [4250] (4409)Normal[4250] let CaseBlock = this
  [4251] (4410/0) Normal[4251] return false
  [4252] Exit[4252]
Algo: CaseBlock[0,0].HasCallInTailPosition [414]
  [4253] Entry[4253]
  [4254] (4412)Normal[4254] let CaseBlock = this
  [4255] (4413/0) Normal[4255] return false
  [4256] Exit[4256]
Algo: CaseBlock[0,0].LexicallyDeclaredNames [415]
  [4257] Entry[4257]
  [4258] (4415)Normal[4258] let CaseBlock = this
  [4259] (4416/0) Normal[4259] return (new [])
  [4260] Exit[4260]
Algo: CaseBlock[0,0].LexicallyScopedDeclarations [416]
  [4261] Entry[4261]
  [4262] (4418)Normal[4262] let CaseBlock = this
  [4263] (4419/0) Normal[4263] return (new [])
  [4264] Exit[4264]
Algo: CaseBlock[0,0].VarDeclaredNames [417]
  [4265] Entry[4265]
  [4266] (4421)Normal[4266] let CaseBlock = this
  [4267] (4422/0) Normal[4267] return (new [])
  [4268] Exit[4268]
Algo: CaseBlock[0,0].VarScopedDeclarations [418]
  [4269] Entry[4269]
  [4270] (4424)Normal[4270] let CaseBlock = this
  [4271] (4425/0) Normal[4271] return (new [])
  [4272] Exit[4272]
Algo: CaseBlock[0,1].CaseBlockEvaluation [419]
  [4273] Entry[4273]
  [4274] (4427)Normal[4274] let CaseBlock = this
  [4275] (4431/3) Normal[4275] let __x0__ = A
  [4276] (4432/3) Normal[4276] let __x1__ = 0i
  [4277] (4437/4) If[4277] (= found false)
  [4278] (4439/5) Call[4278] app __x2__ = (CaseClauseIsSelected C input)
  [4279] (4442/6) If[4279] (= found true)
  [4280] (4444/7) Call[4280] access __x3__ = (C "Evaluation")
  [4281] (4445/7) Normal[4281] let R = __x3__
  [4282] (4452/9) Call[4282] app __x5__ = (UpdateEmpty R V)
  [4283] (4453/9) Normal[4283] return __x5__
  [4284] (4428/0) Normal[4284] let V = undefined
  [4285] (4433/3) Loop[4285] (< __x1__ __x0__.length)
  [4286] LoopCont[4286]
  [4287] (4436/3) Normal[4287] __x1__ = (+ __x1__ 1i)
  [4288] (4429/1) Normal[4288] let A = (get-elems CaseClauses CaseClause)
  [4289] (4447/8) Normal[4289] V = R.Value
  [4290] (4449/9) Call[4290] app __x4__ = (IsAbruptCompletion R)
  [4291] (4440/5) Normal[4291] found = [? __x2__]
  [4292] (4435/3) Normal[4292] let C = __x0__[__x1__]
  [4293] (4456/10) Normal[4293] return V
  [4294] (4430/2) Normal[4294] let found = false
  [4295] (4450/9) If[4295] __x4__
  [4296] (4446/8) If[4296] (! (= R.Value ~empty~))
  [4297] Exit[4297]
Algo: CaseBlock[1,0].CaseBlockEvaluation [420]
  [4298] (4462/1) Normal[4298] let A = (new [])
  [4299] (4463/5) Normal[4299] let found = false
  [4300] (4543/33) If[4300] (! (= R.Value ~empty~))
  [4301] (4544/33) Normal[4301] V = R.Value
  [4302] (4546/34) Call[4302] app __x18__ = (IsAbruptCompletion R)
  [4303] (4459/0) Normal[4303] let V = undefined
  [4304] (4460/1) If[4304] (! (= CaseClauses0 absent))
  [4305] (4461/2) Normal[4305] let A = (get-elems CaseClauses0 CaseClause)
  [4306] (4549/34) Call[4306] app __x19__ = (UpdateEmpty R V)
  [4307] (4550/34) Normal[4307] return __x19__
  [4308] Entry[4308]
  [4309] (4458)Normal[4309] let CaseBlock = this
  [4310] (4468/6) Normal[4310] let C = __x0__[__x1__]
  [4311] (4469/6) Normal[4311] __x1__ = (+ __x1__ 1i)
  [4312] (4532/29) Call[4312] app __x14__ = (UpdateEmpty R V)
  [4313] (4533/29) Normal[4313] return __x14__
  [4314] (4511/24) Normal[4314] V = R.Value
  [4315] (4513/25) Call[4315] app __x10__ = (IsAbruptCompletion R)
  [4316] LoopCont[4316]
  [4317] (4466/6) Loop[4317] (< __x1__ __x0__.length)
  [4318] (4504/21) Normal[4318] foundInB = [? __x8__]
  [4319] (4506/22) If[4319] (= foundInB true)
  [4320] (4489/13) Normal[4320] let foundInB = false
  [4321] (4490/14) If[4321] (! (= CaseClauses1 absent))
  [4322] (4526/28) If[4322] (! (= R.Value ~empty~))
  [4323] (4527/28) Normal[4323] V = R.Value
  [4324] (4529/29) Call[4324] app __x13__ = (IsAbruptCompletion R)
  [4325] (4473/8) Normal[4325] found = [? __x2__]
  [4326] (4475/9) If[4326] (= found true)
  [4327] (4482/12) Call[4327] app __x4__ = (IsAbruptCompletion R)
  [4328] (4483/12) If[4328] __x4__
  [4329] (4517/25) Normal[4329] return __x11__
  [4330] LoopCont[4330]
  [4331] (4535/31) Normal[4331] let __x15__ = B
  [4332] (4493/18) If[4332] (= found false)
  [4333] (4495/19) Normal[4333] let __x6__ = B
  [4334] (4521/26) If[4334] (= foundInB true)
  [4335] (4539/31) Normal[4335] let C = __x15__[__x16__]
  [4336] (4540/31) Normal[4336] __x16__ = (+ __x16__ 1i)
  [4337] (4464/6) Normal[4337] let __x0__ = A
  [4338] (4537/31) Loop[4338] (< __x16__ __x15__.length)
  [4339] (4552/35) Normal[4339] return V
  [4340] LoopCont[4340]
  [4341] (4485/12) Call[4341] app __x5__ = (UpdateEmpty R V)
  [4342] (4499/19) Normal[4342] let C = __x6__[__x7__]
  [4343] (4500/19) Normal[4343] __x7__ = (+ __x7__ 1i)
  [4344] (4492/14) Normal[4344] let B = (new [])
  [4345] (4508/23) Call[4345] access __x9__ = (C "Evaluation")
  [4346] (4472/8) Call[4346] app __x2__ = (CaseClauseIsSelected C input)
  [4347] (4510/24) If[4347] (! (= R.Value ~empty~))
  [4348] (4516/25) Call[4348] app __x11__ = (UpdateEmpty R V)
  [4349] (4542/32) Normal[4349] let R = __x17__
  [4350] (4478/10) Normal[4350] let R = __x3__
  [4351] (4479/11) If[4351] (! (= R.Value ~empty~))
  [4352] (4497/19) Loop[4352] (< __x7__ __x6__.length)
  [4353] (4501/20) If[4353] (= foundInB false)
  [4354] (4486/12) Normal[4354] return __x5__
  [4355] (4514/25) If[4355] __x10__
  [4356] (4536/31) Normal[4356] let __x16__ = 0i
  [4357] (4491/15) Normal[4357] let B = (get-elems CaseClauses1 CaseClause)
  [4358] (4470/7) If[4358] (= found false)
  [4359] (4530/29) If[4359] __x13__
  [4360] (4522/26) Normal[4360] return V
  [4361] (4524/27) Call[4361] access __x12__ = (DefaultClause "Evaluation")
  [4362] (4465/6) Normal[4362] let __x1__ = 0i
  [4363] (4509/23) Normal[4363] let R = __x9__
  [4364] (4503/21) Call[4364] app __x8__ = (CaseClauseIsSelected C input)
  [4365] (4541/32) Call[4365] access __x17__ = (C "Evaluation")
  [4366] (4480/11) Normal[4366] V = R.Value
  [4367] (4525/27) Normal[4367] let R = __x12__
  [4368] (4547/34) If[4368] __x18__
  [4369] (4477/10) Call[4369] access __x3__ = (C "Evaluation")
  [4370] (4496/19) Normal[4370] let __x7__ = 0i
  [4371] Exit[4371]
Algo: CaseBlock[1,0].ContainsDuplicateLabels [421]
  [4372] Entry[4372]
  [4373] (4554)Normal[4373] let CaseBlock = this
  [4374] (4559/2) If[4374] (= hasDuplicates true)
  [4375] (4560/2) Normal[4375] return true
  [4376] (4563/3) Call[4376] access __x1__ = (DefaultClause "ContainsDuplicateLabels" labelSet)
  [4377] (4566/4) Normal[4377] return true
  [4378] (4568/5) If[4378] (= CaseClauses1 absent)
  [4379] (4572/6) Normal[4379] return __x2__
  [4380] Exit[4380]
  [4381] (4555/0) If[4381] (! (= CaseClauses0 absent))
  [4382] (4565/4) If[4382] (= hasDuplicates true)
  [4383] (4571/6) Call[4383] access __x2__ = (CaseClauses1 "ContainsDuplicateLabels" labelSet)
  [4384] (4557/1) Call[4384] access __x0__ = (CaseClauses0 "ContainsDuplicateLabels" labelSet)
  [4385] (4569/5) Normal[4385] return false
  [4386] (4564/3) Normal[4386] let hasDuplicates = __x1__
  [4387] (4558/1) Normal[4387] let hasDuplicates = __x0__
Algo: CaseBlock[1,0].ContainsUndefinedBreakTarget [422]
  [4388] Entry[4388]
  [4389] (4574)Normal[4389] let CaseBlock = this
  [4390] (4579/2) If[4390] (= hasUndefinedLabels true)
  [4391] (4580/2) Normal[4391] return true
  [4392] (4583/3) Call[4392] access __x1__ = (DefaultClause "ContainsUndefinedBreakTarget" labelSet)
  [4393] (4586/4) Normal[4393] return true
  [4394] (4588/5) If[4394] (= CaseClauses1 absent)
  [4395] (4592/6) Normal[4395] return __x2__
  [4396] Exit[4396]
  [4397] (4575/0) If[4397] (! (= CaseClauses0 absent))
  [4398] (4585/4) If[4398] (= hasUndefinedLabels true)
  [4399] (4591/6) Call[4399] access __x2__ = (CaseClauses1 "ContainsUndefinedBreakTarget" labelSet)
  [4400] (4577/1) Call[4400] access __x0__ = (CaseClauses0 "ContainsUndefinedBreakTarget" labelSet)
  [4401] (4589/5) Normal[4401] return false
  [4402] (4584/3) Normal[4402] let hasUndefinedLabels = __x1__
  [4403] (4578/1) Normal[4403] let hasUndefinedLabels = __x0__
Algo: CaseBlock[1,0].ContainsUndefinedContinueTarget [423]
  [4404] Entry[4404]
  [4405] (4594)Normal[4405] let CaseBlock = this
  [4406] (4599/2) If[4406] (= hasUndefinedLabels true)
  [4407] (4600/2) Normal[4407] return true
  [4408] (4603/3) Call[4408] access __x1__ = (DefaultClause "ContainsUndefinedContinueTarget" iterationSet (new []))
  [4409] (4606/4) Normal[4409] return true
  [4410] (4608/5) If[4410] (= CaseClauses1 absent)
  [4411] (4612/6) Normal[4411] return __x2__
  [4412] Exit[4412]
  [4413] (4595/0) If[4413] (! (= CaseClauses0 absent))
  [4414] (4605/4) If[4414] (= hasUndefinedLabels true)
  [4415] (4611/6) Call[4415] access __x2__ = (CaseClauses1 "ContainsUndefinedContinueTarget" iterationSet (new []))
  [4416] (4597/1) Call[4416] access __x0__ = (CaseClauses0 "ContainsUndefinedContinueTarget" iterationSet (new []))
  [4417] (4609/5) Normal[4417] return false
  [4418] (4604/3) Normal[4418] let hasUndefinedLabels = __x1__
  [4419] (4598/1) Normal[4419] let hasUndefinedLabels = __x0__
Algo: CaseBlock[1,0].HasCallInTailPosition [424]
  [4420] Entry[4420]
  [4421] (4614)Normal[4421] let CaseBlock = this
  [4422] (4619/1) Normal[4422] let has = __x0__
  [4423] (4621/2) If[4423] (= has true)
  [4424] (4626/4) If[4424] (= has true)
  [4425] (4627/4) Normal[4425] return true
  [4426] (4629/5) If[4426] (! (= CaseClauses1 absent))
  [4427] (4632/5) Normal[4427] let has = __x2__
  [4428] (4634/6) Normal[4428] return has
  [4429] (4615/0) Normal[4429] let has = false
  [4430] (4622/2) Normal[4430] return true
  [4431] (4624/3) Call[4431] access __x1__ = (DefaultClause "HasCallInTailPosition" call)
  [4432] (4625/3) Normal[4432] let has = __x1__
  [4433] (4631/5) Call[4433] access __x2__ = (CaseClauses1 "HasCallInTailPosition" call)
  [4434] (4616/1) If[4434] (! (= CaseClauses0 absent))
  [4435] (4618/1) Call[4435] access __x0__ = (CaseClauses0 "HasCallInTailPosition" call)
  [4436] Exit[4436]
Algo: CaseBlock[1,0].LexicallyDeclaredNames [425]
  [4437] Entry[4437]
  [4438] (4636)Normal[4438] let CaseBlock = this
  [4439] (4641/0) Normal[4439] let names = (new [])
  [4440] (4642/2) Call[4440] access __x1__ = (DefaultClause "LexicallyDeclaredNames")
  [4441] (4647/2) Normal[4441] let __x4__ = __x2__[__x3__]
  [4442] (4648/2) Normal[4442] __x3__ = (+ __x3__ 1i)
  [4443] (4650/3) If[4443] (= CaseClauses1 absent)
  [4444] (4651/3) Normal[4444] return names
  [4445] (4653/4) Normal[4445] ??? "Return the result of appending to id:{names} the elements of the LexicallyDeclaredNames of the second nt:{CaseClauses} ."
  [4446] (4637/0) If[4446] (! (= CaseClauses0 absent))
  [4447] (4643/2) Normal[4447] let __x2__ = __x1__
  [4448] (4645/2) Loop[4448] (< __x3__ __x2__.length)
  [4449] LoopCont[4449]
  [4450] (4639/0) Call[4450] access __x0__ = (CaseClauses0 "LexicallyDeclaredNames")
  [4451] (4649/2) Normal[4451] append __x4__ -> names
  [4452] (4644/2) Normal[4452] let __x3__ = 0i
  [4453] (4640/0) Normal[4453] let names = __x0__
  [4454] Exit[4454]
Algo: CaseBlock[1,0].LexicallyScopedDeclarations [426]
  [4455] Entry[4455]
  [4456] (4655)Normal[4456] let CaseBlock = this
  [4457] (4660/0) Normal[4457] let declarations = (new [])
  [4458] (4661/2) Call[4458] access __x1__ = (DefaultClause "LexicallyScopedDeclarations")
  [4459] (4666/2) Normal[4459] let __x4__ = __x2__[__x3__]
  [4460] (4667/2) Normal[4460] __x3__ = (+ __x3__ 1i)
  [4461] (4669/3) If[4461] (= CaseClauses1 absent)
  [4462] (4670/3) Normal[4462] return declarations
  [4463] (4672/4) Normal[4463] ??? "Return the result of appending to id:{declarations} the elements of the LexicallyScopedDeclarations of the second nt:{CaseClauses} ."
  [4464] (4656/0) If[4464] (! (= CaseClauses0 absent))
  [4465] (4662/2) Normal[4465] let __x2__ = __x1__
  [4466] (4664/2) Loop[4466] (< __x3__ __x2__.length)
  [4467] LoopCont[4467]
  [4468] (4658/0) Call[4468] access __x0__ = (CaseClauses0 "LexicallyScopedDeclarations")
  [4469] (4668/2) Normal[4469] append __x4__ -> declarations
  [4470] (4663/2) Normal[4470] let __x3__ = 0i
  [4471] (4659/0) Normal[4471] let declarations = __x0__
  [4472] Exit[4472]
Algo: CaseBlock[1,0].VarDeclaredNames [427]
  [4473] Entry[4473]
  [4474] (4674)Normal[4474] let CaseBlock = this
  [4475] (4679/0) Normal[4475] let names = (new [])
  [4476] (4680/2) Call[4476] access __x1__ = (DefaultClause "VarDeclaredNames")
  [4477] (4685/2) Normal[4477] let __x4__ = __x2__[__x3__]
  [4478] (4686/2) Normal[4478] __x3__ = (+ __x3__ 1i)
  [4479] (4688/3) If[4479] (= CaseClauses1 absent)
  [4480] (4689/3) Normal[4480] return names
  [4481] (4691/4) Call[4481] access __names__ = (CaseClauses1 "VarDeclaredNames")
  [4482] (4696/4) Normal[4482] __i__ = (+ __i__ 1i)
  [4483] LoopCont[4483]
  [4484] (4675/0) If[4484] (! (= CaseClauses0 absent))
  [4485] (4681/2) Normal[4485] let __x2__ = __x1__
  [4486] (4693/4) Loop[4486] (< __i__ __names__.length)
  [4487] (4683/2) Loop[4487] (< __x3__ __x2__.length)
  [4488] LoopCont[4488]
  [4489] (4677/0) Call[4489] access __x0__ = (CaseClauses0 "VarDeclaredNames")
  [4490] (4692/4) Normal[4490] let __i__ = 0i
  [4491] (4697/4) Normal[4491] return names
  [4492] Exit[4492]
  [4493] (4687/2) Normal[4493] append __x4__ -> names
  [4494] (4682/2) Normal[4494] let __x3__ = 0i
  [4495] (4678/0) Normal[4495] let names = __x0__
  [4496] (4695/4) Normal[4496] append __names__[__i__] -> names
Algo: CaseBlock[1,0].VarScopedDeclarations [428]
  [4497] Entry[4497]
  [4498] (4699)Normal[4498] let CaseBlock = this
  [4499] (4704/0) Normal[4499] let declarations = (new [])
  [4500] (4705/2) Call[4500] access __x1__ = (DefaultClause "VarScopedDeclarations")
  [4501] (4710/2) Normal[4501] let __x4__ = __x2__[__x3__]
  [4502] (4711/2) Normal[4502] __x3__ = (+ __x3__ 1i)
  [4503] (4713/3) If[4503] (= CaseClauses1 absent)
  [4504] (4714/3) Normal[4504] return declarations
  [4505] (4716/4) Call[4505] access decls = (CaseClauses1 "VarScopedDeclarations")
  [4506] (4721/4) Normal[4506] __i__ = (+ __i__ 1i)
  [4507] LoopCont[4507]
  [4508] (4700/0) If[4508] (! (= CaseClauses0 absent))
  [4509] (4706/2) Normal[4509] let __x2__ = __x1__
  [4510] (4718/4) Loop[4510] (< __i__ decls.length)
  [4511] (4708/2) Loop[4511] (< __x3__ __x2__.length)
  [4512] LoopCont[4512]
  [4513] (4702/0) Call[4513] access __x0__ = (CaseClauses0 "VarScopedDeclarations")
  [4514] (4717/4) Normal[4514] let __i__ = 0i
  [4515] (4722/4) Normal[4515] return decls
  [4516] Exit[4516]
  [4517] (4712/2) Normal[4517] append __x4__ -> declarations
  [4518] (4707/2) Normal[4518] let __x3__ = 0i
  [4519] (4703/0) Normal[4519] let declarations = __x0__
  [4520] (4720/4) Normal[4520] append decls[__i__] -> declarations
Algo: CaseBlock[1,1].CaseBlockEvaluation [429]
  [4521] (4728/1) Normal[4521] let A = (new [])
  [4522] (4729/5) Normal[4522] let found = false
  [4523] (4809/33) If[4523] (! (= R.Value ~empty~))
  [4524] (4810/33) Normal[4524] V = R.Value
  [4525] (4812/34) Call[4525] app __x18__ = (IsAbruptCompletion R)
  [4526] (4725/0) Normal[4526] let V = undefined
  [4527] (4726/1) If[4527] (! (= CaseClauses0 absent))
  [4528] (4727/2) Normal[4528] let A = (get-elems CaseClauses0 CaseClause)
  [4529] (4815/34) Call[4529] app __x19__ = (UpdateEmpty R V)
  [4530] (4816/34) Normal[4530] return __x19__
  [4531] Entry[4531]
  [4532] (4724)Normal[4532] let CaseBlock = this
  [4533] (4734/6) Normal[4533] let C = __x0__[__x1__]
  [4534] (4735/6) Normal[4534] __x1__ = (+ __x1__ 1i)
  [4535] (4798/29) Call[4535] app __x14__ = (UpdateEmpty R V)
  [4536] (4799/29) Normal[4536] return __x14__
  [4537] (4777/24) Normal[4537] V = R.Value
  [4538] (4779/25) Call[4538] app __x10__ = (IsAbruptCompletion R)
  [4539] LoopCont[4539]
  [4540] (4732/6) Loop[4540] (< __x1__ __x0__.length)
  [4541] (4770/21) Normal[4541] foundInB = [? __x8__]
  [4542] (4772/22) If[4542] (= foundInB true)
  [4543] (4755/13) Normal[4543] let foundInB = false
  [4544] (4756/14) If[4544] (! (= CaseClauses1 absent))
  [4545] (4792/28) If[4545] (! (= R.Value ~empty~))
  [4546] (4793/28) Normal[4546] V = R.Value
  [4547] (4795/29) Call[4547] app __x13__ = (IsAbruptCompletion R)
  [4548] (4739/8) Normal[4548] found = [? __x2__]
  [4549] (4741/9) If[4549] (= found true)
  [4550] (4748/12) Call[4550] app __x4__ = (IsAbruptCompletion R)
  [4551] (4749/12) If[4551] __x4__
  [4552] (4783/25) Normal[4552] return __x11__
  [4553] LoopCont[4553]
  [4554] (4801/31) Normal[4554] let __x15__ = B
  [4555] (4759/18) If[4555] (= found false)
  [4556] (4761/19) Normal[4556] let __x6__ = B
  [4557] (4787/26) If[4557] (= foundInB true)
  [4558] (4805/31) Normal[4558] let C = __x15__[__x16__]
  [4559] (4806/31) Normal[4559] __x16__ = (+ __x16__ 1i)
  [4560] (4730/6) Normal[4560] let __x0__ = A
  [4561] (4803/31) Loop[4561] (< __x16__ __x15__.length)
  [4562] (4818/35) Normal[4562] return V
  [4563] LoopCont[4563]
  [4564] (4751/12) Call[4564] app __x5__ = (UpdateEmpty R V)
  [4565] (4765/19) Normal[4565] let C = __x6__[__x7__]
  [4566] (4766/19) Normal[4566] __x7__ = (+ __x7__ 1i)
  [4567] (4758/14) Normal[4567] let B = (new [])
  [4568] (4774/23) Call[4568] access __x9__ = (C "Evaluation")
  [4569] (4738/8) Call[4569] app __x2__ = (CaseClauseIsSelected C input)
  [4570] (4776/24) If[4570] (! (= R.Value ~empty~))
  [4571] (4782/25) Call[4571] app __x11__ = (UpdateEmpty R V)
  [4572] (4808/32) Normal[4572] let R = __x17__
  [4573] (4744/10) Normal[4573] let R = __x3__
  [4574] (4745/11) If[4574] (! (= R.Value ~empty~))
  [4575] (4763/19) Loop[4575] (< __x7__ __x6__.length)
  [4576] (4767/20) If[4576] (= foundInB false)
  [4577] (4752/12) Normal[4577] return __x5__
  [4578] (4780/25) If[4578] __x10__
  [4579] (4802/31) Normal[4579] let __x16__ = 0i
  [4580] (4757/15) Normal[4580] let B = (get-elems CaseClauses1 CaseClause)
  [4581] (4736/7) If[4581] (= found false)
  [4582] (4796/29) If[4582] __x13__
  [4583] (4788/26) Normal[4583] return V
  [4584] (4790/27) Call[4584] access __x12__ = (DefaultClause "Evaluation")
  [4585] (4731/6) Normal[4585] let __x1__ = 0i
  [4586] (4775/23) Normal[4586] let R = __x9__
  [4587] (4769/21) Call[4587] app __x8__ = (CaseClauseIsSelected C input)
  [4588] (4807/32) Call[4588] access __x17__ = (C "Evaluation")
  [4589] (4746/11) Normal[4589] V = R.Value
  [4590] (4791/27) Normal[4590] let R = __x12__
  [4591] (4813/34) If[4591] __x18__
  [4592] (4743/10) Call[4592] access __x3__ = (C "Evaluation")
  [4593] (4762/19) Normal[4593] let __x7__ = 0i
  [4594] Exit[4594]
Algo: CaseBlock[1,1].ContainsDuplicateLabels [430]
  [4595] Entry[4595]
  [4596] (4820)Normal[4596] let CaseBlock = this
  [4597] (4825/2) If[4597] (= hasDuplicates true)
  [4598] (4826/2) Normal[4598] return true
  [4599] (4829/3) Call[4599] access __x1__ = (DefaultClause "ContainsDuplicateLabels" labelSet)
  [4600] (4832/4) Normal[4600] return true
  [4601] (4834/5) If[4601] (= CaseClauses1 absent)
  [4602] (4838/6) Normal[4602] return __x2__
  [4603] Exit[4603]
  [4604] (4821/0) If[4604] (! (= CaseClauses0 absent))
  [4605] (4831/4) If[4605] (= hasDuplicates true)
  [4606] (4837/6) Call[4606] access __x2__ = (CaseClauses1 "ContainsDuplicateLabels" labelSet)
  [4607] (4823/1) Call[4607] access __x0__ = (CaseClauses0 "ContainsDuplicateLabels" labelSet)
  [4608] (4835/5) Normal[4608] return false
  [4609] (4830/3) Normal[4609] let hasDuplicates = __x1__
  [4610] (4824/1) Normal[4610] let hasDuplicates = __x0__
Algo: CaseBlock[1,1].ContainsUndefinedBreakTarget [431]
  [4611] Entry[4611]
  [4612] (4840)Normal[4612] let CaseBlock = this
  [4613] (4845/2) If[4613] (= hasUndefinedLabels true)
  [4614] (4846/2) Normal[4614] return true
  [4615] (4849/3) Call[4615] access __x1__ = (DefaultClause "ContainsUndefinedBreakTarget" labelSet)
  [4616] (4852/4) Normal[4616] return true
  [4617] (4854/5) If[4617] (= CaseClauses1 absent)
  [4618] (4858/6) Normal[4618] return __x2__
  [4619] Exit[4619]
  [4620] (4841/0) If[4620] (! (= CaseClauses0 absent))
  [4621] (4851/4) If[4621] (= hasUndefinedLabels true)
  [4622] (4857/6) Call[4622] access __x2__ = (CaseClauses1 "ContainsUndefinedBreakTarget" labelSet)
  [4623] (4843/1) Call[4623] access __x0__ = (CaseClauses0 "ContainsUndefinedBreakTarget" labelSet)
  [4624] (4855/5) Normal[4624] return false
  [4625] (4850/3) Normal[4625] let hasUndefinedLabels = __x1__
  [4626] (4844/1) Normal[4626] let hasUndefinedLabels = __x0__
Algo: CaseBlock[1,1].ContainsUndefinedContinueTarget [432]
  [4627] Entry[4627]
  [4628] (4860)Normal[4628] let CaseBlock = this
  [4629] (4865/2) If[4629] (= hasUndefinedLabels true)
  [4630] (4866/2) Normal[4630] return true
  [4631] (4869/3) Call[4631] access __x1__ = (DefaultClause "ContainsUndefinedContinueTarget" iterationSet (new []))
  [4632] (4872/4) Normal[4632] return true
  [4633] (4874/5) If[4633] (= CaseClauses1 absent)
  [4634] (4878/6) Normal[4634] return __x2__
  [4635] Exit[4635]
  [4636] (4861/0) If[4636] (! (= CaseClauses0 absent))
  [4637] (4871/4) If[4637] (= hasUndefinedLabels true)
  [4638] (4877/6) Call[4638] access __x2__ = (CaseClauses1 "ContainsUndefinedContinueTarget" iterationSet (new []))
  [4639] (4863/1) Call[4639] access __x0__ = (CaseClauses0 "ContainsUndefinedContinueTarget" iterationSet (new []))
  [4640] (4875/5) Normal[4640] return false
  [4641] (4870/3) Normal[4641] let hasUndefinedLabels = __x1__
  [4642] (4864/1) Normal[4642] let hasUndefinedLabels = __x0__
Algo: CaseBlock[1,1].HasCallInTailPosition [433]
  [4643] Entry[4643]
  [4644] (4880)Normal[4644] let CaseBlock = this
  [4645] (4885/1) Normal[4645] let has = __x0__
  [4646] (4887/2) If[4646] (= has true)
  [4647] (4892/4) If[4647] (= has true)
  [4648] (4893/4) Normal[4648] return true
  [4649] (4895/5) If[4649] (! (= CaseClauses1 absent))
  [4650] (4898/5) Normal[4650] let has = __x2__
  [4651] (4900/6) Normal[4651] return has
  [4652] (4881/0) Normal[4652] let has = false
  [4653] (4888/2) Normal[4653] return true
  [4654] (4890/3) Call[4654] access __x1__ = (DefaultClause "HasCallInTailPosition" call)
  [4655] (4891/3) Normal[4655] let has = __x1__
  [4656] (4897/5) Call[4656] access __x2__ = (CaseClauses1 "HasCallInTailPosition" call)
  [4657] (4882/1) If[4657] (! (= CaseClauses0 absent))
  [4658] (4884/1) Call[4658] access __x0__ = (CaseClauses0 "HasCallInTailPosition" call)
  [4659] Exit[4659]
Algo: CaseBlock[1,1].LexicallyDeclaredNames [434]
  [4660] Entry[4660]
  [4661] (4902)Normal[4661] let CaseBlock = this
  [4662] (4907/0) Normal[4662] let names = (new [])
  [4663] (4908/2) Call[4663] access __x1__ = (DefaultClause "LexicallyDeclaredNames")
  [4664] (4913/2) Normal[4664] let __x4__ = __x2__[__x3__]
  [4665] (4914/2) Normal[4665] __x3__ = (+ __x3__ 1i)
  [4666] (4916/3) If[4666] (= CaseClauses1 absent)
  [4667] (4917/3) Normal[4667] return names
  [4668] (4919/4) Normal[4668] ??? "Return the result of appending to id:{names} the elements of the LexicallyDeclaredNames of the second nt:{CaseClauses} ."
  [4669] (4903/0) If[4669] (! (= CaseClauses0 absent))
  [4670] (4909/2) Normal[4670] let __x2__ = __x1__
  [4671] (4911/2) Loop[4671] (< __x3__ __x2__.length)
  [4672] LoopCont[4672]
  [4673] (4905/0) Call[4673] access __x0__ = (CaseClauses0 "LexicallyDeclaredNames")
  [4674] (4915/2) Normal[4674] append __x4__ -> names
  [4675] (4910/2) Normal[4675] let __x3__ = 0i
  [4676] (4906/0) Normal[4676] let names = __x0__
  [4677] Exit[4677]
Algo: CaseBlock[1,1].LexicallyScopedDeclarations [435]
  [4678] Entry[4678]
  [4679] (4921)Normal[4679] let CaseBlock = this
  [4680] (4926/0) Normal[4680] let declarations = (new [])
  [4681] (4927/2) Call[4681] access __x1__ = (DefaultClause "LexicallyScopedDeclarations")
  [4682] (4932/2) Normal[4682] let __x4__ = __x2__[__x3__]
  [4683] (4933/2) Normal[4683] __x3__ = (+ __x3__ 1i)
  [4684] (4935/3) If[4684] (= CaseClauses1 absent)
  [4685] (4936/3) Normal[4685] return declarations
  [4686] (4938/4) Normal[4686] ??? "Return the result of appending to id:{declarations} the elements of the LexicallyScopedDeclarations of the second nt:{CaseClauses} ."
  [4687] (4922/0) If[4687] (! (= CaseClauses0 absent))
  [4688] (4928/2) Normal[4688] let __x2__ = __x1__
  [4689] (4930/2) Loop[4689] (< __x3__ __x2__.length)
  [4690] LoopCont[4690]
  [4691] (4924/0) Call[4691] access __x0__ = (CaseClauses0 "LexicallyScopedDeclarations")
  [4692] (4934/2) Normal[4692] append __x4__ -> declarations
  [4693] (4929/2) Normal[4693] let __x3__ = 0i
  [4694] (4925/0) Normal[4694] let declarations = __x0__
  [4695] Exit[4695]
Algo: CaseBlock[1,1].VarDeclaredNames [436]
  [4696] Entry[4696]
  [4697] (4940)Normal[4697] let CaseBlock = this
  [4698] (4945/0) Normal[4698] let names = (new [])
  [4699] (4946/2) Call[4699] access __x1__ = (DefaultClause "VarDeclaredNames")
  [4700] (4951/2) Normal[4700] let __x4__ = __x2__[__x3__]
  [4701] (4952/2) Normal[4701] __x3__ = (+ __x3__ 1i)
  [4702] (4954/3) If[4702] (= CaseClauses1 absent)
  [4703] (4955/3) Normal[4703] return names
  [4704] (4957/4) Call[4704] access __names__ = (CaseClauses1 "VarDeclaredNames")
  [4705] (4962/4) Normal[4705] __i__ = (+ __i__ 1i)
  [4706] LoopCont[4706]
  [4707] (4941/0) If[4707] (! (= CaseClauses0 absent))
  [4708] (4947/2) Normal[4708] let __x2__ = __x1__
  [4709] (4959/4) Loop[4709] (< __i__ __names__.length)
  [4710] (4949/2) Loop[4710] (< __x3__ __x2__.length)
  [4711] LoopCont[4711]
  [4712] (4943/0) Call[4712] access __x0__ = (CaseClauses0 "VarDeclaredNames")
  [4713] (4958/4) Normal[4713] let __i__ = 0i
  [4714] (4963/4) Normal[4714] return names
  [4715] Exit[4715]
  [4716] (4953/2) Normal[4716] append __x4__ -> names
  [4717] (4948/2) Normal[4717] let __x3__ = 0i
  [4718] (4944/0) Normal[4718] let names = __x0__
  [4719] (4961/4) Normal[4719] append __names__[__i__] -> names
Algo: CaseBlock[1,1].VarScopedDeclarations [437]
  [4720] Entry[4720]
  [4721] (4965)Normal[4721] let CaseBlock = this
  [4722] (4970/0) Normal[4722] let declarations = (new [])
  [4723] (4971/2) Call[4723] access __x1__ = (DefaultClause "VarScopedDeclarations")
  [4724] (4976/2) Normal[4724] let __x4__ = __x2__[__x3__]
  [4725] (4977/2) Normal[4725] __x3__ = (+ __x3__ 1i)
  [4726] (4979/3) If[4726] (= CaseClauses1 absent)
  [4727] (4980/3) Normal[4727] return declarations
  [4728] (4982/4) Call[4728] access decls = (CaseClauses1 "VarScopedDeclarations")
  [4729] (4987/4) Normal[4729] __i__ = (+ __i__ 1i)
  [4730] LoopCont[4730]
  [4731] (4966/0) If[4731] (! (= CaseClauses0 absent))
  [4732] (4972/2) Normal[4732] let __x2__ = __x1__
  [4733] (4984/4) Loop[4733] (< __i__ decls.length)
  [4734] (4974/2) Loop[4734] (< __x3__ __x2__.length)
  [4735] LoopCont[4735]
  [4736] (4968/0) Call[4736] access __x0__ = (CaseClauses0 "VarScopedDeclarations")
  [4737] (4983/4) Normal[4737] let __i__ = 0i
  [4738] (4988/4) Normal[4738] return decls
  [4739] Exit[4739]
  [4740] (4978/2) Normal[4740] append __x4__ -> declarations
  [4741] (4973/2) Normal[4741] let __x3__ = 0i
  [4742] (4969/0) Normal[4742] let declarations = __x0__
  [4743] (4986/4) Normal[4743] append decls[__i__] -> declarations
Algo: CaseBlock[1,2].CaseBlockEvaluation [438]
  [4744] (4994/1) Normal[4744] let A = (new [])
  [4745] (4995/5) Normal[4745] let found = false
  [4746] (5075/33) If[4746] (! (= R.Value ~empty~))
  [4747] (5076/33) Normal[4747] V = R.Value
  [4748] (5078/34) Call[4748] app __x18__ = (IsAbruptCompletion R)
  [4749] (4991/0) Normal[4749] let V = undefined
  [4750] (4992/1) If[4750] (! (= CaseClauses0 absent))
  [4751] (4993/2) Normal[4751] let A = (get-elems CaseClauses0 CaseClause)
  [4752] (5081/34) Call[4752] app __x19__ = (UpdateEmpty R V)
  [4753] (5082/34) Normal[4753] return __x19__
  [4754] Entry[4754]
  [4755] (4990)Normal[4755] let CaseBlock = this
  [4756] (5000/6) Normal[4756] let C = __x0__[__x1__]
  [4757] (5001/6) Normal[4757] __x1__ = (+ __x1__ 1i)
  [4758] (5064/29) Call[4758] app __x14__ = (UpdateEmpty R V)
  [4759] (5065/29) Normal[4759] return __x14__
  [4760] (5043/24) Normal[4760] V = R.Value
  [4761] (5045/25) Call[4761] app __x10__ = (IsAbruptCompletion R)
  [4762] LoopCont[4762]
  [4763] (4998/6) Loop[4763] (< __x1__ __x0__.length)
  [4764] (5036/21) Normal[4764] foundInB = [? __x8__]
  [4765] (5038/22) If[4765] (= foundInB true)
  [4766] (5021/13) Normal[4766] let foundInB = false
  [4767] (5022/14) If[4767] (! (= CaseClauses1 absent))
  [4768] (5058/28) If[4768] (! (= R.Value ~empty~))
  [4769] (5059/28) Normal[4769] V = R.Value
  [4770] (5061/29) Call[4770] app __x13__ = (IsAbruptCompletion R)
  [4771] (5005/8) Normal[4771] found = [? __x2__]
  [4772] (5007/9) If[4772] (= found true)
  [4773] (5014/12) Call[4773] app __x4__ = (IsAbruptCompletion R)
  [4774] (5015/12) If[4774] __x4__
  [4775] (5049/25) Normal[4775] return __x11__
  [4776] LoopCont[4776]
  [4777] (5067/31) Normal[4777] let __x15__ = B
  [4778] (5025/18) If[4778] (= found false)
  [4779] (5027/19) Normal[4779] let __x6__ = B
  [4780] (5053/26) If[4780] (= foundInB true)
  [4781] (5071/31) Normal[4781] let C = __x15__[__x16__]
  [4782] (5072/31) Normal[4782] __x16__ = (+ __x16__ 1i)
  [4783] (4996/6) Normal[4783] let __x0__ = A
  [4784] (5069/31) Loop[4784] (< __x16__ __x15__.length)
  [4785] (5084/35) Normal[4785] return V
  [4786] LoopCont[4786]
  [4787] (5017/12) Call[4787] app __x5__ = (UpdateEmpty R V)
  [4788] (5031/19) Normal[4788] let C = __x6__[__x7__]
  [4789] (5032/19) Normal[4789] __x7__ = (+ __x7__ 1i)
  [4790] (5024/14) Normal[4790] let B = (new [])
  [4791] (5040/23) Call[4791] access __x9__ = (C "Evaluation")
  [4792] (5004/8) Call[4792] app __x2__ = (CaseClauseIsSelected C input)
  [4793] (5042/24) If[4793] (! (= R.Value ~empty~))
  [4794] (5048/25) Call[4794] app __x11__ = (UpdateEmpty R V)
  [4795] (5074/32) Normal[4795] let R = __x17__
  [4796] (5010/10) Normal[4796] let R = __x3__
  [4797] (5011/11) If[4797] (! (= R.Value ~empty~))
  [4798] (5029/19) Loop[4798] (< __x7__ __x6__.length)
  [4799] (5033/20) If[4799] (= foundInB false)
  [4800] (5018/12) Normal[4800] return __x5__
  [4801] (5046/25) If[4801] __x10__
  [4802] (5068/31) Normal[4802] let __x16__ = 0i
  [4803] (5023/15) Normal[4803] let B = (get-elems CaseClauses1 CaseClause)
  [4804] (5002/7) If[4804] (= found false)
  [4805] (5062/29) If[4805] __x13__
  [4806] (5054/26) Normal[4806] return V
  [4807] (5056/27) Call[4807] access __x12__ = (DefaultClause "Evaluation")
  [4808] (4997/6) Normal[4808] let __x1__ = 0i
  [4809] (5041/23) Normal[4809] let R = __x9__
  [4810] (5035/21) Call[4810] app __x8__ = (CaseClauseIsSelected C input)
  [4811] (5073/32) Call[4811] access __x17__ = (C "Evaluation")
  [4812] (5012/11) Normal[4812] V = R.Value
  [4813] (5057/27) Normal[4813] let R = __x12__
  [4814] (5079/34) If[4814] __x18__
  [4815] (5009/10) Call[4815] access __x3__ = (C "Evaluation")
  [4816] (5028/19) Normal[4816] let __x7__ = 0i
  [4817] Exit[4817]
Algo: CaseBlock[1,2].ContainsDuplicateLabels [439]
  [4818] Entry[4818]
  [4819] (5086)Normal[4819] let CaseBlock = this
  [4820] (5091/2) If[4820] (= hasDuplicates true)
  [4821] (5092/2) Normal[4821] return true
  [4822] (5095/3) Call[4822] access __x1__ = (DefaultClause "ContainsDuplicateLabels" labelSet)
  [4823] (5098/4) Normal[4823] return true
  [4824] (5100/5) If[4824] (= CaseClauses1 absent)
  [4825] (5104/6) Normal[4825] return __x2__
  [4826] Exit[4826]
  [4827] (5087/0) If[4827] (! (= CaseClauses0 absent))
  [4828] (5097/4) If[4828] (= hasDuplicates true)
  [4829] (5103/6) Call[4829] access __x2__ = (CaseClauses1 "ContainsDuplicateLabels" labelSet)
  [4830] (5089/1) Call[4830] access __x0__ = (CaseClauses0 "ContainsDuplicateLabels" labelSet)
  [4831] (5101/5) Normal[4831] return false
  [4832] (5096/3) Normal[4832] let hasDuplicates = __x1__
  [4833] (5090/1) Normal[4833] let hasDuplicates = __x0__
Algo: CaseBlock[1,2].ContainsUndefinedBreakTarget [440]
  [4834] Entry[4834]
  [4835] (5106)Normal[4835] let CaseBlock = this
  [4836] (5111/2) If[4836] (= hasUndefinedLabels true)
  [4837] (5112/2) Normal[4837] return true
  [4838] (5115/3) Call[4838] access __x1__ = (DefaultClause "ContainsUndefinedBreakTarget" labelSet)
  [4839] (5118/4) Normal[4839] return true
  [4840] (5120/5) If[4840] (= CaseClauses1 absent)
  [4841] (5124/6) Normal[4841] return __x2__
  [4842] Exit[4842]
  [4843] (5107/0) If[4843] (! (= CaseClauses0 absent))
  [4844] (5117/4) If[4844] (= hasUndefinedLabels true)
  [4845] (5123/6) Call[4845] access __x2__ = (CaseClauses1 "ContainsUndefinedBreakTarget" labelSet)
  [4846] (5109/1) Call[4846] access __x0__ = (CaseClauses0 "ContainsUndefinedBreakTarget" labelSet)
  [4847] (5121/5) Normal[4847] return false
  [4848] (5116/3) Normal[4848] let hasUndefinedLabels = __x1__
  [4849] (5110/1) Normal[4849] let hasUndefinedLabels = __x0__
Algo: CaseBlock[1,2].ContainsUndefinedContinueTarget [441]
  [4850] Entry[4850]
  [4851] (5126)Normal[4851] let CaseBlock = this
  [4852] (5131/2) If[4852] (= hasUndefinedLabels true)
  [4853] (5132/2) Normal[4853] return true
  [4854] (5135/3) Call[4854] access __x1__ = (DefaultClause "ContainsUndefinedContinueTarget" iterationSet (new []))
  [4855] (5138/4) Normal[4855] return true
  [4856] (5140/5) If[4856] (= CaseClauses1 absent)
  [4857] (5144/6) Normal[4857] return __x2__
  [4858] Exit[4858]
  [4859] (5127/0) If[4859] (! (= CaseClauses0 absent))
  [4860] (5137/4) If[4860] (= hasUndefinedLabels true)
  [4861] (5143/6) Call[4861] access __x2__ = (CaseClauses1 "ContainsUndefinedContinueTarget" iterationSet (new []))
  [4862] (5129/1) Call[4862] access __x0__ = (CaseClauses0 "ContainsUndefinedContinueTarget" iterationSet (new []))
  [4863] (5141/5) Normal[4863] return false
  [4864] (5136/3) Normal[4864] let hasUndefinedLabels = __x1__
  [4865] (5130/1) Normal[4865] let hasUndefinedLabels = __x0__
Algo: CaseBlock[1,2].HasCallInTailPosition [442]
  [4866] Entry[4866]
  [4867] (5146)Normal[4867] let CaseBlock = this
  [4868] (5151/1) Normal[4868] let has = __x0__
  [4869] (5153/2) If[4869] (= has true)
  [4870] (5158/4) If[4870] (= has true)
  [4871] (5159/4) Normal[4871] return true
  [4872] (5161/5) If[4872] (! (= CaseClauses1 absent))
  [4873] (5164/5) Normal[4873] let has = __x2__
  [4874] (5166/6) Normal[4874] return has
  [4875] (5147/0) Normal[4875] let has = false
  [4876] (5154/2) Normal[4876] return true
  [4877] (5156/3) Call[4877] access __x1__ = (DefaultClause "HasCallInTailPosition" call)
  [4878] (5157/3) Normal[4878] let has = __x1__
  [4879] (5163/5) Call[4879] access __x2__ = (CaseClauses1 "HasCallInTailPosition" call)
  [4880] (5148/1) If[4880] (! (= CaseClauses0 absent))
  [4881] (5150/1) Call[4881] access __x0__ = (CaseClauses0 "HasCallInTailPosition" call)
  [4882] Exit[4882]
Algo: CaseBlock[1,2].LexicallyDeclaredNames [443]
  [4883] Entry[4883]
  [4884] (5168)Normal[4884] let CaseBlock = this
  [4885] (5173/0) Normal[4885] let names = (new [])
  [4886] (5174/2) Call[4886] access __x1__ = (DefaultClause "LexicallyDeclaredNames")
  [4887] (5179/2) Normal[4887] let __x4__ = __x2__[__x3__]
  [4888] (5180/2) Normal[4888] __x3__ = (+ __x3__ 1i)
  [4889] (5182/3) If[4889] (= CaseClauses1 absent)
  [4890] (5183/3) Normal[4890] return names
  [4891] (5185/4) Normal[4891] ??? "Return the result of appending to id:{names} the elements of the LexicallyDeclaredNames of the second nt:{CaseClauses} ."
  [4892] (5169/0) If[4892] (! (= CaseClauses0 absent))
  [4893] (5175/2) Normal[4893] let __x2__ = __x1__
  [4894] (5177/2) Loop[4894] (< __x3__ __x2__.length)
  [4895] LoopCont[4895]
  [4896] (5171/0) Call[4896] access __x0__ = (CaseClauses0 "LexicallyDeclaredNames")
  [4897] (5181/2) Normal[4897] append __x4__ -> names
  [4898] (5176/2) Normal[4898] let __x3__ = 0i
  [4899] (5172/0) Normal[4899] let names = __x0__
  [4900] Exit[4900]
Algo: CaseBlock[1,2].LexicallyScopedDeclarations [444]
  [4901] Entry[4901]
  [4902] (5187)Normal[4902] let CaseBlock = this
  [4903] (5192/0) Normal[4903] let declarations = (new [])
  [4904] (5193/2) Call[4904] access __x1__ = (DefaultClause "LexicallyScopedDeclarations")
  [4905] (5198/2) Normal[4905] let __x4__ = __x2__[__x3__]
  [4906] (5199/2) Normal[4906] __x3__ = (+ __x3__ 1i)
  [4907] (5201/3) If[4907] (= CaseClauses1 absent)
  [4908] (5202/3) Normal[4908] return declarations
  [4909] (5204/4) Normal[4909] ??? "Return the result of appending to id:{declarations} the elements of the LexicallyScopedDeclarations of the second nt:{CaseClauses} ."
  [4910] (5188/0) If[4910] (! (= CaseClauses0 absent))
  [4911] (5194/2) Normal[4911] let __x2__ = __x1__
  [4912] (5196/2) Loop[4912] (< __x3__ __x2__.length)
  [4913] LoopCont[4913]
  [4914] (5190/0) Call[4914] access __x0__ = (CaseClauses0 "LexicallyScopedDeclarations")
  [4915] (5200/2) Normal[4915] append __x4__ -> declarations
  [4916] (5195/2) Normal[4916] let __x3__ = 0i
  [4917] (5191/0) Normal[4917] let declarations = __x0__
  [4918] Exit[4918]
Algo: CaseBlock[1,2].VarDeclaredNames [445]
  [4919] Entry[4919]
  [4920] (5206)Normal[4920] let CaseBlock = this
  [4921] (5211/0) Normal[4921] let names = (new [])
  [4922] (5212/2) Call[4922] access __x1__ = (DefaultClause "VarDeclaredNames")
  [4923] (5217/2) Normal[4923] let __x4__ = __x2__[__x3__]
  [4924] (5218/2) Normal[4924] __x3__ = (+ __x3__ 1i)
  [4925] (5220/3) If[4925] (= CaseClauses1 absent)
  [4926] (5221/3) Normal[4926] return names
  [4927] (5223/4) Call[4927] access __names__ = (CaseClauses1 "VarDeclaredNames")
  [4928] (5228/4) Normal[4928] __i__ = (+ __i__ 1i)
  [4929] LoopCont[4929]
  [4930] (5207/0) If[4930] (! (= CaseClauses0 absent))
  [4931] (5213/2) Normal[4931] let __x2__ = __x1__
  [4932] (5225/4) Loop[4932] (< __i__ __names__.length)
  [4933] (5215/2) Loop[4933] (< __x3__ __x2__.length)
  [4934] LoopCont[4934]
  [4935] (5209/0) Call[4935] access __x0__ = (CaseClauses0 "VarDeclaredNames")
  [4936] (5224/4) Normal[4936] let __i__ = 0i
  [4937] (5229/4) Normal[4937] return names
  [4938] Exit[4938]
  [4939] (5219/2) Normal[4939] append __x4__ -> names
  [4940] (5214/2) Normal[4940] let __x3__ = 0i
  [4941] (5210/0) Normal[4941] let names = __x0__
  [4942] (5227/4) Normal[4942] append __names__[__i__] -> names
Algo: CaseBlock[1,2].VarScopedDeclarations [446]
  [4943] Entry[4943]
  [4944] (5231)Normal[4944] let CaseBlock = this
  [4945] (5236/0) Normal[4945] let declarations = (new [])
  [4946] (5237/2) Call[4946] access __x1__ = (DefaultClause "VarScopedDeclarations")
  [4947] (5242/2) Normal[4947] let __x4__ = __x2__[__x3__]
  [4948] (5243/2) Normal[4948] __x3__ = (+ __x3__ 1i)
  [4949] (5245/3) If[4949] (= CaseClauses1 absent)
  [4950] (5246/3) Normal[4950] return declarations
  [4951] (5248/4) Call[4951] access decls = (CaseClauses1 "VarScopedDeclarations")
  [4952] (5253/4) Normal[4952] __i__ = (+ __i__ 1i)
  [4953] LoopCont[4953]
  [4954] (5232/0) If[4954] (! (= CaseClauses0 absent))
  [4955] (5238/2) Normal[4955] let __x2__ = __x1__
  [4956] (5250/4) Loop[4956] (< __i__ decls.length)
  [4957] (5240/2) Loop[4957] (< __x3__ __x2__.length)
  [4958] LoopCont[4958]
  [4959] (5234/0) Call[4959] access __x0__ = (CaseClauses0 "VarScopedDeclarations")
  [4960] (5249/4) Normal[4960] let __i__ = 0i
  [4961] (5254/4) Normal[4961] return decls
  [4962] Exit[4962]
  [4963] (5244/2) Normal[4963] append __x4__ -> declarations
  [4964] (5239/2) Normal[4964] let __x3__ = 0i
  [4965] (5235/0) Normal[4965] let declarations = __x0__
  [4966] (5252/4) Normal[4966] append decls[__i__] -> declarations
Algo: CaseBlock[1,3].CaseBlockEvaluation [447]
  [4967] (5260/1) Normal[4967] let A = (new [])
  [4968] (5261/5) Normal[4968] let found = false
  [4969] (5341/33) If[4969] (! (= R.Value ~empty~))
  [4970] (5342/33) Normal[4970] V = R.Value
  [4971] (5344/34) Call[4971] app __x18__ = (IsAbruptCompletion R)
  [4972] (5257/0) Normal[4972] let V = undefined
  [4973] (5258/1) If[4973] (! (= CaseClauses0 absent))
  [4974] (5259/2) Normal[4974] let A = (get-elems CaseClauses0 CaseClause)
  [4975] (5347/34) Call[4975] app __x19__ = (UpdateEmpty R V)
  [4976] (5348/34) Normal[4976] return __x19__
  [4977] Entry[4977]
  [4978] (5256)Normal[4978] let CaseBlock = this
  [4979] (5266/6) Normal[4979] let C = __x0__[__x1__]
  [4980] (5267/6) Normal[4980] __x1__ = (+ __x1__ 1i)
  [4981] (5330/29) Call[4981] app __x14__ = (UpdateEmpty R V)
  [4982] (5331/29) Normal[4982] return __x14__
  [4983] (5309/24) Normal[4983] V = R.Value
  [4984] (5311/25) Call[4984] app __x10__ = (IsAbruptCompletion R)
  [4985] LoopCont[4985]
  [4986] (5264/6) Loop[4986] (< __x1__ __x0__.length)
  [4987] (5302/21) Normal[4987] foundInB = [? __x8__]
  [4988] (5304/22) If[4988] (= foundInB true)
  [4989] (5287/13) Normal[4989] let foundInB = false
  [4990] (5288/14) If[4990] (! (= CaseClauses1 absent))
  [4991] (5324/28) If[4991] (! (= R.Value ~empty~))
  [4992] (5325/28) Normal[4992] V = R.Value
  [4993] (5327/29) Call[4993] app __x13__ = (IsAbruptCompletion R)
  [4994] (5271/8) Normal[4994] found = [? __x2__]
  [4995] (5273/9) If[4995] (= found true)
  [4996] (5280/12) Call[4996] app __x4__ = (IsAbruptCompletion R)
  [4997] (5281/12) If[4997] __x4__
  [4998] (5315/25) Normal[4998] return __x11__
  [4999] LoopCont[4999]
  [5000] (5333/31) Normal[5000] let __x15__ = B
  [5001] (5291/18) If[5001] (= found false)
  [5002] (5293/19) Normal[5002] let __x6__ = B
  [5003] (5319/26) If[5003] (= foundInB true)
  [5004] (5337/31) Normal[5004] let C = __x15__[__x16__]
  [5005] (5338/31) Normal[5005] __x16__ = (+ __x16__ 1i)
  [5006] (5262/6) Normal[5006] let __x0__ = A
  [5007] (5335/31) Loop[5007] (< __x16__ __x15__.length)
  [5008] (5350/35) Normal[5008] return V
  [5009] LoopCont[5009]
  [5010] (5283/12) Call[5010] app __x5__ = (UpdateEmpty R V)
  [5011] (5297/19) Normal[5011] let C = __x6__[__x7__]
  [5012] (5298/19) Normal[5012] __x7__ = (+ __x7__ 1i)
  [5013] (5290/14) Normal[5013] let B = (new [])
  [5014] (5306/23) Call[5014] access __x9__ = (C "Evaluation")
  [5015] (5270/8) Call[5015] app __x2__ = (CaseClauseIsSelected C input)
  [5016] (5308/24) If[5016] (! (= R.Value ~empty~))
  [5017] (5314/25) Call[5017] app __x11__ = (UpdateEmpty R V)
  [5018] (5340/32) Normal[5018] let R = __x17__
  [5019] (5276/10) Normal[5019] let R = __x3__
  [5020] (5277/11) If[5020] (! (= R.Value ~empty~))
  [5021] (5295/19) Loop[5021] (< __x7__ __x6__.length)
  [5022] (5299/20) If[5022] (= foundInB false)
  [5023] (5284/12) Normal[5023] return __x5__
  [5024] (5312/25) If[5024] __x10__
  [5025] (5334/31) Normal[5025] let __x16__ = 0i
  [5026] (5289/15) Normal[5026] let B = (get-elems CaseClauses1 CaseClause)
  [5027] (5268/7) If[5027] (= found false)
  [5028] (5328/29) If[5028] __x13__
  [5029] (5320/26) Normal[5029] return V
  [5030] (5322/27) Call[5030] access __x12__ = (DefaultClause "Evaluation")
  [5031] (5263/6) Normal[5031] let __x1__ = 0i
  [5032] (5307/23) Normal[5032] let R = __x9__
  [5033] (5301/21) Call[5033] app __x8__ = (CaseClauseIsSelected C input)
  [5034] (5339/32) Call[5034] access __x17__ = (C "Evaluation")
  [5035] (5278/11) Normal[5035] V = R.Value
  [5036] (5323/27) Normal[5036] let R = __x12__
  [5037] (5345/34) If[5037] __x18__
  [5038] (5275/10) Call[5038] access __x3__ = (C "Evaluation")
  [5039] (5294/19) Normal[5039] let __x7__ = 0i
  [5040] Exit[5040]
Algo: CaseBlock[1,3].ContainsDuplicateLabels [448]
  [5041] Entry[5041]
  [5042] (5352)Normal[5042] let CaseBlock = this
  [5043] (5357/2) If[5043] (= hasDuplicates true)
  [5044] (5358/2) Normal[5044] return true
  [5045] (5361/3) Call[5045] access __x1__ = (DefaultClause "ContainsDuplicateLabels" labelSet)
  [5046] (5364/4) Normal[5046] return true
  [5047] (5366/5) If[5047] (= CaseClauses1 absent)
  [5048] (5370/6) Normal[5048] return __x2__
  [5049] Exit[5049]
  [5050] (5353/0) If[5050] (! (= CaseClauses0 absent))
  [5051] (5363/4) If[5051] (= hasDuplicates true)
  [5052] (5369/6) Call[5052] access __x2__ = (CaseClauses1 "ContainsDuplicateLabels" labelSet)
  [5053] (5355/1) Call[5053] access __x0__ = (CaseClauses0 "ContainsDuplicateLabels" labelSet)
  [5054] (5367/5) Normal[5054] return false
  [5055] (5362/3) Normal[5055] let hasDuplicates = __x1__
  [5056] (5356/1) Normal[5056] let hasDuplicates = __x0__
Algo: CaseBlock[1,3].ContainsUndefinedBreakTarget [449]
  [5057] Entry[5057]
  [5058] (5372)Normal[5058] let CaseBlock = this
  [5059] (5377/2) If[5059] (= hasUndefinedLabels true)
  [5060] (5378/2) Normal[5060] return true
  [5061] (5381/3) Call[5061] access __x1__ = (DefaultClause "ContainsUndefinedBreakTarget" labelSet)
  [5062] (5384/4) Normal[5062] return true
  [5063] (5386/5) If[5063] (= CaseClauses1 absent)
  [5064] (5390/6) Normal[5064] return __x2__
  [5065] Exit[5065]
  [5066] (5373/0) If[5066] (! (= CaseClauses0 absent))
  [5067] (5383/4) If[5067] (= hasUndefinedLabels true)
  [5068] (5389/6) Call[5068] access __x2__ = (CaseClauses1 "ContainsUndefinedBreakTarget" labelSet)
  [5069] (5375/1) Call[5069] access __x0__ = (CaseClauses0 "ContainsUndefinedBreakTarget" labelSet)
  [5070] (5387/5) Normal[5070] return false
  [5071] (5382/3) Normal[5071] let hasUndefinedLabels = __x1__
  [5072] (5376/1) Normal[5072] let hasUndefinedLabels = __x0__
Algo: CaseBlock[1,3].ContainsUndefinedContinueTarget [450]
  [5073] Entry[5073]
  [5074] (5392)Normal[5074] let CaseBlock = this
  [5075] (5397/2) If[5075] (= hasUndefinedLabels true)
  [5076] (5398/2) Normal[5076] return true
  [5077] (5401/3) Call[5077] access __x1__ = (DefaultClause "ContainsUndefinedContinueTarget" iterationSet (new []))
  [5078] (5404/4) Normal[5078] return true
  [5079] (5406/5) If[5079] (= CaseClauses1 absent)
  [5080] (5410/6) Normal[5080] return __x2__
  [5081] Exit[5081]
  [5082] (5393/0) If[5082] (! (= CaseClauses0 absent))
  [5083] (5403/4) If[5083] (= hasUndefinedLabels true)
  [5084] (5409/6) Call[5084] access __x2__ = (CaseClauses1 "ContainsUndefinedContinueTarget" iterationSet (new []))
  [5085] (5395/1) Call[5085] access __x0__ = (CaseClauses0 "ContainsUndefinedContinueTarget" iterationSet (new []))
  [5086] (5407/5) Normal[5086] return false
  [5087] (5402/3) Normal[5087] let hasUndefinedLabels = __x1__
  [5088] (5396/1) Normal[5088] let hasUndefinedLabels = __x0__
Algo: CaseBlock[1,3].HasCallInTailPosition [451]
  [5089] Entry[5089]
  [5090] (5412)Normal[5090] let CaseBlock = this
  [5091] (5417/1) Normal[5091] let has = __x0__
  [5092] (5419/2) If[5092] (= has true)
  [5093] (5424/4) If[5093] (= has true)
  [5094] (5425/4) Normal[5094] return true
  [5095] (5427/5) If[5095] (! (= CaseClauses1 absent))
  [5096] (5430/5) Normal[5096] let has = __x2__
  [5097] (5432/6) Normal[5097] return has
  [5098] (5413/0) Normal[5098] let has = false
  [5099] (5420/2) Normal[5099] return true
  [5100] (5422/3) Call[5100] access __x1__ = (DefaultClause "HasCallInTailPosition" call)
  [5101] (5423/3) Normal[5101] let has = __x1__
  [5102] (5429/5) Call[5102] access __x2__ = (CaseClauses1 "HasCallInTailPosition" call)
  [5103] (5414/1) If[5103] (! (= CaseClauses0 absent))
  [5104] (5416/1) Call[5104] access __x0__ = (CaseClauses0 "HasCallInTailPosition" call)
  [5105] Exit[5105]
Algo: CaseBlock[1,3].LexicallyDeclaredNames [452]
  [5106] Entry[5106]
  [5107] (5434)Normal[5107] let CaseBlock = this
  [5108] (5439/0) Normal[5108] let names = (new [])
  [5109] (5440/2) Call[5109] access __x1__ = (DefaultClause "LexicallyDeclaredNames")
  [5110] (5445/2) Normal[5110] let __x4__ = __x2__[__x3__]
  [5111] (5446/2) Normal[5111] __x3__ = (+ __x3__ 1i)
  [5112] (5448/3) If[5112] (= CaseClauses1 absent)
  [5113] (5449/3) Normal[5113] return names
  [5114] (5451/4) Normal[5114] ??? "Return the result of appending to id:{names} the elements of the LexicallyDeclaredNames of the second nt:{CaseClauses} ."
  [5115] (5435/0) If[5115] (! (= CaseClauses0 absent))
  [5116] (5441/2) Normal[5116] let __x2__ = __x1__
  [5117] (5443/2) Loop[5117] (< __x3__ __x2__.length)
  [5118] LoopCont[5118]
  [5119] (5437/0) Call[5119] access __x0__ = (CaseClauses0 "LexicallyDeclaredNames")
  [5120] (5447/2) Normal[5120] append __x4__ -> names
  [5121] (5442/2) Normal[5121] let __x3__ = 0i
  [5122] (5438/0) Normal[5122] let names = __x0__
  [5123] Exit[5123]
Algo: CaseBlock[1,3].LexicallyScopedDeclarations [453]
  [5124] Entry[5124]
  [5125] (5453)Normal[5125] let CaseBlock = this
  [5126] (5458/0) Normal[5126] let declarations = (new [])
  [5127] (5459/2) Call[5127] access __x1__ = (DefaultClause "LexicallyScopedDeclarations")
  [5128] (5464/2) Normal[5128] let __x4__ = __x2__[__x3__]
  [5129] (5465/2) Normal[5129] __x3__ = (+ __x3__ 1i)
  [5130] (5467/3) If[5130] (= CaseClauses1 absent)
  [5131] (5468/3) Normal[5131] return declarations
  [5132] (5470/4) Normal[5132] ??? "Return the result of appending to id:{declarations} the elements of the LexicallyScopedDeclarations of the second nt:{CaseClauses} ."
  [5133] (5454/0) If[5133] (! (= CaseClauses0 absent))
  [5134] (5460/2) Normal[5134] let __x2__ = __x1__
  [5135] (5462/2) Loop[5135] (< __x3__ __x2__.length)
  [5136] LoopCont[5136]
  [5137] (5456/0) Call[5137] access __x0__ = (CaseClauses0 "LexicallyScopedDeclarations")
  [5138] (5466/2) Normal[5138] append __x4__ -> declarations
  [5139] (5461/2) Normal[5139] let __x3__ = 0i
  [5140] (5457/0) Normal[5140] let declarations = __x0__
  [5141] Exit[5141]
Algo: CaseBlock[1,3].VarDeclaredNames [454]
  [5142] Entry[5142]
  [5143] (5472)Normal[5143] let CaseBlock = this
  [5144] (5477/0) Normal[5144] let names = (new [])
  [5145] (5478/2) Call[5145] access __x1__ = (DefaultClause "VarDeclaredNames")
  [5146] (5483/2) Normal[5146] let __x4__ = __x2__[__x3__]
  [5147] (5484/2) Normal[5147] __x3__ = (+ __x3__ 1i)
  [5148] (5486/3) If[5148] (= CaseClauses1 absent)
  [5149] (5487/3) Normal[5149] return names
  [5150] (5489/4) Call[5150] access __names__ = (CaseClauses1 "VarDeclaredNames")
  [5151] (5494/4) Normal[5151] __i__ = (+ __i__ 1i)
  [5152] LoopCont[5152]
  [5153] (5473/0) If[5153] (! (= CaseClauses0 absent))
  [5154] (5479/2) Normal[5154] let __x2__ = __x1__
  [5155] (5491/4) Loop[5155] (< __i__ __names__.length)
  [5156] (5481/2) Loop[5156] (< __x3__ __x2__.length)
  [5157] LoopCont[5157]
  [5158] (5475/0) Call[5158] access __x0__ = (CaseClauses0 "VarDeclaredNames")
  [5159] (5490/4) Normal[5159] let __i__ = 0i
  [5160] (5495/4) Normal[5160] return names
  [5161] Exit[5161]
  [5162] (5485/2) Normal[5162] append __x4__ -> names
  [5163] (5480/2) Normal[5163] let __x3__ = 0i
  [5164] (5476/0) Normal[5164] let names = __x0__
  [5165] (5493/4) Normal[5165] append __names__[__i__] -> names
Algo: CaseBlock[1,3].VarScopedDeclarations [455]
  [5166] Entry[5166]
  [5167] (5497)Normal[5167] let CaseBlock = this
  [5168] (5502/0) Normal[5168] let declarations = (new [])
  [5169] (5503/2) Call[5169] access __x1__ = (DefaultClause "VarScopedDeclarations")
  [5170] (5508/2) Normal[5170] let __x4__ = __x2__[__x3__]
  [5171] (5509/2) Normal[5171] __x3__ = (+ __x3__ 1i)
  [5172] (5511/3) If[5172] (= CaseClauses1 absent)
  [5173] (5512/3) Normal[5173] return declarations
  [5174] (5514/4) Call[5174] access decls = (CaseClauses1 "VarScopedDeclarations")
  [5175] (5519/4) Normal[5175] __i__ = (+ __i__ 1i)
  [5176] LoopCont[5176]
  [5177] (5498/0) If[5177] (! (= CaseClauses0 absent))
  [5178] (5504/2) Normal[5178] let __x2__ = __x1__
  [5179] (5516/4) Loop[5179] (< __i__ decls.length)
  [5180] (5506/2) Loop[5180] (< __x3__ __x2__.length)
  [5181] LoopCont[5181]
  [5182] (5500/0) Call[5182] access __x0__ = (CaseClauses0 "VarScopedDeclarations")
  [5183] (5515/4) Normal[5183] let __i__ = 0i
  [5184] (5520/4) Normal[5184] return decls
  [5185] Exit[5185]
  [5186] (5510/2) Normal[5186] append __x4__ -> declarations
  [5187] (5505/2) Normal[5187] let __x3__ = 0i
  [5188] (5501/0) Normal[5188] let declarations = __x0__
  [5189] (5518/4) Normal[5189] append decls[__i__] -> declarations
Algo: CaseClauseIsSelected [456]
  [5190] Entry[5190]
  [5191] (5522/1) Call[5191] access __x0__ = (C "Expression")
  [5192] (5526/2) Normal[5192] let clauseSelector = [? __x2__]
  [5193] (5527/3) Call[5193] app __x3__ = (StrictEqualityComparison input clauseSelector)
  [5194] (5523/1) Call[5194] access __x1__ = (__x0__ "Evaluation")
  [5195] (5528/3) Normal[5195] return __x3__
  [5196] (5524/1) Normal[5196] let exprRef = __x1__
  [5197] Exit[5197]
  [5198] (5525/2) Call[5198] app __x2__ = (GetValue exprRef)
Algo: CaseClause[0,0].ContainsDuplicateLabels [457]
  [5199] Entry[5199]
  [5200] (5530)Normal[5200] let CaseClause = this
  [5201] (5536/1) Normal[5201] return false
  [5202] Exit[5202]
  [5203] (5531/0) If[5203] (! (= StatementList absent))
  [5204] (5533/0) Call[5204] access __x0__ = (StatementList "ContainsDuplicateLabels" labelSet)
  [5205] (5534/0) Normal[5205] return __x0__
Algo: CaseClause[0,0].ContainsUndefinedBreakTarget [458]
  [5206] Entry[5206]
  [5207] (5538)Normal[5207] let CaseClause = this
  [5208] (5544/1) Normal[5208] return false
  [5209] Exit[5209]
  [5210] (5539/0) If[5210] (! (= StatementList absent))
  [5211] (5541/0) Call[5211] access __x0__ = (StatementList "ContainsUndefinedBreakTarget" labelSet)
  [5212] (5542/0) Normal[5212] return __x0__
Algo: CaseClause[0,0].ContainsUndefinedContinueTarget [459]
  [5213] Entry[5213]
  [5214] (5546)Normal[5214] let CaseClause = this
  [5215] (5552/1) Normal[5215] return false
  [5216] Exit[5216]
  [5217] (5547/0) If[5217] (! (= StatementList absent))
  [5218] (5549/0) Call[5218] access __x0__ = (StatementList "ContainsUndefinedContinueTarget" iterationSet (new []))
  [5219] (5550/0) Normal[5219] return __x0__
Algo: CaseClause[0,0].Evaluation [460]
  [5220] Entry[5220]
  [5221] (5554)Normal[5221] let CaseClause = this
  [5222] (5555/0) Normal[5222] return ~empty~
  [5223] Exit[5223]
Algo: CaseClause[0,0].HasCallInTailPosition [461]
  [5224] Entry[5224]
  [5225] (5557)Normal[5225] let CaseClause = this
  [5226] (5563/1) Normal[5226] return false
  [5227] Exit[5227]
  [5228] (5558/0) If[5228] (! (= StatementList absent))
  [5229] (5560/0) Call[5229] access __x0__ = (StatementList "HasCallInTailPosition" call)
  [5230] (5561/0) Normal[5230] return __x0__
Algo: CaseClause[0,0].LexicallyDeclaredNames [462]
  [5231] Entry[5231]
  [5232] (5565)Normal[5232] let CaseClause = this
  [5233] (5571/1) Normal[5233] return (new [])
  [5234] Exit[5234]
  [5235] (5566/0) If[5235] (! (= StatementList absent))
  [5236] (5568/0) Call[5236] access __x0__ = (StatementList "LexicallyDeclaredNames")
  [5237] (5569/0) Normal[5237] return __x0__
Algo: CaseClause[0,0].LexicallyScopedDeclarations [463]
  [5238] Entry[5238]
  [5239] (5573)Normal[5239] let CaseClause = this
  [5240] (5579/1) Normal[5240] return (new [])
  [5241] Exit[5241]
  [5242] (5574/0) If[5242] (! (= StatementList absent))
  [5243] (5576/0) Call[5243] access __x0__ = (StatementList "LexicallyScopedDeclarations")
  [5244] (5577/0) Normal[5244] return __x0__
Algo: CaseClause[0,0].VarDeclaredNames [464]
  [5245] Entry[5245]
  [5246] (5581)Normal[5246] let CaseClause = this
  [5247] (5587/1) Normal[5247] return (new [])
  [5248] Exit[5248]
  [5249] (5582/0) If[5249] (! (= StatementList absent))
  [5250] (5584/0) Call[5250] access __x0__ = (StatementList "VarDeclaredNames")
  [5251] (5585/0) Normal[5251] return __x0__
Algo: CaseClause[0,0].VarScopedDeclarations [465]
  [5252] Entry[5252]
  [5253] (5589)Normal[5253] let CaseClause = this
  [5254] (5595/1) Normal[5254] return (new [])
  [5255] Exit[5255]
  [5256] (5590/0) If[5256] (! (= StatementList absent))
  [5257] (5592/0) Call[5257] access __x0__ = (StatementList "VarScopedDeclarations")
  [5258] (5593/0) Normal[5258] return __x0__
Algo: CaseClause[0,1].ContainsDuplicateLabels [466]
  [5259] Entry[5259]
  [5260] (5597)Normal[5260] let CaseClause = this
  [5261] (5603/1) Normal[5261] return false
  [5262] Exit[5262]
  [5263] (5598/0) If[5263] (! (= StatementList absent))
  [5264] (5600/0) Call[5264] access __x0__ = (StatementList "ContainsDuplicateLabels" labelSet)
  [5265] (5601/0) Normal[5265] return __x0__
Algo: CaseClause[0,1].ContainsUndefinedBreakTarget [467]
  [5266] Entry[5266]
  [5267] (5605)Normal[5267] let CaseClause = this
  [5268] (5611/1) Normal[5268] return false
  [5269] Exit[5269]
  [5270] (5606/0) If[5270] (! (= StatementList absent))
  [5271] (5608/0) Call[5271] access __x0__ = (StatementList "ContainsUndefinedBreakTarget" labelSet)
  [5272] (5609/0) Normal[5272] return __x0__
Algo: CaseClause[0,1].ContainsUndefinedContinueTarget [468]
  [5273] Entry[5273]
  [5274] (5613)Normal[5274] let CaseClause = this
  [5275] (5619/1) Normal[5275] return false
  [5276] Exit[5276]
  [5277] (5614/0) If[5277] (! (= StatementList absent))
  [5278] (5616/0) Call[5278] access __x0__ = (StatementList "ContainsUndefinedContinueTarget" iterationSet (new []))
  [5279] (5617/0) Normal[5279] return __x0__
Algo: CaseClause[0,1].Evaluation [469]
  [5280] Entry[5280]
  [5281] (5621)Normal[5281] let CaseClause = this
  [5282] (5622/0) Call[5282] access __x0__ = (StatementList "Evaluation")
  [5283] (5623/0) Normal[5283] return __x0__
  [5284] Exit[5284]
Algo: CaseClause[0,1].HasCallInTailPosition [470]
  [5285] Entry[5285]
  [5286] (5625)Normal[5286] let CaseClause = this
  [5287] (5631/1) Normal[5287] return false
  [5288] Exit[5288]
  [5289] (5626/0) If[5289] (! (= StatementList absent))
  [5290] (5628/0) Call[5290] access __x0__ = (StatementList "HasCallInTailPosition" call)
  [5291] (5629/0) Normal[5291] return __x0__
Algo: CaseClause[0,1].LexicallyDeclaredNames [471]
  [5292] Entry[5292]
  [5293] (5633)Normal[5293] let CaseClause = this
  [5294] (5639/1) Normal[5294] return (new [])
  [5295] Exit[5295]
  [5296] (5634/0) If[5296] (! (= StatementList absent))
  [5297] (5636/0) Call[5297] access __x0__ = (StatementList "LexicallyDeclaredNames")
  [5298] (5637/0) Normal[5298] return __x0__
Algo: CaseClause[0,1].LexicallyScopedDeclarations [472]
  [5299] Entry[5299]
  [5300] (5641)Normal[5300] let CaseClause = this
  [5301] (5647/1) Normal[5301] return (new [])
  [5302] Exit[5302]
  [5303] (5642/0) If[5303] (! (= StatementList absent))
  [5304] (5644/0) Call[5304] access __x0__ = (StatementList "LexicallyScopedDeclarations")
  [5305] (5645/0) Normal[5305] return __x0__
Algo: CaseClause[0,1].VarDeclaredNames [473]
  [5306] Entry[5306]
  [5307] (5649)Normal[5307] let CaseClause = this
  [5308] (5655/1) Normal[5308] return (new [])
  [5309] Exit[5309]
  [5310] (5650/0) If[5310] (! (= StatementList absent))
  [5311] (5652/0) Call[5311] access __x0__ = (StatementList "VarDeclaredNames")
  [5312] (5653/0) Normal[5312] return __x0__
Algo: CaseClause[0,1].VarScopedDeclarations [474]
  [5313] Entry[5313]
  [5314] (5657)Normal[5314] let CaseClause = this
  [5315] (5663/1) Normal[5315] return (new [])
  [5316] Exit[5316]
  [5317] (5658/0) If[5317] (! (= StatementList absent))
  [5318] (5660/0) Call[5318] access __x0__ = (StatementList "VarScopedDeclarations")
  [5319] (5661/0) Normal[5319] return __x0__
Algo: CaseClauses[1,0].ContainsDuplicateLabels [475]
  [5320] Entry[5320]
  [5321] (5665/0) Call[5321] access __x0__ = (CaseClauses "ContainsDuplicateLabels" labelSet)
  [5322] (5670/2) Call[5322] access __x1__ = (CaseClause "ContainsDuplicateLabels" labelSet)
  [5323] (5671/2) Normal[5323] return __x1__
  [5324] (5666/0) Normal[5324] let hasDuplicates = __x0__
  [5325] Exit[5325]
  [5326] (5667/1) If[5326] (= hasDuplicates true)
  [5327] (5668/1) Normal[5327] return true
Algo: CaseClauses[1,0].ContainsUndefinedBreakTarget [476]
  [5328] Entry[5328]
  [5329] (5673/0) Call[5329] access __x0__ = (CaseClauses "ContainsUndefinedBreakTarget" labelSet)
  [5330] (5678/2) Call[5330] access __x1__ = (CaseClause "ContainsUndefinedBreakTarget" labelSet)
  [5331] (5679/2) Normal[5331] return __x1__
  [5332] (5674/0) Normal[5332] let hasUndefinedLabels = __x0__
  [5333] Exit[5333]
  [5334] (5675/1) If[5334] (= hasUndefinedLabels true)
  [5335] (5676/1) Normal[5335] return true
Algo: CaseClauses[1,0].ContainsUndefinedContinueTarget [477]
  [5336] Entry[5336]
  [5337] (5681/0) Call[5337] access __x0__ = (CaseClauses "ContainsUndefinedContinueTarget" iterationSet (new []))
  [5338] (5686/2) Call[5338] access __x1__ = (CaseClause "ContainsUndefinedContinueTarget" iterationSet (new []))
  [5339] (5687/2) Normal[5339] return __x1__
  [5340] (5682/0) Normal[5340] let hasUndefinedLabels = __x0__
  [5341] Exit[5341]
  [5342] (5683/1) If[5342] (= hasUndefinedLabels true)
  [5343] (5684/1) Normal[5343] return true
Algo: CaseClauses[1,0].HasCallInTailPosition [478]
  [5344] Entry[5344]
  [5345] (5689/0) Call[5345] access __x0__ = (CaseClauses "HasCallInTailPosition" call)
  [5346] (5694/2) Call[5346] access __x1__ = (CaseClause "HasCallInTailPosition" call)
  [5347] (5695/2) Normal[5347] return __x1__
  [5348] (5690/0) Normal[5348] let has = __x0__
  [5349] Exit[5349]
  [5350] (5691/1) If[5350] (= has true)
  [5351] (5692/1) Normal[5351] return true
Algo: CaseClauses[1,0].LexicallyDeclaredNames [479]
  [5352] Entry[5352]
  [5353] (5697/0) Call[5353] access __x0__ = (CaseClauses "LexicallyDeclaredNames")
  [5354] (5701/1) Normal[5354] let __x3__ = 0i
  [5355] (5702/1) Loop[5355] (< __x3__ __x2__.length)
  [5356] LoopCont[5356]
  [5357] (5698/0) Normal[5357] let names = __x0__
  [5358] (5704/1) Normal[5358] let __x4__ = __x2__[__x3__]
  [5359] (5707/2) Normal[5359] return names
  [5360] (5706/1) Normal[5360] append __x4__ -> names
  [5361] (5699/1) Call[5361] access __x1__ = (CaseClause "LexicallyDeclaredNames")
  [5362] (5705/1) Normal[5362] __x3__ = (+ __x3__ 1i)
  [5363] (5700/1) Normal[5363] let __x2__ = __x1__
  [5364] Exit[5364]
Algo: CaseClauses[1,0].LexicallyScopedDeclarations [480]
  [5365] Entry[5365]
  [5366] (5709/0) Call[5366] access __x0__ = (CaseClauses "LexicallyScopedDeclarations")
  [5367] (5713/1) Normal[5367] let __x3__ = 0i
  [5368] (5714/1) Loop[5368] (< __x3__ __x2__.length)
  [5369] LoopCont[5369]
  [5370] (5710/0) Normal[5370] let declarations = __x0__
  [5371] (5716/1) Normal[5371] let __x4__ = __x2__[__x3__]
  [5372] (5719/2) Normal[5372] return declarations
  [5373] (5718/1) Normal[5373] append __x4__ -> declarations
  [5374] (5711/1) Call[5374] access __x1__ = (CaseClause "LexicallyScopedDeclarations")
  [5375] (5717/1) Normal[5375] __x3__ = (+ __x3__ 1i)
  [5376] (5712/1) Normal[5376] let __x2__ = __x1__
  [5377] Exit[5377]
Algo: CaseClauses[1,0].VarDeclaredNames [481]
  [5378] Entry[5378]
  [5379] (5721/0) Call[5379] access __x0__ = (CaseClauses "VarDeclaredNames")
  [5380] (5725/1) Normal[5380] let __x3__ = 0i
  [5381] (5726/1) Loop[5381] (< __x3__ __x2__.length)
  [5382] LoopCont[5382]
  [5383] (5722/0) Normal[5383] let names = __x0__
  [5384] (5728/1) Normal[5384] let __x4__ = __x2__[__x3__]
  [5385] (5731/2) Normal[5385] return names
  [5386] (5730/1) Normal[5386] append __x4__ -> names
  [5387] (5723/1) Call[5387] access __x1__ = (CaseClause "VarDeclaredNames")
  [5388] (5729/1) Normal[5388] __x3__ = (+ __x3__ 1i)
  [5389] (5724/1) Normal[5389] let __x2__ = __x1__
  [5390] Exit[5390]
Algo: CaseClauses[1,0].VarScopedDeclarations [482]
  [5391] Entry[5391]
  [5392] (5733/0) Call[5392] access __x0__ = (CaseClauses "VarScopedDeclarations")
  [5393] (5737/1) Normal[5393] let __x3__ = 0i
  [5394] (5738/1) Loop[5394] (< __x3__ __x2__.length)
  [5395] LoopCont[5395]
  [5396] (5734/0) Normal[5396] let declarations = __x0__
  [5397] (5740/1) Normal[5397] let __x4__ = __x2__[__x3__]
  [5398] (5743/2) Normal[5398] return declarations
  [5399] (5742/1) Normal[5399] append __x4__ -> declarations
  [5400] (5735/1) Call[5400] access __x1__ = (CaseClause "VarScopedDeclarations")
  [5401] (5741/1) Normal[5401] __x3__ = (+ __x3__ 1i)
  [5402] (5736/1) Normal[5402] let __x2__ = __x1__
  [5403] Exit[5403]
Algo: Catch[0,0].CatchClauseEvaluation [483]
  [5404] Entry[5404]
  [5405] (5745)Normal[5405] let Catch = this
  [5406] (5749/2) Call[5406] access __x1__ = (CatchParameter "BoundNames")
  [5407] (5750/2) Normal[5407] let __x2__ = __x1__
  [5408] (5755/2) Normal[5408] __x3__ = (+ __x3__ 1i)
  [5409] (5756/3) Call[5409] app __x4__ = (catchEnv.CreateMutableBinding catchEnv argName false)
  [5410] (5770/11) Normal[5410] return B
  [5411] Exit[5411]
  [5412] (5758/4) Normal[5412] CONTEXT.LexicalEnvironment = catchEnv
  [5413] (5759/5) Call[5413] access __x5__ = (CatchParameter "BindingInitialization" thrownValue catchEnv)
  [5414] (5765/8) Normal[5414] return status
  [5415] (5767/9) Call[5415] access __x7__ = (Block "Evaluation")
  [5416] (5746/0) Normal[5416] let oldEnv = CONTEXT.LexicalEnvironment
  [5417] (5751/2) Normal[5417] let __x3__ = 0i
  [5418] (5768/9) Normal[5418] let B = __x7__
  [5419] (5754/2) Normal[5419] let argName = __x2__[__x3__]
  [5420] LoopCont[5420]
  [5421] (5752/2) Loop[5421] (< __x3__ __x2__.length)
  [5422] (5747/1) Call[5422] app __x0__ = (NewDeclarativeEnvironment oldEnv)
  [5423] (5761/6) Call[5423] app __x6__ = (IsAbruptCompletion status)
  [5424] (5762/6) If[5424] __x6__
  [5425] (5769/10) Normal[5425] CONTEXT.LexicalEnvironment = oldEnv
  [5426] (5757/3) Normal[5426] [! __x4__]
  [5427] (5748/1) Normal[5427] let catchEnv = __x0__
  [5428] (5764/7) Normal[5428] CONTEXT.LexicalEnvironment = oldEnv
  [5429] (5760/5) Normal[5429] let status = __x5__
Algo: Catch[0,0].ContainsDuplicateLabels [484]
  [5430] Entry[5430]
  [5431] (5772)Normal[5431] let Catch = this
  [5432] (5773/0) Call[5432] access __x0__ = (Block "ContainsDuplicateLabels" labelSet)
  [5433] (5774/0) Normal[5433] return __x0__
  [5434] Exit[5434]
Algo: Catch[0,0].ContainsUndefinedBreakTarget [485]
  [5435] Entry[5435]
  [5436] (5776)Normal[5436] let Catch = this
  [5437] (5777/0) Call[5437] access __x0__ = (Block "ContainsUndefinedBreakTarget" labelSet)
  [5438] (5778/0) Normal[5438] return __x0__
  [5439] Exit[5439]
Algo: Catch[0,0].ContainsUndefinedContinueTarget [486]
  [5440] Entry[5440]
  [5441] (5780)Normal[5441] let Catch = this
  [5442] (5781/0) Call[5442] access __x0__ = (Block "ContainsUndefinedContinueTarget" iterationSet (new []))
  [5443] (5782/0) Normal[5443] return __x0__
  [5444] Exit[5444]
Algo: Catch[0,0].EarlyErrors [487]
  [5445] Entry[5445]
  [5446] (5784)Normal[5446] let Catch = this
  [5447] (5788/0) Normal[5447] throw SyntaxError
  [5448] (5790/1) Call[5448] access __x2__ = (CatchParameter "BoundNames")
  [5449] (5794/1) Normal[5449] let __x6__ = 0i
  [5450] (5795/1) Normal[5450] let __x7__ = 0i
  [5451] (5799/1) Normal[5451] __x7__ = 0i
  [5452] (5800/1) Loop[5452] (< __x7__ __x5__.length)
  [5453] (5785/0) Call[5453] access __x0__ = (CatchParameter "BoundNames")
  [5454] (5791/1) Call[5454] access __x3__ = (Block "LexicallyDeclaredNames")
  [5455] (5793/1) Normal[5455] let __x5__ = __x3__
  [5456] (5797/1) Loop[5456] (< __x6__ __x4__.length)
  [5457] (5804/1) If[5457] __x8__
  [5458] (5786/0) Call[5458] app __x1__ = (IsDuplicate __x0__)
  [5459] (5796/1) Normal[5459] let __x8__ = false
  [5460] (5792/1) Normal[5460] let __x4__ = __x2__
  [5461] LoopCont[5461]
  [5462] (5787/0) If[5462] __x1__
  [5463] (5801/1) If[5463] (= __x4__[__x6__] __x5__[__x7__])
  [5464] LoopCont[5464]
  [5465] (5809/2) Normal[5465] let __x11__ = __x9__
  [5466] (5810/2) Normal[5466] let __x12__ = __x10__
  [5467] (5822/2) Normal[5467] throw SyntaxError
  [5468] Exit[5468]
  [5469] (5811/2) Normal[5469] let __x13__ = 0i
  [5470] (5805/1) Normal[5470] throw SyntaxError
  [5471] (5807/2) Call[5471] access __x9__ = (CatchParameter "BoundNames")
  [5472] (5814/2) Loop[5472] (< __x13__ __x11__.length)
  [5473] (5816/2) Normal[5473] __x14__ = 0i
  [5474] (5821/2) If[5474] __x15__
  [5475] (5813/2) Normal[5475] let __x15__ = false
  [5476] (5819/2) Normal[5476] __x15__ = true
  [5477] LoopCont[5477]
  [5478] (5802/1) Normal[5478] __x8__ = true
  [5479] (5818/2) If[5479] (= __x11__[__x13__] __x12__[__x14__])
  [5480] (5817/2) Loop[5480] (< __x14__ __x12__.length)
  [5481] (5808/2) Call[5481] access __x10__ = (Block "VarDeclaredNames")
  [5482] (5812/2) Normal[5482] let __x14__ = 0i
  [5483] LoopCont[5483]
Algo: Catch[0,0].HasCallInTailPosition [488]
  [5484] Entry[5484]
  [5485] (5825)Normal[5485] let Catch = this
  [5486] (5826/0) Call[5486] access __x0__ = (Block "HasCallInTailPosition" call)
  [5487] (5827/0) Normal[5487] return __x0__
  [5488] Exit[5488]
Algo: Catch[0,0].VarDeclaredNames [489]
  [5489] Entry[5489]
  [5490] (5829)Normal[5490] let Catch = this
  [5491] (5830/0) Call[5491] access __x0__ = (Block "VarDeclaredNames")
  [5492] (5831/0) Normal[5492] return __x0__
  [5493] Exit[5493]
Algo: Catch[0,0].VarScopedDeclarations [490]
  [5494] Entry[5494]
  [5495] (5833)Normal[5495] let Catch = this
  [5496] (5834/0) Call[5496] access __x0__ = (Block "VarScopedDeclarations")
  [5497] (5835/0) Normal[5497] return __x0__
  [5498] Exit[5498]
Algo: Catch[1,0].CatchClauseEvaluation [491]
  [5499] Entry[5499]
  [5500] (5837)Normal[5500] let Catch = this
  [5501] (5838/0) Call[5501] access __x0__ = (Block "Evaluation")
  [5502] (5839/0) Normal[5502] return __x0__
  [5503] Exit[5503]
Algo: CharacterClassEscape[0,0].Evaluation [492]
  [5504] Entry[5504]
  [5505] (5841)Normal[5505] let CharacterClassEscape = this
  [5506] (5842/0) Normal[5506] ??? "Return the ten - element CharSet containing the characters code:{0} through code:{9} inclusive ."
  [5507] Exit[5507]
Algo: CharacterClassEscape[1,0].Evaluation [493]
  [5508] Entry[5508]
  [5509] (5844)Normal[5509] let CharacterClassEscape = this
  [5510] (5845/0) Normal[5510] ??? "Return the CharSet containing all characters not in the CharSet returned by grammar:{CharacterClassEscape0, []} ."
  [5511] Exit[5511]
Algo: CharacterClassEscape[2,0].Evaluation [494]
  [5512] Entry[5512]
  [5513] (5847)Normal[5513] let CharacterClassEscape = this
  [5514] (5848/0) Normal[5514] ??? "Return the CharSet containing all characters corresponding to a code point on the right - hand side of the nt:{WhiteSpace} or nt:{LineTerminator} productions ."
  [5515] Exit[5515]
Algo: CharacterClassEscape[3,0].Evaluation [495]
  [5516] Entry[5516]
  [5517] (5850)Normal[5517] let CharacterClassEscape = this
  [5518] (5851/0) Normal[5518] ??? "Return the CharSet containing all characters not in the CharSet returned by grammar:{CharacterClassEscape2, []} ."
  [5519] Exit[5519]
Algo: CharacterClassEscape[4,0].Evaluation [496]
  [5520] Entry[5520]
  [5521] (5853)Normal[5521] let CharacterClassEscape = this
  [5522] (5854/0) Normal[5522] return WordCharacters
  [5523] Exit[5523]
Algo: CharacterClassEscape[5,0].Evaluation [497]
  [5524] Entry[5524]
  [5525] (5856)Normal[5525] let CharacterClassEscape = this
  [5526] (5857/0) Normal[5526] ??? "Return the CharSet containing all characters not in the CharSet returned by grammar:{CharacterClassEscape4, []} ."
  [5527] Exit[5527]
Algo: CharacterClassEscape[6,0].Evaluation [498]
  [5528] Entry[5528]
  [5529] (5859)Normal[5529] let CharacterClassEscape = this
  [5530] (5860/0) Normal[5530] ??? "Return the CharSet containing all Unicode code points included in the CharSet returned by nt:{UnicodePropertyValueExpression} ."
  [5531] Exit[5531]
Algo: CharacterClassEscape[7,0].Evaluation [499]
  [5532] Entry[5532]
  [5533] (5862)Normal[5533] let CharacterClassEscape = this
  [5534] (5863/0) Normal[5534] ??? "Return the CharSet containing all Unicode code points not included in the CharSet returned by nt:{UnicodePropertyValueExpression} ."
  [5535] Exit[5535]
Algo: CharacterClass[0,0].Evaluation [500]
  [5536] Entry[5536]
  [5537] (5865)Normal[5537] let CharacterClass = this
  [5538] (5866/0) Call[5538] access __x0__ = (ClassRanges "Evaluation")
  [5539] (5867/0) Normal[5539] let A = __x0__
  [5540] (5868/1) Normal[5540] return (new [A, false])
  [5541] Exit[5541]
Algo: CharacterClass[1,0].Evaluation [501]
  [5542] Entry[5542]
  [5543] (5870)Normal[5543] let CharacterClass = this
  [5544] (5871/0) Call[5544] access __x0__ = (ClassRanges "Evaluation")
  [5545] (5872/0) Normal[5545] let A = __x0__
  [5546] (5873/1) Normal[5546] return (new [A, true])
  [5547] Exit[5547]
Algo: CharacterEscape[0,0].CharacterEscape [502]
  [5548] Entry[5548]
  [5549] (5875)Normal[5549] let CharacterEscape = this
  [5550] (5876/0) Call[5550] access __x0__ = (this "CharacterValue")
  [5551] (5877/0) Normal[5551] let cv = __x0__
  [5552] (5878/1) Normal[5552] return cv
  [5553] Exit[5553]
Algo: CharacterEscape[0,0].CharacterValue [503]
  [5554] Entry[5554]
  [5555] (5880)Normal[5555] let CharacterEscape = this
  [5556] (5881/0) Normal[5556] ??? "Return the code point value according to link:{table-controlescape-code-point-values} ."
  [5557] Exit[5557]
Algo: CharacterEscape[1,0].CharacterEscape [504]
  [5558] Entry[5558]
  [5559] (5883)Normal[5559] let CharacterEscape = this
  [5560] (5884/0) Call[5560] access __x0__ = (this "CharacterValue")
  [5561] (5885/0) Normal[5561] let cv = __x0__
  [5562] (5886/1) Normal[5562] return cv
  [5563] Exit[5563]
Algo: CharacterEscape[1,0].CharacterValue [505]
  [5564] Entry[5564]
  [5565] (5888)Normal[5565] let CharacterEscape = this
  [5566] (5889/0) Normal[5566] let ch = ControlLetter
  [5567] (5890/1) Normal[5567] let i = ch
  [5568] (5891/2) Normal[5568] return (% i 32i)
  [5569] Exit[5569]
Algo: CharacterEscape[2,0].CharacterEscape [506]
  [5570] Entry[5570]
  [5571] (5893)Normal[5571] let CharacterEscape = this
  [5572] (5894/0) Call[5572] access __x0__ = (this "CharacterValue")
  [5573] (5895/0) Normal[5573] let cv = __x0__
  [5574] (5896/1) Normal[5574] return cv
  [5575] Exit[5575]
Algo: CharacterEscape[2,0].CharacterValue [507]
  [5576] Entry[5576]
  [5577] (5898)Normal[5577] let CharacterEscape = this
  [5578] (5899/0) Normal[5578] return " "
  [5579] Exit[5579]
Algo: CharacterEscape[3,0].CharacterEscape [508]
  [5580] Entry[5580]
  [5581] (5901)Normal[5581] let CharacterEscape = this
  [5582] (5902/0) Call[5582] access __x0__ = (this "CharacterValue")
  [5583] (5903/0) Normal[5583] let cv = __x0__
  [5584] (5904/1) Normal[5584] return cv
  [5585] Exit[5585]
Algo: CharacterEscape[3,0].CharacterValue [509]
  [5586] Entry[5586]
  [5587] (5906)Normal[5587] let CharacterEscape = this
  [5588] (5907/0) Call[5588] access __x0__ = (HexEscapeSequence "MV")
  [5589] (5908/0) Normal[5589] return __x0__
  [5590] Exit[5590]
Algo: CharacterEscape[4,0].CharacterEscape [510]
  [5591] Entry[5591]
  [5592] (5910)Normal[5592] let CharacterEscape = this
  [5593] (5911/0) Call[5593] access __x0__ = (this "CharacterValue")
  [5594] (5912/0) Normal[5594] let cv = __x0__
  [5595] (5913/1) Normal[5595] return cv
  [5596] Exit[5596]
Algo: CharacterEscape[5,0].CharacterEscape [511]
  [5597] Entry[5597]
  [5598] (5915)Normal[5598] let CharacterEscape = this
  [5599] (5916/0) Call[5599] access __x0__ = (this "CharacterValue")
  [5600] (5917/0) Normal[5600] let cv = __x0__
  [5601] (5918/1) Normal[5601] return cv
  [5602] Exit[5602]
Algo: CharacterEscape[5,0].CharacterValue [512]
  [5603] Entry[5603]
  [5604] (5920)Normal[5604] let CharacterEscape = this
  [5605] (5921/0) Normal[5605] let ch = IdentityEscape
  [5606] (5922/1) Normal[5606] return ch
  [5607] Exit[5607]
Algo: CharacterRange [513]
  [5608] Entry[5608]
  [5609] (5924/1) Normal[5609] let a = A[0i]
  [5610] (5928/5) Normal[5610] assert (! (< j i))
  [5611] (5929/6) Normal[5611] ??? "Return the CharSet containing all characters with a character value greater than or equal to id:{i} and less than or equal to id:{j} ."
  [5612] (5925/2) Normal[5612] let b = B[0i]
  [5613] Exit[5613]
  [5614] (5926/3) Normal[5614] let i = a
  [5615] (5927/4) Normal[5615] let j = b
Algo: CharacterSetMatcher [514]
  [5616] Entry[5616]
  [5617] (5930/0) Normal[5617] ??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{A} , id:{invert} , and id:{direction} and performs the following steps when called : in:{} out:{}"
  [5618] Exit[5618]
Algo: ClassAtomNoDash[0,0].CharacterValue [515]
  [5619] Entry[5619]
  [5620] (5932)Normal[5620] let ClassAtomNoDash = this
  [5621] (5933/0) Normal[5621] let ch = SourceCharacter
  [5622] (5934/1) Normal[5622] return ch
  [5623] Exit[5623]
Algo: ClassAtomNoDash[0,0].Evaluation [516]
  [5624] Entry[5624]
  [5625] (5936)Normal[5625] let ClassAtomNoDash = this
  [5626] (5937/0) Normal[5626] return (new [SourceCharacter])
  [5627] Exit[5627]
Algo: ClassAtomNoDash[0,0].IsCharacterClass [517]
  [5628] Entry[5628]
  [5629] (5939)Normal[5629] let ClassAtomNoDash = this
  [5630] (5940/0) Normal[5630] return false
  [5631] Exit[5631]
Algo: ClassAtomNoDash[1,0].Evaluation [518]
  [5632] Entry[5632]
  [5633] (5942)Normal[5633] let ClassAtomNoDash = this
  [5634] (5943/0) Call[5634] access __x0__ = (ClassEscape "Evaluation")
  [5635] (5944/0) Normal[5635] return __x0__
  [5636] Exit[5636]
Algo: ClassAtom[0,0].CharacterValue [519]
  [5637] Entry[5637]
  [5638] (5946)Normal[5638] let ClassAtom = this
  [5639] (5947/0) Normal[5639] return "-"
  [5640] Exit[5640]
Algo: ClassAtom[0,0].Evaluation [520]
  [5641] Entry[5641]
  [5642] (5949)Normal[5642] let ClassAtom = this
  [5643] (5950/0) Normal[5643] ??? "Return the CharSet containing the single character code:{-} U + 002D ( HYPHEN - MINUS ) ."
  [5644] Exit[5644]
Algo: ClassAtom[0,0].IsCharacterClass [521]
  [5645] Entry[5645]
  [5646] (5952)Normal[5646] let ClassAtom = this
  [5647] (5953/0) Normal[5647] return false
  [5648] Exit[5648]
Algo: ClassAtom[1,0].Evaluation [522]
  [5649] Entry[5649]
  [5650] (5955)Normal[5650] let ClassAtom = this
  [5651] (5956/0) Call[5651] access __x0__ = (ClassAtomNoDash "Evaluation")
  [5652] (5957/0) Normal[5652] return __x0__
  [5653] Exit[5653]
Algo: ClassBody[0,0].EarlyErrors [523]
  [5654] Entry[5654]
  [5655] (5959)Normal[5655] let ClassBody = this
  [5656] (5963/0) Normal[5656] let __x3__ = 0i
  [5657] (5964/0) Normal[5657] let __x4__ = 0i
  [5658] (5968/0) Normal[5658] __x3__ = (+ __x3__ 1i)
  [5659] LoopCont[5659]
  [5660] (5973/0) If[5660] __x5__
  [5661] (5974/0) Normal[5661] throw SyntaxError
  [5662] Exit[5662]
  [5663] (5960/0) Call[5663] access __x0__ = (ClassElementList "PrototypePropertyNameList")
  [5664] (5965/0) Normal[5664] let __x5__ = false
  [5665] (5967/0) If[5665] (= __x1__[__x4__] __x2__)
  [5666] (5971/0) Normal[5666] __x5__ = true
  [5667] (5961/0) Normal[5667] let __x1__ = __x0__
  [5668] (5970/0) If[5668] (< 1i __x3__)
  [5669] (5966/0) Loop[5669] (< __x4__ __x1__.length)
  [5670] (5962/0) Normal[5670] let __x2__ = "constructor"
Algo: ClassDeclaration[0,0].BindingClassDeclarationEvaluation [524]
  [5671] Entry[5671]
  [5672] (5977)Normal[5672] let ClassDeclaration = this
  [5673] (5981/1) Normal[5673] let value = [? __x1__]
  [5674] (5982/2) Normal[5674] value.SourceText = (get-syntax ClassDeclaration)
  [5675] (5986/5) Normal[5675] return value
  [5676] Exit[5676]
  [5677] (5978/0) Call[5677] access __x0__ = (BindingIdentifier "StringValue")
  [5678] (5983/3) Normal[5678] let env = CONTEXT.LexicalEnvironment
  [5679] (5985/4) Normal[5679] [? __x2__]
  [5680] (5979/0) Normal[5680] let className = __x0__
  [5681] (5984/4) Call[5681] app __x2__ = (InitializeBoundName className value env)
  [5682] (5980/1) Call[5682] access __x1__ = (ClassTail "ClassDefinitionEvaluation" className className)
Algo: ClassDeclaration[0,0].BoundNames [525]
  [5683] Entry[5683]
  [5684] (5988)Normal[5684] let ClassDeclaration = this
  [5685] (5989/0) Call[5685] access __x0__ = (BindingIdentifier "BoundNames")
  [5686] (5990/0) Normal[5686] return __x0__
  [5687] Exit[5687]
Algo: ClassDeclaration[0,0].Evaluation [526]
  [5688] Entry[5688]
  [5689] (5992)Normal[5689] let ClassDeclaration = this
  [5690] (5993/0) Call[5690] access __x0__ = (this "BindingClassDeclarationEvaluation")
  [5691] (5994/0) Normal[5691] [? __x0__]
  [5692] (5995/1) Normal[5692] return ~empty~
  [5693] Exit[5693]
Algo: ClassDeclaration[0,0].IsConstantDeclaration [527]
  [5694] Entry[5694]
  [5695] (5997)Normal[5695] let ClassDeclaration = this
  [5696] (5998/0) Normal[5696] return false
  [5697] Exit[5697]
Algo: ClassDeclaration[1,0].BindingClassDeclarationEvaluation [528]
  [5698] Entry[5698]
  [5699] (6000)Normal[5699] let ClassDeclaration = this
  [5700] (6004/2) Normal[5700] return value
  [5701] Exit[5701]
  [5702] (6001/0) Call[5702] access __x0__ = (ClassTail "ClassDefinitionEvaluation" undefined "default")
  [5703] (6002/0) Normal[5703] let value = [? __x0__]
  [5704] (6003/1) Normal[5704] value.SourceText = (get-syntax ClassDeclaration)
Algo: ClassDeclaration[1,0].BoundNames [529]
  [5705] Entry[5705]
  [5706] (6006)Normal[5706] let ClassDeclaration = this
  [5707] (6007/0) Normal[5707] return (new ["*default*"])
  [5708] Exit[5708]
Algo: ClassDeclaration[1,0].IsConstantDeclaration [530]
  [5709] Entry[5709]
  [5710] (6009)Normal[5710] let ClassDeclaration = this
  [5711] (6010/0) Normal[5711] return false
  [5712] Exit[5712]
Algo: ClassElementList[0,0].ConstructorMethod [531]
  [5713] Entry[5713]
  [5714] (6012)Normal[5714] let ClassElementList = this
  [5715] (6017/1) Normal[5715] return ~empty~
  [5716] Exit[5716]
  [5717] (6013/0) Call[5717] access __x0__ = (ClassElement "ClassElementKind")
  [5718] (6014/0) If[5718] (= __x0__ ~ConstructorMethod~)
  [5719] (6015/0) Normal[5719] return ClassElement
Algo: ClassElementList[0,0].NonConstructorMethodDefinitions [532]
  [5720] Entry[5720]
  [5721] (6019)Normal[5721] let ClassElementList = this
  [5722] (6024/2) Normal[5722] return (new [])
  [5723] Exit[5723]
  [5724] (6020/0) Call[5724] access __x0__ = (ClassElement "ClassElementKind")
  [5725] (6021/0) If[5725] (= __x0__ ~NonConstructorMethod~)
  [5726] (6022/1) Normal[5726] return (new [ClassElement])
Algo: ClassElementList[0,0].PrototypePropertyNameList [533]
  [5727] Entry[5727]
  [5728] (6026)Normal[5728] let ClassElementList = this
  [5729] (6031/1) Call[5729] access __x1__ = (ClassElement "IsStatic")
  [5730] (6032/1) If[5730] (= __x1__ true)
  [5731] (6027/0) Call[5731] access __x0__ = (ClassElement "PropName")
  [5732] (6033/1) Normal[5732] return (new [])
  [5733] (6035/2) Call[5733] access __x2__ = (ClassElement "PropName")
  [5734] (6036/2) Normal[5734] return (new [__x2__])
  [5735] Exit[5735]
  [5736] (6028/0) If[5736] (= __x0__ ~empty~)
  [5737] (6029/0) Normal[5737] return (new [])
Algo: ClassElementList[1,0].ComputedPropertyContains [534]
  [5738] Entry[5738]
  [5739] (6038/0) Call[5739] access __x0__ = (ClassElementList "ComputedPropertyContains" symbol)
  [5740] (6043/2) Call[5740] access __x1__ = (ClassElement "ComputedPropertyContains" symbol)
  [5741] (6044/2) Normal[5741] return __x1__
  [5742] (6039/0) Normal[5742] let inList = __x0__
  [5743] Exit[5743]
  [5744] (6040/1) If[5744] (= inList true)
  [5745] (6041/1) Normal[5745] return true
Algo: ClassElementList[1,0].ConstructorMethod [535]
  [5746] Entry[5746]
  [5747] (6046/0) Call[5747] access __x0__ = (ClassElementList "ConstructorMethod")
  [5748] (6051/2) Call[5748] access __x1__ = (ClassElement "ClassElementKind")
  [5749] (6052/2) If[5749] (= __x1__ ~ConstructorMethod~)
  [5750] (6047/0) Normal[5750] let head = __x0__
  [5751] (6053/2) Normal[5751] return ClassElement
  [5752] (6055/3) Normal[5752] return ~empty~
  [5753] (6048/1) If[5753] (! (= head ~empty~))
  [5754] (6049/1) Normal[5754] return head
  [5755] Exit[5755]
Algo: ClassElementList[1,0].NonConstructorMethodDefinitions [536]
  [5756] Entry[5756]
  [5757] (6057/0) Call[5757] access __x0__ = (ClassElementList "NonConstructorMethodDefinitions")
  [5758] (6061/2) Normal[5758] append ClassElement -> list
  [5759] (6063/3) Normal[5759] return list
  [5760] (6058/0) Normal[5760] let list = __x0__
  [5761] Exit[5761]
  [5762] (6059/1) Call[5762] access __x1__ = (ClassElement "ClassElementKind")
  [5763] (6060/1) If[5763] (= __x1__ ~NonConstructorMethod~)
Algo: ClassElementList[1,0].PrototypePropertyNameList [537]
  [5764] Entry[5764]
  [5765] (6065/0) Call[5765] access __x0__ = (ClassElementList "PrototypePropertyNameList")
  [5766] (6069/1) Normal[5766] return list
  [5767] (6071/2) Call[5767] access __x2__ = (ClassElement "IsStatic")
  [5768] (6076/3) Normal[5768] append __x3__ -> list
  [5769] (6077/4) Normal[5769] return list
  [5770] (6066/0) Normal[5770] let list = __x0__
  [5771] (6072/2) If[5771] (= __x2__ true)
  [5772] (6075/3) Call[5772] access __x3__ = (ClassElement "PropName")
  [5773] (6067/1) Call[5773] access __x1__ = (ClassElement "PropName")
  [5774] (6073/2) Normal[5774] return list
  [5775] (6068/1) If[5775] (= __x1__ ~empty~)
  [5776] Exit[5776]
Algo: ClassElement[0,0].ClassElementKind [538]
  [5777] Entry[5777]
  [5778] (6079)Normal[5778] let ClassElement = this
  [5779] (6084/1) Normal[5779] return ~NonConstructorMethod~
  [5780] Exit[5780]
  [5781] (6080/0) Call[5781] access __x0__ = (MethodDefinition "PropName")
  [5782] (6081/0) If[5782] (= __x0__ "constructor")
  [5783] (6082/0) Normal[5783] return ~ConstructorMethod~
Algo: ClassElement[0,0].EarlyErrors [539]
  [5784] Entry[5784]
  [5785] (6086)Normal[5785] let ClassElement = this
  [5786] (6090/0) If[5786] __x0__
  [5787] (6092/0) Call[5787] access __x2__ = (MethodDefinition "HasDirectSuper")
  [5788] (6095/0) If[5788] __x0__
  [5789] (6098/1) Normal[5789] let __x3__ = true
  [5790] (6099/1) Call[5790] access __x4__ = (MethodDefinition "PropName")
  [5791] (6103/1) Call[5791] access __x5__ = (MethodDefinition "SpecialMethod")
  [5792] (6104/1) Normal[5792] __x3__ = (= __x5__ true)
  [5793] (6087/0) Normal[5793] let __x0__ = true
  [5794] (6093/0) Normal[5794] __x0__ = (= __x2__ true)
  [5795] (6096/0) Normal[5795] throw SyntaxError
  [5796] (6101/1) If[5796] __x3__
  [5797] (6106/1) If[5797] __x3__
  [5798] (6088/0) Call[5798] access __x1__ = (MethodDefinition "PropName")
  [5799] (6107/1) Normal[5799] throw SyntaxError
  [5800] Exit[5800]
  [5801] (6100/1) Normal[5801] __x3__ = (= __x4__ "constructor")
  [5802] (6089/0) Normal[5802] __x0__ = (! (= __x1__ "constructor"))
Algo: ClassElement[0,0].IsStatic [540]
  [5803] Entry[5803]
  [5804] (6110)Normal[5804] let ClassElement = this
  [5805] (6111/0) Normal[5805] return false
  [5806] Exit[5806]
Algo: ClassElement[1,0].ClassElementKind [541]
  [5807] Entry[5807]
  [5808] (6113)Normal[5808] let ClassElement = this
  [5809] (6114/0) Normal[5809] return ~NonConstructorMethod~
  [5810] Exit[5810]
Algo: ClassElement[1,0].EarlyErrors [542]
  [5811] Entry[5811]
  [5812] (6116)Normal[5812] let ClassElement = this
  [5813] (6121/1) Call[5813] access __x1__ = (MethodDefinition "PropName")
  [5814] (6122/1) If[5814] (= __x1__ "prototype")
  [5815] (6117/0) Call[5815] access __x0__ = (MethodDefinition "HasDirectSuper")
  [5816] (6123/1) Normal[5816] throw SyntaxError
  [5817] Exit[5817]
  [5818] (6118/0) If[5818] (= __x0__ true)
  [5819] (6119/0) Normal[5819] throw SyntaxError
Algo: ClassElement[1,0].IsStatic [543]
  [5820] Entry[5820]
  [5821] (6126)Normal[5821] let ClassElement = this
  [5822] (6127/0) Normal[5822] return true
  [5823] Exit[5823]
Algo: ClassElement[2,0].ClassElementKind [544]
  [5824] Entry[5824]
  [5825] (6129)Normal[5825] let ClassElement = this
  [5826] (6130/0) Normal[5826] return ~empty~
  [5827] Exit[5827]
Algo: ClassElement[2,0].ComputedPropertyContains [545]
  [5828] Entry[5828]
  [5829] (6132)Normal[5829] let ClassElement = this
  [5830] (6133/0) Normal[5830] return false
  [5831] Exit[5831]
Algo: ClassElement[2,0].IsStatic [546]
  [5832] Entry[5832]
  [5833] (6135)Normal[5833] let ClassElement = this
  [5834] (6136/0) Normal[5834] return false
  [5835] Exit[5835]
Algo: ClassElement[2,0].PropName [547]
  [5836] Entry[5836]
  [5837] (6138)Normal[5837] let ClassElement = this
  [5838] (6139/0) Normal[5838] return ~empty~
  [5839] Exit[5839]
Algo: ClassEscape[0,0].CharacterValue [548]
  [5840] Entry[5840]
  [5841] (6141)Normal[5841] let ClassEscape = this
  [5842] (6142/0) Normal[5842] return "\b"
  [5843] Exit[5843]
Algo: ClassEscape[0,0].ClassEscape [549]
  [5844] Entry[5844]
  [5845] (6144)Normal[5845] let ClassEscape = this
  [5846] (6148/2) Normal[5846] return (new [c])
  [5847] Exit[5847]
  [5848] (6145/0) Call[5848] access __x0__ = (this "CharacterValue")
  [5849] (6146/0) Normal[5849] let cv = __x0__
  [5850] (6147/1) Normal[5850] let c = cv
Algo: ClassEscape[0,0].IsCharacterClass [550]
  [5851] Entry[5851]
  [5852] (6150)Normal[5852] let ClassEscape = this
  [5853] (6151/0) Normal[5853] return false
  [5854] Exit[5854]
Algo: ClassEscape[1,0].CharacterValue [551]
  [5855] Entry[5855]
  [5856] (6153)Normal[5856] let ClassEscape = this
  [5857] (6154/0) Normal[5857] return "-"
  [5858] Exit[5858]
Algo: ClassEscape[1,0].ClassEscape [552]
  [5859] Entry[5859]
  [5860] (6156)Normal[5860] let ClassEscape = this
  [5861] (6160/2) Normal[5861] return (new [c])
  [5862] Exit[5862]
  [5863] (6157/0) Call[5863] access __x0__ = (this "CharacterValue")
  [5864] (6158/0) Normal[5864] let cv = __x0__
  [5865] (6159/1) Normal[5865] let c = cv
Algo: ClassEscape[1,0].IsCharacterClass [553]
  [5866] Entry[5866]
  [5867] (6162)Normal[5867] let ClassEscape = this
  [5868] (6163/0) Normal[5868] return false
  [5869] Exit[5869]
Algo: ClassEscape[2,0].ClassEscape [554]
  [5870] Entry[5870]
  [5871] (6165)Normal[5871] let ClassEscape = this
  [5872] (6166/0) Call[5872] access __x0__ = (CharacterClassEscape "Evaluation")
  [5873] (6167/0) Normal[5873] return __x0__
  [5874] Exit[5874]
Algo: ClassEscape[2,0].IsCharacterClass [555]
  [5875] Entry[5875]
  [5876] (6169)Normal[5876] let ClassEscape = this
  [5877] (6170/0) Normal[5877] return true
  [5878] Exit[5878]
Algo: ClassEscape[3,0].ClassEscape [556]
  [5879] Entry[5879]
  [5880] (6172)Normal[5880] let ClassEscape = this
  [5881] (6176/2) Normal[5881] return (new [c])
  [5882] Exit[5882]
  [5883] (6173/0) Call[5883] access __x0__ = (this "CharacterValue")
  [5884] (6174/0) Normal[5884] let cv = __x0__
  [5885] (6175/1) Normal[5885] let c = cv
Algo: ClassEscape[3,0].IsCharacterClass [557]
  [5886] Entry[5886]
  [5887] (6178)Normal[5887] let ClassEscape = this
  [5888] (6179/0) Normal[5888] return false
  [5889] Exit[5889]
Algo: ClassExpression[0,0].Evaluation [558]
  [5890] Entry[5890]
  [5891] (6181)Normal[5891] let ClassExpression = this
  [5892] (6185/2) Normal[5892] return value
  [5893] Exit[5893]
  [5894] (6182/0) Call[5894] access __x0__ = (ClassTail "ClassDefinitionEvaluation" undefined "")
  [5895] (6183/0) Normal[5895] let value = [? __x0__]
  [5896] (6184/1) Normal[5896] value.SourceText = (get-syntax ClassExpression)
Algo: ClassExpression[0,0].HasName [559]
  [5897] Entry[5897]
  [5898] (6187)Normal[5898] let ClassExpression = this
  [5899] (6188/0) Normal[5899] return false
  [5900] Exit[5900]
Algo: ClassExpression[0,0].IsFunctionDefinition [560]
  [5901] Entry[5901]
  [5902] (6190)Normal[5902] let ClassExpression = this
  [5903] (6191/0) Normal[5903] return true
  [5904] Exit[5904]
Algo: ClassExpression[0,0].NamedEvaluation [561]
  [5905] Entry[5905]
  [5906] (6193)Normal[5906] let ClassExpression = this
  [5907] (6197/2) Normal[5907] value.SourceText = (get-syntax ClassExpression)
  [5908] (6198/3) Normal[5908] return value
  [5909] (6194/0) Call[5909] access __x0__ = (ClassTail "ClassDefinitionEvaluation" undefined name)
  [5910] Exit[5910]
  [5911] (6195/0) Normal[5911] let value = __x0__
  [5912] (6196/1) Normal[5912] [? value]
Algo: ClassExpression[0,1].Evaluation [562]
  [5913] Entry[5913]
  [5914] (6200)Normal[5914] let ClassExpression = this
  [5915] (6204/1) Normal[5915] let value = [? __x1__]
  [5916] (6205/2) Normal[5916] value.SourceText = (get-syntax ClassExpression)
  [5917] (6201/0) Call[5917] access __x0__ = (BindingIdentifier "StringValue")
  [5918] (6206/3) Normal[5918] return value
  [5919] (6202/0) Normal[5919] let className = __x0__
  [5920] Exit[5920]
  [5921] (6203/1) Call[5921] access __x1__ = (ClassTail "ClassDefinitionEvaluation" className className)
Algo: ClassExpression[0,1].HasName [563]
  [5922] Entry[5922]
  [5923] (6208)Normal[5923] let ClassExpression = this
  [5924] (6209/0) Normal[5924] return true
  [5925] Exit[5925]
Algo: ClassExpression[0,1].IsFunctionDefinition [564]
  [5926] Entry[5926]
  [5927] (6211)Normal[5927] let ClassExpression = this
  [5928] (6212/0) Normal[5928] return true
  [5929] Exit[5929]
Algo: ClassRanges[0,0].Evaluation [565]
  [5930] Entry[5930]
  [5931] (6214)Normal[5931] let ClassRanges = this
  [5932] (6215/0) Normal[5932] return (new [])
  [5933] Exit[5933]
Algo: ClassRanges[1,0].Evaluation [566]
  [5934] Entry[5934]
  [5935] (6217)Normal[5935] let ClassRanges = this
  [5936] (6218/0) Call[5936] access __x0__ = (NonemptyClassRanges "Evaluation")
  [5937] (6219/0) Normal[5937] return __x0__
  [5938] Exit[5938]
Algo: ClassTail[0,0].ClassDefinitionEvaluation [567]
  [5939] (6225/1) Normal[5939] let classScope = __x1__
  [5940] (6226/2) If[5940] (! (= classBinding undefined))
  [5941] (6300/39) Normal[5941] let status = __x19__
  [5942] (6304/42) Call[5942] app __x21__ = (IsAbruptCompletion status)
  [5943] (6316/48) Normal[5943] return F
  [5944] Exit[5944]
  [5945] (6302/41) Call[5945] access __x20__ = (m "PropertyDefinitionEvaluation" F false)
  [5946] (6303/41) Normal[5946] let status = __x20__
  [5947] (6224/1) Call[5947] app __x1__ = (NewDeclarativeEnvironment env)
  [5948] (6305/42) If[5948] __x21__
  [5949] (6307/43) Normal[5949] CONTEXT.LexicalEnvironment = env
  [5950] LoopCont[5950]
  [5951] Entry[5951]
  [5952] (6221)Normal[5952] let ClassTail = this
  [5953] (6233/5) Normal[5953] let protoParent = INTRINSICS["%Object.prototype%"]
  [5954] (6234/6) Normal[5954] let constructorParent = INTRINSICS["%Function.prototype%"]
  [5955] (6289/36) Normal[5955] let methods = __x15__
  [5956] (6290/37) Normal[5956] let __x16__ = methods
  [5957] (6273/29) Normal[5957] let F = constructorInfo.Closure
  [5958] (6274/30) Call[5958] app __x11__ = (MakeClassConstructor F)
  [5959] (6251/17) Call[5959] app __x6__ = (Get superclass "prototype")
  [5960] (6252/17) Normal[5960] let protoParent = [? __x6__]
  [5961] (6267/25) Normal[5961] let steps = ALGORITHM["GLOBAL.DefaultConstructorFunctions"]
  [5962] (6268/26) Call[5962] app __x9__ = (CreateBuiltinFunction steps 0i className (new ["ConstructorKind", "SourceText"]) ~empty~ constructorParent)
  [5963] (6253/18) If[5963] (! (|| (= (typeof protoParent) Object) (= (typeof protoParent) Null)))
  [5964] (6284/34) Normal[5964] [! __x14__]
  [5965] (6285/35) If[5965] (= ClassBody absent)
  [5966] (6238/9) Normal[5966] let superclassRef = __x3__
  [5967] (6239/10) Normal[5967] CONTEXT.LexicalEnvironment = env
  [5968] (6245/14) Normal[5968] let constructorParent = INTRINSICS["%Function.prototype%"]
  [5969] (6257/20) Call[5969] app __x7__ = (OrdinaryObjectCreate protoParent)
  [5970] (6277/31) Normal[5970] [! __x12__]
  [5971] (6278/32) Call[5971] app __x13__ = (MakeConstructor F false proto)
  [5972] (6291/37) Normal[5972] let __x17__ = 0i
  [5973] (6258/20) Normal[5973] let proto = [! __x7__]
  [5974] (6295/37) Normal[5974] __x17__ = (+ __x17__ 1i)
  [5975] (6296/38) Call[5975] access __x18__ = (m "IsStatic")
  [5976] (6222/0) Call[5976] access __x0__ = (CONTEXT "LexicalEnvironment")
  [5977] (6311/46) If[5977] (! (= classBinding undefined))
  [5978] (6313/47) Call[5978] app __x22__ = (classScope.InitializeBinding classScope classBinding F)
  [5979] (6228/3) Call[5979] app __x2__ = (classScope.CreateImmutableBinding classScope classBinding true)
  [5980] (6231/4) If[5980] (= ClassHeritage absent)
  [5981] (6294/37) Normal[5981] let m = __x16__[__x17__]
  [5982] (6308/44) Normal[5982] return status
  [5983] (6247/15) Call[5983] app __x5__ = (IsConstructor superclass)
  [5984] (6248/15) If[5984] (= __x5__ false)
  [5985] (6262/22) Call[5985] access __x8__ = (ClassBody "ConstructorMethod")
  [5986] (6263/22) Normal[5986] let constructor = __x8__
  [5987] (6256/19) Normal[5987] let constructorParent = superclass
  [5988] (6269/26) Normal[5988] let F = [! __x9__]
  [5989] (6236/8) Normal[5989] CONTEXT.LexicalEnvironment = classScope
  [5990] (6286/35) Normal[5990] let methods = (new [])
  [5991] (6288/36) Call[5991] access __x15__ = (ClassBody "NonConstructorMethodDefinitions")
  [5992] (6237/9) Call[5992] access __x3__ = (ClassHeritage "Evaluation")
  [5993] (6272/28) Normal[5993] let constructorInfo = [! __x10__]
  [5994] (6310/45) Normal[5994] CONTEXT.LexicalEnvironment = env
  [5995] (6223/0) Normal[5995] let env = __x0__
  [5996] (6276/31) Call[5996] app __x12__ = (SetFunctionName F className)
  [5997] (6299/39) Call[5997] access __x19__ = (m "PropertyDefinitionEvaluation" proto false)
  [5998] (6241/11) Normal[5998] let superclass = [? __x4__]
  [5999] (6242/12) If[5999] (= superclass null)
  [6000] (6260/21) Normal[6000] let constructor = ~empty~
  [6001] (6264/23) Normal[6001] CONTEXT.LexicalEnvironment = classScope
  [6002] (6249/15) Normal[6002] throw TypeError
  [6003] (6275/30) Normal[6003] [! __x11__]
  [6004] (6292/37) Loop[6004] (< __x17__ __x16__.length)
  [6005] (6254/18) Normal[6005] throw TypeError
  [6006] (6280/33) If[6006] (! (= ClassHeritage absent))
  [6007] (6281/33) Normal[6007] F.ConstructorKind = ~derived~
  [6008] (6283/34) Call[6008] app __x14__ = (CreateMethodProperty proto "constructor" F)
  [6009] (6314/47) Normal[6009] __x22__
  [6010] (6229/3) Normal[6010] __x2__
  [6011] (6265/24) If[6011] (= constructor ~empty~)
  [6012] (6279/32) Normal[6012] [! __x13__]
  [6013] (6297/38) If[6013] (= __x18__ false)
  [6014] (6244/13) Normal[6014] let protoParent = null
  [6015] (6240/11) Call[6015] app __x4__ = (GetValue superclassRef)
  [6016] (6259/21) If[6016] (= ClassBody absent)
  [6017] (6271/28) Call[6017] access __x10__ = (constructor "DefineMethod" proto constructorParent)
Algo: ClassTail[0,1].ClassDefinitionEvaluation [568]
  [6018] (6322/1) Normal[6018] let classScope = __x1__
  [6019] (6323/2) If[6019] (! (= classBinding undefined))
  [6020] (6397/39) Normal[6020] let status = __x19__
  [6021] (6401/42) Call[6021] app __x21__ = (IsAbruptCompletion status)
  [6022] (6413/48) Normal[6022] return F
  [6023] Exit[6023]
  [6024] (6399/41) Call[6024] access __x20__ = (m "PropertyDefinitionEvaluation" F false)
  [6025] (6400/41) Normal[6025] let status = __x20__
  [6026] (6321/1) Call[6026] app __x1__ = (NewDeclarativeEnvironment env)
  [6027] (6402/42) If[6027] __x21__
  [6028] (6404/43) Normal[6028] CONTEXT.LexicalEnvironment = env
  [6029] LoopCont[6029]
  [6030] Entry[6030]
  [6031] (6318)Normal[6031] let ClassTail = this
  [6032] (6330/5) Normal[6032] let protoParent = INTRINSICS["%Object.prototype%"]
  [6033] (6331/6) Normal[6033] let constructorParent = INTRINSICS["%Function.prototype%"]
  [6034] (6386/36) Normal[6034] let methods = __x15__
  [6035] (6387/37) Normal[6035] let __x16__ = methods
  [6036] (6370/29) Normal[6036] let F = constructorInfo.Closure
  [6037] (6371/30) Call[6037] app __x11__ = (MakeClassConstructor F)
  [6038] (6348/17) Call[6038] app __x6__ = (Get superclass "prototype")
  [6039] (6349/17) Normal[6039] let protoParent = [? __x6__]
  [6040] (6364/25) Normal[6040] let steps = ALGORITHM["GLOBAL.DefaultConstructorFunctions"]
  [6041] (6365/26) Call[6041] app __x9__ = (CreateBuiltinFunction steps 0i className (new ["ConstructorKind", "SourceText"]) ~empty~ constructorParent)
  [6042] (6350/18) If[6042] (! (|| (= (typeof protoParent) Object) (= (typeof protoParent) Null)))
  [6043] (6381/34) Normal[6043] [! __x14__]
  [6044] (6382/35) If[6044] (= ClassBody absent)
  [6045] (6335/9) Normal[6045] let superclassRef = __x3__
  [6046] (6336/10) Normal[6046] CONTEXT.LexicalEnvironment = env
  [6047] (6342/14) Normal[6047] let constructorParent = INTRINSICS["%Function.prototype%"]
  [6048] (6354/20) Call[6048] app __x7__ = (OrdinaryObjectCreate protoParent)
  [6049] (6374/31) Normal[6049] [! __x12__]
  [6050] (6375/32) Call[6050] app __x13__ = (MakeConstructor F false proto)
  [6051] (6388/37) Normal[6051] let __x17__ = 0i
  [6052] (6355/20) Normal[6052] let proto = [! __x7__]
  [6053] (6392/37) Normal[6053] __x17__ = (+ __x17__ 1i)
  [6054] (6393/38) Call[6054] access __x18__ = (m "IsStatic")
  [6055] (6319/0) Call[6055] access __x0__ = (CONTEXT "LexicalEnvironment")
  [6056] (6408/46) If[6056] (! (= classBinding undefined))
  [6057] (6410/47) Call[6057] app __x22__ = (classScope.InitializeBinding classScope classBinding F)
  [6058] (6325/3) Call[6058] app __x2__ = (classScope.CreateImmutableBinding classScope classBinding true)
  [6059] (6328/4) If[6059] (= ClassHeritage absent)
  [6060] (6391/37) Normal[6060] let m = __x16__[__x17__]
  [6061] (6405/44) Normal[6061] return status
  [6062] (6344/15) Call[6062] app __x5__ = (IsConstructor superclass)
  [6063] (6345/15) If[6063] (= __x5__ false)
  [6064] (6359/22) Call[6064] access __x8__ = (ClassBody "ConstructorMethod")
  [6065] (6360/22) Normal[6065] let constructor = __x8__
  [6066] (6353/19) Normal[6066] let constructorParent = superclass
  [6067] (6366/26) Normal[6067] let F = [! __x9__]
  [6068] (6333/8) Normal[6068] CONTEXT.LexicalEnvironment = classScope
  [6069] (6383/35) Normal[6069] let methods = (new [])
  [6070] (6385/36) Call[6070] access __x15__ = (ClassBody "NonConstructorMethodDefinitions")
  [6071] (6334/9) Call[6071] access __x3__ = (ClassHeritage "Evaluation")
  [6072] (6369/28) Normal[6072] let constructorInfo = [! __x10__]
  [6073] (6407/45) Normal[6073] CONTEXT.LexicalEnvironment = env
  [6074] (6320/0) Normal[6074] let env = __x0__
  [6075] (6373/31) Call[6075] app __x12__ = (SetFunctionName F className)
  [6076] (6396/39) Call[6076] access __x19__ = (m "PropertyDefinitionEvaluation" proto false)
  [6077] (6338/11) Normal[6077] let superclass = [? __x4__]
  [6078] (6339/12) If[6078] (= superclass null)
  [6079] (6357/21) Normal[6079] let constructor = ~empty~
  [6080] (6361/23) Normal[6080] CONTEXT.LexicalEnvironment = classScope
  [6081] (6346/15) Normal[6081] throw TypeError
  [6082] (6372/30) Normal[6082] [! __x11__]
  [6083] (6389/37) Loop[6083] (< __x17__ __x16__.length)
  [6084] (6351/18) Normal[6084] throw TypeError
  [6085] (6377/33) If[6085] (! (= ClassHeritage absent))
  [6086] (6378/33) Normal[6086] F.ConstructorKind = ~derived~
  [6087] (6380/34) Call[6087] app __x14__ = (CreateMethodProperty proto "constructor" F)
  [6088] (6411/47) Normal[6088] __x22__
  [6089] (6326/3) Normal[6089] __x2__
  [6090] (6362/24) If[6090] (= constructor ~empty~)
  [6091] (6376/32) Normal[6091] [! __x13__]
  [6092] (6394/38) If[6092] (= __x18__ false)
  [6093] (6341/13) Normal[6093] let protoParent = null
  [6094] (6337/11) Call[6094] app __x4__ = (GetValue superclassRef)
  [6095] (6356/21) If[6095] (= ClassBody absent)
  [6096] (6368/28) Call[6096] access __x10__ = (constructor "DefineMethod" proto constructorParent)
Algo: ClassTail[0,1].Contains [569]
  [6097] Entry[6097]
  [6098] (6415)Normal[6098] let ClassTail = this
  [6099] (6420/2) If[6099] (! (= ClassHeritage absent))
  [6100] (6421/2) Normal[6100] return true
  [6101] (6422/2) Normal[6101] return false
  [6102] (6426/4) If[6102] (= inHeritage true)
  [6103] (6427/4) Normal[6103] return true
  [6104] (6429/5) Call[6104] access __x1__ = (ClassBody "ComputedPropertyContains" symbol)
  [6105] (6416/0) If[6105] (is-instance-of symbol ClassBody)
  [6106] (6424/3) Call[6106] access __x0__ = (ClassHeritage "Contains" symbol)
  [6107] (6425/3) Normal[6107] let inHeritage = __x0__
  [6108] (6430/5) Normal[6108] return __x1__
  [6109] Exit[6109]
  [6110] (6417/0) Normal[6110] return true
  [6111] (6419/1) If[6111] (is-instance-of symbol ClassHeritage)
Algo: ClassTail[0,2].ClassDefinitionEvaluation [570]
  [6112] (6436/1) Normal[6112] let classScope = __x1__
  [6113] (6437/2) If[6113] (! (= classBinding undefined))
  [6114] (6511/39) Normal[6114] let status = __x19__
  [6115] (6515/42) Call[6115] app __x21__ = (IsAbruptCompletion status)
  [6116] (6527/48) Normal[6116] return F
  [6117] Exit[6117]
  [6118] (6513/41) Call[6118] access __x20__ = (m "PropertyDefinitionEvaluation" F false)
  [6119] (6514/41) Normal[6119] let status = __x20__
  [6120] (6435/1) Call[6120] app __x1__ = (NewDeclarativeEnvironment env)
  [6121] (6516/42) If[6121] __x21__
  [6122] (6518/43) Normal[6122] CONTEXT.LexicalEnvironment = env
  [6123] LoopCont[6123]
  [6124] Entry[6124]
  [6125] (6432)Normal[6125] let ClassTail = this
  [6126] (6444/5) Normal[6126] let protoParent = INTRINSICS["%Object.prototype%"]
  [6127] (6445/6) Normal[6127] let constructorParent = INTRINSICS["%Function.prototype%"]
  [6128] (6500/36) Normal[6128] let methods = __x15__
  [6129] (6501/37) Normal[6129] let __x16__ = methods
  [6130] (6484/29) Normal[6130] let F = constructorInfo.Closure
  [6131] (6485/30) Call[6131] app __x11__ = (MakeClassConstructor F)
  [6132] (6462/17) Call[6132] app __x6__ = (Get superclass "prototype")
  [6133] (6463/17) Normal[6133] let protoParent = [? __x6__]
  [6134] (6478/25) Normal[6134] let steps = ALGORITHM["GLOBAL.DefaultConstructorFunctions"]
  [6135] (6479/26) Call[6135] app __x9__ = (CreateBuiltinFunction steps 0i className (new ["ConstructorKind", "SourceText"]) ~empty~ constructorParent)
  [6136] (6464/18) If[6136] (! (|| (= (typeof protoParent) Object) (= (typeof protoParent) Null)))
  [6137] (6495/34) Normal[6137] [! __x14__]
  [6138] (6496/35) If[6138] (= ClassBody absent)
  [6139] (6449/9) Normal[6139] let superclassRef = __x3__
  [6140] (6450/10) Normal[6140] CONTEXT.LexicalEnvironment = env
  [6141] (6456/14) Normal[6141] let constructorParent = INTRINSICS["%Function.prototype%"]
  [6142] (6468/20) Call[6142] app __x7__ = (OrdinaryObjectCreate protoParent)
  [6143] (6488/31) Normal[6143] [! __x12__]
  [6144] (6489/32) Call[6144] app __x13__ = (MakeConstructor F false proto)
  [6145] (6502/37) Normal[6145] let __x17__ = 0i
  [6146] (6469/20) Normal[6146] let proto = [! __x7__]
  [6147] (6506/37) Normal[6147] __x17__ = (+ __x17__ 1i)
  [6148] (6507/38) Call[6148] access __x18__ = (m "IsStatic")
  [6149] (6433/0) Call[6149] access __x0__ = (CONTEXT "LexicalEnvironment")
  [6150] (6522/46) If[6150] (! (= classBinding undefined))
  [6151] (6524/47) Call[6151] app __x22__ = (classScope.InitializeBinding classScope classBinding F)
  [6152] (6439/3) Call[6152] app __x2__ = (classScope.CreateImmutableBinding classScope classBinding true)
  [6153] (6442/4) If[6153] (= ClassHeritage absent)
  [6154] (6505/37) Normal[6154] let m = __x16__[__x17__]
  [6155] (6519/44) Normal[6155] return status
  [6156] (6458/15) Call[6156] app __x5__ = (IsConstructor superclass)
  [6157] (6459/15) If[6157] (= __x5__ false)
  [6158] (6473/22) Call[6158] access __x8__ = (ClassBody "ConstructorMethod")
  [6159] (6474/22) Normal[6159] let constructor = __x8__
  [6160] (6467/19) Normal[6160] let constructorParent = superclass
  [6161] (6480/26) Normal[6161] let F = [! __x9__]
  [6162] (6447/8) Normal[6162] CONTEXT.LexicalEnvironment = classScope
  [6163] (6497/35) Normal[6163] let methods = (new [])
  [6164] (6499/36) Call[6164] access __x15__ = (ClassBody "NonConstructorMethodDefinitions")
  [6165] (6448/9) Call[6165] access __x3__ = (ClassHeritage "Evaluation")
  [6166] (6483/28) Normal[6166] let constructorInfo = [! __x10__]
  [6167] (6521/45) Normal[6167] CONTEXT.LexicalEnvironment = env
  [6168] (6434/0) Normal[6168] let env = __x0__
  [6169] (6487/31) Call[6169] app __x12__ = (SetFunctionName F className)
  [6170] (6510/39) Call[6170] access __x19__ = (m "PropertyDefinitionEvaluation" proto false)
  [6171] (6452/11) Normal[6171] let superclass = [? __x4__]
  [6172] (6453/12) If[6172] (= superclass null)
  [6173] (6471/21) Normal[6173] let constructor = ~empty~
  [6174] (6475/23) Normal[6174] CONTEXT.LexicalEnvironment = classScope
  [6175] (6460/15) Normal[6175] throw TypeError
  [6176] (6486/30) Normal[6176] [! __x11__]
  [6177] (6503/37) Loop[6177] (< __x17__ __x16__.length)
  [6178] (6465/18) Normal[6178] throw TypeError
  [6179] (6491/33) If[6179] (! (= ClassHeritage absent))
  [6180] (6492/33) Normal[6180] F.ConstructorKind = ~derived~
  [6181] (6494/34) Call[6181] app __x14__ = (CreateMethodProperty proto "constructor" F)
  [6182] (6525/47) Normal[6182] __x22__
  [6183] (6440/3) Normal[6183] __x2__
  [6184] (6476/24) If[6184] (= constructor ~empty~)
  [6185] (6490/32) Normal[6185] [! __x13__]
  [6186] (6508/38) If[6186] (= __x18__ false)
  [6187] (6455/13) Normal[6187] let protoParent = null
  [6188] (6451/11) Call[6188] app __x4__ = (GetValue superclassRef)
  [6189] (6470/21) If[6189] (= ClassBody absent)
  [6190] (6482/28) Call[6190] access __x10__ = (constructor "DefineMethod" proto constructorParent)
Algo: ClassTail[0,3].ClassDefinitionEvaluation [571]
  [6191] (6533/1) Normal[6191] let classScope = __x1__
  [6192] (6534/2) If[6192] (! (= classBinding undefined))
  [6193] (6608/39) Normal[6193] let status = __x19__
  [6194] (6612/42) Call[6194] app __x21__ = (IsAbruptCompletion status)
  [6195] (6624/48) Normal[6195] return F
  [6196] Exit[6196]
  [6197] (6610/41) Call[6197] access __x20__ = (m "PropertyDefinitionEvaluation" F false)
  [6198] (6611/41) Normal[6198] let status = __x20__
  [6199] (6532/1) Call[6199] app __x1__ = (NewDeclarativeEnvironment env)
  [6200] (6613/42) If[6200] __x21__
  [6201] (6615/43) Normal[6201] CONTEXT.LexicalEnvironment = env
  [6202] LoopCont[6202]
  [6203] Entry[6203]
  [6204] (6529)Normal[6204] let ClassTail = this
  [6205] (6541/5) Normal[6205] let protoParent = INTRINSICS["%Object.prototype%"]
  [6206] (6542/6) Normal[6206] let constructorParent = INTRINSICS["%Function.prototype%"]
  [6207] (6597/36) Normal[6207] let methods = __x15__
  [6208] (6598/37) Normal[6208] let __x16__ = methods
  [6209] (6581/29) Normal[6209] let F = constructorInfo.Closure
  [6210] (6582/30) Call[6210] app __x11__ = (MakeClassConstructor F)
  [6211] (6559/17) Call[6211] app __x6__ = (Get superclass "prototype")
  [6212] (6560/17) Normal[6212] let protoParent = [? __x6__]
  [6213] (6575/25) Normal[6213] let steps = ALGORITHM["GLOBAL.DefaultConstructorFunctions"]
  [6214] (6576/26) Call[6214] app __x9__ = (CreateBuiltinFunction steps 0i className (new ["ConstructorKind", "SourceText"]) ~empty~ constructorParent)
  [6215] (6561/18) If[6215] (! (|| (= (typeof protoParent) Object) (= (typeof protoParent) Null)))
  [6216] (6592/34) Normal[6216] [! __x14__]
  [6217] (6593/35) If[6217] (= ClassBody absent)
  [6218] (6546/9) Normal[6218] let superclassRef = __x3__
  [6219] (6547/10) Normal[6219] CONTEXT.LexicalEnvironment = env
  [6220] (6553/14) Normal[6220] let constructorParent = INTRINSICS["%Function.prototype%"]
  [6221] (6565/20) Call[6221] app __x7__ = (OrdinaryObjectCreate protoParent)
  [6222] (6585/31) Normal[6222] [! __x12__]
  [6223] (6586/32) Call[6223] app __x13__ = (MakeConstructor F false proto)
  [6224] (6599/37) Normal[6224] let __x17__ = 0i
  [6225] (6566/20) Normal[6225] let proto = [! __x7__]
  [6226] (6603/37) Normal[6226] __x17__ = (+ __x17__ 1i)
  [6227] (6604/38) Call[6227] access __x18__ = (m "IsStatic")
  [6228] (6530/0) Call[6228] access __x0__ = (CONTEXT "LexicalEnvironment")
  [6229] (6619/46) If[6229] (! (= classBinding undefined))
  [6230] (6621/47) Call[6230] app __x22__ = (classScope.InitializeBinding classScope classBinding F)
  [6231] (6536/3) Call[6231] app __x2__ = (classScope.CreateImmutableBinding classScope classBinding true)
  [6232] (6539/4) If[6232] (= ClassHeritage absent)
  [6233] (6602/37) Normal[6233] let m = __x16__[__x17__]
  [6234] (6616/44) Normal[6234] return status
  [6235] (6555/15) Call[6235] app __x5__ = (IsConstructor superclass)
  [6236] (6556/15) If[6236] (= __x5__ false)
  [6237] (6570/22) Call[6237] access __x8__ = (ClassBody "ConstructorMethod")
  [6238] (6571/22) Normal[6238] let constructor = __x8__
  [6239] (6564/19) Normal[6239] let constructorParent = superclass
  [6240] (6577/26) Normal[6240] let F = [! __x9__]
  [6241] (6544/8) Normal[6241] CONTEXT.LexicalEnvironment = classScope
  [6242] (6594/35) Normal[6242] let methods = (new [])
  [6243] (6596/36) Call[6243] access __x15__ = (ClassBody "NonConstructorMethodDefinitions")
  [6244] (6545/9) Call[6244] access __x3__ = (ClassHeritage "Evaluation")
  [6245] (6580/28) Normal[6245] let constructorInfo = [! __x10__]
  [6246] (6618/45) Normal[6246] CONTEXT.LexicalEnvironment = env
  [6247] (6531/0) Normal[6247] let env = __x0__
  [6248] (6584/31) Call[6248] app __x12__ = (SetFunctionName F className)
  [6249] (6607/39) Call[6249] access __x19__ = (m "PropertyDefinitionEvaluation" proto false)
  [6250] (6549/11) Normal[6250] let superclass = [? __x4__]
  [6251] (6550/12) If[6251] (= superclass null)
  [6252] (6568/21) Normal[6252] let constructor = ~empty~
  [6253] (6572/23) Normal[6253] CONTEXT.LexicalEnvironment = classScope
  [6254] (6557/15) Normal[6254] throw TypeError
  [6255] (6583/30) Normal[6255] [! __x11__]
  [6256] (6600/37) Loop[6256] (< __x17__ __x16__.length)
  [6257] (6562/18) Normal[6257] throw TypeError
  [6258] (6588/33) If[6258] (! (= ClassHeritage absent))
  [6259] (6589/33) Normal[6259] F.ConstructorKind = ~derived~
  [6260] (6591/34) Call[6260] app __x14__ = (CreateMethodProperty proto "constructor" F)
  [6261] (6622/47) Normal[6261] __x22__
  [6262] (6537/3) Normal[6262] __x2__
  [6263] (6573/24) If[6263] (= constructor ~empty~)
  [6264] (6587/32) Normal[6264] [! __x13__]
  [6265] (6605/38) If[6265] (= __x18__ false)
  [6266] (6552/13) Normal[6266] let protoParent = null
  [6267] (6548/11) Call[6267] app __x4__ = (GetValue superclassRef)
  [6268] (6567/21) If[6268] (= ClassBody absent)
  [6269] (6579/28) Call[6269] access __x10__ = (constructor "DefineMethod" proto constructorParent)
Algo: ClassTail[0,3].Contains [572]
  [6270] Entry[6270]
  [6271] (6626)Normal[6271] let ClassTail = this
  [6272] (6631/2) If[6272] (! (= ClassHeritage absent))
  [6273] (6632/2) Normal[6273] return true
  [6274] (6633/2) Normal[6274] return false
  [6275] (6637/4) If[6275] (= inHeritage true)
  [6276] (6638/4) Normal[6276] return true
  [6277] (6640/5) Call[6277] access __x1__ = (ClassBody "ComputedPropertyContains" symbol)
  [6278] (6627/0) If[6278] (is-instance-of symbol ClassBody)
  [6279] (6635/3) Call[6279] access __x0__ = (ClassHeritage "Contains" symbol)
  [6280] (6636/3) Normal[6280] let inHeritage = __x0__
  [6281] (6641/5) Normal[6281] return __x1__
  [6282] Exit[6282]
  [6283] (6628/0) Normal[6283] return true
  [6284] (6630/1) If[6284] (is-instance-of symbol ClassHeritage)
Algo: CleanupFinalizationRegistry [573]
  [6285] Entry[6285]
  [6286] (6643/1) Normal[6286] let callback = finalizationRegistry.CleanupCallback
  [6287] (6644/2) Normal[6287] ??? "While id:{finalizationRegistry} . [ [ Cells ] ] contains a Record id:{cell} such that id:{cell} . [ [ WeakRefTarget ] ] is const:{empty} , an implementation may perform the following steps : in:{} out:{}"
  [6288] (6645/6) Normal[6288] return undefined
  [6289] Exit[6289]
Algo: ClearKeptObjects [574]
  [6290] Entry[6290]
  [6291] (6647/0) Normal[6291] let agentRecord = AGENT
  [6292] (6648/1) Normal[6292] agentRecord.KeptAlive = (new [])
  [6293] Exit[6293]
Algo: CloneArrayBuffer [575]
  [6294] Entry[6294]
  [6295] (6650/1) Call[6295] app __x0__ = (IsConstructor cloneConstructor)
  [6296] (6654/3) Call[6296] app __x2__ = (IsDetachedBuffer srcBuffer)
  [6297] (6655/3) If[6297] (= __x2__ true)
  [6298] (6660/6) Call[6298] app __x3__ = (CopyDataBlockBytes targetBlock 0i srcBlock srcByteOffset srcLength)
  [6299] (6661/6) Normal[6299] __x3__
  [6300] (6651/1) Normal[6300] assert (= __x0__ true)
  [6301] (6656/3) Normal[6301] throw TypeError
  [6302] (6658/4) Normal[6302] let srcBlock = srcBuffer.ArrayBufferData
  [6303] (6659/5) Normal[6303] let targetBlock = targetBuffer.ArrayBufferData
  [6304] (6652/2) Call[6304] app __x1__ = (AllocateArrayBuffer cloneConstructor srcLength)
  [6305] (6662/7) Normal[6305] return targetBuffer
  [6306] Exit[6306]
  [6307] (6653/2) Normal[6307] let targetBuffer = [? __x1__]
Algo: CoalesceExpression[0,0].AssignmentTargetType [576]
  [6308] Entry[6308]
  [6309] (6664)Normal[6309] let CoalesceExpression = this
  [6310] (6665/0) Normal[6310] return ~invalid~
  [6311] Exit[6311]
Algo: CoalesceExpression[0,0].Evaluation [577]
  [6312] Entry[6312]
  [6313] (6667)Normal[6313] let CoalesceExpression = this
  [6314] (6671/1) Normal[6314] let lval = [? __x1__]
  [6315] (6672/2) If[6315] (|| (= lval undefined) (= lval null))
  [6316] (6677/4) Normal[6316] return [? __x3__]
  [6317] Exit[6317]
  [6318] (6668/0) Call[6318] access __x0__ = (CoalesceExpressionHead "Evaluation")
  [6319] (6674/3) Call[6319] access __x2__ = (BitwiseORExpression "Evaluation")
  [6320] (6678/2) Normal[6320] return lval
  [6321] (6676/4) Call[6321] app __x3__ = (GetValue rref)
  [6322] (6669/0) Normal[6322] let lref = __x0__
  [6323] (6675/3) Normal[6323] let rref = __x2__
  [6324] (6670/1) Call[6324] app __x1__ = (GetValue lref)
Algo: CoalesceExpression[0,0].HasCallInTailPosition [578]
  [6325] Entry[6325]
  [6326] (6680)Normal[6326] let CoalesceExpression = this
  [6327] (6681/0) Call[6327] access __x0__ = (BitwiseORExpression "HasCallInTailPosition" call)
  [6328] (6682/0) Normal[6328] return __x0__
  [6329] Exit[6329]
Algo: CoalesceExpression[0,0].IsFunctionDefinition [579]
  [6330] Entry[6330]
  [6331] (6684)Normal[6331] let CoalesceExpression = this
  [6332] (6685/0) Normal[6332] return false
  [6333] Exit[6333]
Algo: CodePointAt [580]
  [6334] Entry[6334]
  [6335] (6687/0) Normal[6335] let size = string.length
  [6336] (6691/4) Normal[6336] ??? "If id:{first} is not a link:{leading-surrogate} or link:{trailing-surrogate} , then in:{} out:{}"
  [6337] (6692/6) Normal[6337] ??? "If id:{first} is a link:{trailing-surrogate} or id:{position} + 1 = id:{size} , then in:{} out:{}"
  [6338] (6696/11) Normal[6338] cp = [! __x0__]
  [6339] (6697/12) Normal[6339] return (new Record("CodePoint" -> cp, "CodeUnitCount" -> 2i, "IsUnpairedSurrogate" -> false))
  [6340] (6688/1) Normal[6340] assert (&& (! (< position 0i)) (< position size))
  [6341] (6693/8) Normal[6341] let second = string[(+ position 1i)]
  [6342] (6695/11) Call[6342] app __x0__ = (UTF16SurrogatePairToCodePoint first second)
  [6343] (6689/2) Normal[6343] let first = string[position]
  [6344] (6694/9) Normal[6344] ??? "If id:{second} is not a link:{trailing-surrogate} , then in:{} out:{}"
  [6345] (6690/3) Normal[6345] ??? "Let id:{cp} be the code point whose numeric value is that of id:{first} ."
  [6346] Exit[6346]
Algo: CodePointsToString [581]
  [6347] Entry[6347]
  [6348] (6699/0) Normal[6348] let result = ""
  [6349] (6704/1) Normal[6349] let cp = __x0__[__x1__]
  [6350] (6705/1) Normal[6350] __x1__ = (+ __x1__ 1i)
  [6351] (6708/3) Normal[6351] return result
  [6352] Exit[6352]
  [6353] (6700/1) Normal[6353] let __x0__ = text
  [6354] (6706/2) Call[6354] app __x2__ = (UTF16EncodeCodePoint cp)
  [6355] LoopCont[6355]
  [6356] (6702/1) Loop[6356] (< __x1__ __x0__.length)
  [6357] (6701/1) Normal[6357] let __x1__ = 0i
  [6358] (6707/2) Normal[6358] result = (+ result [! __x2__])
Algo: CoherentReads [582]
  [6359] Entry[6359]
  [6360] (6710/0) Call[6360] app __x0__ = (SharedDataBlockEventSet execution)
  [6361] (6715/0) Normal[6361] let R = __x1__[__x2__]
  [6362] (6716/0) Normal[6362] __x2__ = (+ __x2__ 1i)
  [6363] (6720/3) Normal[6363] let __x4__ = Ws
  [6364] (6721/3) Normal[6364] let __x5__ = 0i
  [6365] (6725/3) Normal[6365] __x5__ = (+ __x5__ 1i)
  [6366] (6726/4) If[6366] (contains execution.HappensBefore (new [R, W]))
  [6367] LoopCont[6367]
  [6368] (6713/0) Loop[6368] (< __x2__ __x1__.length)
  [6369] (6711/0) Normal[6369] let __x1__ = __x0__
  [6370] (6717/1) Call[6370] app __x3__ = (execution.ReadsBytesFrom execution R)
  [6371] (6731/9) Normal[6371] return true
  [6372] Exit[6372]
  [6373] (6719/2) Normal[6373] let byteLocation = R.ByteIndex
  [6374] (6724/3) Normal[6374] let W = __x4__[__x5__]
  [6375] (6712/0) Normal[6375] let __x2__ = 0i
  [6376] (6729/6) Normal[6376] ??? "If there is a WriteSharedMemory or ReadModifyWriteSharedMemory event id:{V} that has id:{byteLocation} in its range such that the pairs ( id:{W} , id:{V} ) and ( id:{V} , id:{R} ) are in id:{execution} . [ [ HappensBefore ] ] , then in:{} out:{}"
  [6377] (6730/8) Normal[6377] byteLocation = (+ byteLocation 1i)
  [6378] (6722/3) Loop[6378] (< __x5__ __x4__.length)
  [6379] (6718/1) Normal[6379] let Ws = __x3__
  [6380] LoopCont[6380]
  [6381] (6727/5) Normal[6381] return false
Algo: CompletePropertyDescriptor [583]
  [6382] Entry[6382]
  [6383] (6733/0) Normal[6383] assert (is-instance-of Desc PropertyDescriptor)
  [6384] (6737/2) Normal[6384] __x0__ = (= __x1__ true)
  [6385] (6738/2) If[6385] __x0__
  [6386] (6745/3) If[6386] (= Desc.Value absent)
  [6387] (6746/3) Normal[6387] Desc.Value = like.Value
  [6388] (6748/4) If[6388] (= Desc.Writable absent)
  [6389] (6752/6) If[6389] (= Desc.Get absent)
  [6390] (6753/6) Normal[6390] Desc.Get = like.Get
  [6391] (6755/7) If[6391] (= Desc.Set absent)
  [6392] (6761/9) If[6392] (= Desc.Configurable absent)
  [6393] (6762/9) Normal[6393] Desc.Configurable = like.Configurable
  [6394] (6764/10) Normal[6394] return Desc
  [6395] (6734/1) Normal[6395] let like = (new Record("Value" -> undefined, "Writable" -> false, "Get" -> undefined, "Set" -> undefined, "Enumerable" -> false, "Configurable" -> false))
  [6396] (6743/2) If[6396] __x0__
  [6397] (6741/31) Call[6397] app __x2__ = (IsDataDescriptor Desc)
  [6398] (6749/4) Normal[6398] Desc.Writable = like.Writable
  [6399] (6758/8) If[6399] (= Desc.Enumerable absent)
  [6400] (6735/2) Normal[6400] let __x0__ = true
  [6401] (6756/7) Normal[6401] Desc.Set = like.Set
  [6402] Exit[6402]
  [6403] (6742/31) Normal[6403] __x0__ = (= __x2__ true)
  [6404] (6736/2) Call[6404] app __x1__ = (IsGenericDescriptor Desc)
  [6405] (6759/8) Normal[6405] Desc.Enumerable = like.Enumerable
Algo: ComposeWriteEventBytes [584]
  [6406] Entry[6406]
  [6407] (6766/0) Normal[6407] let byteLocation = byteIndex
  [6408] (6770/2) Loop[6408] (< __x1__ __x0__.length)
  [6409] (6772/2) Normal[6409] let W = __x0__[__x1__]
  [6410] (6786/14) Normal[6410] return bytesRead
  [6411] (6776/6) Normal[6411] let byte = W.Payload[payloadIndex]
  [6412] (6784/12) Normal[6412] append byte -> bytesRead
  [6413] (6781/10) Call[6413] app __x3__ = (W.ModifyOp W bytes W.Payload)
  [6414] (6782/10) Normal[6414] let bytesModified = __x3__
  [6415] Exit[6415]
  [6416] (6767/1) Normal[6416] let bytesRead = (new [])
  [6417] (6773/2) Normal[6417] __x1__ = (+ __x1__ 1i)
  [6418] (6775/5) If[6418] (is-instance-of W WriteSharedMemory)
  [6419] (6778/8) Normal[6419] assert (is-instance-of W ReadModifyWriteSharedMemory)
  [6420] (6780/9) Normal[6420] let bytes = __x2__
  [6421] (6768/2) Normal[6421] let __x0__ = Ws
  [6422] (6785/13) Normal[6422] byteLocation = (+ byteLocation 1i)
  [6423] (6779/9) Call[6423] app __x2__ = (ValueOfReadEvent execution W)
  [6424] (6774/4) Normal[6424] let payloadIndex = (- byteLocation W.ByteIndex)
  [6425] (6769/2) Normal[6425] let __x1__ = 0i
  [6426] LoopCont[6426]
  [6427] (6783/11) Normal[6427] let byte = bytesModified[payloadIndex]
Algo: ComputedPropertyName[0,0].Evaluation [585]
  [6428] Entry[6428]
  [6429] (6788)Normal[6429] let ComputedPropertyName = this
  [6430] (6792/1) Normal[6430] let propName = [? __x1__]
  [6431] (6793/2) Call[6431] app __x2__ = (ToPropertyKey propName)
  [6432] (6789/0) Call[6432] access __x0__ = (AssignmentExpression "Evaluation")
  [6433] (6794/2) Normal[6433] return [? __x2__]
  [6434] (6790/0) Normal[6434] let exprValue = __x0__
  [6435] Exit[6435]
  [6436] (6791/1) Call[6436] app __x1__ = (GetValue exprValue)
Algo: ComputedPropertyName[0,0].PropName [586]
  [6437] Entry[6437]
  [6438] (6796)Normal[6438] let ComputedPropertyName = this
  [6439] (6797/0) Normal[6439] return ~empty~
  [6440] Exit[6440]
Algo: ConciseBody[0,0].ConciseBodyContainsUseStrict [587]
  [6441] Entry[6441]
  [6442] (6799)Normal[6442] let ConciseBody = this
  [6443] (6800/0) Normal[6443] return false
  [6444] Exit[6444]
Algo: ConciseBody[0,0].EvaluateBody [588]
  [6445] Entry[6445]
  [6446] (6802)Normal[6446] let ConciseBody = this
  [6447] (6803/0) Call[6447] access __x0__ = (ConciseBody "EvaluateConciseBody" functionObject argumentsList)
  [6448] (6804/0) Normal[6448] return [? __x0__]
  [6449] Exit[6449]
Algo: ConciseBody[0,0].EvaluateConciseBody [589]
  [6450] Entry[6450]
  [6451] (6806)Normal[6451] let ConciseBody = this
  [6452] (6810/1) Normal[6452] return __x1__
  [6453] Exit[6453]
  [6454] (6807/0) Call[6454] app __x0__ = (FunctionDeclarationInstantiation functionObject argumentsList)
  [6455] (6808/0) Normal[6455] [? __x0__]
  [6456] (6809/1) Call[6456] access __x1__ = (ExpressionBody "Evaluation")
Algo: ConciseBody[0,0].LexicallyDeclaredNames [590]
  [6457] Entry[6457]
  [6458] (6812)Normal[6458] let ConciseBody = this
  [6459] (6813/0) Normal[6459] return (new [])
  [6460] Exit[6460]
Algo: ConciseBody[0,0].LexicallyScopedDeclarations [591]
  [6461] Entry[6461]
  [6462] (6815)Normal[6462] let ConciseBody = this
  [6463] (6816/0) Normal[6463] return (new [])
  [6464] Exit[6464]
Algo: ConciseBody[0,0].VarDeclaredNames [592]
  [6465] Entry[6465]
  [6466] (6818)Normal[6466] let ConciseBody = this
  [6467] (6819/0) Normal[6467] return (new [])
  [6468] Exit[6468]
Algo: ConciseBody[0,0].VarScopedDeclarations [593]
  [6469] Entry[6469]
  [6470] (6821)Normal[6470] let ConciseBody = this
  [6471] (6822/0) Normal[6471] return (new [])
  [6472] Exit[6472]
Algo: ConciseBody[1,0].ConciseBodyContainsUseStrict [594]
  [6473] Entry[6473]
  [6474] (6824)Normal[6474] let ConciseBody = this
  [6475] (6825/0) Call[6475] access __x0__ = (FunctionBody "FunctionBodyContainsUseStrict")
  [6476] (6826/0) Normal[6476] return __x0__
  [6477] Exit[6477]
Algo: ConditionalExpression[1,0].AssignmentTargetType [595]
  [6478] Entry[6478]
  [6479] (6828)Normal[6479] let ConditionalExpression = this
  [6480] (6829/0) Normal[6480] return ~invalid~
  [6481] Exit[6481]
Algo: ConditionalExpression[1,0].Evaluation [596]
  [6482] Entry[6482]
  [6483] (6831)Normal[6483] let ConditionalExpression = this
  [6484] (6835/1) Call[6484] app __x2__ = (ToBoolean [? __x1__])
  [6485] (6836/1) Normal[6485] let lval = [! __x2__]
  [6486] (6841/4) Call[6486] app __x4__ = (GetValue trueRef)
  [6487] (6842/4) Normal[6487] return [? __x4__]
  [6488] (6846/7) Call[6488] app __x6__ = (GetValue falseRef)
  [6489] (6847/7) Normal[6489] return [? __x6__]
  [6490] (6832/0) Call[6490] access __x0__ = (ShortCircuitExpression "Evaluation")
  [6491] (6837/2) If[6491] (= lval true)
  [6492] (6840/3) Normal[6492] let trueRef = __x3__
  [6493] (6845/6) Normal[6493] let falseRef = __x5__
  [6494] (6833/0) Normal[6494] let lref = __x0__
  [6495] (6844/6) Call[6495] access __x5__ = (AssignmentExpression1 "Evaluation")
  [6496] (6839/3) Call[6496] access __x3__ = (AssignmentExpression0 "Evaluation")
  [6497] (6834/1) Call[6497] app __x1__ = (GetValue lref)
  [6498] Exit[6498]
Algo: ConditionalExpression[1,0].HasCallInTailPosition [597]
  [6499] Entry[6499]
  [6500] (6849)Normal[6500] let ConditionalExpression = this
  [6501] (6853/1) Normal[6501] return true
  [6502] (6855/2) Call[6502] access __x1__ = (AssignmentExpression1 "HasCallInTailPosition" call)
  [6503] (6850/0) Call[6503] access __x0__ = (AssignmentExpression0 "HasCallInTailPosition" call)
  [6504] (6856/2) Normal[6504] return __x1__
  [6505] (6851/0) Normal[6505] let has = __x0__
  [6506] Exit[6506]
  [6507] (6852/1) If[6507] (= has true)
Algo: ConditionalExpression[1,0].IsFunctionDefinition [598]
  [6508] Entry[6508]
  [6509] (6858)Normal[6509] let ConditionalExpression = this
  [6510] (6859/0) Normal[6510] return false
  [6511] Exit[6511]
Algo: Construct [599]
  [6512] Entry[6512]
  [6513] (6861/0) If[6513] (= newTarget absent)
  [6514] (6867/2) Call[6514] app __x0__ = (IsConstructor F)
  [6515] (6868/2) Normal[6515] assert (= __x0__ true)
  [6516] (6872/4) Normal[6516] return [? __x2__]
  [6517] Exit[6517]
  [6518] (6862/0) Normal[6518] newTarget = F
  [6519] (6864/1) If[6519] (= argumentsList absent)
  [6520] (6869/3) Call[6520] app __x1__ = (IsConstructor newTarget)
  [6521] (6871/4) Call[6521] app __x2__ = (F.Construct F argumentsList newTarget)
  [6522] (6870/3) Normal[6522] assert (= __x1__ true)
  [6523] (6865/1) Normal[6523] argumentsList = (new [])
Algo: Contains [600]
  [6524] Entry[6524]
  [6525] (6874)Call[6525] access kind = (this "kind")
  [6526] (6879)Normal[6526] let length = children.length
  [6527] (6880)Normal[6527] let i = 0i
  [6528] (6886)Call[6528] access check = (child "Contains" target)
  [6529] (6887)If[6529] check
  [6530] LoopCont[6530]
  [6531] (6881)Loop[6531] (< i length)
  [6532] (6875)If[6532] (= kind target)
  [6533] (6884)If[6533] (= (typeof child) "AST")
  [6534] (6891)Normal[6534] i = (+ i 1i)
  [6535] (6876)Normal[6535] return true
  [6536] (6878)Call[6536] access children = (this "children")
  [6537] (6888)Normal[6537] return true
  [6538] (6883)Normal[6538] let child = children[i]
  [6539] (6892)Normal[6539] return false
  [6540] Exit[6540]
Algo: ContinueStatement[0,0].ContainsUndefinedContinueTarget [601]
  [6541] Entry[6541]
  [6542] (6894)Normal[6542] let ContinueStatement = this
  [6543] (6895/0) Normal[6543] return false
  [6544] Exit[6544]
Algo: ContinueStatement[0,0].EarlyErrors [602]
  [6545] Entry[6545]
  [6546] (6897)Normal[6546] let ContinueStatement = this
  [6547] (6902/0) If[6547] __x0__
  [6548] (6903/0) Normal[6548] throw SyntaxError
  [6549] Exit[6549]
  [6550] (6898/0) Normal[6550] let __x0__ = false
  [6551] (6899/0) If[6551] (= absent (parse-syntax ContinueStatement "IterationStatement"))
  [6552] (6900/0) Normal[6552] __x0__ = true
Algo: ContinueStatement[0,0].Evaluation [603]
  [6553] Entry[6553]
  [6554] (6906)Normal[6554] let ContinueStatement = this
  [6555] (6907/0) Normal[6555] return (comp[~continue~] ~empty~ => ~empty~)
  [6556] Exit[6556]
Algo: ContinueStatement[1,0].ContainsUndefinedContinueTarget [604]
  [6557] Entry[6557]
  [6558] (6909)Normal[6558] let ContinueStatement = this
  [6559] (6914/1) Normal[6559] return false
  [6560] Exit[6560]
  [6561] (6910/0) Call[6561] access __x0__ = (LabelIdentifier "StringValue")
  [6562] (6911/0) If[6562] (! (contains iterationSet __x0__))
  [6563] (6912/0) Normal[6563] return true
Algo: ContinueStatement[1,0].EarlyErrors [605]
  [6564] Entry[6564]
  [6565] (6916)Normal[6565] let ContinueStatement = this
  [6566] (6921/0) If[6566] __x0__
  [6567] (6922/0) Normal[6567] throw SyntaxError
  [6568] Exit[6568]
  [6569] (6917/0) Normal[6569] let __x0__ = false
  [6570] (6918/0) If[6570] (= absent (parse-syntax ContinueStatement "IterationStatement"))
  [6571] (6919/0) Normal[6571] __x0__ = true
Algo: ContinueStatement[1,0].Evaluation [606]
  [6572] Entry[6572]
  [6573] (6925)Normal[6573] let ContinueStatement = this
  [6574] (6926/0) Call[6574] access __x0__ = (LabelIdentifier "StringValue")
  [6575] (6927/0) Normal[6575] let label = __x0__
  [6576] (6928/1) Normal[6576] return (comp[~continue~] ~empty~ => label)
  [6577] Exit[6577]
Algo: CopyDataBlockBytes [607]
  [6578] Entry[6578]
  [6579] (6930/1) Normal[6579] ??? "Let id:{fromSize} be the number of bytes in id:{fromBlock} ."
  [6580] (6934/5) Loop[6580] (< 0i count)
  [6581] (6936/6) If[6581] (is-instance-of fromBlock SharedDataBlock)
  [6582] (6953/24) Normal[6582] return ~empty~
  [6583] (6941/11) Normal[6583] let readEvent = (new ReadSharedMemory("Order" -> ~Unordered~, "NoTear" -> true, "Block" -> fromBlock, "ByteIndex" -> fromIndex, "ElementSize" -> 1i))
  [6584] (6942/12) Normal[6584] append readEvent -> eventList
  [6585] (6945/15) Normal[6585] append (new WriteSharedMemory("Order" -> ~Unordered~, "NoTear" -> true, "Block" -> toBlock, "ByteIndex" -> toIndex, "ElementSize" -> 1i, "Payload" -> bytes)) -> eventList
  [6586] (6950/21) Normal[6586] toIndex = (+ toIndex 1i)
  [6587] (6952/23) Normal[6587] count = (- count 1i)
  [6588] LoopCont[6588]
  [6589] (6931/2) Normal[6589] assert (! (< fromSize (+ fromIndex count)))
  [6590] (6938/7) Normal[6590] let execution = AGENT.CandidateExecution
  [6591] (6948/19) Normal[6591] assert (! (is-instance-of toBlock SharedDataBlock))
  [6592] (6940/9) Normal[6592] ??? "Let id:{bytes} be a List whose sole element is a nondeterministically chosen byte value ."
  [6593] (6944/14) If[6593] (is-instance-of toBlock SharedDataBlock)
  [6594] (6946/14) Normal[6594] toBlock[toIndex] = bytes[0i]
  [6595] (6932/3) Normal[6595] ??? "Let id:{toSize} be the number of bytes in id:{toBlock} ."
  [6596] (6949/20) Normal[6596] toBlock[toIndex] = fromBlock[fromIndex]
  [6597] Exit[6597]
  [6598] (6943/13) Normal[6598] append (new ChosenValueRecord("Event" -> readEvent, "ChosenValue" -> bytes)) -> execution.ChosenValues
  [6599] (6939/8) Normal[6599] ??? "Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) ."
  [6600] (6933/4) Normal[6600] assert (! (< toSize (+ toIndex count)))
  [6601] (6951/22) Normal[6601] fromIndex = (+ fromIndex 1i)
Algo: CopyDataProperties [608]
  [6602] Entry[6602]
  [6603] (6955/0) Normal[6603] assert (= (typeof target) Object)
  [6604] (6960/3) Normal[6604] let from = [! __x0__]
  [6605] (6961/4) Call[6605] app __x1__ = (from.OwnPropertyKeys from)
  [6606] (6965/5) Loop[6606] (< __x3__ __x2__.length)
  [6607] (6967/5) Normal[6607] let nextKey = __x2__[__x3__]
  [6608] (6992/15) Normal[6608] return target
  [6609] (6970/7) Normal[6609] let __x4__ = excludedItems
  [6610] (6971/7) Normal[6610] let __x5__ = 0i
  [6611] (6956/2) If[6611] (|| (= source undefined) (= source null))
  [6612] (6962/4) Normal[6612] let keys = [? __x1__]
  [6613] (6964/5) Normal[6613] let __x3__ = 0i
  [6614] (6969/6) Normal[6614] let excluded = false
  [6615] (6957/2) Normal[6615] return target
  [6616] (6959/3) Call[6616] app __x0__ = (ToObject source)
  [6617] (6968/5) Normal[6617] __x3__ = (+ __x3__ 1i)
  [6618] (6963/5) Normal[6618] let __x2__ = keys
  [6619] (6975/7) Normal[6619] __x5__ = (+ __x5__ 1i)
  [6620] (6976/8) Call[6620] app __x6__ = (SameValue e nextKey)
  [6621] (6972/7) Loop[6621] (< __x5__ __x4__.length)
  [6622] (6982/11) Call[6622] app __x7__ = (from.GetOwnProperty from nextKey)
  [6623] (6983/11) Normal[6623] let desc = [? __x7__]
  [6624] (6984/12) If[6624] (&& (! (= desc undefined)) (= desc.Enumerable true))
  [6625] (6977/8) If[6625] (= __x6__ true)
  [6626] (6978/9) Normal[6626] excluded = true
  [6627] LoopCont[6627]
  [6628] (6988/14) Call[6628] app __x9__ = (CreateDataPropertyOrThrow target nextKey propValue)
  [6629] (6989/14) Normal[6629] [! __x9__]
  [6630] (6987/13) Normal[6630] let propValue = [? __x8__]
  [6631] Exit[6631]
  [6632] (6974/7) Normal[6632] let e = __x4__[__x5__]
  [6633] (6986/13) Call[6633] app __x8__ = (Get from nextKey)
  [6634] (6980/10) If[6634] (= excluded false)
  [6635] LoopCont[6635]
Algo: CoverCallExpressionAndAsyncArrowHead[0,0].BoundNames [609]
  [6636] Entry[6636]
  [6637] (6994)Normal[6637] let CoverCallExpressionAndAsyncArrowHead = this
  [6638] (6998/1) Normal[6638] return __x1__
  [6639] Exit[6639]
  [6640] (6995/0) Call[6640] access __x0__ = (CoverCallExpressionAndAsyncArrowHead "CoveredAsyncArrowHead")
  [6641] (6996/0) Normal[6641] let head = __x0__
  [6642] (6997/1) Call[6642] access __x1__ = (head "BoundNames")
Algo: CoverCallExpressionAndAsyncArrowHead[0,0].CoveredAsyncArrowHead [610]
  [6643] Entry[6643]
  [6644] (7000)Normal[6644] let CoverCallExpressionAndAsyncArrowHead = this
  [6645] (7001/0) Normal[6645] return (parse-syntax CoverCallExpressionAndAsyncArrowHead "AsyncArrowHead")
  [6646] Exit[6646]
Algo: CoverCallExpressionAndAsyncArrowHead[0,0].CoveredCallExpression [611]
  [6647] Entry[6647]
  [6648] (7003)Normal[6648] let CoverCallExpressionAndAsyncArrowHead = this
  [6649] (7004/0) Normal[6649] return (parse-syntax CoverCallExpressionAndAsyncArrowHead "CallMemberExpression")
  [6650] Exit[6650]
Algo: CoverCallExpressionAndAsyncArrowHead[0,0].IsSimpleParameterList [612]
  [6651] Entry[6651]
  [6652] (7006)Normal[6652] let CoverCallExpressionAndAsyncArrowHead = this
  [6653] (7010/1) Normal[6653] return __x1__
  [6654] Exit[6654]
  [6655] (7007/0) Call[6655] access __x0__ = (CoverCallExpressionAndAsyncArrowHead "CoveredAsyncArrowHead")
  [6656] (7008/0) Normal[6656] let head = __x0__
  [6657] (7009/1) Call[6657] access __x1__ = (head "IsSimpleParameterList")
Algo: CoverParenthesizedExpressionAndArrowParameterList[0,0].CoveredFormalsList [613]
  [6658] Entry[6658]
  [6659] (7012)Normal[6659] let CoverParenthesizedExpressionAndArrowParameterList = this
  [6660] (7013/0) Normal[6660] return (parse-syntax CoverParenthesizedExpressionAndArrowParameterList "ArrowFormalParameters")
  [6661] Exit[6661]
Algo: CoverParenthesizedExpressionAndArrowParameterList[0,0].CoveredParenthesizedExpression [614]
  [6662] Entry[6662]
  [6663] (7015)Normal[6663] let CoverParenthesizedExpressionAndArrowParameterList = this
  [6664] (7016/0) Normal[6664] return (parse-syntax CoverParenthesizedExpressionAndArrowParameterList "ParenthesizedExpression")
  [6665] Exit[6665]
Algo: CoverParenthesizedExpressionAndArrowParameterList[1,0].CoveredFormalsList [615]
  [6666] Entry[6666]
  [6667] (7018)Normal[6667] let CoverParenthesizedExpressionAndArrowParameterList = this
  [6668] (7019/0) Normal[6668] return (parse-syntax CoverParenthesizedExpressionAndArrowParameterList "ArrowFormalParameters")
  [6669] Exit[6669]
Algo: CoverParenthesizedExpressionAndArrowParameterList[2,0].CoveredFormalsList [616]
  [6670] Entry[6670]
  [6671] (7021)Normal[6671] let CoverParenthesizedExpressionAndArrowParameterList = this
  [6672] (7022/0) Normal[6672] return (parse-syntax CoverParenthesizedExpressionAndArrowParameterList "ArrowFormalParameters")
  [6673] Exit[6673]
Algo: CoverParenthesizedExpressionAndArrowParameterList[3,0].CoveredFormalsList [617]
  [6674] Entry[6674]
  [6675] (7024)Normal[6675] let CoverParenthesizedExpressionAndArrowParameterList = this
  [6676] (7025/0) Normal[6676] return (parse-syntax CoverParenthesizedExpressionAndArrowParameterList "ArrowFormalParameters")
  [6677] Exit[6677]
Algo: CoverParenthesizedExpressionAndArrowParameterList[4,0].CoveredFormalsList [618]
  [6678] Entry[6678]
  [6679] (7027)Normal[6679] let CoverParenthesizedExpressionAndArrowParameterList = this
  [6680] (7028/0) Normal[6680] return (parse-syntax CoverParenthesizedExpressionAndArrowParameterList "ArrowFormalParameters")
  [6681] Exit[6681]
Algo: CoverParenthesizedExpressionAndArrowParameterList[5,0].CoveredFormalsList [619]
  [6682] Entry[6682]
  [6683] (7030)Normal[6683] let CoverParenthesizedExpressionAndArrowParameterList = this
  [6684] (7031/0) Normal[6684] return (parse-syntax CoverParenthesizedExpressionAndArrowParameterList "ArrowFormalParameters")
  [6685] Exit[6685]
Algo: CoverParenthesizedExpressionAndArrowParameterList[6,0].CoveredFormalsList [620]
  [6686] Entry[6686]
  [6687] (7033)Normal[6687] let CoverParenthesizedExpressionAndArrowParameterList = this
  [6688] (7034/0) Normal[6688] return (parse-syntax CoverParenthesizedExpressionAndArrowParameterList "ArrowFormalParameters")
  [6689] Exit[6689]
Algo: CreateArrayFromList [621]
  [6690] Entry[6690]
  [6691] (7036/1) Call[6691] app __x0__ = (ArrayCreate 0i)
  [6692] (7040/3) Normal[6692] let __x2__ = 0i
  [6693] (7041/3) Loop[6693] (< __x2__ __x1__.length)
  [6694] (7046/4) Call[6694] app __x4__ = (CreateDataPropertyOrThrow array [! __x3__] e)
  [6695] (7047/4) Normal[6695] [! __x4__]
  [6696] (7049/6) Normal[6696] return array
  [6697] Exit[6697]
  [6698] (7037/1) Normal[6698] let array = [! __x0__]
  [6699] (7043/3) Normal[6699] let e = __x1__[__x2__]
  [6700] (7045/4) Call[6700] app __x3__ = (ToString n)
  [6701] LoopCont[6701]
  [6702] (7038/2) Normal[6702] let n = 0i
  [6703] (7048/5) Normal[6703] n = (+ n 1i)
  [6704] (7044/3) Normal[6704] __x2__ = (+ __x2__ 1i)
  [6705] (7039/3) Normal[6705] let __x1__ = elements
Algo: CreateArrayIterator [623]
  [6735] Entry[6735]
  [6736] (7051/0) Normal[6736] assert (= (typeof array) Object)
  [6737] (7091/20) Call[6737] app __x9__ = (CreateIteratorFromClosure closure "%ArrayIteratorPrototype%" INTRINSICS["%ArrayIteratorPrototype%"])
  [6738] (7092/20) Normal[6738] return [! __x9__]
  [6739] (7052/1) Normal[6739] assert (|| (|| (= kind ~key+value~) (= kind ~key~)) (= kind ~value~))
  [6740] Exit[6740]
  [6741] (7053/2) Arrow[6741] clo __x0__ = ()[kind, array] => {
  let index = 0i
  while true {
    if (! (= array.TypedArrayName absent)) {
      app __x1__ = (IsDetachedBuffer array.ViewedArrayBuffer)
      if (= __x1__ true) throw TypeError else {}
      let len = array.ArrayLength
    } else {
      app __x2__ = (LengthOfArrayLike array)
      let len = [? __x2__]
    }
    if (! (< index len)) return undefined else {}
    if (= kind ~key~) {
      app __x3__ = (Yield index)
      [? __x3__]
    } else {
      app __x4__ = (ToString index)
      let elementKey = [! __x4__]
      app __x5__ = (Get array elementKey)
      let elementValue = [? __x5__]
      if (= kind ~value~) {
        app __x6__ = (Yield elementValue)
        [? __x6__]
      } else {
        assert (= kind ~key+value~)
        app __x7__ = (CreateArrayFromList (new [index, elementValue]))
        app __x8__ = (Yield [! __x7__])
        [? __x8__]
      }
    }
    index = (+ index 1i)
  }
} [fid: 622]
  [6742] (7090/2) Normal[6742] let closure = __x0__
Algo: CreateArrayIterator:2 [622]
  [6706] Entry[6706]
  [6707] (7055/3) Normal[6707] let index = 0i
  [6708] (7061/6) If[6708] (= __x1__ true)
  [6709] (7062/6) Normal[6709] throw TypeError
  [6710] (7064/7) Normal[6710] let len = array.ArrayLength
  [6711] (7068/10) If[6711] (! (< index len))
  [6712] (7069/10) Normal[6712] return undefined
  [6713] (7071/11) If[6713] (= kind ~key~)
  [6714] (7074/11) Normal[6714] [? __x3__]
  [6715] (7089/19) Normal[6715] index = (+ index 1i)
  [6716] (7082/15) Call[6716] app __x6__ = (Yield elementValue)
  [6717] (7083/15) Normal[6717] [? __x6__]
  [6718] (7056/4) Loop[6718] true
  [6719] (7067/9) Normal[6719] let len = [? __x2__]
  [6720] (7073/11) Call[6720] app __x3__ = (Yield index)
  [6721] (7058/5) If[6721] (! (= array.TypedArrayName absent))
  [6722] Exit[6722]
  [6723] (7078/14) Call[6723] app __x5__ = (Get array elementKey)
  [6724] (7079/14) Normal[6724] let elementValue = [? __x5__]
  [6725] (7076/13) Call[6725] app __x4__ = (ToString index)
  [6726] (7060/6) Call[6726] app __x1__ = (IsDetachedBuffer array.ViewedArrayBuffer)
  [6727] (7066/9) Call[6727] app __x2__ = (LengthOfArrayLike array)
  [6728] (7080/15) If[6728] (= kind ~value~)
  [6729] (7077/13) Normal[6729] let elementKey = [! __x4__]
  [6730] (7085/17) Normal[6730] assert (= kind ~key+value~)
  [6731] (7087/18) Call[6731] app __x8__ = (Yield [! __x7__])
  [6732] (7088/18) Normal[6732] [? __x8__]
  [6733] (7086/18) Call[6733] app __x7__ = (CreateArrayFromList (new [index, elementValue]))
  [6734] LoopCont[6734]
Algo: CreateAsyncFromSyncIterator [624]
  [6743] Entry[6743]
  [6744] (7094/0) Call[6744] app __x0__ = (OrdinaryObjectCreate INTRINSICS["%AsyncFromSyncIteratorPrototype%"] (new ["SyncIteratorRecord"]))
  [6745] (7098/2) Normal[6745] let nextMethod = [! __x1__]
  [6746] (7099/3) Normal[6746] let iteratorRecord = (new Record("Iterator" -> asyncIterator, "NextMethod" -> nextMethod, "Done" -> false))
  [6747] (7095/0) Normal[6747] let asyncIterator = [! __x0__]
  [6748] (7100/4) Normal[6748] return iteratorRecord
  [6749] (7096/1) Normal[6749] asyncIterator.SyncIteratorRecord = syncIteratorRecord
  [6750] Exit[6750]
  [6751] (7097/2) Call[6751] app __x1__ = (Get asyncIterator "next")
Algo: CreateAsyncIteratorFromClosure [625]
  [6752] Entry[6752]
  [6753] (7102/1) Normal[6753] let internalSlotsList = (new ["AsyncGeneratorState", "AsyncGeneratorContext", "AsyncGeneratorQueue", "GeneratorBrand"])
  [6754] (7106/4) Normal[6754] generator.AsyncGeneratorState = undefined
  [6755] (7107/5) Call[6755] app __x1__ = (AsyncGeneratorStart generator closure)
  [6756] (7103/2) Call[6756] app __x0__ = (OrdinaryObjectCreate generatorPrototype internalSlotsList)
  [6757] (7108/5) Normal[6757] [! __x1__]
  [6758] (7104/2) Normal[6758] let generator = [! __x0__]
  [6759] (7109/6) Normal[6759] return generator
  [6760] (7105/3) Normal[6760] generator.GeneratorBrand = generatorBrand
  [6761] Exit[6761]
Algo: CreateBuiltinFunction [626]
  [6762] Entry[6762]
  [6763] (7111/1) If[6763] (|| (= realm absent) (= realm ~empty~))
  [6764] (7116/3) Normal[6764] prototype = realm.Intrinsics["%Function.prototype%"]
  [6765] (7118/4) Normal[6765] let func = (new BuiltinFunctionObject())
  [6766] (7122/7) Normal[6766] func.Extensible = true
  [6767] (7123/8) Normal[6767] func.InitialName = null
  [6768] (7126/10) If[6768] (= prefix absent)
  [6769] (7128/11) Call[6769] app __x1__ = (SetFunctionName func name)
  [6770] (7131/13) Call[6770] app __x2__ = (SetFunctionName func name prefix)
  [6771] (7112/1) Normal[6771] realm = REALM
  [6772] (7114/2) Normal[6772] assert (is-instance-of realm RealmRecord)
  [6773] (7119/4) Normal[6773] func.Code = steps
  [6774] (7121/6) Normal[6774] func.Prototype = prototype
  [6775] (7125/9) Normal[6775] [! __x0__]
  [6776] (7132/13) Normal[6776] [! __x2__]
  [6777] (7124/9) Call[6777] app __x0__ = (SetFunctionLength func length)
  [6778] (7120/5) Normal[6778] func.Realm = realm
  [6779] (7115/3) If[6779] (= prototype absent)
  [6780] (7133/14) Normal[6780] return func
  [6781] (7129/11) Normal[6781] [! __x1__]
  [6782] Exit[6782]
Algo: CreateByteDataBlock [627]
  [6783] Entry[6783]
  [6784] (7135/0) Normal[6784] assert (! (< size 0i))
  [6785] (7136/1) Normal[6785] ??? "Let id:{db} be a new Data Block value consisting of id:{size} bytes . If it is impossible to create such a Data Block , throw a value:{RangeError} exception ."
  [6786] (7137/2) Normal[6786] ??? "Set all of the bytes of id:{db} to 0 ."
  [6787] (7138/3) Normal[6787] return db
  [6788] Exit[6788]
Algo: CreateDataProperty [628]
  [6789] Entry[6789]
  [6790] (7140/0) Normal[6790] assert (= (typeof O) Object)
  [6791] (7144/3) Call[6791] app __x1__ = (O.DefineOwnProperty O P newDesc)
  [6792] (7145/3) Normal[6792] return [? __x1__]
  [6793] (7141/1) Call[6793] app __x0__ = (IsPropertyKey P)
  [6794] Exit[6794]
  [6795] (7142/1) Normal[6795] assert (= __x0__ true)
  [6796] (7143/2) Normal[6796] let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true))
Algo: CreateDataPropertyOrThrow [629]
  [6797] Entry[6797]
  [6798] (7147/0) Normal[6798] assert (= (typeof O) Object)
  [6799] (7151/2) Normal[6799] let success = [? __x1__]
  [6800] (7152/3) If[6800] (= success false)
  [6801] (7148/1) Call[6801] app __x0__ = (IsPropertyKey P)
  [6802] (7153/3) Normal[6802] throw TypeError
  [6803] (7155/4) Normal[6803] return success
  [6804] (7149/1) Normal[6804] assert (= __x0__ true)
  [6805] (7150/2) Call[6805] app __x1__ = (CreateDataProperty O P V)
  [6806] Exit[6806]
Algo: CreateDynamicFunction [630]
  [6807] (7161/4) Normal[6807] [? __x0__]
  [6808] (7162/5) If[6808] (= newTarget undefined)
  [6809] (7229/70) Normal[6809] let prototype = [! __x10__]
  [6810] (7230/71) Call[6810] app __x11__ = (DefinePropertyOrThrow F "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [6811] (7158/2) Normal[6811] let callerRealm = callerContext.Realm
  [6812] (7159/3) Normal[6812] let calleeRealm = REALM
  [6813] (7231/71) Normal[6813] __x11__
  [6814] (7160/4) Call[6814] app __x0__ = (HostEnsureCanCompileStrings callerRealm calleeRealm)
  [6815] (7234/72) Call[6815] app __x12__ = (MakeConstructor F)
  [6816] (7235/72) Normal[6816] __x12__
  [6817] Entry[6817]
  [6818] (7157/1) Normal[6818] let callerContext = EXECUTION_STACK[(- EXECUTION_STACK.length 2i)]
  [6819] (7168/8) Normal[6819] ??? "Let id:{parameterGoal} be the grammar symbol | FormalParameters [ ~ Yield , ~ Await ] | ."
  [6820] (7169/9) Normal[6820] let fallbackProto = "%Function.prototype%"
  [6821] (7218/65) Call[6821] app __x7__ = (SetFunctionName F "anonymous")
  [6822] (7219/65) Normal[6822] __x7__
  [6823] (7204/37) Normal[6823] let bodyArg = args[k]
  [6824] (7205/38) Call[6824] app __x3__ = (ToString bodyArg)
  [6825] (7185/23) Normal[6825] let argCount = args.length
  [6826] (7186/24) Normal[6826] let P = ""
  [6827] (7200/34) Call[6827] app __x2__ = (ToString nextArg)
  [6828] (7201/34) Normal[6828] let nextArgString = [? __x2__]
  [6829] (7187/25) If[6829] (== argCount 0i)
  [6830] (7214/62) Normal[6830] let realmF = REALM
  [6831] (7215/63) Normal[6831] let scope = realmF.GlobalEnv
  [6832] (7173/12) Normal[6832] ??? "Let id:{parameterGoal} be the grammar symbol | FormalParameters [ + Yield , ~ Await ] | ."
  [6833] (7174/13) Normal[6833] let fallbackProto = "%GeneratorFunction.prototype%"
  [6834] (7181/19) Normal[6834] assert (= kind ~asyncGenerator~)
  [6835] (7182/20) Normal[6835] let goal = "AsyncGeneratorBody"
  [6836] (7208/40) Normal[6836] let sourceString = (+ (+ (+ (+ (+ (+ prefix "anonymous(") P) "\n") ") {") bodyString) "}")
  [6837] (7209/41) Call[6837] app __x4__ = (StringToCodePoints sourceString)
  [6838] (7220/66) If[6838] (= kind ~generator~)
  [6839] (7190/26) Normal[6839] let bodyArg = args[0i]
  [6840] (7224/68) Call[6840] app __x9__ = (DefinePropertyOrThrow F "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [6841] (7225/68) Normal[6841] __x9__
  [6842] (7163/5) Normal[6842] newTarget = constructor
  [6843] (7165/6) If[6843] (= kind ~normal~)
  [6844] (7223/67) Normal[6844] let prototype = [! __x8__]
  [6845] (7237/74) Normal[6845] return F
  [6846] (7183/21) Normal[6846] ??? "Let id:{parameterGoal} be the grammar symbol | FormalParameters [ + Yield , + Await ] | ."
  [6847] (7195/30) Normal[6847] P = [? __x1__]
  [6848] (7196/31) Normal[6848] let k = 1i
  [6849] (7189/25) If[6849] (== argCount 1i)
  [6850] (7192/28) Normal[6850] assert (< 1i argCount)
  [6851] (7202/35) Normal[6851] ??? "Set id:{P} to the string - concatenation of id:{P} , value:{\",\"} ( a comma ) , and id:{nextArgString} ."
  [6852] (7167/7) Normal[6852] ??? "Let id:{goal} be the grammar symbol | FunctionBody [ ~ Yield , ~ Await ] | ."
  [6853] (7216/64) Call[6853] app __x6__ = (OrdinaryFunctionCreate proto sourceText parameters body ~non-lexical-this~ scope)
  [6854] (7172/11) Normal[6854] let goal = "GeneratorBody"
  [6855] LoopCont[6855]
  [6856] (7197/32) Loop[6856] (< k (- argCount 1i))
  [6857] (7207/39) Normal[6857] ??? "Let id:{prefix} be the prefix associated with id:{kind} in link:{table-dynamic-function-sourcetext-prefixes} ."
  [6858] (7228/70) Call[6858] app __x10__ = (OrdinaryObjectCreate INTRINSICS["%AsyncGeneratorFunction.prototype.prototype%"])
  [6859] (7177/15) Normal[6859] let goal = "AsyncFunctionBody"
  [6860] (7178/16) Normal[6860] ??? "Let id:{parameterGoal} be the grammar symbol | FormalParameters [ ~ Yield , + Await ] | ."
  [6861] (7194/30) Call[6861] app __x1__ = (ToString firstArg)
  [6862] (7184/22) Normal[6862] let fallbackProto = "%AsyncGeneratorFunction.prototype%"
  [6863] (7206/38) Normal[6863] let bodyString = (+ (+ "\n" [? __x3__]) "\n")
  [6864] (7222/67) Call[6864] app __x8__ = (OrdinaryObjectCreate INTRINSICS["%GeneratorFunction.prototype.prototype%"])
  [6865] (7188/25) Normal[6865] let bodyArg = ""
  [6866] Exit[6866]
  [6867] (7170/6) If[6867] (= kind ~generator~)
  [6868] (7175/6) If[6868] (= kind ~async~)
  [6869] (7217/64) Normal[6869] let F = [! __x6__]
  [6870] (7211/42) Normal[6870] ??? "Perform the following substeps in an implementation - defined order , possibly interleaving parsing and error detection : in:{} out:{}"
  [6871] (7212/61) Call[6871] app __x5__ = (GetPrototypeFromConstructor newTarget fallbackProto)
  [6872] (7203/36) Normal[6872] k = (+ k 1i)
  [6873] (7199/33) Normal[6873] let nextArg = args[k]
  [6874] (7210/41) Normal[6874] let sourceText = [! __x4__]
  [6875] (7226/66) If[6875] (= kind ~asyncGenerator~)
  [6876] (7232/66) If[6876] (= kind ~normal~)
  [6877] (7179/17) Normal[6877] let fallbackProto = "%AsyncFunction.prototype%"
  [6878] (7213/61) Normal[6878] let proto = [? __x5__]
  [6879] (7193/29) Normal[6879] let firstArg = args[0i]
Algo: CreateForInIterator [631]
  [6880] Entry[6880]
  [6881] (7239/0) Normal[6881] assert (= (typeof object) Object)
  [6882] (7243/3) Normal[6882] iterator.ObjectWasVisited = false
  [6883] (7244/4) Normal[6883] iterator.VisitedKeys = (new [])
  [6884] (7240/1) Call[6884] app __x0__ = (OrdinaryObjectCreate INTRINSICS["%ForInIteratorPrototype%"] (new ["Object", "ObjectWasVisited", "VisitedKeys", "RemainingKeys"]))
  [6885] (7245/5) Normal[6885] iterator.RemainingKeys = (new [])
  [6886] (7241/1) Normal[6886] let iterator = [! __x0__]
  [6887] (7246/6) Normal[6887] return iterator
  [6888] (7242/2) Normal[6888] iterator.Object = object
  [6889] Exit[6889]
Algo: CreateIntrinsics [632]
  [6890] Entry[6890]
  [6891] (7248/0) Normal[6891] let intrinsics = (new Record())
  [6892] (7252/3) Call[6892] app __x0__ = (AddRestrictedFunctionProperties intrinsics["%Function.prototype%"] realmRec)
  [6893] (7253/3) Normal[6893] __x0__
  [6894] (7249/1) Normal[6894] realmRec.Intrinsics = intrinsics
  [6895] (7254/4) Normal[6895] return intrinsics
  [6896] (7250/2) Normal[6896] realmRec.Intrinsics = INTRINSICS
  [6897] Exit[6897]
  [6898] (7251/2) Normal[6898] intrinsics = INTRINSICS
Algo: CreateIterResultObject [633]
  [6899] Entry[6899]
  [6900] (7256/0) Normal[6900] assert (= (typeof done) Boolean)
  [6901] (7260/2) Normal[6901] [! __x1__]
  [6902] (7261/3) Call[6902] app __x2__ = (CreateDataPropertyOrThrow obj "done" done)
  [6903] (7257/1) Call[6903] app __x0__ = (OrdinaryObjectCreate INTRINSICS["%Object.prototype%"])
  [6904] (7262/3) Normal[6904] [! __x2__]
  [6905] (7258/1) Normal[6905] let obj = [! __x0__]
  [6906] (7263/4) Normal[6906] return obj
  [6907] (7259/2) Call[6907] app __x1__ = (CreateDataPropertyOrThrow obj "value" value)
  [6908] Exit[6908]
Algo: CreateIteratorFromClosure [634]
  [6909] Entry[6909]
  [6910] (7265/1) Normal[6910] let internalSlotsList = (new ["GeneratorState", "GeneratorContext", "GeneratorBrand"])
  [6911] (7269/4) Normal[6911] generator.GeneratorState = undefined
  [6912] (7270/5) Call[6912] app __x1__ = (GeneratorStart generator closure)
  [6913] (7266/2) Call[6913] app __x0__ = (OrdinaryObjectCreate generatorPrototype internalSlotsList)
  [6914] (7271/5) Normal[6914] [! __x1__]
  [6915] (7267/2) Normal[6915] let generator = [! __x0__]
  [6916] (7272/6) Normal[6916] return generator
  [6917] (7268/3) Normal[6917] generator.GeneratorBrand = generatorBrand
  [6918] Exit[6918]
Algo: CreateListFromArrayLike [635]
  [6919] Entry[6919]
  [6920] (7274/0) If[6920] (= elementTypes absent)
  [6921] (7280/2) Call[6921] app __x0__ = (LengthOfArrayLike obj)
  [6922] (7281/2) Normal[6922] let len = [? __x0__]
  [6923] (7286/6) Call[6923] app __x1__ = (ToString index)
  [6924] (7287/6) Normal[6924] let indexName = [! __x1__]
  [6925] (7290/8) If[6925] (! (contains elementTypes (typeof next)))
  [6926] (7291/8) Normal[6926] throw TypeError
  [6927] (7293/9) Normal[6927] append next -> list
  [6928] (7275/0) Normal[6928] elementTypes = (new [Undefined, Null, Boolean, String, Symbol, Number, BigInt, Object])
  [6929] (7277/1) If[6929] (! (= (typeof obj) Object))
  [6930] (7282/3) Normal[6930] let list = (new [])
  [6931] (7284/5) Loop[6931] (< index len)
  [6932] (7295/11) Normal[6932] return list
  [6933] (7289/7) Normal[6933] let next = [? __x2__]
  [6934] (7294/10) Normal[6934] index = (+ index 1i)
  [6935] LoopCont[6935]
  [6936] (7288/7) Call[6936] app __x2__ = (Get obj indexName)
  [6937] (7283/4) Normal[6937] let index = 0i
  [6938] (7278/1) Normal[6938] throw TypeError
  [6939] Exit[6939]
Algo: CreateListIteratorRecord [637]
  [6951] Entry[6951]
  [6952] (7297/0) Arrow[6952] clo __x0__ = ()[list] => {
  let __x1__ = list
  let __x2__ = 0i
  while (< __x2__ __x1__.length) {
    let E = __x1__[__x2__]
    __x2__ = (+ __x2__ 1i)
    app __x3__ = (Yield E)
    [? __x3__]
  }
  return undefined
} [fid: 636]
  [6953] (7311/5) Normal[6953] return (new Record("Iterator" -> iterator, "NextMethod" -> INTRINSICS["%GeneratorFunction.prototype.prototype.next%"], "Done" -> false))
  [6954] Exit[6954]
  [6955] (7308/0) Normal[6955] let closure = __x0__
  [6956] (7309/4) Call[6956] app __x4__ = (CreateIteratorFromClosure closure ~empty~ INTRINSICS["%IteratorPrototype%"])
  [6957] (7310/4) Normal[6957] let iterator = [! __x4__]
Algo: CreateListIteratorRecord:0 [636]
  [6940] Entry[6940]
  [6941] (7299/1) Normal[6941] let __x1__ = list
  [6942] (7304/1) Normal[6942] __x2__ = (+ __x2__ 1i)
  [6943] (7305/2) Call[6943] app __x3__ = (Yield E)
  [6944] (7300/1) Normal[6944] let __x2__ = 0i
  [6945] (7306/2) Normal[6945] [? __x3__]
  [6946] (7307/3) Normal[6946] return undefined
  [6947] Exit[6947]
  [6948] (7301/1) Loop[6948] (< __x2__ __x1__.length)
  [6949] LoopCont[6949]
  [6950] (7303/1) Normal[6950] let E = __x1__[__x2__]
Algo: CreateMapIterator [639]
  [6979] Entry[6979]
  [6980] (7313/0) Normal[6980] assert (|| (|| (= kind ~key+value~) (= kind ~key~)) (= kind ~value~))
  [6981] (7340/2) Normal[6981] let closure = __x1__
  [6982] (7341/19) Call[6982] app __x4__ = (CreateIteratorFromClosure closure "%MapIteratorPrototype%" INTRINSICS["%MapIteratorPrototype%"])
  [6983] (7314/1) Call[6983] app __x0__ = (RequireInternalSlot map "MapData")
  [6984] (7342/19) Normal[6984] return [! __x4__]
  [6985] (7315/1) Normal[6985] [? __x0__]
  [6986] Exit[6986]
  [6987] (7316/2) Arrow[6987] clo __x1__ = ()[map, kind] => {
  let entries = map.MapData
  let index = 0i
  let numEntries = entries.length
  while (< index numEntries) {
    ??? "Let id:{e} be the Record { [ [ Key ] ] , [ [ Value ] ] } that is the value of id:{entries} [ id:{index} ] ."
    index = (+ index 1i)
    if (! (= e.Key ~empty~)) {
      if (= kind ~key~) let result = e.Key else if (= kind ~value~) let result = e.Value else {
        assert (= kind ~key+value~)
        app __x2__ = (CreateArrayFromList (new [e.Key, e.Value]))
        let result = [! __x2__]
      }
      app __x3__ = (Yield result)
      [? __x3__]
      numEntries = entries.length
    } else {}
  }
  return undefined
} [fid: 638]
Algo: CreateMapIterator:2 [638]
  [6958] Entry[6958]
  [6959] (7318/3) Normal[6959] let entries = map.MapData
  [6960] (7323/7) Normal[6960] ??? "Let id:{e} be the Record { [ [ Key ] ] , [ [ Value ] ] } that is the value of id:{entries} [ id:{index} ] ."
  [6961] (7324/8) Normal[6961] index = (+ index 1i)
  [6962] (7329/10) If[6962] (= kind ~value~)
  [6963] (7330/11) Normal[6963] let result = e.Value
  [6964] (7332/13) Normal[6964] assert (= kind ~key+value~)
  [6965] (7334/14) Normal[6965] let result = [! __x2__]
  [6966] (7335/15) Call[6966] app __x3__ = (Yield result)
  [6967] (7319/4) Normal[6967] let index = 0i
  [6968] (7325/9) If[6968] (! (= e.Key ~empty~))
  [6969] (7328/10) Normal[6969] let result = e.Key
  [6970] (7333/14) Call[6970] app __x2__ = (CreateArrayFromList (new [e.Key, e.Value]))
  [6971] (7320/5) Normal[6971] let numEntries = entries.length
  [6972] (7337/17) Normal[6972] numEntries = entries.length
  [6973] LoopCont[6973]
  [6974] (7327/10) If[6974] (= kind ~key~)
  [6975] (7321/6) Loop[6975] (< index numEntries)
  [6976] (7336/15) Normal[6976] [? __x3__]
  [6977] (7339/18) Normal[6977] return undefined
  [6978] Exit[6978]
Algo: CreateMappedArgumentsObject [640]
  [6988] Entry[6988]
  [6989] (7344/1) Normal[6989] let len = argumentsList.length
  [6990] (7348/4) Normal[6990] obj.DefineOwnProperty = ALGORITHM["ArgumentsExoticObject.DefineOwnProperty"]
  [6991] (7349/5) Normal[6991] obj.Get = ALGORITHM["ArgumentsExoticObject.Get"]
  [6992] (7353/9) Call[6992] app __x1__ = (OrdinaryObjectCreate null)
  [6993] (7354/9) Normal[6993] let map = [! __x1__]
  [6994] (7357/11) Normal[6994] let parameterNames = __x2__
  [6995] (7358/12) Normal[6995] let numberOfParameters = parameterNames.length
  [6996] (7345/2) Call[6996] app __x0__ = (MakeBasicObject (new ["Prototype", "Extensible", "ParameterMap"]))
  [6997] (7350/6) Normal[6997] obj.Set = ALGORITHM["ArgumentsExoticObject.Set"]
  [6998] (7352/8) Normal[6998] obj.Prototype = INTRINSICS["%Object.prototype%"]
  [6999] (7346/2) Normal[6999] let obj = [! __x0__]
  [7000] (7355/10) Normal[7000] obj.ParameterMap = map
  [7001] (7356/11) Call[7001] access __x2__ = (formals "BoundNames")
  [7002] (7362/15) Normal[7002] let val = argumentsList[index]
  [7003] (7363/16) Call[7003] app __x3__ = (ToString index)
  [7004] (7351/7) Normal[7004] obj.Delete = ALGORITHM["ArgumentsExoticObject.Delete"]
  [7005] (7347/3) Normal[7005] obj.GetOwnProperty = ALGORITHM["ArgumentsExoticObject.GetOwnProperty"]
  [7006] (7359/13) Normal[7006] let index = 0i
  [7007] (7389/30) Call[7007] app __x10__ = (DefinePropertyOrThrow obj SYMBOL_iterator (new PropertyDescriptor("Value" -> INTRINSICS["%Array.prototype.values%"], "Writable" -> true, "Enumerable" -> false, "Configurable" -> true)))
  [7008] (7390/30) Normal[7008] [! __x10__]
  [7009] (7367/18) Call[7009] app __x5__ = (DefinePropertyOrThrow obj "length" (new PropertyDescriptor("Value" -> len, "Writable" -> true, "Enumerable" -> false, "Configurable" -> true)))
  [7010] (7368/18) Normal[7010] [! __x5__]
  [7011] (7383/28) Call[7011] app __x8__ = (ToString index)
  [7012] (7384/28) Call[7012] app __x9__ = (map.DefineOwnProperty map [! __x8__] (new PropertyDescriptor("Set" -> p, "Get" -> g, "Enumerable" -> false, "Configurable" -> true)))
  [7013] (7369/19) Normal[7013] let mappedNames = (new [])
  [7014] (7364/16) Call[7014] app __x4__ = (CreateDataPropertyOrThrow obj [! __x3__] val)
  [7015] (7365/16) Normal[7015] [! __x4__]
  [7016] (7393/32) Normal[7016] return obj
  [7017] Exit[7017]
  [7018] (7373/22) Normal[7018] let name = parameterNames[index]
  [7019] (7374/23) If[7019] (! (contains mappedNames name))
  [7020] (7366/17) Normal[7020] index = (+ index 1i)
  [7021] (7379/26) Call[7021] app __x6__ = (MakeArgGetter name env)
  [7022] (7380/26) Normal[7022] let g = __x6__
  [7023] (7371/21) Loop[7023] (! (< index 0i))
  [7024] (7385/28) Normal[7024] __x9__
  [7025] LoopCont[7025]
  [7026] (7392/31) Normal[7026] [! __x11__]
  [7027] (7360/14) Loop[7027] (< index len)
  [7028] (7377/25) If[7028] (< index len)
  [7029] (7388/29) Normal[7029] index = (- index 1i)
  [7030] (7381/27) Call[7030] app __x7__ = (MakeArgSetter name env)
  [7031] LoopCont[7031]
  [7032] (7391/31) Call[7032] app __x11__ = (DefinePropertyOrThrow obj "callee" (new PropertyDescriptor("Value" -> func, "Writable" -> true, "Enumerable" -> false, "Configurable" -> true)))
  [7033] (7370/20) Normal[7033] let index = (- numberOfParameters 1i)
  [7034] (7382/27) Normal[7034] let p = __x7__
  [7035] (7376/24) Normal[7035] append name -> mappedNames
Algo: CreateMethodProperty [641]
  [7036] Entry[7036]
  [7037] (7395/0) Normal[7037] assert (= (typeof O) Object)
  [7038] (7399/3) Call[7038] app __x1__ = (O.DefineOwnProperty O P newDesc)
  [7039] (7400/3) Normal[7039] return [? __x1__]
  [7040] (7396/1) Call[7040] app __x0__ = (IsPropertyKey P)
  [7041] Exit[7041]
  [7042] (7397/1) Normal[7042] assert (= __x0__ true)
  [7043] (7398/2) Normal[7043] let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> false, "Configurable" -> true))
Algo: CreatePerIterationEnvironment [642]
  [7044] Entry[7044]
  [7045] (7402/0) If[7045] (< 0i perIterationBindings.length)
  [7046] (7407/4) Call[7046] app __x0__ = (NewDeclarativeEnvironment outer)
  [7047] (7408/4) Normal[7047] let thisIterationEnv = __x0__
  [7048] (7413/5) Normal[7048] let bn = __x1__[__x2__]
  [7049] (7414/5) Normal[7049] __x2__ = (+ __x2__ 1i)
  [7050] (7417/7) Call[7050] app __x4__ = (lastIterationEnv.GetBindingValue lastIterationEnv bn true)
  [7051] (7418/7) Normal[7051] let lastValue = [? __x4__]
  [7052] (7423/10) Normal[7052] return undefined
  [7053] Exit[7053]
  [7054] (7404/1) Normal[7054] let lastIterationEnv = CONTEXT.LexicalEnvironment
  [7055] (7409/5) Normal[7055] let __x1__ = perIterationBindings
  [7056] (7411/5) Loop[7056] (< __x2__ __x1__.length)
  [7057] (7421/9) Normal[7057] CONTEXT.LexicalEnvironment = thisIterationEnv
  [7058] (7416/6) Normal[7058] [! __x3__]
  [7059] (7405/2) Normal[7059] let outer = lastIterationEnv.OuterEnv
  [7060] (7420/8) Normal[7060] __x5__
  [7061] LoopCont[7061]
  [7062] (7415/6) Call[7062] app __x3__ = (thisIterationEnv.CreateMutableBinding thisIterationEnv bn false)
  [7063] (7410/5) Normal[7063] let __x2__ = 0i
  [7064] (7406/3) Normal[7064] assert (! (= outer null))
  [7065] (7419/8) Call[7065] app __x5__ = (thisIterationEnv.InitializeBinding thisIterationEnv bn lastValue)
Algo: CreateRealm [643]
  [7066] Entry[7066]
  [7067] (7425/0) Normal[7067] let realmRec = REALM
  [7068] (7429/3) Normal[7068] realmRec.GlobalEnv = undefined
  [7069] (7430/4) Normal[7069] realmRec.TemplateMap = (new [])
  [7070] (7426/1) Call[7070] app __x0__ = (CreateIntrinsics realmRec)
  [7071] (7431/5) Normal[7071] return realmRec
  [7072] (7427/1) Normal[7072] __x0__
  [7073] Exit[7073]
  [7074] (7428/2) Normal[7074] realmRec.GlobalObject = undefined
Algo: CreateRegExpStringIterator [645]
  [7100] Entry[7100]
  [7101] (7433/0) Normal[7101] assert (= (typeof S) String)
  [7102] (7465/3) Normal[7102] let closure = __x0__
  [7103] (7466/16) Call[7103] app __x10__ = (CreateIteratorFromClosure closure "%RegExpStringIteratorPrototype%" INTRINSICS["%RegExpStringIteratorPrototype%"])
  [7104] (7434/1) Normal[7104] assert (= (typeof global) Boolean)
  [7105] (7467/16) Normal[7105] return [! __x10__]
  [7106] (7435/2) Normal[7106] assert (= (typeof fullUnicode) Boolean)
  [7107] Exit[7107]
  [7108] (7436/3) Arrow[7108] clo __x0__ = ()[R, S, global, fullUnicode] => while true {
  app __x1__ = (RegExpExec R S)
  let match = [? __x1__]
  if (= match null) return undefined else {}
  if (= global false) {
    app __x2__ = (Yield match)
    [? __x2__]
    return undefined
  } else {}
  app __x3__ = (Get match "0")
  app __x4__ = (ToString [? __x3__])
  let matchStr = [? __x4__]
  if (= matchStr "") {
    app __x5__ = (Get R "lastIndex")
    app __x6__ = (ToLength [? __x5__])
    let thisIndex = [? __x6__]
    app __x7__ = (AdvanceStringIndex S thisIndex fullUnicode)
    let nextIndex = [! __x7__]
    app __x8__ = (Set R "lastIndex" nextIndex true)
    [? __x8__]
  } else {}
  app __x9__ = (Yield match)
  [? __x9__]
} [fid: 644]
Algo: CreateRegExpStringIterator:3 [644]
  [7075] Entry[7075]
  [7076] (7437/4) Loop[7076] true
  [7077] (7442/6) Normal[7077] return undefined
  [7078] (7444/7) If[7078] (= global false)
  [7079] (7450/10) Call[7079] app __x3__ = (Get match "0")
  [7080] (7451/10) Call[7080] app __x4__ = (ToString [? __x3__])
  [7081] (7455/12) Call[7081] app __x5__ = (Get R "lastIndex")
  [7082] (7456/12) Call[7082] app __x6__ = (ToLength [? __x5__])
  [7083] (7461/14) Normal[7083] [? __x8__]
  [7084] (7463/15) Call[7084] app __x9__ = (Yield match)
  [7085] (7439/5) Call[7085] app __x1__ = (RegExpExec R S)
  [7086] Exit[7086]
  [7087] (7446/8) Call[7087] app __x2__ = (Yield match)
  [7088] (7464/15) Normal[7088] [? __x9__]
  [7089] (7448/9) Normal[7089] return undefined
  [7090] (7453/11) If[7090] (= matchStr "")
  [7091] (7440/5) Normal[7091] let match = [? __x1__]
  [7092] (7458/13) Call[7092] app __x7__ = (AdvanceStringIndex S thisIndex fullUnicode)
  [7093] (7459/13) Normal[7093] let nextIndex = [! __x7__]
  [7094] LoopCont[7094]
  [7095] (7452/10) Normal[7095] let matchStr = [? __x4__]
  [7096] (7447/8) Normal[7096] [? __x2__]
  [7097] (7441/6) If[7097] (= match null)
  [7098] (7460/14) Call[7098] app __x8__ = (Set R "lastIndex" nextIndex true)
  [7099] (7457/12) Normal[7099] let thisIndex = [? __x6__]
Algo: CreateResolvingFunctions [646]
  [7109] Entry[7109]
  [7110] (7469/0) Normal[7110] let alreadyResolved = (new Record("Value" -> false))
  [7111] (7473/3) Normal[7111] let resolve = [! __x0__]
  [7112] (7474/4) Normal[7112] resolve.Promise = promise
  [7113] (7478/8) Call[7113] app __x1__ = (CreateBuiltinFunction stepsReject lengthReject "" (new ["Promise", "AlreadyResolved"]))
  [7114] (7479/8) Normal[7114] let reject = [! __x1__]
  [7115] (7482/11) Normal[7115] return (new Record("Resolve" -> resolve, "Reject" -> reject))
  [7116] Exit[7116]
  [7117] (7470/1) Normal[7117] let stepsResolve = ALGORITHM["GLOBAL.PromiseResolveFunctions"]
  [7118] (7475/5) Normal[7118] resolve.AlreadyResolved = alreadyResolved
  [7119] (7477/7) Normal[7119] let lengthReject = 1i
  [7120] (7481/10) Normal[7120] reject.AlreadyResolved = alreadyResolved
  [7121] (7471/2) Normal[7121] let lengthResolve = 1i
  [7122] (7480/9) Normal[7122] reject.Promise = promise
  [7123] (7476/6) Normal[7123] let stepsReject = ALGORITHM["GLOBAL.PromiseRejectFunctions"]
  [7124] (7472/3) Call[7124] app __x0__ = (CreateBuiltinFunction stepsResolve lengthResolve "" (new ["Promise", "AlreadyResolved"]))
Algo: CreateSetIterator [648]
  [7144] Entry[7144]
  [7145] (7484/0) Normal[7145] assert (|| (= kind ~key+value~) (= kind ~value~))
  [7146] (7510/2) Normal[7146] let closure = __x1__
  [7147] (7511/18) Call[7147] app __x5__ = (CreateIteratorFromClosure closure "%SetIteratorPrototype%" INTRINSICS["%SetIteratorPrototype%"])
  [7148] (7485/1) Call[7148] app __x0__ = (RequireInternalSlot set "SetData")
  [7149] (7512/18) Normal[7149] return [! __x5__]
  [7150] (7486/1) Normal[7150] [? __x0__]
  [7151] Exit[7151]
  [7152] (7487/2) Arrow[7152] clo __x1__ = ()[set, kind] => {
  let index = 0i
  let entries = set.SetData
  let numEntries = entries.length
  while (< index numEntries) {
    let e = entries[index]
    index = (+ index 1i)
    if (! (= e ~empty~)) {
      if (= kind ~key+value~) {
        app __x2__ = (CreateArrayFromList (new [e, e]))
        app __x3__ = (Yield [! __x2__])
        [? __x3__]
      } else {
        assert (= kind ~value~)
        app __x4__ = (Yield e)
        [? __x4__]
      }
      numEntries = entries.length
    } else {}
  }
  return undefined
} [fid: 647]
Algo: CreateSetIterator:2 [647]
  [7125] Entry[7125]
  [7126] (7489/3) Normal[7126] let index = 0i
  [7127] (7494/7) Normal[7127] let e = entries[index]
  [7128] (7495/8) Normal[7128] index = (+ index 1i)
  [7129] (7501/11) Call[7129] app __x3__ = (Yield [! __x2__])
  [7130] (7502/11) Normal[7130] [? __x3__]
  [7131] (7506/14) Normal[7131] [? __x4__]
  [7132] (7507/16) Normal[7132] numEntries = entries.length
  [7133] (7490/4) Normal[7133] let entries = set.SetData
  [7134] (7496/9) If[7134] (! (= e ~empty~))
  [7135] (7500/11) Call[7135] app __x2__ = (CreateArrayFromList (new [e, e]))
  [7136] (7505/14) Call[7136] app __x4__ = (Yield e)
  [7137] (7491/5) Normal[7137] let numEntries = entries.length
  [7138] (7509/17) Normal[7138] return undefined
  [7139] Exit[7139]
  [7140] (7504/13) Normal[7140] assert (= kind ~value~)
  [7141] (7498/10) If[7141] (= kind ~key+value~)
  [7142] LoopCont[7142]
  [7143] (7492/6) Loop[7143] (< index numEntries)
Algo: CreateSharedByteDataBlock [649]
  [7153] Entry[7153]
  [7154] (7514/0) Normal[7154] assert (! (< size 0i))
  [7155] (7518/4) Normal[7155] let zero = (new [0i])
  [7156] (7519/5) Normal[7156] let __x0__ = db
  [7157] (7524/5) Normal[7157] __x1__ = (+ __x1__ 1i)
  [7158] (7525/6) Normal[7158] append (new WriteSharedMemory("Order" -> ~Init~, "NoTear" -> true, "Block" -> db, "ByteIndex" -> i, "ElementSize" -> 1i, "Payload" -> zero)) -> eventList
  [7159] (7515/1) Normal[7159] ??? "Let id:{db} be a new Shared Data Block value consisting of id:{size} bytes . If it is impossible to create such a Shared Data Block , throw a value:{RangeError} exception ."
  [7160] (7520/5) Normal[7160] let __x1__ = 0i
  [7161] (7523/5) Normal[7161] let i = __x0__[__x1__]
  [7162] (7526/7) Normal[7162] return db
  [7163] Exit[7163]
  [7164] (7516/2) Normal[7164] let execution = AGENT.CandidateExecution
  [7165] LoopCont[7165]
  [7166] (7521/5) Loop[7166] (< __x1__ __x0__.length)
  [7167] (7517/3) Normal[7167] ??? "Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) ."
Algo: CreateUnmappedArgumentsObject [650]
  [7168] Entry[7168]
  [7169] (7528/0) Normal[7169] let len = argumentsList.length
  [7170] (7532/3) Call[7170] app __x1__ = (DefinePropertyOrThrow obj "length" (new PropertyDescriptor("Value" -> len, "Writable" -> true, "Enumerable" -> false, "Configurable" -> true)))
  [7171] (7533/3) Normal[7171] __x1__
  [7172] (7538/7) Call[7172] app __x2__ = (ToString index)
  [7173] (7539/7) Call[7173] app __x3__ = (CreateDataPropertyOrThrow obj [! __x2__] val)
  [7174] LoopCont[7174]
  [7175] (7535/5) Loop[7175] (< index len)
  [7176] (7529/1) Call[7176] app __x0__ = (OrdinaryObjectCreate INTRINSICS["%Object.prototype%"] (new ["ParameterMap"]))
  [7177] (7534/4) Normal[7177] let index = 0i
  [7178] (7537/6) Normal[7178] let val = argumentsList[index]
  [7179] (7541/8) Normal[7179] index = (+ index 1i)
  [7180] (7530/1) Normal[7180] let obj = [! __x0__]
  [7181] (7544/10) Call[7181] app __x5__ = (DefinePropertyOrThrow obj "callee" (new PropertyDescriptor("Get" -> INTRINSICS["%ThrowTypeError%"], "Set" -> INTRINSICS["%ThrowTypeError%"], "Enumerable" -> false, "Configurable" -> false)))
  [7182] (7545/10) Normal[7182] [! __x5__]
  [7183] (7540/7) Normal[7183] [! __x3__]
  [7184] (7531/2) Normal[7184] obj.ParameterMap = undefined
  [7185] (7546/11) Normal[7185] return obj
  [7186] (7543/9) Normal[7186] [! __x4__]
  [7187] (7542/9) Call[7187] app __x4__ = (DefinePropertyOrThrow obj SYMBOL_iterator (new PropertyDescriptor("Value" -> INTRINSICS["%Array.prototype.values%"], "Writable" -> true, "Enumerable" -> false, "Configurable" -> true)))
  [7188] Exit[7188]
Algo: DataRaces [651]
  [7189] Entry[7189]
  [7190] (7548/0) Normal[7190] ??? "If id:{E} and id:{D} are in a race in id:{execution} , then in:{} out:{}"
  [7191] (7549/5) Normal[7191] return false
  [7192] Exit[7192]
Algo: DateFromTime [652]
  [7193] Entry[7193]
  [7194] (7551/0) Call[7194] app __x0__ = (MonthFromTime t)
  [7195] (7557/1) Call[7195] app __x2__ = (MonthFromTime t)
  [7196] (7558/1) If[7196] (== __x2__ 1i)
  [7197] (7552/0) If[7197] (== __x0__ 0i)
  [7198] (7560/1) Call[7198] app __x3__ = (DayWithinYear t)
  [7199] (7563/2) Call[7199] app __x4__ = (MonthFromTime t)
  [7200] (7554/0) Call[7200] app __x1__ = (DayWithinYear t)
  [7201] (7555/0) Normal[7201] return (+ __x1__ 1i)
  [7202] (7564/2) If[7202] (== __x4__ 2i)
  [7203] (7566/2) Call[7203] app __x5__ = (DayWithinYear t)
  [7204] (7570/3) Call[7204] app __x7__ = (MonthFromTime t)
  [7205] (7629/11) Call[7205] app __x32__ = (DayWithinYear t)
  [7206] (7630/11) Call[7206] app __x33__ = (InLeapYear t)
  [7207] (7609/8) Call[7207] app __x24__ = (InLeapYear t)
  [7208] (7610/8) Normal[7208] return (- (- __x23__ 242i) __x24__)
  [7209] (7584/5) Call[7209] app __x13__ = (MonthFromTime t)
  [7210] (7585/5) If[7210] (== __x13__ 5i)
  [7211] (7602/7) Call[7211] app __x21__ = (InLeapYear t)
  [7212] (7603/7) Normal[7212] return (- (- __x20__ 211i) __x21__)
  [7213] (7587/5) Call[7213] app __x14__ = (DayWithinYear t)
  [7214] (7591/6) Call[7214] app __x16__ = (MonthFromTime t)
  [7215] (7623/10) Call[7215] app __x30__ = (InLeapYear t)
  [7216] (7624/10) Normal[7216] return (- (- __x29__ 303i) __x30__)
  [7217] (7571/3) If[7217] (== __x7__ 3i)
  [7218] (7578/4) If[7218] (== __x10__ 4i)
  [7219] (7580/4) Call[7219] app __x11__ = (DayWithinYear t)
  [7220] (7615/9) Call[7220] app __x26__ = (DayWithinYear t)
  [7221] (7616/9) Call[7221] app __x27__ = (InLeapYear t)
  [7222] (7631/11) Normal[7222] return (- (- __x32__ 333i) __x33__)
  [7223] (7592/6) If[7223] (== __x16__ 6i)
  [7224] (7581/4) Call[7224] app __x12__ = (InLeapYear t)
  [7225] (7596/6) Normal[7225] return (- (- __x17__ 180i) __x18__)
  [7226] (7598/7) Call[7226] app __x19__ = (MonthFromTime t)
  [7227] (7589/5) Normal[7227] return (- (- __x14__ 150i) __x15__)
  [7228] (7605/8) Call[7228] app __x22__ = (MonthFromTime t)
  [7229] (7626/11) Call[7229] app __x31__ = (MonthFromTime t)
  [7230] (7568/2) Normal[7230] return (- (- __x5__ 58i) __x6__)
  [7231] (7608/8) Call[7231] app __x23__ = (DayWithinYear t)
  [7232] (7613/9) If[7232] (== __x25__ 9i)
  [7233] (7619/10) Call[7233] app __x28__ = (MonthFromTime t)
  [7234] (7574/3) Call[7234] app __x9__ = (InLeapYear t)
  [7235] (7575/3) Normal[7235] return (- (- __x8__ 89i) __x9__)
  [7236] (7595/6) Call[7236] app __x18__ = (InLeapYear t)
  [7237] (7599/7) If[7237] (== __x19__ 7i)
  [7238] (7582/4) Normal[7238] return (- (- __x11__ 119i) __x12__)
  [7239] (7612/9) Call[7239] app __x25__ = (MonthFromTime t)
  [7240] (7588/5) Call[7240] app __x15__ = (InLeapYear t)
  [7241] (7567/2) Call[7241] app __x6__ = (InLeapYear t)
  [7242] (7627/11) If[7242] (== __x31__ 11i)
  [7243] (7620/10) If[7243] (== __x28__ 10i)
  [7244] (7561/1) Normal[7244] return (- __x3__ 30i)
  [7245] (7606/8) If[7245] (== __x22__ 8i)
  [7246] (7601/7) Call[7246] app __x20__ = (DayWithinYear t)
  [7247] (7617/9) Normal[7247] return (- (- __x26__ 272i) __x27__)
  [7248] (7577/4) Call[7248] app __x10__ = (MonthFromTime t)
  [7249] (7622/10) Call[7249] app __x29__ = (DayWithinYear t)
  [7250] (7573/3) Call[7250] app __x8__ = (DayWithinYear t)
  [7251] (7594/6) Call[7251] app __x17__ = (DayWithinYear t)
  [7252] Exit[7252]
Algo: DateString [653]
  [7253] Entry[7253]
  [7254] (7634/0) Normal[7254] assert (= (typeof tv) Number)
  [7255] (7638/4) Normal[7255] ??? "Let id:{day} be the String representation of DateFromTime ( id:{tv} ) , formatted as a two - digit decimal number , padded to the left with the code unit 0x0030 ( DIGIT ZERO ) if necessary ."
  [7256] (7639/5) Call[7256] app __x0__ = (YearFromTime tv)
  [7257] (7643/6) Normal[7257] let yearSign = "-"
  [7258] (7644/7) Normal[7258] ??? "Let id:{year} be the String representation of abs ( ℝ ( id:{yv} ) ) , formatted as a decimal number ."
  [7259] (7647/9) Normal[7259] return (+ (+ (+ (+ (+ (+ (+ weekday " ") month) " ") day) " ") yearSign) paddedYear)
  [7260] Exit[7260]
  [7261] (7635/1) Normal[7261] assert (! (= tv NaN))
  [7262] (7640/5) Normal[7262] let yv = __x0__
  [7263] (7642/6) Normal[7263] let yearSign = ""
  [7264] (7646/8) Normal[7264] let paddedYear = [! __x1__]
  [7265] (7636/2) Normal[7265] ??? "Let id:{weekday} be the Name of the entry in link:{sec-todatestring-day-names} with the Number WeekDay ( id:{tv} ) ."
  [7266] (7645/8) Call[7266] app __x1__ = (StringPad year 4i "0" ~start~)
  [7267] (7641/6) If[7267] (! (< yv 0i))
  [7268] (7637/3) Normal[7268] ??? "Let id:{month} be the Name of the entry in link:{sec-todatestring-month-names} with the Number MonthFromTime ( id:{tv} ) ."
Algo: Day [654]
  [7269] Entry[7269]
  [7270] (7649/0) Call[7270] app __x0__ = (floor (/ t 8.64E7))
  [7271] (7650/0) Normal[7271] return __x0__
  [7272] Exit[7272]
Algo: DayFromYear [655]
  [7273] Entry[7273]
  [7274] (7652/0) Call[7274] app __x0__ = (floor (/ (- y 1969i) 4i))
  [7275] (7653/0) Call[7275] app __x1__ = (floor (/ (- y 1901i) 100i))
  [7276] (7654/0) Call[7276] app __x2__ = (floor (/ (- y 1601i) 400i))
  [7277] (7655/0) Normal[7277] return (+ (- (+ (* 365i (- y 1970i)) __x0__) __x1__) __x2__)
  [7278] Exit[7278]
Algo: DayWithinYear [656]
  [7279] Entry[7279]
  [7280] (7657/0) Call[7280] app __x0__ = (Day t)
  [7281] (7658/0) Call[7281] app __x1__ = (YearFromTime t)
  [7282] (7659/0) Call[7282] app __x2__ = (DayFromYear __x1__)
  [7283] (7660/0) Normal[7283] return (- __x0__ __x2__)
  [7284] Exit[7284]
Algo: DaysInYear [657]
  [7285] Entry[7285]
  [7286] (7662/0) If[7286] (! (== (%% y 4i) 0i))
  [7287] (7668/2) If[7287] (&& (== (%% y 100i) 0i) (! (== (%% y 400i) 0i)))
  [7288] (7669/2) Normal[7288] return 365i
  [7289] (7671/3) If[7289] (== (%% y 400i) 0i)
  [7290] (7663/0) Normal[7290] return 365i
  [7291] (7665/1) If[7291] (&& (== (%% y 4i) 0i) (! (== (%% y 100i) 0i)))
  [7292] (7672/3) Normal[7292] return 366i
  [7293] Exit[7293]
  [7294] (7666/1) Normal[7294] return 366i
Algo: DebuggerStatement[0,0].Evaluation [658]
  [7295] Entry[7295]
  [7296] (7675)Normal[7296] let DebuggerStatement = this
  [7297] (7676/0) Normal[7297] ??? "If an implementation - defined debugging facility is available and enabled , then in:{} out:{}"
  [7298] (7677/3) Normal[7298] ??? "Else , in:{} out:{}"
  [7299] (7678/5) Normal[7299] return result
  [7300] Exit[7300]
Algo: DecimalBigIntegerLiteral[0,0].NumericValue [659]
  [7301] Entry[7301]
  [7302] (7680)Normal[7302] let DecimalBigIntegerLiteral = this
  [7303] (7681/0) Normal[7303] return 0n
  [7304] Exit[7304]
Algo: DecimalBigIntegerLiteral[1,0].NumericValue [660]
  [7305] Entry[7305]
  [7306] (7683)Normal[7306] let DecimalBigIntegerLiteral = this
  [7307] (7684/0) Call[7307] access __x0__ = (NonZeroDigit "MV")
  [7308] (7685/0) Normal[7308] return (convert __x0__ num2bigint)
  [7309] Exit[7309]
Algo: DecimalBigIntegerLiteral[1,1].NumericValue [661]
  [7310] Entry[7310]
  [7311] (7687)Normal[7311] let DecimalBigIntegerLiteral = this
  [7312] (7691/1) Normal[7312] let mv = (+ (* __nzd__ 10.0) __dds__)
  [7313] (7692/2) Normal[7313] return (convert mv num2bigint)
  [7314] (7688/0) Normal[7314] ??? "Let id:{n} be the number of code points in nt:{DecimalDigits} , excluding all occurrences of nt:{NumericLiteralSeparator} ."
  [7315] Exit[7315]
  [7316] (7689/1) Call[7316] access __nzd__ = (NonZeroDigit "MV")
  [7317] (7690/1) Call[7317] access __dds__ = (DecimalDigits "MV")
Algo: DecimalBigIntegerLiteral[2,0].NumericValue [662]
  [7318] Entry[7318]
  [7319] (7694)Normal[7319] let DecimalBigIntegerLiteral = this
  [7320] (7698/1) Normal[7320] let mv = (+ (* __nzd__ 10.0) __dds__)
  [7321] (7699/2) Normal[7321] return (convert mv num2bigint)
  [7322] (7695/0) Normal[7322] ??? "Let id:{n} be the number of code points in nt:{DecimalDigits} , excluding all occurrences of nt:{NumericLiteralSeparator} ."
  [7323] Exit[7323]
  [7324] (7696/1) Call[7324] access __nzd__ = (NonZeroDigit "MV")
  [7325] (7697/1) Call[7325] access __dds__ = (DecimalDigits "MV")
Algo: DecimalEscape[0,0].CapturingGroupNumber [663]
  [7326] Entry[7326]
  [7327] (7701)Normal[7327] let DecimalEscape = this
  [7328] (7702/0) Call[7328] access __x0__ = (NonZeroDigit "MV")
  [7329] (7703/0) Normal[7329] return __x0__
  [7330] Exit[7330]
Algo: DecimalEscape[0,0].DecimalEscape [664]
  [7331] Entry[7331]
  [7332] (7705)Normal[7332] let DecimalEscape = this
  [7333] (7706/0) Call[7333] access __x0__ = (this "CapturingGroupNumber")
  [7334] (7707/0) Normal[7334] return __x0__
  [7335] Exit[7335]
Algo: DecimalEscape[0,1].CapturingGroupNumber [665]
  [7336] Entry[7336]
  [7337] (7709)Normal[7337] let DecimalEscape = this
  [7338] (7710/0) Normal[7338] ??? "Let id:{n} be the number of code points in nt:{DecimalDigits} ."
  [7339] (7711/1) Normal[7339] ??? "Return ( the MV of nt:{NonZeroDigit} × 10 sup:{id:{n}} plus the MV of nt:{DecimalDigits} ) ."
  [7340] Exit[7340]
Algo: DecimalEscape[0,1].DecimalEscape [666]
  [7341] Entry[7341]
  [7342] (7713)Normal[7342] let DecimalEscape = this
  [7343] (7714/0) Call[7343] access __x0__ = (this "CapturingGroupNumber")
  [7344] (7715/0) Normal[7344] return __x0__
  [7345] Exit[7345]
Algo: Declaration[1,0].DeclarationPart [667]
  [7346] Entry[7346]
  [7347] (7717)Normal[7347] let Declaration = this
  [7348] (7718/0) Normal[7348] return ClassDeclaration
  [7349] Exit[7349]
Algo: Declaration[2,0].DeclarationPart [668]
  [7350] Entry[7350]
  [7351] (7720)Normal[7351] let Declaration = this
  [7352] (7721/0) Normal[7352] return LexicalDeclaration
  [7353] Exit[7353]
Algo: DeclarativeEnvironmentRecord.CreateImmutableBinding [669]
  [7354] Entry[7354]
  [7355] (7723/1) Normal[7355] envRec.SubMap[N] = (new ImmutableBinding("initialized" -> false, "strict" -> S))
  [7356] (7724/2) Normal[7356] return ~empty~
  [7357] Exit[7357]
Algo: DeclarativeEnvironmentRecord.CreateMutableBinding [670]
  [7358] Entry[7358]
  [7359] (7726/1) Normal[7359] envRec.SubMap[N] = (new MutableBinding("initialized" -> false))
  [7360] (7727/1) If[7360] (= D true)
  [7361] (7728/1) Normal[7361] envRec.SubMap[N].maybeDeleted = true
  [7362] (7730/2) Normal[7362] return ~empty~
  [7363] Exit[7363]
Algo: DeclarativeEnvironmentRecord.DeleteBinding [671]
  [7364] Entry[7364]
  [7365] (7732/1) Normal[7365] ??? "If the binding for id:{N} in id:{envRec} cannot be deleted , return value:{false} ."
  [7366] (7733/2) Normal[7366] delete envRec.SubMap[N]
  [7367] (7734/3) Normal[7367] return true
  [7368] Exit[7368]
Algo: DeclarativeEnvironmentRecord.GetBindingValue [672]
  [7369] Entry[7369]
  [7370] (7736/1) If[7370] (! envRec.SubMap[N].initialized)
  [7371] (7737/1) Normal[7371] throw ReferenceError
  [7372] (7739/2) Normal[7372] return envRec.SubMap[N].BoundValue
  [7373] Exit[7373]
Algo: DeclarativeEnvironmentRecord.HasBinding [673]
  [7374] Entry[7374]
  [7375] (7741/0) If[7375] (= envRec.SubMap[N] absent)
  [7376] (7744/1) Normal[7376] return false
  [7377] (7743/0) Normal[7377] return true
  [7378] Exit[7378]
Algo: DeclarativeEnvironmentRecord.HasSuperBinding [674]
  [7379] Entry[7379]
  [7380] (7745/0) Normal[7380] return false
  [7381] Exit[7381]
Algo: DeclarativeEnvironmentRecord.HasThisBinding [675]
  [7382] Entry[7382]
  [7383] (7746/0) Normal[7383] return false
  [7384] Exit[7384]
Algo: DeclarativeEnvironmentRecord.InitializeBinding [676]
  [7385] Entry[7385]
  [7386] (7748/1) Normal[7386] envRec.SubMap[N].BoundValue = V
  [7387] (7749/2) Normal[7387] envRec.SubMap[N].initialized = true
  [7388] (7750/3) Normal[7388] return ~empty~
  [7389] Exit[7389]
Algo: DeclarativeEnvironmentRecord.SetMutableBinding [677]
  [7390] Entry[7390]
  [7391] (7752)Normal[7391] let binding = envRec.SubMap[N]
  [7392] (7757)Normal[7392] throw ReferenceError
  [7393] (7761)Normal[7393] return ~empty~
  [7394] (7753)If[7394] (= binding absent)
  [7395] (7758)If[7395] (is-instance-of binding MutableBinding)
  [7396] (7759)Normal[7396] binding.BoundValue = V
  [7397] (7760)Normal[7397] throw TypeError
  [7398] Exit[7398]
  [7399] (7754)Normal[7399] throw ReferenceError
  [7400] (7756)If[7400] (! binding.initialized)
Algo: DeclarativeEnvironmentRecord.WithBaseObject [678]
  [7401] Entry[7401]
  [7402] (7762/0) Normal[7402] return undefined
  [7403] Exit[7403]
Algo: Decode [679]
  [7404] Entry[7404]
  [7405] (7764/0) Normal[7405] let strLen = string.length
  [7406] (7769/4) If[7406] (== k strLen)
  [7407] (7770/4) Normal[7407] return R
  [7408] (7772/5) Normal[7408] let C = string[k]
  [7409] (7776/9) Normal[7409] let start = k
  [7410] (7777/10) If[7410] (! (< (+ k 2i) strLen))
  [7411] (7765/1) Normal[7411] let R = ""
  [7412] (7774/7) Normal[7412] let S = C
  [7413] (7823/38) Normal[7413] R = (+ R S)
  [7414] (7766/2) Normal[7414] let k = 0i
  [7415] (7773/6) If[7415] (! (= C "%"))
  [7416] (7767/3) Loop[7416] true
  [7417] Exit[7417]
  [7418] (7816/32) Normal[7418] append B -> Octets
  [7419] (7817/33) Normal[7419] j = (+ j 1i)
  [7420] (7794/20) Call[7420] access __x2__ = (string __x1__)
  [7421] (7795/20) Normal[7421] __x0__ = (+ __x0__ __x2__)
  [7422] (7810/28) If[7422] (! (= string[k] "%"))
  [7423] (7811/28) Normal[7423] throw URIError
  [7424] (7813/29) Normal[7424] ??? "If the code units at index ( id:{k} + 1 ) and ( id:{k} + 2 ) within id:{string} do not represent hexadecimal digits , throw a value:{URIError} exception ."
  [7425] (7796/20) Normal[7425] __x1__ = (+ __x1__ 1i)
  [7426] LoopCont[7426]
  [7427] (7781/12) Normal[7427] ??? "Let id:{B} be the 8 - bit value represented by the two hexadecimal digits at index ( id:{k} + 1 ) and ( id:{k} + 2 ) ."
  [7428] (7782/13) Normal[7428] k = (+ k 2i)
  [7429] (7788/18) Normal[7429] let S = C
  [7430] (7819/35) Normal[7430] ??? "If id:{Octets} does not contain a valid UTF - 8 encoding of a Unicode code point , throw a value:{URIError} exception ."
  [7431] (7820/36) Normal[7431] ??? "Let id:{V} be the code point obtained by applying the UTF - 8 transformation to id:{Octets} , that is , from a List of octets into a 21 - bit value ."
  [7432] (7799/22) If[7432] (|| (== n 1i) (< 4i n))
  [7433] (7800/22) Normal[7433] throw URIError
  [7434] (7802/23) If[7434] (! (< (+ k (* 3i (- n 1i))) strLen))
  [7435] (7790/20) Normal[7435] let __x0__ = ""
  [7436] (7791/20) Normal[7436] let __x1__ = start
  [7437] (7805/24) Normal[7437] let Octets = (new [B])
  [7438] (7806/25) Normal[7438] let j = 1i
  [7439] (7797/20) Normal[7439] let S = __x0__
  [7440] (7780/11) Normal[7440] ??? "If the code units at index ( id:{k} + 1 ) and ( id:{k} + 2 ) within id:{string} do not represent hexadecimal digits , throw a value:{URIError} exception ."
  [7441] (7815/31) Normal[7441] k = (+ k 2i)
  [7442] (7818/34) Normal[7442] assert (= Octets.length n)
  [7443] (7784/15) If[7443] (== n 0i)
  [7444] (7786/16) Normal[7444] let C = B
  [7445] (7803/23) Normal[7445] throw URIError
  [7446] (7807/26) Loop[7446] (< j n)
  [7447] (7792/20) Loop[7447] (< __x1__ (+ k 1i))
  [7448] LoopCont[7448]
  [7449] LoopCont[7449]
  [7450] (7778/10) Normal[7450] throw URIError
  [7451] (7822/37) Normal[7451] let S = __x3__
  [7452] (7814/30) Normal[7452] ??? "Let id:{B} be the 8 - bit value represented by the two hexadecimal digits at index ( id:{k} + 1 ) and ( id:{k} + 2 ) ."
  [7453] (7809/27) Normal[7453] k = (+ k 1i)
  [7454] (7821/37) Call[7454] app __x3__ = (UTF16EncodeCodePoint V)
  [7455] (7787/17) If[7455] (! (contains reservedSet C))
  [7456] (7824/39) Normal[7456] k = (+ k 1i)
  [7457] (7783/14) Normal[7457] ??? "Let id:{n} be the number of leading 1 bits in id:{B} ."
Algo: DefaultClause[0,0].ContainsDuplicateLabels [680]
  [7458] Entry[7458]
  [7459] (7826)Normal[7459] let DefaultClause = this
  [7460] (7832/1) Normal[7460] return false
  [7461] Exit[7461]
  [7462] (7827/0) If[7462] (! (= StatementList absent))
  [7463] (7829/0) Call[7463] access __x0__ = (StatementList "ContainsDuplicateLabels" labelSet)
  [7464] (7830/0) Normal[7464] return __x0__
Algo: DefaultClause[0,0].ContainsUndefinedBreakTarget [681]
  [7465] Entry[7465]
  [7466] (7834)Normal[7466] let DefaultClause = this
  [7467] (7840/1) Normal[7467] return false
  [7468] Exit[7468]
  [7469] (7835/0) If[7469] (! (= StatementList absent))
  [7470] (7837/0) Call[7470] access __x0__ = (StatementList "ContainsUndefinedBreakTarget" labelSet)
  [7471] (7838/0) Normal[7471] return __x0__
Algo: DefaultClause[0,0].ContainsUndefinedContinueTarget [682]
  [7472] Entry[7472]
  [7473] (7842)Normal[7473] let DefaultClause = this
  [7474] (7848/1) Normal[7474] return false
  [7475] Exit[7475]
  [7476] (7843/0) If[7476] (! (= StatementList absent))
  [7477] (7845/0) Call[7477] access __x0__ = (StatementList "ContainsUndefinedContinueTarget" iterationSet (new []))
  [7478] (7846/0) Normal[7478] return __x0__
Algo: DefaultClause[0,0].Evaluation [683]
  [7479] Entry[7479]
  [7480] (7850)Normal[7480] let DefaultClause = this
  [7481] (7851/0) Normal[7481] return ~empty~
  [7482] Exit[7482]
Algo: DefaultClause[0,0].HasCallInTailPosition [684]
  [7483] Entry[7483]
  [7484] (7853)Normal[7484] let DefaultClause = this
  [7485] (7859/1) Normal[7485] return false
  [7486] Exit[7486]
  [7487] (7854/0) If[7487] (! (= StatementList absent))
  [7488] (7856/0) Call[7488] access __x0__ = (StatementList "HasCallInTailPosition" call)
  [7489] (7857/0) Normal[7489] return __x0__
Algo: DefaultClause[0,0].LexicallyDeclaredNames [685]
  [7490] Entry[7490]
  [7491] (7861)Normal[7491] let DefaultClause = this
  [7492] (7867/1) Normal[7492] return (new [])
  [7493] Exit[7493]
  [7494] (7862/0) If[7494] (! (= StatementList absent))
  [7495] (7864/0) Call[7495] access __x0__ = (StatementList "LexicallyDeclaredNames")
  [7496] (7865/0) Normal[7496] return __x0__
Algo: DefaultClause[0,0].LexicallyScopedDeclarations [686]
  [7497] Entry[7497]
  [7498] (7869)Normal[7498] let DefaultClause = this
  [7499] (7875/1) Normal[7499] return (new [])
  [7500] Exit[7500]
  [7501] (7870/0) If[7501] (! (= StatementList absent))
  [7502] (7872/0) Call[7502] access __x0__ = (StatementList "LexicallyScopedDeclarations")
  [7503] (7873/0) Normal[7503] return __x0__
Algo: DefaultClause[0,0].VarDeclaredNames [687]
  [7504] Entry[7504]
  [7505] (7877)Normal[7505] let DefaultClause = this
  [7506] (7883/1) Normal[7506] return (new [])
  [7507] Exit[7507]
  [7508] (7878/0) If[7508] (! (= StatementList absent))
  [7509] (7880/0) Call[7509] access __x0__ = (StatementList "VarDeclaredNames")
  [7510] (7881/0) Normal[7510] return __x0__
Algo: DefaultClause[0,0].VarScopedDeclarations [688]
  [7511] Entry[7511]
  [7512] (7885)Normal[7512] let DefaultClause = this
  [7513] (7891/1) Normal[7513] return (new [])
  [7514] Exit[7514]
  [7515] (7886/0) If[7515] (! (= StatementList absent))
  [7516] (7888/0) Call[7516] access __x0__ = (StatementList "VarScopedDeclarations")
  [7517] (7889/0) Normal[7517] return __x0__
Algo: DefaultClause[0,1].ContainsDuplicateLabels [689]
  [7518] Entry[7518]
  [7519] (7893)Normal[7519] let DefaultClause = this
  [7520] (7899/1) Normal[7520] return false
  [7521] Exit[7521]
  [7522] (7894/0) If[7522] (! (= StatementList absent))
  [7523] (7896/0) Call[7523] access __x0__ = (StatementList "ContainsDuplicateLabels" labelSet)
  [7524] (7897/0) Normal[7524] return __x0__
Algo: DefaultClause[0,1].ContainsUndefinedBreakTarget [690]
  [7525] Entry[7525]
  [7526] (7901)Normal[7526] let DefaultClause = this
  [7527] (7907/1) Normal[7527] return false
  [7528] Exit[7528]
  [7529] (7902/0) If[7529] (! (= StatementList absent))
  [7530] (7904/0) Call[7530] access __x0__ = (StatementList "ContainsUndefinedBreakTarget" labelSet)
  [7531] (7905/0) Normal[7531] return __x0__
Algo: DefaultClause[0,1].ContainsUndefinedContinueTarget [691]
  [7532] Entry[7532]
  [7533] (7909)Normal[7533] let DefaultClause = this
  [7534] (7915/1) Normal[7534] return false
  [7535] Exit[7535]
  [7536] (7910/0) If[7536] (! (= StatementList absent))
  [7537] (7912/0) Call[7537] access __x0__ = (StatementList "ContainsUndefinedContinueTarget" iterationSet (new []))
  [7538] (7913/0) Normal[7538] return __x0__
Algo: DefaultClause[0,1].Evaluation [692]
  [7539] Entry[7539]
  [7540] (7917)Normal[7540] let DefaultClause = this
  [7541] (7918/0) Call[7541] access __x0__ = (StatementList "Evaluation")
  [7542] (7919/0) Normal[7542] return __x0__
  [7543] Exit[7543]
Algo: DefaultClause[0,1].HasCallInTailPosition [693]
  [7544] Entry[7544]
  [7545] (7921)Normal[7545] let DefaultClause = this
  [7546] (7927/1) Normal[7546] return false
  [7547] Exit[7547]
  [7548] (7922/0) If[7548] (! (= StatementList absent))
  [7549] (7924/0) Call[7549] access __x0__ = (StatementList "HasCallInTailPosition" call)
  [7550] (7925/0) Normal[7550] return __x0__
Algo: DefaultClause[0,1].LexicallyDeclaredNames [694]
  [7551] Entry[7551]
  [7552] (7929)Normal[7552] let DefaultClause = this
  [7553] (7935/1) Normal[7553] return (new [])
  [7554] Exit[7554]
  [7555] (7930/0) If[7555] (! (= StatementList absent))
  [7556] (7932/0) Call[7556] access __x0__ = (StatementList "LexicallyDeclaredNames")
  [7557] (7933/0) Normal[7557] return __x0__
Algo: DefaultClause[0,1].LexicallyScopedDeclarations [695]
  [7558] Entry[7558]
  [7559] (7937)Normal[7559] let DefaultClause = this
  [7560] (7943/1) Normal[7560] return (new [])
  [7561] Exit[7561]
  [7562] (7938/0) If[7562] (! (= StatementList absent))
  [7563] (7940/0) Call[7563] access __x0__ = (StatementList "LexicallyScopedDeclarations")
  [7564] (7941/0) Normal[7564] return __x0__
Algo: DefaultClause[0,1].VarDeclaredNames [696]
  [7565] Entry[7565]
  [7566] (7945)Normal[7566] let DefaultClause = this
  [7567] (7951/1) Normal[7567] return (new [])
  [7568] Exit[7568]
  [7569] (7946/0) If[7569] (! (= StatementList absent))
  [7570] (7948/0) Call[7570] access __x0__ = (StatementList "VarDeclaredNames")
  [7571] (7949/0) Normal[7571] return __x0__
Algo: DefaultClause[0,1].VarScopedDeclarations [697]
  [7572] Entry[7572]
  [7573] (7953)Normal[7573] let DefaultClause = this
  [7574] (7959/1) Normal[7574] return (new [])
  [7575] Exit[7575]
  [7576] (7954/0) If[7576] (! (= StatementList absent))
  [7577] (7956/0) Call[7577] access __x0__ = (StatementList "VarScopedDeclarations")
  [7578] (7957/0) Normal[7578] return __x0__
Algo: DefinePropertyOrThrow [698]
  [7579] Entry[7579]
  [7580] (7961/0) Normal[7580] assert (= (typeof O) Object)
  [7581] (7965/2) Normal[7581] let success = [? __x1__]
  [7582] (7966/3) If[7582] (= success false)
  [7583] (7962/1) Call[7583] app __x0__ = (IsPropertyKey P)
  [7584] (7967/3) Normal[7584] throw TypeError
  [7585] (7969/4) Normal[7585] return success
  [7586] (7963/1) Normal[7586] assert (= __x0__ true)
  [7587] (7964/2) Call[7587] app __x1__ = (O.DefineOwnProperty O P desc)
  [7588] Exit[7588]
Algo: DeletePropertyOrThrow [699]
  [7589] Entry[7589]
  [7590] (7971/0) Normal[7590] assert (= (typeof O) Object)
  [7591] (7975/2) Normal[7591] let success = [? __x1__]
  [7592] (7976/3) If[7592] (= success false)
  [7593] (7972/1) Call[7593] app __x0__ = (IsPropertyKey P)
  [7594] (7977/3) Normal[7594] throw TypeError
  [7595] (7979/4) Normal[7595] return success
  [7596] (7973/1) Normal[7596] assert (= __x0__ true)
  [7597] (7974/2) Call[7597] app __x1__ = (O.Delete O P)
  [7598] Exit[7598]
Algo: DetachArrayBuffer [700]
  [7599] Entry[7599]
  [7600] (7981/1) Call[7600] app __x0__ = (IsSharedArrayBuffer arrayBuffer)
  [7601] (7986/3) Call[7601] app __x1__ = (SameValue arrayBuffer.ArrayBufferDetachKey key)
  [7602] (7987/3) If[7602] (= __x1__ false)
  [7603] (7992/6) Normal[7603] return null
  [7604] Exit[7604]
  [7605] (7982/1) Normal[7605] assert (= __x0__ false)
  [7606] (7988/3) Normal[7606] throw TypeError
  [7607] (7990/4) Normal[7607] arrayBuffer.ArrayBufferData = null
  [7608] (7991/5) Normal[7608] arrayBuffer.ArrayBufferByteLength = 0i
  [7609] (7983/2) If[7609] (= key absent)
  [7610] (7984/2) Normal[7610] key = undefined
Algo: Disjunction[0,0].Evaluation [701]
  [7611] Entry[7611]
  [7612] (7994)Normal[7612] let Disjunction = this
  [7613] (7995/0) Call[7613] access __x0__ = (Alternative "Evaluation" direction)
  [7614] (7996/0) Normal[7614] let m = __x0__
  [7615] (7997/1) Normal[7615] return m
  [7616] Exit[7616]
Algo: Disjunction[1,0].Evaluation [702]
  [7617] Entry[7617]
  [7618] (7999/0) Call[7618] access __x0__ = (Alternative "Evaluation" direction)
  [7619] (8003/2) Normal[7619] ??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{m1} and id:{m2} and performs the following steps when called : in:{} out:{}"
  [7620] Exit[7620]
  [7621] (8000/0) Normal[7621] let m1 = __x0__
  [7622] (8001/1) Call[7622] access __x1__ = (Disjunction "Evaluation" direction)
  [7623] (8002/1) Normal[7623] let m2 = __x1__
Algo: DoWhileStatement[0,0].ContainsDuplicateLabels [703]
  [7624] Entry[7624]
  [7625] (8005)Normal[7625] let DoWhileStatement = this
  [7626] (8006/0) Call[7626] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [7627] (8007/0) Normal[7627] return __x0__
  [7628] Exit[7628]
Algo: DoWhileStatement[0,0].ContainsUndefinedBreakTarget [704]
  [7629] Entry[7629]
  [7630] (8009)Normal[7630] let DoWhileStatement = this
  [7631] (8010/0) Call[7631] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [7632] (8011/0) Normal[7632] return __x0__
  [7633] Exit[7633]
Algo: DoWhileStatement[0,0].ContainsUndefinedContinueTarget [705]
  [7634] Entry[7634]
  [7635] (8013)Normal[7635] let DoWhileStatement = this
  [7636] (8014/0) Call[7636] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [7637] (8015/0) Normal[7637] return __x0__
  [7638] Exit[7638]
Algo: DoWhileStatement[0,0].DoWhileLoopEvaluation [706]
  [7639] Entry[7639]
  [7640] (8017)Normal[7640] let DoWhileStatement = this
  [7641] (8022/2) Normal[7641] let stmtResult = __x0__
  [7642] (8023/3) Call[7642] app __x1__ = (LoopContinues stmtResult labelSet)
  [7643] (8029/4) If[7643] (! (= stmtResult.Value ~empty~))
  [7644] (8030/4) Normal[7644] V = stmtResult.Value
  [7645] (8032/5) Call[7645] access __x3__ = (Expression "Evaluation")
  [7646] (8034/6) Call[7646] app __x4__ = (GetValue exprRef)
  [7647] (8035/6) Normal[7647] let exprValue = [? __x4__]
  [7648] (8018/0) Normal[7648] let V = undefined
  [7649] (8024/3) If[7649] (= __x1__ false)
  [7650] (8027/3) Normal[7650] return __x2__
  [7651] (8033/5) Normal[7651] let exprRef = __x3__
  [7652] (8019/1) Loop[7652] true
  [7653] (8037/7) If[7653] (= [! __x5__] false)
  [7654] (8038/7) Normal[7654] return V
  [7655] LoopCont[7655]
  [7656] (8026/3) Call[7656] app __x2__ = (UpdateEmpty stmtResult V)
  [7657] (8021/2) Call[7657] access __x0__ = (Statement "Evaluation")
  [7658] Exit[7658]
  [7659] (8036/7) Call[7659] app __x5__ = (ToBoolean exprValue)
Algo: DoWhileStatement[0,0].EarlyErrors [707]
  [7660] Entry[7660]
  [7661] (8041)Normal[7661] let DoWhileStatement = this
  [7662] (8042/0) Call[7662] app __x0__ = (IsLabelledFunction Statement)
  [7663] (8043/0) If[7663] (= __x0__ true)
  [7664] (8044/0) Normal[7664] throw SyntaxError
  [7665] Exit[7665]
Algo: DoWhileStatement[0,0].HasCallInTailPosition [708]
  [7666] Entry[7666]
  [7667] (8047)Normal[7667] let DoWhileStatement = this
  [7668] (8048/0) Call[7668] access __x0__ = (Statement "HasCallInTailPosition" call)
  [7669] (8049/0) Normal[7669] return __x0__
  [7670] Exit[7670]
Algo: DoWhileStatement[0,0].VarDeclaredNames [709]
  [7671] Entry[7671]
  [7672] (8051)Normal[7672] let DoWhileStatement = this
  [7673] (8052/0) Call[7673] access __x0__ = (Statement "VarDeclaredNames")
  [7674] (8053/0) Normal[7674] return __x0__
  [7675] Exit[7675]
Algo: DoWhileStatement[0,0].VarScopedDeclarations [710]
  [7676] Entry[7676]
  [7677] (8055)Normal[7677] let DoWhileStatement = this
  [7678] (8056/0) Call[7678] access __x0__ = (Statement "VarScopedDeclarations")
  [7679] (8057/0) Normal[7679] return __x0__
  [7680] Exit[7680]
Algo: ECMAScriptFunctionObject.Call [711]
  [7681] Entry[7681]
  [7682] (8059/0) Normal[7682] assert (is-instance-of F ECMAScriptFunctionObject)
  [7683] (8063/4) If[7683] (= F.IsClassConstructor true)
  [7684] (8065/5) Normal[7684] let error = (new OrdinaryObject("Prototype" -> INTRINSICS["%TypeError.prototype%"], "ErrorData" -> undefined))
  [7685] (8073/9) Call[7685] app __x2__ = (OrdinaryCallBindThis F calleeContext thisArgument)
  [7686] (8070/8) Call[7686] app __x1__ = (ThrowCompletion error)
  [7687] (8071/8) Normal[7687] return __x1__
  [7688] (8075/10) Call[7688] app __x3__ = (OrdinaryCallEvaluateBody F argumentsList)
  [7689] (8076/10) Normal[7689] let result = __x3__
  [7690] (8082/12) Normal[7690] return result.Value
  [7691] (8084/13) Normal[7691] [? result]
  [7692] (8060/1) Normal[7692] let callerContext = CONTEXT
  [7693] (8066/7) If[7693] (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] calleeContext)
  [7694] (8085/14) Normal[7694] return undefined
  [7695] (8069/7) Normal[7695] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [7696] (8074/9) Normal[7696] __x2__
  [7697] (8061/2) Call[7697] app __x0__ = (PrepareForOrdinaryCall F undefined)
  [7698] (8078/11) Normal[7698] (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i))
  [7699] (8080/11) Normal[7699] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [7700] Exit[7700]
  [7701] (8067/7) Normal[7701] (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i))
  [7702] (8062/2) Normal[7702] let calleeContext = __x0__
  [7703] (8081/12) If[7703] (= result.Type ~return~)
  [7704] (8077/11) If[7704] (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] calleeContext)
Algo: ECMAScriptFunctionObject.Construct [712]
  [7705] Entry[7705]
  [7706] (8087/0) Normal[7706] assert (is-instance-of F ECMAScriptFunctionObject)
  [7707] (8091/4) If[7707] (= kind ~base~)
  [7708] (8093/5) Call[7708] app __x0__ = (OrdinaryCreateFromConstructor newTarget "%Object.prototype%")
  [7709] (8096/6) Call[7709] app __x1__ = (PrepareForOrdinaryCall F newTarget)
  [7710] (8098/8) If[7710] (= kind ~base~)
  [7711] (8100/8) Call[7711] app __x2__ = (OrdinaryCallBindThis F calleeContext thisArgument)
  [7712] (8103/9) Call[7712] access __x3__ = (calleeContext "LexicalEnvironment")
  [7713] (8104/9) Normal[7713] let constructorEnv = __x3__
  [7714] (8105/10) Call[7714] app __x4__ = (OrdinaryCallEvaluateBody F argumentsList)
  [7715] (8088/1) Normal[7715] assert (= (typeof newTarget) Object)
  [7716] (8094/5) Normal[7716] let thisArgument = [? __x0__]
  [7717] (8097/6) Normal[7717] let calleeContext = __x1__
  [7718] (8089/2) Normal[7718] let callerContext = CONTEXT
  [7719] (8107/11) If[7719] (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] calleeContext)
  [7720] (8108/11) Normal[7720] (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i))
  [7721] (8110/11) Normal[7721] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [7722] (8101/8) Normal[7722] __x2__
  [7723] (8090/3) Normal[7723] let kind = F.ConstructorKind
  [7724] (8106/10) Normal[7724] let result = __x4__
  [7725] (8111/12) If[7725] (= result.Type ~return~)
  [7726] (8117/14) Normal[7726] return thisArgument
  [7727] (8119/15) If[7727] (! (= result.Value undefined))
  [7728] (8120/15) Normal[7728] throw TypeError
  [7729] (8123/17) Call[7729] app __x5__ = (constructorEnv.GetThisBinding constructorEnv)
  [7730] (8113/13) If[7730] (= (typeof result.Value) Object)
  [7731] (8122/12) Normal[7731] [? result]
  [7732] (8124/17) Normal[7732] return [? __x5__]
  [7733] Exit[7733]
  [7734] (8114/13) Normal[7734] return result.Value
  [7735] (8116/14) If[7735] (= kind ~base~)
Algo: EarlyErrors [713]
  [7736] Entry[7736]
  [7737] (8126/0) Call[7737] access __x0__ = (LeftHandSideExpression "AssignmentTargetType")
  [7738] (8127/0) If[7738] (! (= __x0__ ~simple~))
  [7739] (8128/0) Normal[7739] throw SyntaxError
  [7740] Exit[7740]
Algo: ElementList[0,0].ArrayAccumulation [714]
  [7741] Entry[7741]
  [7742] (8131)Normal[7742] let ElementList = this
  [7743] (8136/2) Normal[7743] [? nextIndex]
  [7744] (8138/3) Call[7744] access __x1__ = (AssignmentExpression "Evaluation")
  [7745] (8142/5) Call[7745] app __x3__ = (ToString nextIndex)
  [7746] (8143/5) Call[7746] app __x4__ = (CreateDataPropertyOrThrow array [! __x3__] initValue)
  [7747] (8132/0) If[7747] (! (= Elision absent))
  [7748] (8139/3) Normal[7748] let initResult = __x1__
  [7749] (8141/4) Normal[7749] let initValue = [? __x2__]
  [7750] (8145/6) Normal[7750] return (+ nextIndex 1i)
  [7751] Exit[7751]
  [7752] (8134/1) Call[7752] access __x0__ = (Elision "ArrayAccumulation" array nextIndex)
  [7753] (8144/5) Normal[7753] let created = [! __x4__]
  [7754] (8140/4) Call[7754] app __x2__ = (GetValue initResult)
  [7755] (8135/1) Normal[7755] nextIndex = __x0__
Algo: ElementList[0,1].ArrayAccumulation [715]
  [7756] Entry[7756]
  [7757] (8147)Normal[7757] let ElementList = this
  [7758] (8152/2) Normal[7758] [? nextIndex]
  [7759] (8154/3) Call[7759] access __x1__ = (AssignmentExpression "Evaluation")
  [7760] (8158/5) Call[7760] app __x3__ = (ToString nextIndex)
  [7761] (8159/5) Call[7761] app __x4__ = (CreateDataPropertyOrThrow array [! __x3__] initValue)
  [7762] (8148/0) If[7762] (! (= Elision absent))
  [7763] (8155/3) Normal[7763] let initResult = __x1__
  [7764] (8157/4) Normal[7764] let initValue = [? __x2__]
  [7765] (8161/6) Normal[7765] return (+ nextIndex 1i)
  [7766] Exit[7766]
  [7767] (8150/1) Call[7767] access __x0__ = (Elision "ArrayAccumulation" array nextIndex)
  [7768] (8160/5) Normal[7768] let created = [! __x4__]
  [7769] (8156/4) Call[7769] app __x2__ = (GetValue initResult)
  [7770] (8151/1) Normal[7770] nextIndex = __x0__
Algo: ElementList[1,0].ArrayAccumulation [716]
  [7771] Entry[7771]
  [7772] (8163)Normal[7772] let ElementList = this
  [7773] (8168/2) Normal[7773] [? nextIndex]
  [7774] (8170/3) Call[7774] access __x1__ = (SpreadElement "ArrayAccumulation" array nextIndex)
  [7775] (8164/0) If[7775] (! (= Elision absent))
  [7776] (8171/3) Normal[7776] return __x1__
  [7777] (8166/1) Call[7777] access __x0__ = (Elision "ArrayAccumulation" array nextIndex)
  [7778] Exit[7778]
  [7779] (8167/1) Normal[7779] nextIndex = __x0__
Algo: ElementList[1,1].ArrayAccumulation [717]
  [7780] Entry[7780]
  [7781] (8173)Normal[7781] let ElementList = this
  [7782] (8178/2) Normal[7782] [? nextIndex]
  [7783] (8180/3) Call[7783] access __x1__ = (SpreadElement "ArrayAccumulation" array nextIndex)
  [7784] (8174/0) If[7784] (! (= Elision absent))
  [7785] (8181/3) Normal[7785] return __x1__
  [7786] (8176/1) Call[7786] access __x0__ = (Elision "ArrayAccumulation" array nextIndex)
  [7787] Exit[7787]
  [7788] (8177/1) Normal[7788] nextIndex = __x0__
Algo: ElementList[2,0].ArrayAccumulation [718]
  [7789] Entry[7789]
  [7790] (8183/0) Call[7790] access __x0__ = (ElementList "ArrayAccumulation" array nextIndex)
  [7791] (8188/3) Call[7791] access __x1__ = (Elision "ArrayAccumulation" array nextIndex)
  [7792] (8189/3) Normal[7792] nextIndex = __x1__
  [7793] (8194/6) Call[7793] app __x3__ = (GetValue initResult)
  [7794] (8195/6) Normal[7794] let initValue = [? __x3__]
  [7795] (8198/7) Normal[7795] let created = [! __x5__]
  [7796] (8199/8) Normal[7796] return (+ nextIndex 1i)
  [7797] (8184/0) Normal[7797] nextIndex = __x0__
  [7798] (8190/4) Normal[7798] [? nextIndex]
  [7799] (8193/5) Normal[7799] let initResult = __x2__
  [7800] (8197/7) Call[7800] app __x5__ = (CreateDataPropertyOrThrow array [! __x4__] initValue)
  [7801] (8185/1) Normal[7801] [? nextIndex]
  [7802] (8196/7) Call[7802] app __x4__ = (ToString nextIndex)
  [7803] (8192/5) Call[7803] access __x2__ = (AssignmentExpression "Evaluation")
  [7804] (8186/2) If[7804] (! (= Elision absent))
  [7805] Exit[7805]
Algo: ElementList[2,1].ArrayAccumulation [719]
  [7806] Entry[7806]
  [7807] (8201/0) Call[7807] access __x0__ = (ElementList "ArrayAccumulation" array nextIndex)
  [7808] (8206/3) Call[7808] access __x1__ = (Elision "ArrayAccumulation" array nextIndex)
  [7809] (8207/3) Normal[7809] nextIndex = __x1__
  [7810] (8212/6) Call[7810] app __x3__ = (GetValue initResult)
  [7811] (8213/6) Normal[7811] let initValue = [? __x3__]
  [7812] (8216/7) Normal[7812] let created = [! __x5__]
  [7813] (8217/8) Normal[7813] return (+ nextIndex 1i)
  [7814] (8202/0) Normal[7814] nextIndex = __x0__
  [7815] (8208/4) Normal[7815] [? nextIndex]
  [7816] (8211/5) Normal[7816] let initResult = __x2__
  [7817] (8215/7) Call[7817] app __x5__ = (CreateDataPropertyOrThrow array [! __x4__] initValue)
  [7818] (8203/1) Normal[7818] [? nextIndex]
  [7819] (8214/7) Call[7819] app __x4__ = (ToString nextIndex)
  [7820] (8210/5) Call[7820] access __x2__ = (AssignmentExpression "Evaluation")
  [7821] (8204/2) If[7821] (! (= Elision absent))
  [7822] Exit[7822]
Algo: ElementList[3,0].ArrayAccumulation [720]
  [7823] Entry[7823]
  [7824] (8219/0) Call[7824] access __x0__ = (ElementList "ArrayAccumulation" array nextIndex)
  [7825] (8224/3) Call[7825] access __x1__ = (Elision "ArrayAccumulation" array nextIndex)
  [7826] (8225/3) Normal[7826] nextIndex = __x1__
  [7827] (8220/0) Normal[7827] nextIndex = __x0__
  [7828] (8226/4) Normal[7828] [? nextIndex]
  [7829] (8229/5) Normal[7829] return __x2__
  [7830] Exit[7830]
  [7831] (8221/1) Normal[7831] [? nextIndex]
  [7832] (8228/5) Call[7832] access __x2__ = (SpreadElement "ArrayAccumulation" array nextIndex)
  [7833] (8222/2) If[7833] (! (= Elision absent))
Algo: ElementList[3,1].ArrayAccumulation [721]
  [7834] Entry[7834]
  [7835] (8231/0) Call[7835] access __x0__ = (ElementList "ArrayAccumulation" array nextIndex)
  [7836] (8236/3) Call[7836] access __x1__ = (Elision "ArrayAccumulation" array nextIndex)
  [7837] (8237/3) Normal[7837] nextIndex = __x1__
  [7838] (8232/0) Normal[7838] nextIndex = __x0__
  [7839] (8238/4) Normal[7839] [? nextIndex]
  [7840] (8241/5) Normal[7840] return __x2__
  [7841] Exit[7841]
  [7842] (8233/1) Normal[7842] [? nextIndex]
  [7843] (8240/5) Call[7843] access __x2__ = (SpreadElement "ArrayAccumulation" array nextIndex)
  [7844] (8234/2) If[7844] (! (= Elision absent))
Algo: Elision[0,0].ArrayAccumulation [722]
  [7845] Entry[7845]
  [7846] (8243)Normal[7846] let Elision = this
  [7847] (8247/3) Normal[7847] return len
  [7848] Exit[7848]
  [7849] (8244/0) Normal[7849] let len = (+ nextIndex 1i)
  [7850] (8245/1) Call[7850] app __x0__ = (Set array "length" len true)
  [7851] (8246/1) Normal[7851] [? __x0__]
Algo: Elision[0,0].IteratorDestructuringAssignmentEvaluation [723]
  [7852] Entry[7852]
  [7853] (8249)Normal[7853] let Elision = this
  [7854] (8254/2) Call[7854] app __x1__ = (IsAbruptCompletion next)
  [7855] (8255/2) If[7855] __x1__
  [7856] (8260/4) Normal[7856] iteratorRecord.Done = true
  [7857] (8263/5) Normal[7857] return ~empty~
  [7858] (8250/0) If[7858] (= iteratorRecord.Done false)
  [7859] (8256/2) Normal[7859] iteratorRecord.Done = true
  [7860] (8258/3) Normal[7860] [? next]
  [7861] (8259/4) If[7861] (= next false)
  [7862] (8252/1) Call[7862] app __x0__ = (IteratorStep iteratorRecord)
  [7863] (8253/1) Normal[7863] let next = __x0__
  [7864] Exit[7864]
Algo: Elision[1,0].ArrayAccumulation [724]
  [7865] Entry[7865]
  [7866] (8265/0) Call[7866] access __x0__ = (Elision "ArrayAccumulation" array (+ nextIndex 1i))
  [7867] (8266/0) Normal[7867] return __x0__
  [7868] Exit[7868]
Algo: Elision[1,0].IteratorDestructuringAssignmentEvaluation [725]
  [7869] Entry[7869]
  [7870] (8268/0) Call[7870] access __x0__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  [7871] (8273/2) Normal[7871] let next = __x1__
  [7872] (8274/3) Call[7872] app __x2__ = (IsAbruptCompletion next)
  [7873] (8279/5) If[7873] (= next false)
  [7874] (8280/5) Normal[7874] iteratorRecord.Done = true
  [7875] (8283/6) Normal[7875] return ~empty~
  [7876] (8269/0) Normal[7876] [? __x0__]
  [7877] (8275/3) If[7877] __x2__
  [7878] (8278/4) Normal[7878] [? next]
  [7879] (8270/1) If[7879] (= iteratorRecord.Done false)
  [7880] Exit[7880]
  [7881] (8276/3) Normal[7881] iteratorRecord.Done = true
  [7882] (8272/2) Call[7882] app __x1__ = (IteratorStep iteratorRecord)
Algo: EmptyStatement[0,0].Evaluation [726]
  [7883] Entry[7883]
  [7884] (8285)Normal[7884] let EmptyStatement = this
  [7885] (8286/0) Normal[7885] return ~empty~
  [7886] Exit[7886]
Algo: Encode [727]
  [7887] Entry[7887]
  [7888] (8288/0) Normal[7888] let strLen = string.length
  [7889] (8293/4) If[7889] (== k strLen)
  [7890] (8294/4) Normal[7890] return R
  [7891] (8296/5) Normal[7891] let C = string[k]
  [7892] (8300/8) Normal[7892] R = (+ R C)
  [7893] LoopCont[7893]
  [7894] (8291/3) Loop[7894] true
  [7895] (8305/11) Normal[7895] throw URIError
  [7896] (8307/12) Normal[7896] k = (+ k cp.CodeUnitCount)
  [7897] (8313/14) Normal[7897] let octet = __x1__[__x2__]
  [7898] (8314/14) Normal[7898] __x2__ = (+ __x2__ 1i)
  [7899] (8289/1) Normal[7899] let R = ""
  [7900] (8315/15) Normal[7900] R = (+ (+ R "%") ??? "StringOp")
  [7901] (8299/7) Normal[7901] k = (+ k 1i)
  [7902] (8304/11) If[7902] (= cp.IsUnpairedSurrogate true)
  [7903] (8290/2) Normal[7903] let k = 0i
  [7904] (8309/14) Normal[7904] let __x1__ = Octets
  [7905] (8310/14) Normal[7905] let __x2__ = 0i
  [7906] LoopCont[7906]
  [7907] (8303/10) Normal[7907] let cp = [! __x0__]
  [7908] (8297/6) If[7908] (contains unescapedSet C)
  [7909] (8311/14) Loop[7909] (< __x2__ __x1__.length)
  [7910] (8308/13) Normal[7910] ??? "Let id:{Octets} be the List of octets resulting by applying the UTF - 8 transformation to id:{cp} . [ [ CodePoint ] ] ."
  [7911] (8302/10) Call[7911] app __x0__ = (CodePointAt string k)
  [7912] Exit[7912]
Algo: EnqueueJob [728]
  [7913] Entry[7913]
  [7914] (8317)Normal[7914] let callerContext = CONTEXT
  [7915] (8321)Normal[7915] append pending -> JOB_QUEUE
  [7916] (8322)Normal[7916] return ~empty~
  [7917] (8318)Normal[7917] let callerRealm = callerContext.Realm
  [7918] Exit[7918]
  [7919] (8319)Normal[7919] let callerScriptOrModule = callerContext.ScriptOrModule
  [7920] (8320)Normal[7920] let pending = (new PendingJob("Job" -> job, "Arguments" -> arguments, "Realm" -> callerRealm, "ScriptOrModule" -> callerScriptOrModule, "HostDefined" -> undefined))
Algo: EnterCriticalSection [729]
  [7921] Entry[7921]
  [7922] (8324/1) Normal[7922] ??? "Wait until no agent is in the critical section for id:{WL} , then enter the critical section for id:{WL} ( without allowing any other agent to enter ) ."
  [7923] (8325/2) Normal[7923] ??? "If id:{WL} has a Synchronize event , then in:{} out:{}"
  [7924] Exit[7924]
Algo: EnumerableOwnPropertyNames [730]
  [7925] Entry[7925]
  [7926] (8327/0) Normal[7926] assert (= (typeof O) Object)
  [7927] (8331/3) Normal[7927] let __x1__ = ownKeys
  [7928] (8332/3) Normal[7928] let __x2__ = 0i
  [7929] (8337/4) If[7929] (= (typeof key) String)
  [7930] (8339/5) Call[7930] app __x3__ = (O.GetOwnProperty O key)
  [7931] LoopCont[7931]
  [7932] (8342/7) If[7932] (= kind ~key~)
  [7933] (8343/7) Normal[7933] append key -> properties
  [7934] (8345/9) Call[7934] app __x4__ = (Get O key)
  [7935] (8350/12) Normal[7935] assert (= kind ~key+value~)
  [7936] (8351/13) Call[7936] app __x5__ = (CreateArrayFromList (new [key, value]))
  [7937] (8328/1) Call[7937] app __x0__ = (O.OwnPropertyKeys O)
  [7938] (8333/3) Loop[7938] (< __x2__ __x1__.length)
  [7939] (8352/13) Normal[7939] let entry = [! __x5__]
  [7940] (8336/3) Normal[7940] __x2__ = (+ __x2__ 1i)
  [7941] (8341/6) If[7941] (&& (! (= desc undefined)) (= desc.Enumerable true))
  [7942] (8329/1) Normal[7942] let ownKeys = [? __x0__]
  [7943] (8346/9) Normal[7943] let value = [? __x4__]
  [7944] (8347/10) If[7944] (= kind ~value~)
  [7945] (8353/14) Normal[7945] append entry -> properties
  [7946] (8340/5) Normal[7946] let desc = [? __x3__]
  [7947] (8335/3) Normal[7947] let key = __x1__[__x2__]
  [7948] (8356/15) Normal[7948] return properties
  [7949] (8330/2) Normal[7949] let properties = (new [])
  [7950] (8348/10) Normal[7950] append value -> properties
  [7951] Exit[7951]
Algo: EnumerateObjectProperties [731]
  [7952] Entry[7952]
  [7953] (8358/0) Normal[7953] assert (= (typeof O) Object)
  [7954] (8359/1) Call[7954] app iterator = (CreateForInIterator O)
  [7955] (8360/1) Normal[7955] return iterator
  [7956] Exit[7956]
Algo: EqualityExpression[1,0].AssignmentTargetType [732]
  [7957] Entry[7957]
  [7958] (8361/0) Normal[7958] return ~invalid~
  [7959] Exit[7959]
Algo: EqualityExpression[1,0].Evaluation [733]
  [7960] Entry[7960]
  [7961] (8363/0) Call[7961] access __x0__ = (EqualityExpression "Evaluation")
  [7962] (8367/2) Call[7962] access __x2__ = (RelationalExpression "Evaluation")
  [7963] (8368/2) Normal[7963] let rref = __x2__
  [7964] (8372/4) Normal[7964] return __x4__
  [7965] Exit[7965]
  [7966] (8364/0) Normal[7966] let lref = __x0__
  [7967] (8369/3) Call[7967] app __x3__ = (GetValue rref)
  [7968] (8371/4) Call[7968] app __x4__ = (AbstractEqualityComparison rval lval)
  [7969] (8365/1) Call[7969] app __x1__ = (GetValue lref)
  [7970] (8370/3) Normal[7970] let rval = [? __x3__]
  [7971] (8366/1) Normal[7971] let lval = [? __x1__]
Algo: EqualityExpression[1,0].HasCallInTailPosition [734]
  [7972] Entry[7972]
  [7973] (8373/0) Normal[7973] return false
  [7974] Exit[7974]
Algo: EqualityExpression[1,0].IsFunctionDefinition [735]
  [7975] Entry[7975]
  [7976] (8374/0) Normal[7976] return false
  [7977] Exit[7977]
Algo: EqualityExpression[2,0].AssignmentTargetType [736]
  [7978] Entry[7978]
  [7979] (8375/0) Normal[7979] return ~invalid~
  [7980] Exit[7980]
Algo: EqualityExpression[2,0].Evaluation [737]
  [7981] Entry[7981]
  [7982] (8377/0) Call[7982] access __x0__ = (EqualityExpression "Evaluation")
  [7983] (8381/2) Call[7983] access __x2__ = (RelationalExpression "Evaluation")
  [7984] (8382/2) Normal[7984] let rref = __x2__
  [7985] (8386/4) Normal[7985] let r = __x4__
  [7986] (8387/5) Normal[7986] [? r]
  [7987] (8390/6) Normal[7987] return true
  [7988] Exit[7988]
  [7989] (8378/0) Normal[7989] let lref = __x0__
  [7990] (8383/3) Call[7990] app __x3__ = (GetValue rref)
  [7991] (8385/4) Call[7991] app __x4__ = (AbstractEqualityComparison rval lval)
  [7992] (8389/6) Normal[7992] return false
  [7993] (8379/1) Call[7993] app __x1__ = (GetValue lref)
  [7994] (8388/6) If[7994] (= r true)
  [7995] (8384/3) Normal[7995] let rval = [? __x3__]
  [7996] (8380/1) Normal[7996] let lval = [? __x1__]
Algo: EqualityExpression[2,0].HasCallInTailPosition [738]
  [7997] Entry[7997]
  [7998] (8391/0) Normal[7998] return false
  [7999] Exit[7999]
Algo: EqualityExpression[2,0].IsFunctionDefinition [739]
  [8000] Entry[8000]
  [8001] (8392/0) Normal[8001] return false
  [8002] Exit[8002]
Algo: EqualityExpression[3,0].AssignmentTargetType [740]
  [8003] Entry[8003]
  [8004] (8393/0) Normal[8004] return ~invalid~
  [8005] Exit[8005]
Algo: EqualityExpression[3,0].Evaluation [741]
  [8006] Entry[8006]
  [8007] (8395/0) Call[8007] access __x0__ = (EqualityExpression "Evaluation")
  [8008] (8399/2) Call[8008] access __x2__ = (RelationalExpression "Evaluation")
  [8009] (8400/2) Normal[8009] let rref = __x2__
  [8010] (8404/4) Normal[8010] return __x4__
  [8011] Exit[8011]
  [8012] (8396/0) Normal[8012] let lref = __x0__
  [8013] (8401/3) Call[8013] app __x3__ = (GetValue rref)
  [8014] (8403/4) Call[8014] app __x4__ = (StrictEqualityComparison rval lval)
  [8015] (8397/1) Call[8015] app __x1__ = (GetValue lref)
  [8016] (8402/3) Normal[8016] let rval = [? __x3__]
  [8017] (8398/1) Normal[8017] let lval = [? __x1__]
Algo: EqualityExpression[3,0].HasCallInTailPosition [742]
  [8018] Entry[8018]
  [8019] (8405/0) Normal[8019] return false
  [8020] Exit[8020]
Algo: EqualityExpression[3,0].IsFunctionDefinition [743]
  [8021] Entry[8021]
  [8022] (8406/0) Normal[8022] return false
  [8023] Exit[8023]
Algo: EqualityExpression[4,0].AssignmentTargetType [744]
  [8024] Entry[8024]
  [8025] (8407/0) Normal[8025] return ~invalid~
  [8026] Exit[8026]
Algo: EqualityExpression[4,0].Evaluation [745]
  [8027] Entry[8027]
  [8028] (8409/0) Call[8028] access __x0__ = (EqualityExpression "Evaluation")
  [8029] (8413/2) Call[8029] access __x2__ = (RelationalExpression "Evaluation")
  [8030] (8414/2) Normal[8030] let rref = __x2__
  [8031] (8418/4) Normal[8031] let r = __x4__
  [8032] (8419/5) Normal[8032] assert (&& (is-completion r) (= r.Type ~normal~))
  [8033] (8422/6) Normal[8033] return true
  [8034] Exit[8034]
  [8035] (8410/0) Normal[8035] let lref = __x0__
  [8036] (8415/3) Call[8036] app __x3__ = (GetValue rref)
  [8037] (8417/4) Call[8037] app __x4__ = (StrictEqualityComparison rval lval)
  [8038] (8421/6) Normal[8038] return false
  [8039] (8411/1) Call[8039] app __x1__ = (GetValue lref)
  [8040] (8420/6) If[8040] (= r.Value true)
  [8041] (8416/3) Normal[8041] let rval = [? __x3__]
  [8042] (8412/1) Normal[8042] let lval = [? __x1__]
Algo: EqualityExpression[4,0].HasCallInTailPosition [746]
  [8043] Entry[8043]
  [8044] (8423/0) Normal[8044] return false
  [8045] Exit[8045]
Algo: EqualityExpression[4,0].IsFunctionDefinition [747]
  [8046] Entry[8046]
  [8047] (8424/0) Normal[8047] return false
  [8048] Exit[8048]
Algo: EscapeRegExpPattern [748]
  [8049] Entry[8049]
  [8050] (8426/0) Normal[8050] ??? "Let id:{S} be a String in the form of a nt:{Pattern[~U]} ( nt:{Pattern[+U]} if id:{F} contains value:{\"u\"} ) equivalent to id:{P} interpreted as UTF - 16 encoded Unicode code points ( link:{sec-ecmascript-language-types-string-type} ) , in which certain code points are escaped as described below . id:{S} may or may not be identical to id:{P} ; however , the Abstract Closure that would result from evaluating id:{S} as a nt:{Pattern[~U]} ( nt:{Pattern[+U]} if id:{F} contains value:{\"u\"} ) must behave identically to the Abstract Closure given by the constructed object ' s [ [ RegExpMatcher ] ] internal slot . Multiple calls to this abstract operation using the same values for id:{P} and id:{F} must produce identical results ."
  [8051] (8427/1) Normal[8051] ??? "The code points code:{/} or any nt:{LineTerminator} occurring in the pattern shall be escaped in id:{S} as necessary to ensure that the string - concatenation of value:{\"/\"} , id:{S} , value:{\"/\"} , and id:{F} can be parsed ( in an appropriate lexical context ) as a nt:{RegularExpressionLiteral} that behaves identically to the constructed regular expression . For example , if id:{P} is value:{\"/\"} , then id:{S} could be value:{\"/\"} or value:{\"u002F\"} , among other possibilities , but not value:{\"/\"} , because code:{///} followed by id:{F} would be parsed as a nt:{SingleLineComment} rather than a nt:{RegularExpressionLiteral} . If id:{P} is the empty String , this specification can be met by letting id:{S} be value:{\"(?:)\"} ."
  [8052] (8428/2) Normal[8052] return S
  [8053] Exit[8053]
Algo: EvalDeclarationInstantiation [749]
  [8054] (8520/40) If[8054] (! (contains declaredVarNames vn))
  [8055] (8521/41) Normal[8055] append vn -> declaredVarNames
  [8056] LoopCont[8056]
  [8057] (8556/53) Call[8057] access __x30__ = (f "InstantiateFunctionObject" lexEnv)
  [8058] (8557/53) Normal[8058] let fo = __x30__
  [8059] Entry[8059]
  [8060] (8430/0) Call[8060] access __x0__ = (body "VarDeclaredNames")
  [8061] (8543/48) Call[8061] app __x25__ = (lexEnv.CreateImmutableBinding lexEnv dn true)
  [8062] (8544/48) Normal[8062] [? __x25__]
  [8063] LoopCont[8063]
  [8064] (8550/51) Loop[8064] (< __x28__ __x27__.length)
  [8065] (8434/2) If[8065] (= strict false)
  [8066] (8436/3) If[8066] (is-instance-of varEnv GlobalEnvironmentRecord)
  [8067] (8467/18) Normal[8067] let functionsToInitialize = (new [])
  [8068] (8579/64) Normal[8068] __x37__ = (+ __x37__ 1i)
  [8069] (8580/65) If[8069] (is-instance-of varEnv GlobalEnvironmentRecord)
  [8070] (8442/4) Normal[8070] let name = __x2__[__x3__]
  [8071] (8443/4) Normal[8071] __x3__ = (+ __x3__ 1i)
  [8072] (8501/34) If[8072] (|| (|| (is-instance-of d VariableDeclaration) (is-instance-of d ForBinding)) (is-instance-of d BindingIdentifier))
  [8073] (8503/35) Call[8073] access __x14__ = (d "BoundNames")
  [8074] LoopCont[8074]
  [8075] (8482/26) If[8075] (is-instance-of varEnv GlobalEnvironmentRecord)
  [8076] (8484/27) Call[8076] app __x11__ = (varEnv.CanDeclareGlobalFunction varEnv fn)
  [8077] (8490/29) Normal[8077] append fn -> declaredFunctionNames
  [8078] (8460/13) Call[8078] app __x7__ = (thisEnv.HasBinding thisEnv name)
  [8079] (8461/13) If[8079] (= __x7__ true)
  [8080] (8475/21) If[8080] (! (|| (|| (is-instance-of d VariableDeclaration) (is-instance-of d ForBinding)) (is-instance-of d BindingIdentifier)))
  [8081] (8477/22) Normal[8081] assert (|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration))
  [8082] LoopCont[8082]
  [8083] (8462/14) Normal[8083] throw SyntaxError
  [8084] LoopCont[8084]
  [8085] (8496/33) Normal[8085] let __x13__ = 0i
  [8086] (8497/33) Loop[8086] (< __x13__ __x12__.length)
  [8087] (8446/5) Normal[8087] throw SyntaxError
  [8088] LoopCont[8088]
  [8089] (8568/59) Normal[8089] let status = [! __x33__]
  [8090] (8569/61) Call[8090] app __x34__ = (varEnv.InitializeBinding varEnv fn fo)
  [8091] (8586/68) Normal[8091] let bindingExists = __x39__
  [8092] (8587/69) If[8092] (= bindingExists false)
  [8093] (8455/12) Normal[8093] let __x6__ = 0i
  [8094] (8456/12) Loop[8094] (< __x6__ __x5__.length)
  [8095] (8487/28) Normal[8095] throw TypeError
  [8096] LoopCont[8096]
  [8097] (8529/44) Loop[8097] (< __x20__ __x19__.length)
  [8098] (8504/35) Normal[8098] let __x15__ = __x14__
  [8099] (8531/44) Normal[8099] let d = __x19__[__x20__]
  [8100] (8532/44) Normal[8100] __x20__ = (+ __x20__ 1i)
  [8101] LoopCont[8101]
  [8102] (8450/9) Loop[8102] (! (= thisEnv varEnv))
  [8103] (8563/57) Call[8103] app __x32__ = (varEnv.HasBinding varEnv fn)
  [8104] (8564/57) Normal[8104] let bindingExists = __x32__
  [8105] (8582/66) Call[8105] app __x38__ = (varEnv.CreateGlobalVarBinding varEnv vn true)
  [8106] (8585/68) Call[8106] app __x39__ = (varEnv.HasBinding varEnv vn)
  [8107] (8538/46) Normal[8107] let dn = __x22__[__x23__]
  [8108] (8539/46) Normal[8108] __x23__ = (+ __x23__ 1i)
  [8109] (8508/35) Normal[8109] let vn = __x15__[__x16__]
  [8110] (8509/35) Normal[8110] __x16__ = (+ __x16__ 1i)
  [8111] (8594/73) Normal[8111] return ~empty~
  [8112] Exit[8112]
  [8113] LoopCont[8113]
  [8114] (8574/64) Normal[8114] let __x36__ = declaredVarNames
  [8115] (8575/64) Normal[8115] let __x37__ = 0i
  [8116] (8431/0) Normal[8116] let varNames = __x0__
  [8117] (8526/43) Normal[8117] let lexDeclarations = __x18__
  [8118] (8527/44) Normal[8118] let __x19__ = lexDeclarations
  [8119] (8438/4) Normal[8119] let __x2__ = varNames
  [8120] (8449/7) Normal[8120] let thisEnv = lexEnv
  [8121] (8540/47) Call[8121] access __x24__ = (d "IsConstantDeclaration")
  [8122] (8558/54) If[8122] (is-instance-of varEnv GlobalEnvironmentRecord)
  [8123] (8506/35) Loop[8123] (< __x16__ __x15__.length)
  [8124] (8576/64) Loop[8124] (< __x37__ __x36__.length)
  [8125] (8458/12) Normal[8125] let name = __x5__[__x6__]
  [8126] (8465/17) Normal[8126] thisEnv = thisEnv.OuterEnv
  [8127] (8470/20) Normal[8127] let __x9__ = __x8__.length
  [8128] (8471/20) Loop[8128] (< 0i __x9__)
  [8129] (8478/24) Call[8129] access __x10__ = (d "BoundNames")
  [8130] (8536/46) Loop[8130] (< __x23__ __x22__.length)
  [8131] (8514/38) Call[8131] app __x17__ = (varEnv.CanDeclareGlobalVar varEnv vn)
  [8132] (8515/38) Normal[8132] let vnDefinable = [? __x17__]
  [8133] (8552/51) Normal[8133] let f = __x27__[__x28__]
  [8134] (8553/51) Normal[8134] __x28__ = (+ __x28__ 1i)
  [8135] (8440/4) Loop[8135] (< __x3__ __x2__.length)
  [8136] (8499/33) Normal[8136] let d = __x12__[__x13__]
  [8137] (8525/43) Call[8137] access __x18__ = (body "LexicallyScopedDeclarations")
  [8138] (8567/59) Call[8138] app __x33__ = (varEnv.CreateMutableBinding varEnv fn true)
  [8139] (8548/51) Normal[8139] let __x27__ = functionsToInitialize
  [8140] (8445/5) If[8140] (= __x4__ true)
  [8141] (8591/72) Call[8141] app __x41__ = (varEnv.InitializeBinding varEnv vn undefined)
  [8142] (8592/72) Normal[8142] [! __x41__]
  [8143] (8480/25) If[8143] (! (contains declaredFunctionNames fn))
  [8144] (8590/70) Normal[8144] let status = [! __x40__]
  [8145] (8561/55) Normal[8145] [? __x31__]
  [8146] (8432/1) Call[8146] access __x1__ = (body "VarScopedDeclarations")
  [8147] (8486/28) If[8147] (= fnDefinable false)
  [8148] (8512/37) If[8148] (is-instance-of varEnv GlobalEnvironmentRecord)
  [8149] (8452/10) If[8149] (! (is-instance-of thisEnv ObjectEnvironmentRecord))
  [8150] (8469/20) Normal[8150] let __x8__ = varDeclarations
  [8151] (8473/20) Normal[8151] __x9__ = (- __x9__ 1i)
  [8152] (8494/32) Normal[8152] let declaredVarNames = (new [])
  [8153] (8459/12) Normal[8153] __x6__ = (+ __x6__ 1i)
  [8154] (8485/27) Normal[8154] let fnDefinable = [? __x11__]
  [8155] (8505/35) Normal[8155] let __x16__ = 0i
  [8156] (8578/64) Normal[8156] let vn = __x36__[__x37__]
  [8157] (8444/5) Call[8157] app __x4__ = (varEnv.HasLexicalDeclaration varEnv name)
  [8158] (8500/33) Normal[8158] __x13__ = (+ __x13__ 1i)
  [8159] (8541/47) If[8159] (= __x24__ true)
  [8160] (8572/63) Call[8160] app __x35__ = (varEnv.SetMutableBinding varEnv fn fo false)
  [8161] (8573/63) Normal[8161] [! __x35__]
  [8162] (8534/46) Normal[8162] let __x22__ = __x21__
  [8163] (8535/46) Normal[8163] let __x23__ = 0i
  [8164] (8528/44) Normal[8164] let __x20__ = 0i
  [8165] (8439/4) Normal[8165] let __x3__ = 0i
  [8166] (8479/24) Normal[8166] let fn = __x10__[0i]
  [8167] (8554/52) Call[8167] access __x29__ = (f "BoundNames")
  [8168] (8560/55) Call[8168] app __x31__ = (varEnv.CreateGlobalFunctionBinding varEnv fn fo true)
  [8169] (8547/50) Normal[8169] [? __x26__]
  [8170] (8516/39) If[8170] (= vnDefinable false)
  [8171] (8565/58) If[8171] (= bindingExists false)
  [8172] LoopCont[8172]
  [8173] (8433/1) Normal[8173] let varDeclarations = __x1__
  [8174] (8533/46) Call[8174] access __x21__ = (d "BoundNames")
  [8175] (8474/20) Normal[8175] let d = __x8__[__x9__]
  [8176] (8570/61) Normal[8176] [! __x34__]
  [8177] (8583/66) Normal[8177] [? __x38__]
  [8178] (8491/30) Normal[8178] prepend d -> functionsToInitialize
  [8179] (8510/36) If[8179] (! (contains declaredFunctionNames vn))
  [8180] (8454/12) Normal[8180] let __x5__ = varNames
  [8181] (8549/51) Normal[8181] let __x28__ = 0i
  [8182] (8495/33) Normal[8182] let __x12__ = varDeclarations
  [8183] (8517/39) Normal[8183] throw TypeError
  [8184] (8589/70) Call[8184] app __x40__ = (varEnv.CreateMutableBinding varEnv vn true)
  [8185] (8468/19) Normal[8185] let declaredFunctionNames = (new [])
  [8186] (8555/52) Normal[8186] let fn = __x29__[0i]
  [8187] (8546/50) Call[8187] app __x26__ = (lexEnv.CreateMutableBinding lexEnv dn false)
Algo: Evaluate [750]
  [8188] Entry[8188]
  [8189] (8596/1) Normal[8189] assert (|| (= module.Status ~linked~) (= module.Status ~evaluated~))
  [8190] (8600/4) Call[8190] app __x1__ = (IsAbruptCompletion result)
  [8191] (8601/4) If[8191] __x1__
  [8192] (8607/5) Normal[8192] let m = __x2__[__x3__]
  [8193] (8608/5) Normal[8193] __x3__ = (+ __x3__ 1i)
  [8194] (8611/8) Normal[8194] m.EvaluationError = result
  [8195] LoopCont[8195]
  [8196] (8617/13) Normal[8196] return undefined
  [8197] Exit[8197]
  [8198] (8597/2) Normal[8198] let stack = (new [])
  [8199] (8603/5) Normal[8199] let __x2__ = stack
  [8200] (8615/11) Normal[8200] assert (&& (= module.Status ~evaluated~) (= module.EvaluationError undefined))
  [8201] (8605/5) Loop[8201] (< __x3__ __x2__.length)
  [8202] (8612/9) Normal[8202] assert (&& (= module.Status ~evaluated~) (= module.EvaluationError result))
  [8203] (8610/7) Normal[8203] m.Status = ~evaluated~
  [8204] (8598/3) Call[8204] app __x0__ = (InnerModuleEvaluation module stack 0i)
  [8205] (8613/10) Normal[8205] return result
  [8206] (8609/6) Normal[8206] assert (= m.Status ~evaluating~)
  [8207] (8604/5) Normal[8207] let __x3__ = 0i
  [8208] (8599/3) Normal[8208] let result = __x0__
  [8209] (8616/12) Normal[8209] assert (= stack.length 0i)
Algo: EvaluateCall [751]
  [8210] Entry[8210]
  [8211] (8619/0) If[8211] (is-instance-of ref ReferenceRecord)
  [8212] (8625/2) Normal[8212] let thisValue = __x1__
  [8213] (8632/9) Call[8213] access __x3__ = (arguments "ArgumentListEvaluation")
  [8214] (8631/0) Normal[8214] let thisValue = undefined
  [8215] (8635/10) Normal[8215] throw TypeError
  [8216] (8637/11) Call[8216] app __x4__ = (IsCallable func)
  [8217] (8644/12) Normal[8217] __x5__
  [8218] (8646/13) Call[8218] app __x6__ = (Call func thisValue argList)
  [8219] (8621/1) Call[8219] app __x0__ = (IsPropertyReference ref)
  [8220] (8627/4) Normal[8220] let refEnv = ref.Base
  [8221] (8628/5) Normal[8221] assert (is-instance-of refEnv EnvironmentRecord)
  [8222] (8647/13) Normal[8222] let result = __x6__
  [8223] (8630/6) Normal[8223] let thisValue = __x2__
  [8224] (8634/10) If[8224] (! (= (typeof func) Object))
  [8225] (8622/1) If[8225] (= __x0__ true)
  [8226] (8639/11) Normal[8226] throw TypeError
  [8227] (8641/12) If[8227] (= tailPosition true)
  [8228] (8648/16) Normal[8228] return result
  [8229] (8633/9) Normal[8229] let argList = [? __x3__]
  [8230] (8629/6) Call[8230] app __x2__ = (refEnv.WithBaseObject refEnv)
  [8231] (8624/2) Call[8231] app __x1__ = (GetThisValue ref)
  [8232] (8643/12) Call[8232] app __x5__ = (PrepareForTailCall)
  [8233] (8638/11) If[8233] (= __x4__ false)
  [8234] Exit[8234]
Algo: EvaluateNew [752]
  [8235] Entry[8235]
  [8236] (8650/0) Normal[8236] assert (|| (is-instance-of constructExpr NewExpression) (is-instance-of constructExpr MemberExpression))
  [8237] (8654/3) Call[8237] app __x1__ = (GetValue ref)
  [8238] (8655/3) Normal[8238] let constructor = [? __x1__]
  [8239] (8660/6) Normal[8239] let argList = [? __x2__]
  [8240] (8661/7) Call[8240] app __x3__ = (IsConstructor constructor)
  [8241] (8665/8) Call[8241] app __x4__ = (Construct constructor argList)
  [8242] (8666/8) Normal[8242] return [? __x4__]
  [8243] (8651/1) Normal[8243] assert (|| (= arguments ~empty~) (is-instance-of arguments Arguments))
  [8244] (8656/4) If[8244] (= arguments ~empty~)
  [8245] (8659/6) Call[8245] access __x2__ = (arguments "ArgumentListEvaluation")
  [8246] (8663/7) Normal[8246] throw TypeError
  [8247] (8652/2) Call[8247] access __x0__ = (constructExpr "Evaluation")
  [8248] (8662/7) If[8248] (= __x3__ false)
  [8249] (8657/4) Normal[8249] let argList = (new [])
  [8250] (8653/2) Normal[8250] let ref = __x0__
  [8251] Exit[8251]
Algo: EvaluatePropertyAccessWithExpressionKey [753]
  [8252] Entry[8252]
  [8253] (8668/0) Call[8253] access __x0__ = (expression "Evaluation")
  [8254] (8672/2) Call[8254] app __x2__ = (RequireObjectCoercible baseValue)
  [8255] (8673/2) Normal[8255] let bv = [? __x2__]
  [8256] (8669/0) Normal[8256] let propertyNameReference = __x0__
  [8257] (8674/3) Call[8257] app __x3__ = (ToPropertyKey propertyNameValue)
  [8258] (8676/4) Normal[8258] return (new ReferenceRecord("Base" -> bv, "ReferencedName" -> propertyKey, "Strict" -> strict, "ThisValue" -> ~empty~))
  [8259] Exit[8259]
  [8260] (8670/1) Call[8260] app __x1__ = (GetValue propertyNameReference)
  [8261] (8675/3) Normal[8261] let propertyKey = [? __x3__]
  [8262] (8671/1) Normal[8262] let propertyNameValue = [? __x1__]
Algo: EvaluatePropertyAccessWithIdentifierKey [754]
  [8263] Entry[8263]
  [8264] (8678/0) Normal[8264] assert (is-instance-of identifierName IdentifierName)
  [8265] (8682/2) Normal[8265] let propertyNameString = __x1__
  [8266] (8683/3) Normal[8266] return (new ReferenceRecord("Base" -> bv, "ReferencedName" -> propertyNameString, "Strict" -> strict, "ThisValue" -> ~empty~))
  [8267] (8679/1) Call[8267] app __x0__ = (RequireObjectCoercible baseValue)
  [8268] Exit[8268]
  [8269] (8680/1) Normal[8269] let bv = [? __x0__]
  [8270] (8681/2) Call[8270] access __x1__ = (identifierName "StringValue")
Algo: EvaluateStringOrNumericBinaryExpression [755]
  [8271] Entry[8271]
  [8272] (8685/0) Call[8272] access __x0__ = (leftOperand "Evaluation")
  [8273] (8689/2) Call[8273] access __x2__ = (rightOperand "Evaluation")
  [8274] (8690/2) Normal[8274] let rref = __x2__
  [8275] (8694/4) Normal[8275] return [? __x4__]
  [8276] Exit[8276]
  [8277] (8686/0) Normal[8277] let lref = __x0__
  [8278] (8691/3) Call[8278] app __x3__ = (GetValue rref)
  [8279] (8693/4) Call[8279] app __x4__ = (ApplyStringOrNumericBinaryOperator lval opText rval)
  [8280] (8687/1) Call[8280] app __x1__ = (GetValue lref)
  [8281] (8692/3) Normal[8281] let rval = [? __x3__]
  [8282] (8688/1) Normal[8282] let lval = [? __x1__]
Algo: EventSet [756]
  [8283] Entry[8283]
  [8284] (8696/0) Normal[8284] let events = (new [])
  [8285] (8701/1) Normal[8285] let aer = __x0__[__x1__]
  [8286] (8702/1) Normal[8286] __x1__ = (+ __x1__ 1i)
  [8287] (8707/2) Normal[8287] let E = __x2__[__x3__]
  [8288] (8708/2) Normal[8288] __x3__ = (+ __x3__ 1i)
  [8289] LoopCont[8289]
  [8290] (8699/1) Loop[8290] (< __x1__ __x0__.length)
  [8291] (8697/1) Normal[8291] let __x0__ = execution.EventsRecords
  [8292] (8703/2) Normal[8292] let __x2__ = aer.EventList
  [8293] (8705/2) Loop[8293] (< __x3__ __x2__.length)
  [8294] LoopCont[8294]
  [8295] (8698/1) Normal[8295] let __x1__ = 0i
  [8296] (8709/3) Normal[8296] append E -> events
  [8297] (8704/2) Normal[8297] let __x3__ = 0i
  [8298] (8710/4) Normal[8298] return events
  [8299] Exit[8299]
Algo: ExecuteModule [757]
  [8300] Entry[8300]
  [8301] (8712/0) Normal[8301] CONTEXT = null
  [8302] (8716/3) Call[8302] access __x0__ = (module.ECMAScriptCode "Evaluation")
  [8303] (8717/3) Normal[8303] let result = __x0__
  [8304] (8722/5) Normal[8304] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [8305] (8723/6) Normal[8305] return result
  [8306] (8713/1) Normal[8306] let moduleContext = module.Context
  [8307] (8718/4) Normal[8307] CONTEXT = null
  [8308] (8720/4) Normal[8308] (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i))
  [8309] (8714/2) Normal[8309] append moduleContext -> EXECUTION_STACK
  [8310] (8719/4) If[8310] (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] moduleContext)
  [8311] (8715/2) Normal[8311] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [8312] Exit[8312]
Algo: Execution [758]
  [8313] Entry[8313]
  [8314] (8725/0) Normal[8314] let __x0__ = S
  [8315] (8730/0) Normal[8315] __x1__ = (+ __x1__ 1i)
  [8316] (8731/1) Normal[8316] ??? "For each WeakRef id:{ref} such that id:{ref} . [ [ WeakRefTarget ] ] is id:{obj} , do in:{} out:{}"
  [8317] LoopCont[8317]
  [8318] (8727/0) Loop[8318] (< __x1__ __x0__.length)
  [8319] (8726/0) Normal[8319] let __x1__ = 0i
  [8320] (8732/3) Normal[8320] ??? "For each FinalizationRegistry id:{fg} such that id:{fg} . [ [ Cells ] ] contains a Record id:{cell} such that id:{cell} . [ [ WeakRefTarget ] ] is id:{obj} , do in:{} out:{}"
  [8321] (8734/9) Normal[8321] ??? "For each WeakSet id:{set} such that id:{set} . [ [ WeakSetData ] ] contains id:{obj} , do in:{} out:{}"
  [8322] (8733/6) Normal[8322] ??? "For each WeakMap id:{map} such that id:{map} . [ [ WeakMapData ] ] contains a Record id:{r} such that id:{r} . [ [ Key ] ] is id:{obj} , do in:{} out:{}"
  [8323] (8729/0) Normal[8323] let obj = __x0__[__x1__]
  [8324] Exit[8324]
Algo: ExponentiationExpression[1,0].AssignmentTargetType [759]
  [8325] Entry[8325]
  [8326] (8735/0) Normal[8326] return ~invalid~
  [8327] Exit[8327]
Algo: ExponentiationExpression[1,0].Evaluation [760]
  [8328] Entry[8328]
  [8329] (8737/0) Call[8329] app __x0__ = (EvaluateStringOrNumericBinaryExpression UpdateExpression "**" ExponentiationExpression)
  [8330] (8738/0) Normal[8330] return [? __x0__]
  [8331] Exit[8331]
Algo: ExponentiationExpression[1,0].HasCallInTailPosition [761]
  [8332] Entry[8332]
  [8333] (8739/0) Normal[8333] return false
  [8334] Exit[8334]
Algo: ExponentiationExpression[1,0].IsFunctionDefinition [762]
  [8335] Entry[8335]
  [8336] (8740/0) Normal[8336] return false
  [8337] Exit[8337]
Algo: ExportDeclaration[0,0].BoundNames [763]
  [8338] Entry[8338]
  [8339] (8742)Normal[8339] let ExportDeclaration = this
  [8340] (8743/0) Normal[8340] return (new [])
  [8341] Exit[8341]
Algo: ExportDeclaration[0,0].Evaluation [764]
  [8342] Entry[8342]
  [8343] (8745)Normal[8343] let ExportDeclaration = this
  [8344] (8746/0) Normal[8344] return ~empty~
  [8345] Exit[8345]
Algo: ExportDeclaration[0,0].ExportEntries [765]
  [8346] Entry[8346]
  [8347] (8748)Normal[8347] let ExportDeclaration = this
  [8348] (8752/1) Normal[8348] return __x1__
  [8349] Exit[8349]
  [8350] (8749/0) Call[8350] access __x0__ = (FromClause "ModuleRequests")
  [8351] (8750/0) Normal[8351] let module = __x0__[0i]
  [8352] (8751/1) Call[8352] access __x1__ = (ExportFromClause "ExportEntriesForModule" module)
Algo: ExportDeclaration[0,0].ExportedBindings [766]
  [8353] Entry[8353]
  [8354] (8754)Normal[8354] let ExportDeclaration = this
  [8355] (8755/0) Normal[8355] return (new [])
  [8356] Exit[8356]
Algo: ExportDeclaration[0,0].ExportedNames [767]
  [8357] Entry[8357]
  [8358] (8757)Normal[8358] let ExportDeclaration = this
  [8359] (8758/0) Call[8359] access __x0__ = (ExportFromClause "ExportedNames")
  [8360] (8759/0) Normal[8360] return __x0__
  [8361] Exit[8361]
Algo: ExportDeclaration[0,0].IsConstantDeclaration [768]
  [8362] Entry[8362]
  [8363] (8761)Normal[8363] let ExportDeclaration = this
  [8364] (8762/0) Normal[8364] return false
  [8365] Exit[8365]
Algo: ExportDeclaration[0,0].LexicallyScopedDeclarations [769]
  [8366] Entry[8366]
  [8367] (8764)Normal[8367] let ExportDeclaration = this
  [8368] (8765/0) Normal[8368] return (new [])
  [8369] Exit[8369]
Algo: ExportDeclaration[0,0].ModuleRequests [770]
  [8370] Entry[8370]
  [8371] (8767)Normal[8371] let ExportDeclaration = this
  [8372] (8768/0) Call[8372] access __x0__ = (FromClause "ModuleRequests")
  [8373] (8769/0) Normal[8373] return __x0__
  [8374] Exit[8374]
Algo: ExportDeclaration[1,0].BoundNames [771]
  [8375] Entry[8375]
  [8376] (8771)Normal[8376] let ExportDeclaration = this
  [8377] (8772/0) Normal[8377] return (new [])
  [8378] Exit[8378]
Algo: ExportDeclaration[1,0].EarlyErrors [772]
  [8379] Entry[8379]
  [8380] (8774)Normal[8380] let ExportDeclaration = this
  [8381] (8775/0) Normal[8381] ??? "For each nt:{IdentifierName} id:{n} in ReferencedBindings of nt:{NamedExports} : It is a Syntax Error if StringValue of id:{n} is a nt:{ReservedWord} or if the StringValue of id:{n} is one of : value:{\"implements\"} , value:{\"interface\"} , value:{\"let\"} , value:{\"package\"} , value:{\"private\"} , value:{\"protected\"} , value:{\"public\"} , or value:{\"static\"} ."
  [8382] Exit[8382]
Algo: ExportDeclaration[1,0].Evaluation [773]
  [8383] Entry[8383]
  [8384] (8777)Normal[8384] let ExportDeclaration = this
  [8385] (8778/0) Normal[8385] return ~empty~
  [8386] Exit[8386]
Algo: ExportDeclaration[1,0].ExportEntries [774]
  [8387] Entry[8387]
  [8388] (8780)Normal[8388] let ExportDeclaration = this
  [8389] (8781/0) Call[8389] access __x0__ = (NamedExports "ExportEntriesForModule" null)
  [8390] (8782/0) Normal[8390] return __x0__
  [8391] Exit[8391]
Algo: ExportDeclaration[1,0].ExportedBindings [775]
  [8392] Entry[8392]
  [8393] (8784)Normal[8393] let ExportDeclaration = this
  [8394] (8785/0) Call[8394] access __x0__ = (NamedExports "ExportedBindings")
  [8395] (8786/0) Normal[8395] return __x0__
  [8396] Exit[8396]
Algo: ExportDeclaration[1,0].IsConstantDeclaration [776]
  [8397] Entry[8397]
  [8398] (8788)Normal[8398] let ExportDeclaration = this
  [8399] (8789/0) Normal[8399] return false
  [8400] Exit[8400]
Algo: ExportDeclaration[1,0].LexicallyScopedDeclarations [777]
  [8401] Entry[8401]
  [8402] (8791)Normal[8402] let ExportDeclaration = this
  [8403] (8792/0) Normal[8403] return (new [])
  [8404] Exit[8404]
Algo: ExportDeclaration[1,0].ModuleRequests [778]
  [8405] Entry[8405]
  [8406] (8794)Normal[8406] let ExportDeclaration = this
  [8407] (8795/0) Normal[8407] return (new [])
  [8408] Exit[8408]
Algo: ExportDeclaration[2,0].BoundNames [779]
  [8409] Entry[8409]
  [8410] (8797)Normal[8410] let ExportDeclaration = this
  [8411] (8798/0) Call[8411] access __x0__ = (VariableStatement "BoundNames")
  [8412] (8799/0) Normal[8412] return __x0__
  [8413] Exit[8413]
Algo: ExportDeclaration[2,0].Evaluation [780]
  [8414] Entry[8414]
  [8415] (8801)Normal[8415] let ExportDeclaration = this
  [8416] (8802/0) Call[8416] access __x0__ = (VariableStatement "Evaluation")
  [8417] (8803/0) Normal[8417] return __x0__
  [8418] Exit[8418]
Algo: ExportDeclaration[2,0].ExportEntries [781]
  [8419] Entry[8419]
  [8420] (8805)Normal[8420] let ExportDeclaration = this
  [8421] (8809/2) Normal[8421] let __x1__ = names
  [8422] (8810/2) Normal[8422] let __x2__ = 0i
  [8423] (8815/3) Normal[8423] append (new ExportEntryRecord("ModuleRequest" -> null, "ImportName" -> null, "LocalName" -> name, "ExportName" -> name)) -> entries
  [8424] LoopCont[8424]
  [8425] (8806/0) Normal[8425] let entries = (new [])
  [8426] (8811/2) Loop[8426] (< __x2__ __x1__.length)
  [8427] (8814/2) Normal[8427] __x2__ = (+ __x2__ 1i)
  [8428] (8807/1) Call[8428] access __x0__ = (VariableStatement "BoundNames")
  [8429] (8816/4) Normal[8429] return entries
  [8430] Exit[8430]
  [8431] (8813/2) Normal[8431] let name = __x1__[__x2__]
  [8432] (8808/1) Normal[8432] let names = __x0__
Algo: ExportDeclaration[2,0].ExportedBindings [782]
  [8433] Entry[8433]
  [8434] (8818)Normal[8434] let ExportDeclaration = this
  [8435] (8819/0) Call[8435] access __x0__ = (VariableStatement "BoundNames")
  [8436] (8820/0) Normal[8436] return __x0__
  [8437] Exit[8437]
Algo: ExportDeclaration[2,0].ExportedNames [783]
  [8438] Entry[8438]
  [8439] (8822)Normal[8439] let ExportDeclaration = this
  [8440] (8823/0) Call[8440] access __x0__ = (VariableStatement "BoundNames")
  [8441] (8824/0) Normal[8441] return __x0__
  [8442] Exit[8442]
Algo: ExportDeclaration[2,0].LexicallyScopedDeclarations [784]
  [8443] Entry[8443]
  [8444] (8826)Normal[8444] let ExportDeclaration = this
  [8445] (8827/0) Normal[8445] return (new [])
  [8446] Exit[8446]
Algo: ExportDeclaration[2,0].ModuleRequests [785]
  [8447] Entry[8447]
  [8448] (8829)Normal[8448] let ExportDeclaration = this
  [8449] (8830/0) Normal[8449] return (new [])
  [8450] Exit[8450]
Algo: ExportDeclaration[3,0].BoundNames [786]
  [8451] Entry[8451]
  [8452] (8832)Normal[8452] let ExportDeclaration = this
  [8453] (8833/0) Call[8453] access __x0__ = (Declaration "BoundNames")
  [8454] (8834/0) Normal[8454] return __x0__
  [8455] Exit[8455]
Algo: ExportDeclaration[3,0].Evaluation [787]
  [8456] Entry[8456]
  [8457] (8836)Normal[8457] let ExportDeclaration = this
  [8458] (8837/0) Call[8458] access __x0__ = (Declaration "Evaluation")
  [8459] (8838/0) Normal[8459] return __x0__
  [8460] Exit[8460]
Algo: ExportDeclaration[3,0].ExportEntries [788]
  [8461] Entry[8461]
  [8462] (8840)Normal[8462] let ExportDeclaration = this
  [8463] (8844/2) Normal[8463] let __x1__ = names
  [8464] (8845/2) Normal[8464] let __x2__ = 0i
  [8465] (8850/3) Normal[8465] append (new ExportEntryRecord("ModuleRequest" -> null, "ImportName" -> null, "LocalName" -> name, "ExportName" -> name)) -> entries
  [8466] LoopCont[8466]
  [8467] (8841/0) Normal[8467] let entries = (new [])
  [8468] (8846/2) Loop[8468] (< __x2__ __x1__.length)
  [8469] (8849/2) Normal[8469] __x2__ = (+ __x2__ 1i)
  [8470] (8842/1) Call[8470] access __x0__ = (Declaration "BoundNames")
  [8471] (8851/4) Normal[8471] return entries
  [8472] Exit[8472]
  [8473] (8848/2) Normal[8473] let name = __x1__[__x2__]
  [8474] (8843/1) Normal[8474] let names = __x0__
Algo: ExportDeclaration[3,0].ExportedBindings [789]
  [8475] Entry[8475]
  [8476] (8853)Normal[8476] let ExportDeclaration = this
  [8477] (8854/0) Call[8477] access __x0__ = (Declaration "BoundNames")
  [8478] (8855/0) Normal[8478] return __x0__
  [8479] Exit[8479]
Algo: ExportDeclaration[3,0].ExportedNames [790]
  [8480] Entry[8480]
  [8481] (8857)Normal[8481] let ExportDeclaration = this
  [8482] (8858/0) Call[8482] access __x0__ = (Declaration "BoundNames")
  [8483] (8859/0) Normal[8483] return __x0__
  [8484] Exit[8484]
Algo: ExportDeclaration[3,0].LexicallyScopedDeclarations [791]
  [8485] Entry[8485]
  [8486] (8861)Normal[8486] let ExportDeclaration = this
  [8487] (8862/0) Call[8487] access __x0__ = (Declaration "DeclarationPart")
  [8488] (8863/0) Normal[8488] return (new [__x0__])
  [8489] Exit[8489]
Algo: ExportDeclaration[3,0].ModuleRequests [792]
  [8490] Entry[8490]
  [8491] (8865)Normal[8491] let ExportDeclaration = this
  [8492] (8866/0) Normal[8492] return (new [])
  [8493] Exit[8493]
Algo: ExportDeclaration[4,0].BoundNames [793]
  [8494] Entry[8494]
  [8495] (8868)Normal[8495] let ExportDeclaration = this
  [8496] (8873/1) Normal[8496] append "*default*" -> declarationNames
  [8497] (8874/2) Normal[8497] return declarationNames
  [8498] (8869/0) Call[8498] access __x0__ = (HoistableDeclaration "BoundNames")
  [8499] Exit[8499]
  [8500] (8870/0) Normal[8500] let declarationNames = __x0__
  [8501] (8871/1) If[8501] (contains declarationNames "*default*")
Algo: ExportDeclaration[4,0].Evaluation [794]
  [8502] Entry[8502]
  [8503] (8876)Normal[8503] let ExportDeclaration = this
  [8504] (8877/0) Call[8504] access __x0__ = (HoistableDeclaration "Evaluation")
  [8505] (8878/0) Normal[8505] return __x0__
  [8506] Exit[8506]
Algo: ExportDeclaration[4,0].ExportEntries [795]
  [8507] Entry[8507]
  [8508] (8880)Normal[8508] let ExportDeclaration = this
  [8509] (8884/2) Normal[8509] return (new [(new ExportEntryRecord("ModuleRequest" -> null, "ImportName" -> null, "LocalName" -> localName, "ExportName" -> "default"))])
  [8510] Exit[8510]
  [8511] (8881/0) Call[8511] access __x0__ = (HoistableDeclaration "BoundNames")
  [8512] (8882/0) Normal[8512] let names = __x0__
  [8513] (8883/1) Normal[8513] let localName = names[0i]
Algo: ExportDeclaration[4,0].ExportedBindings [796]
  [8514] Entry[8514]
  [8515] (8886)Normal[8515] let ExportDeclaration = this
  [8516] (8887/0) Call[8516] access __x0__ = (this "BoundNames")
  [8517] (8888/0) Normal[8517] return __x0__
  [8518] Exit[8518]
Algo: ExportDeclaration[4,0].ExportedNames [797]
  [8519] Entry[8519]
  [8520] (8890)Normal[8520] let ExportDeclaration = this
  [8521] (8891/0) Normal[8521] return (new ["default"])
  [8522] Exit[8522]
Algo: ExportDeclaration[4,0].LexicallyScopedDeclarations [798]
  [8523] Entry[8523]
  [8524] (8893)Normal[8524] let ExportDeclaration = this
  [8525] (8894/0) Call[8525] access __x0__ = (HoistableDeclaration "DeclarationPart")
  [8526] (8895/0) Normal[8526] return (new [__x0__])
  [8527] Exit[8527]
Algo: ExportDeclaration[4,0].ModuleRequests [799]
  [8528] Entry[8528]
  [8529] (8897)Normal[8529] let ExportDeclaration = this
  [8530] (8898/0) Normal[8530] return (new [])
  [8531] Exit[8531]
Algo: ExportDeclaration[5,0].BoundNames [800]
  [8532] Entry[8532]
  [8533] (8900)Normal[8533] let ExportDeclaration = this
  [8534] (8905/1) Normal[8534] append "*default*" -> declarationNames
  [8535] (8906/2) Normal[8535] return declarationNames
  [8536] (8901/0) Call[8536] access __x0__ = (ClassDeclaration "BoundNames")
  [8537] Exit[8537]
  [8538] (8902/0) Normal[8538] let declarationNames = __x0__
  [8539] (8903/1) If[8539] (contains declarationNames "*default*")
Algo: ExportDeclaration[5,0].Evaluation [801]
  [8540] Entry[8540]
  [8541] (8908)Normal[8541] let ExportDeclaration = this
  [8542] (8912/1) Normal[8542] let className = __x1__[0i]
  [8543] (8913/2) If[8543] (= className "*default*")
  [8544] (8919/5) Normal[8544] return ~empty~
  [8545] Exit[8545]
  [8546] (8909/0) Call[8546] access __x0__ = (ClassDeclaration "BindingClassDeclarationEvaluation")
  [8547] (8915/3) Normal[8547] let env = CONTEXT.LexicalEnvironment
  [8548] (8917/4) Normal[8548] [? __x2__]
  [8549] (8910/0) Normal[8549] let value = [? __x0__]
  [8550] (8916/4) Call[8550] app __x2__ = (InitializeBoundName "*default*" value env)
  [8551] (8911/1) Call[8551] access __x1__ = (ClassDeclaration "BoundNames")
Algo: ExportDeclaration[5,0].ExportEntries [802]
  [8552] Entry[8552]
  [8553] (8921)Normal[8553] let ExportDeclaration = this
  [8554] (8925/2) Normal[8554] return (new [(new ExportEntryRecord("ModuleRequest" -> null, "ImportName" -> null, "LocalName" -> localName, "ExportName" -> "default"))])
  [8555] Exit[8555]
  [8556] (8922/0) Call[8556] access __x0__ = (ClassDeclaration "BoundNames")
  [8557] (8923/0) Normal[8557] let names = __x0__
  [8558] (8924/1) Normal[8558] let localName = names[0i]
Algo: ExportDeclaration[5,0].ExportedBindings [803]
  [8559] Entry[8559]
  [8560] (8927)Normal[8560] let ExportDeclaration = this
  [8561] (8928/0) Call[8561] access __x0__ = (this "BoundNames")
  [8562] (8929/0) Normal[8562] return __x0__
  [8563] Exit[8563]
Algo: ExportDeclaration[5,0].ExportedNames [804]
  [8564] Entry[8564]
  [8565] (8931)Normal[8565] let ExportDeclaration = this
  [8566] (8932/0) Normal[8566] return (new ["default"])
  [8567] Exit[8567]
Algo: ExportDeclaration[5,0].LexicallyScopedDeclarations [805]
  [8568] Entry[8568]
  [8569] (8934)Normal[8569] let ExportDeclaration = this
  [8570] (8935/0) Normal[8570] return (new [ClassDeclaration])
  [8571] Exit[8571]
Algo: ExportDeclaration[5,0].ModuleRequests [806]
  [8572] Entry[8572]
  [8573] (8937)Normal[8573] let ExportDeclaration = this
  [8574] (8938/0) Normal[8574] return (new [])
  [8575] Exit[8575]
Algo: ExportDeclaration[6,0].BoundNames [807]
  [8576] Entry[8576]
  [8577] (8940)Normal[8577] let ExportDeclaration = this
  [8578] (8941/0) Normal[8578] return (new ["*default*"])
  [8579] Exit[8579]
Algo: ExportDeclaration[6,0].Evaluation [808]
  [8580] Entry[8580]
  [8581] (8943)Normal[8581] let ExportDeclaration = this
  [8582] (8948/1) Normal[8582] let value = [? __x1__]
  [8583] (8954/5) Normal[8583] let env = CONTEXT.LexicalEnvironment
  [8584] (8955/6) Call[8584] app __x4__ = (InitializeBoundName "*default*" value env)
  [8585] (8944/0) Call[8585] app __x0__ = (IsAnonymousFunctionDefinition AssignmentExpression)
  [8586] (8950/3) Call[8586] access __x2__ = (AssignmentExpression "Evaluation")
  [8587] (8951/3) Normal[8587] let rhs = __x2__
  [8588] (8953/4) Normal[8588] let value = [? __x3__]
  [8589] (8957/7) Normal[8589] return ~empty~
  [8590] Exit[8590]
  [8591] (8945/0) If[8591] (= __x0__ true)
  [8592] (8956/6) Normal[8592] [? __x4__]
  [8593] (8952/4) Call[8593] app __x3__ = (GetValue rhs)
  [8594] (8947/1) Call[8594] access __x1__ = (AssignmentExpression "NamedEvaluation" "default")
Algo: ExportDeclaration[6,0].ExportEntries [809]
  [8595] Entry[8595]
  [8596] (8959)Normal[8596] let ExportDeclaration = this
  [8597] (8960/0) Normal[8597] let entry = (new ExportEntryRecord("ModuleRequest" -> null, "ImportName" -> null, "LocalName" -> "*default*", "ExportName" -> "default"))
  [8598] (8961/1) Normal[8598] return (new [entry])
  [8599] Exit[8599]
Algo: ExportDeclaration[6,0].ExportedBindings [810]
  [8600] Entry[8600]
  [8601] (8963)Normal[8601] let ExportDeclaration = this
  [8602] (8964/0) Call[8602] access __x0__ = (this "BoundNames")
  [8603] (8965/0) Normal[8603] return __x0__
  [8604] Exit[8604]
Algo: ExportDeclaration[6,0].ExportedNames [811]
  [8605] Entry[8605]
  [8606] (8967)Normal[8606] let ExportDeclaration = this
  [8607] (8968/0) Normal[8607] return (new ["default"])
  [8608] Exit[8608]
Algo: ExportDeclaration[6,0].IsConstantDeclaration [812]
  [8609] Entry[8609]
  [8610] (8970)Normal[8610] let ExportDeclaration = this
  [8611] (8971/0) Normal[8611] return false
  [8612] Exit[8612]
Algo: ExportDeclaration[6,0].LexicallyScopedDeclarations [813]
  [8613] Entry[8613]
  [8614] (8973)Normal[8614] let ExportDeclaration = this
  [8615] (8974/0) Normal[8615] return (new [this])
  [8616] Exit[8616]
Algo: ExportDeclaration[6,0].ModuleRequests [814]
  [8617] Entry[8617]
  [8618] (8976)Normal[8618] let ExportDeclaration = this
  [8619] (8977/0) Normal[8619] return (new [])
  [8620] Exit[8620]
Algo: ExportFromClause[0,0].ExportEntriesForModule [815]
  [8621] Entry[8621]
  [8622] (8979)Normal[8622] let ExportFromClause = this
  [8623] (8980/0) Normal[8623] let entry = (new ExportEntryRecord("ModuleRequest" -> module, "ImportName" -> "*", "LocalName" -> null, "ExportName" -> null))
  [8624] (8981/1) Normal[8624] return (new [entry])
  [8625] Exit[8625]
Algo: ExportFromClause[0,0].ExportedNames [816]
  [8626] Entry[8626]
  [8627] (8983)Normal[8627] let ExportFromClause = this
  [8628] (8984/0) Normal[8628] return (new [])
  [8629] Exit[8629]
Algo: ExportFromClause[1,0].ExportEntriesForModule [817]
  [8630] Entry[8630]
  [8631] (8986)Normal[8631] let ExportFromClause = this
  [8632] (8990/2) Normal[8632] return (new [entry])
  [8633] Exit[8633]
  [8634] (8987/0) Call[8634] access __x0__ = (IdentifierName "StringValue")
  [8635] (8988/0) Normal[8635] let exportName = __x0__
  [8636] (8989/1) Normal[8636] let entry = (new ExportEntryRecord("ModuleRequest" -> module, "ImportName" -> "*", "LocalName" -> null, "ExportName" -> exportName))
Algo: ExportFromClause[1,0].ExportedNames [818]
  [8637] Entry[8637]
  [8638] (8992)Normal[8638] let ExportFromClause = this
  [8639] (8993/0) Call[8639] access __x0__ = (IdentifierName "StringValue")
  [8640] (8994/0) Normal[8640] return (new [__x0__])
  [8641] Exit[8641]
Algo: ExportFromClause[2,0].ExportedNames [819]
  [8642] Entry[8642]
  [8643] (8996)Normal[8643] let ExportFromClause = this
  [8644] (8997/0) Call[8644] access __x0__ = (NamedExports "ExportedNames")
  [8645] (8998/0) Normal[8645] return __x0__
  [8646] Exit[8646]
Algo: ExportSpecifier[0,0].ExportEntriesForModule [820]
  [8647] Entry[8647]
  [8648] (9000)Normal[8648] let ExportSpecifier = this
  [8649] (9005/2) Normal[8649] let localName = sourceName
  [8650] (9006/3) Normal[8650] let importName = null
  [8651] (9001/0) Call[8651] access __x0__ = (IdentifierName "StringValue")
  [8652] (9010/7) Normal[8652] return (new [(new ExportEntryRecord("ModuleRequest" -> module, "ImportName" -> importName, "LocalName" -> localName, "ExportName" -> sourceName))])
  [8653] Exit[8653]
  [8654] (9002/0) Normal[8654] let sourceName = __x0__
  [8655] (9008/5) Normal[8655] let localName = null
  [8656] (9009/6) Normal[8656] let importName = sourceName
  [8657] (9003/1) If[8657] (= module null)
Algo: ExportSpecifier[0,0].ExportedBindings [821]
  [8658] Entry[8658]
  [8659] (9012)Normal[8659] let ExportSpecifier = this
  [8660] (9013/0) Call[8660] access __x0__ = (IdentifierName "StringValue")
  [8661] (9014/0) Normal[8661] return (new [__x0__])
  [8662] Exit[8662]
Algo: ExportSpecifier[0,0].ExportedNames [822]
  [8663] Entry[8663]
  [8664] (9016)Normal[8664] let ExportSpecifier = this
  [8665] (9017/0) Call[8665] access __x0__ = (IdentifierName "StringValue")
  [8666] (9018/0) Normal[8666] return (new [__x0__])
  [8667] Exit[8667]
Algo: ExportSpecifier[0,0].ReferencedBindings [823]
  [8668] Entry[8668]
  [8669] (9020)Normal[8669] let ExportSpecifier = this
  [8670] (9021/0) Normal[8670] return (new [IdentifierName])
  [8671] Exit[8671]
Algo: ExportSpecifier[1,0].ExportEntriesForModule [824]
  [8672] Entry[8672]
  [8673] (9023)Normal[8673] let ExportSpecifier = this
  [8674] (9027/1) Normal[8674] let exportName = __x1__
  [8675] (9028/2) If[8675] (= module null)
  [8676] (9034/7) Normal[8676] let importName = sourceName
  [8677] (9035/8) Normal[8677] return (new [(new ExportEntryRecord("ModuleRequest" -> module, "ImportName" -> importName, "LocalName" -> localName, "ExportName" -> exportName))])
  [8678] (9024/0) Call[8678] access __x0__ = (IdentifierName0 "StringValue")
  [8679] (9030/3) Normal[8679] let localName = sourceName
  [8680] (9033/6) Normal[8680] let localName = null
  [8681] (9025/0) Normal[8681] let sourceName = __x0__
  [8682] (9031/4) Normal[8682] let importName = null
  [8683] (9026/1) Call[8683] access __x1__ = (IdentifierName1 "StringValue")
  [8684] Exit[8684]
Algo: ExportSpecifier[1,0].ExportedBindings [825]
  [8685] Entry[8685]
  [8686] (9037)Normal[8686] let ExportSpecifier = this
  [8687] (9038/0) Call[8687] access __x0__ = (IdentifierName0 "StringValue")
  [8688] (9039/0) Normal[8688] return (new [__x0__])
  [8689] Exit[8689]
Algo: ExportSpecifier[1,0].ExportedNames [826]
  [8690] Entry[8690]
  [8691] (9041)Normal[8691] let ExportSpecifier = this
  [8692] (9042/0) Call[8692] access __x0__ = (IdentifierName1 "StringValue")
  [8693] (9043/0) Normal[8693] return (new [__x0__])
  [8694] Exit[8694]
Algo: ExportSpecifier[1,0].ReferencedBindings [827]
  [8695] Entry[8695]
  [8696] (9045)Normal[8696] let ExportSpecifier = this
  [8697] (9046/0) Normal[8697] return (new [IdentifierName0])
  [8698] Exit[8698]
Algo: ExportsList[1,0].ExportEntriesForModule [828]
  [8699] Entry[8699]
  [8700] (9048/0) Call[8700] access __x0__ = (ExportsList "ExportEntriesForModule" module)
  [8701] (9052/1) Normal[8701] let __x3__ = 0i
  [8702] (9053/1) Loop[8702] (< __x3__ __x2__.length)
  [8703] LoopCont[8703]
  [8704] (9049/0) Normal[8704] let specs = __x0__
  [8705] (9055/1) Normal[8705] let __x4__ = __x2__[__x3__]
  [8706] (9058/2) Normal[8706] return specs
  [8707] (9057/1) Normal[8707] append __x4__ -> specs
  [8708] (9050/1) Call[8708] access __x1__ = (ExportSpecifier "ExportEntriesForModule" module)
  [8709] (9056/1) Normal[8709] __x3__ = (+ __x3__ 1i)
  [8710] (9051/1) Normal[8710] let __x2__ = __x1__
  [8711] Exit[8711]
Algo: ExportsList[1,0].ExportedBindings [829]
  [8712] Entry[8712]
  [8713] (9060/0) Call[8713] access __x0__ = (ExportsList "ExportedBindings")
  [8714] (9064/1) Normal[8714] let __x3__ = 0i
  [8715] (9065/1) Loop[8715] (< __x3__ __x2__.length)
  [8716] LoopCont[8716]
  [8717] (9061/0) Normal[8717] let names = __x0__
  [8718] (9067/1) Normal[8718] let __x4__ = __x2__[__x3__]
  [8719] (9070/2) Normal[8719] return names
  [8720] (9069/1) Normal[8720] append __x4__ -> names
  [8721] (9062/1) Call[8721] access __x1__ = (ExportSpecifier "ExportedBindings")
  [8722] (9068/1) Normal[8722] __x3__ = (+ __x3__ 1i)
  [8723] (9063/1) Normal[8723] let __x2__ = __x1__
  [8724] Exit[8724]
Algo: ExportsList[1,0].ExportedNames [830]
  [8725] Entry[8725]
  [8726] (9072/0) Call[8726] access __x0__ = (ExportsList "ExportedNames")
  [8727] (9076/1) Normal[8727] let __x3__ = 0i
  [8728] (9077/1) Loop[8728] (< __x3__ __x2__.length)
  [8729] LoopCont[8729]
  [8730] (9073/0) Normal[8730] let names = __x0__
  [8731] (9079/1) Normal[8731] let __x4__ = __x2__[__x3__]
  [8732] (9082/2) Normal[8732] return names
  [8733] (9081/1) Normal[8733] append __x4__ -> names
  [8734] (9074/1) Call[8734] access __x1__ = (ExportSpecifier "ExportedNames")
  [8735] (9080/1) Normal[8735] __x3__ = (+ __x3__ 1i)
  [8736] (9075/1) Normal[8736] let __x2__ = __x1__
  [8737] Exit[8737]
Algo: ExportsList[1,0].ReferencedBindings [831]
  [8738] Entry[8738]
  [8739] (9084/0) Call[8739] access __x0__ = (ExportsList "ReferencedBindings")
  [8740] (9088/1) Normal[8740] let __x3__ = 0i
  [8741] (9089/1) Loop[8741] (< __x3__ __x2__.length)
  [8742] LoopCont[8742]
  [8743] (9085/0) Normal[8743] let names = __x0__
  [8744] (9091/1) Normal[8744] let __x4__ = __x2__[__x3__]
  [8745] (9094/2) Normal[8745] return names
  [8746] (9093/1) Normal[8746] append __x4__ -> names
  [8747] (9086/1) Call[8747] access __x1__ = (ExportSpecifier "ReferencedBindings")
  [8748] (9092/1) Normal[8748] __x3__ = (+ __x3__ 1i)
  [8749] (9087/1) Normal[8749] let __x2__ = __x1__
  [8750] Exit[8750]
Algo: ExpressionBody[0,0].Evaluation [832]
  [8751] Entry[8751]
  [8752] (9096)Normal[8752] let ExpressionBody = this
  [8753] (9100/1) Normal[8753] let exprValue = [? __x1__]
  [8754] (9101/2) Normal[8754] return (comp[~return~] exprValue => ~empty~)
  [8755] (9097/0) Call[8755] access __x0__ = (AssignmentExpression "Evaluation")
  [8756] Exit[8756]
  [8757] (9098/0) Normal[8757] let exprRef = __x0__
  [8758] (9099/1) Call[8758] app __x1__ = (GetValue exprRef)
Algo: ExpressionStatement[0,0].Evaluation [833]
  [8759] Entry[8759]
  [8760] (9103)Normal[8760] let ExpressionStatement = this
  [8761] (9107/1) Normal[8761] return [? __x1__]
  [8762] Exit[8762]
  [8763] (9104/0) Call[8763] access __x0__ = (Expression "Evaluation")
  [8764] (9105/0) Normal[8764] let exprRef = __x0__
  [8765] (9106/1) Call[8765] app __x1__ = (GetValue exprRef)
Algo: Expression[0,0].HasCallInTailPosition [834]
  [8766] Entry[8766]
  [8767] (9109)Normal[8767] let Expression = this
  [8768] (9110/0) Call[8768] access __x0__ = (AssignmentExpression "HasCallInTailPosition" call)
  [8769] (9111/0) Normal[8769] return __x0__
  [8770] Exit[8770]
Algo: Expression[1,0].AssignmentTargetType [835]
  [8771] Entry[8771]
  [8772] (9112/0) Normal[8772] return ~invalid~
  [8773] Exit[8773]
Algo: Expression[1,0].Evaluation [836]
  [8774] Entry[8774]
  [8775] (9114/0) Call[8775] access __x0__ = (Expression "Evaluation")
  [8776] (9118/2) Call[8776] access __x2__ = (AssignmentExpression "Evaluation")
  [8777] (9119/2) Normal[8777] let rref = __x2__
  [8778] (9115/0) Normal[8778] let lref = __x0__
  [8779] (9120/3) Call[8779] app __x3__ = (GetValue rref)
  [8780] (9116/1) Call[8780] app __x1__ = (GetValue lref)
  [8781] (9121/3) Normal[8781] return [? __x3__]
  [8782] (9117/1) Normal[8782] [? __x1__]
  [8783] Exit[8783]
Algo: Expression[1,0].HasCallInTailPosition [837]
  [8784] Entry[8784]
  [8785] (9123/0) Call[8785] access __x0__ = (AssignmentExpression "HasCallInTailPosition" call)
  [8786] (9124/0) Normal[8786] return __x0__
  [8787] Exit[8787]
Algo: Expression[1,0].IsFunctionDefinition [838]
  [8788] Entry[8788]
  [8789] (9125/0) Normal[8789] return false
  [8790] Exit[8790]
Algo: FinishDynamicImport [839]
  [8791] Entry[8791]
  [8792] (9127/0) Call[8792] app __x0__ = (IsAbruptCompletion completion)
  [8793] (9133/3) Call[8793] app __x2__ = (HostResolveImportedModule referencingScriptOrModule specifier)
  [8794] (9134/3) Normal[8794] let moduleRecord = [! __x2__]
  [8795] (9138/6) If[8795] __x4__
  [8796] (9140/6) Call[8796] app __x5__ = (Call promiseCapability.Reject undefined (new [namespace.Value]))
  [8797] (9143/7) Call[8797] app __x6__ = (Call promiseCapability.Resolve undefined (new [namespace.Value]))
  [8798] (9144/7) Normal[8798] [! __x6__]
  [8799] Exit[8799]
  [8800] (9128/0) If[8800] __x0__
  [8801] (9135/5) Call[8801] app __x3__ = (GetModuleNamespace moduleRecord)
  [8802] (9137/6) Call[8802] app __x4__ = (IsAbruptCompletion namespace)
  [8803] (9130/0) Call[8803] app __x1__ = (Call promiseCapability.Reject undefined (new [completion.Value]))
  [8804] (9141/6) Normal[8804] [! __x5__]
  [8805] (9136/5) Normal[8805] let namespace = __x3__
  [8806] (9131/0) Normal[8806] [! __x1__]
Algo: FlattenIntoArray [840]
  [8807] Entry[8807]
  [8808] (9146/0) Normal[8808] assert (= (typeof target) Object)
  [8809] (9150/5) Loop[8809] (< sourceIndex sourceLen)
  [8810] (9152/6) Call[8810] app __x0__ = (ToString sourceIndex)
  [8811] (9190/25) Normal[8811] return targetIndex
  [8812] (9156/8) If[8812] (= exists true)
  [8813] (9158/9) Call[8813] app __x2__ = (Get source P)
  [8814] (9189/24) Normal[8814] sourceIndex = (+ sourceIndex 1i)
  [8815] (9162/11) Call[8815] app __x3__ = (Call mapperFunction thisArg (new [element, sourceIndex, source]))
  [8816] (9163/11) Normal[8816] element = [? __x3__]
  [8817] (9147/1) Normal[8817] assert (= (typeof source) Object)
  [8818] (9153/6) Normal[8818] let P = [! __x0__]
  [8819] (9155/7) Normal[8819] let exists = [? __x1__]
  [8820] (9160/10) If[8820] (! (= mapperFunction absent))
  [8821] (9165/12) Normal[8821] let shouldFlatten = false
  [8822] (9148/3) Normal[8822] let targetIndex = start
  [8823] (9159/9) Normal[8823] let element = [? __x2__]
  [8824] (9154/7) Call[8824] app __x1__ = (HasProperty source P)
  [8825] (9168/14) Call[8825] app __x4__ = (IsArray element)
  [8826] (9169/14) Normal[8826] shouldFlatten = [? __x4__]
  [8827] (9149/4) Normal[8827] let sourceIndex = 0i
  [8828] (9176/18) Call[8828] app __x5__ = (LengthOfArrayLike element)
  [8829] (9177/18) Normal[8829] let elementLen = [? __x5__]
  [8830] (9178/19) Call[8830] app __x6__ = (FlattenIntoArray target element elementLen targetIndex newDepth)
  [8831] (9171/15) If[8831] (= shouldFlatten true)
  [8832] (9173/16) If[8832] (= depth Infinity)
  [8833] (9181/21) If[8833] (! (< targetIndex (- (** 2i 53i) 1i)))
  [8834] (9182/21) Normal[8834] throw TypeError
  [8835] (9184/22) Call[8835] app __x7__ = (ToString targetIndex)
  [8836] (9174/16) Normal[8836] let newDepth = Infinity
  [8837] (9175/16) Normal[8837] let newDepth = (- depth 1i)
  [8838] (9187/23) Normal[8838] targetIndex = (+ targetIndex 1i)
  [8839] (9166/13) If[8839] (< 0i depth)
  [8840] (9186/22) Normal[8840] [? __x8__]
  [8841] LoopCont[8841]
  [8842] (9179/19) Normal[8842] targetIndex = [? __x6__]
  [8843] (9185/22) Call[8843] app __x8__ = (CreateDataPropertyOrThrow target [! __x7__] element)
  [8844] Exit[8844]
Algo: ForBinding[0,0].Evaluation [841]
  [8845] Entry[8845]
  [8846] (9192)Normal[8846] let ForBinding = this
  [8847] (9196/1) Normal[8847] return [? __x1__]
  [8848] Exit[8848]
  [8849] (9193/0) Call[8849] access __x0__ = (BindingIdentifier "StringValue")
  [8850] (9194/0) Normal[8850] let bindingId = __x0__
  [8851] (9195/1) Call[8851] app __x1__ = (ResolveBinding bindingId)
Algo: ForBinding[0,0].IsDestructuring [842]
  [8852] Entry[8852]
  [8853] (9198)Normal[8853] let ForBinding = this
  [8854] (9199/0) Normal[8854] return false
  [8855] Exit[8855]
Algo: ForBinding[1,0].IsDestructuring [843]
  [8856] Entry[8856]
  [8857] (9201)Normal[8857] let ForBinding = this
  [8858] (9202/0) Normal[8858] return true
  [8859] Exit[8859]
Algo: ForBodyEvaluation [844]
  [8860] Entry[8860]
  [8861] (9204/0) Normal[8861] let V = undefined
  [8862] (9209/3) If[8862] (! (= test absent))
  [8863] (9211/4) Call[8863] access __x1__ = (test "Evaluation")
  [8864] (9220/7) Call[8864] access __x4__ = (stmt "Evaluation")
  [8865] (9215/6) Call[8865] app __x3__ = (ToBoolean testValue)
  [8866] (9216/6) If[8866] (= [! __x3__] false)
  [8867] (9221/7) Normal[8867] let result = __x4__
  [8868] (9222/8) Call[8868] app __x5__ = (LoopContinues result labelSet)
  [8869] (9229/9) Normal[8869] V = result.Value
  [8870] (9231/10) Call[8870] app __x7__ = (CreatePerIterationEnvironment perIterationBindings)
  [8871] (9205/1) Call[8871] app __x0__ = (CreatePerIterationEnvironment perIterationBindings)
  [8872] (9212/4) Normal[8872] let testRef = __x1__
  [8873] (9214/5) Normal[8873] let testValue = [? __x2__]
  [8874] (9206/1) Normal[8874] [? __x0__]
  [8875] (9225/8) Call[8875] app __x6__ = (UpdateEmpty result V)
  [8876] (9226/8) Normal[8876] return __x6__
  [8877] (9217/6) Normal[8877] return V
  [8878] (9213/5) Call[8878] app __x2__ = (GetValue testRef)
  [8879] (9207/2) Loop[8879] true
  [8880] (9228/9) If[8880] (! (= result.Value ~empty~))
  [8881] (9223/8) If[8881] (= __x5__ false)
  [8882] Exit[8882]
  [8883] (9235/12) Call[8883] access __x8__ = (increment "Evaluation")
  [8884] (9236/12) Normal[8884] let incRef = __x8__
  [8885] (9237/13) Call[8885] app __x9__ = (GetValue incRef)
  [8886] LoopCont[8886]
  [8887] (9232/10) Normal[8887] [? __x7__]
  [8888] (9233/11) If[8888] (! (= increment absent))
  [8889] (9238/13) Normal[8889] [? __x9__]
Algo: ForDeclaration[0,0].BoundNames [845]
  [8890] Entry[8890]
  [8891] (9241)Normal[8891] let ForDeclaration = this
  [8892] (9242/0) Call[8892] access __x0__ = (ForBinding "BoundNames")
  [8893] (9243/0) Normal[8893] return __x0__
  [8894] Exit[8894]
Algo: ForDeclaration[0,0].ForDeclarationBindingInitialization [846]
  [8895] Entry[8895]
  [8896] (9245)Normal[8896] let ForDeclaration = this
  [8897] (9246/0) Call[8897] access __x0__ = (ForBinding "BindingInitialization" value environment)
  [8898] (9247/0) Normal[8898] return __x0__
  [8899] Exit[8899]
Algo: ForDeclaration[0,0].ForDeclarationBindingInstantiation [847]
  [8900] Entry[8900]
  [8901] (9249)Normal[8901] let ForDeclaration = this
  [8902] (9253/1) Normal[8902] let __x2__ = 0i
  [8903] (9254/1) Loop[8903] (< __x2__ __x1__.length)
  [8904] (9259/2) If[8904] (= __x3__ true)
  [8905] (9261/3) Call[8905] app __x4__ = (environment.CreateImmutableBinding environment name true)
  [8906] (9264/5) Call[8906] app __x5__ = (environment.CreateMutableBinding environment name false)
  [8907] (9265/5) Normal[8907] [! __x5__]
  [8908] LoopCont[8908]
  [8909] (9250/0) Normal[8909] assert (is-instance-of environment DeclarativeEnvironmentRecord)
  [8910] (9256/1) Normal[8910] let name = __x1__[__x2__]
  [8911] Exit[8911]
  [8912] (9258/2) Call[8912] access __x3__ = (LetOrConst "IsConstantDeclaration")
  [8913] (9251/1) Call[8913] access __x0__ = (ForBinding "BoundNames")
  [8914] (9262/3) Normal[8914] [! __x4__]
  [8915] (9257/1) Normal[8915] __x2__ = (+ __x2__ 1i)
  [8916] (9252/1) Normal[8916] let __x1__ = __x0__
Algo: ForDeclaration[0,0].IsDestructuring [848]
  [8917] Entry[8917]
  [8918] (9267)Normal[8918] let ForDeclaration = this
  [8919] (9268/0) Call[8919] access __x0__ = (ForBinding "IsDestructuring")
  [8920] (9269/0) Normal[8920] return __x0__
  [8921] Exit[8921]
Algo: ForInOfBodyEvaluation [849]
  [8922] (9276/3) Call[8922] access __x0__ = (lhs "IsDestructuring")
  [8923] (9277/3) Normal[8923] let destructuring = __x0__
  [8924] (9381/60) Normal[8924] return [? __x23__]
  [8925] (9383/61) Call[8925] app __x24__ = (IteratorClose iteratorRecord status)
  [8926] (9356/46) Normal[8926] return [? __x17__]
  [8927] (9358/47) If[8927] (= iterationKind ~enumerate~)
  [8928] (9372/56) Call[8928] app __x21__ = (UpdateEmpty result V)
  [8929] (9373/56) Normal[8929] return __x21__
  [8930] (9359/48) Normal[8930] return status
  [8931] (9361/50) Normal[8931] assert (= iterationKind ~iterate~)
  [8932] (9386/62) If[8932] (! (= result.Value ~empty~))
  [8933] (9387/62) Normal[8933] V = result.Value
  [8934] LoopCont[8934]
  [8935] (9380/60) Call[8935] app __x23__ = (AsyncIteratorClose iteratorRecord status)
  [8936] (9362/51) Call[8936] app __x18__ = (IteratorClose iteratorRecord status)
  [8937] (9363/51) Normal[8937] return [? __x18__]
  [8938] Entry[8938]
  [8939] (9271/0) If[8939] (= iteratorKind absent)
  [8940] (9283/7) Loop[8940] true
  [8941] (9285/8) Call[8941] app __x1__ = (Call iteratorRecord.NextMethod iteratorRecord.Iterator)
  [8942] Exit[8942]
  [8943] (9345/41) Normal[8943] assert (= lhsKind ~lexicalBinding~)
  [8944] (9346/42) Normal[8944] assert (is-instance-of lhs ForDeclaration)
  [8945] (9326/28) If[8945] __x10__
  [8946] (9327/29) Normal[8946] let status = lhsRef
  [8947] (9328/28) If[8947] (= lhsKind ~lexicalBinding~)
  [8948] (9302/14) If[8948] (|| (= lhsKind ~assignment~) (= lhsKind ~varBinding~))
  [8949] (9303/15) If[8949] (= destructuring false)
  [8950] (9309/18) Normal[8950] assert (= lhsKind ~lexicalBinding~)
  [8951] (9319/25) Normal[8951] let lhsName = __x8__[0i]
  [8952] (9320/26) Call[8952] app __x9__ = (ResolveBinding lhsName)
  [8953] (9305/16) Call[8953] access __x5__ = (lhs "Evaluation")
  [8954] (9323/27) If[8954] (= destructuring false)
  [8955] (9339/27) If[8955] (= lhsKind ~varBinding~)
  [8956] (9341/38) Normal[8956] assert (is-instance-of lhs ForBinding)
  [8957] (9289/9) Call[8957] app __x2__ = (Await nextResult)
  [8958] (9290/9) Normal[8958] nextResult = [? __x2__]
  [8959] (9297/12) If[8959] (= done true)
  [8960] (9298/12) Normal[8960] return V
  [8961] (9300/13) Call[8961] app __x4__ = (IteratorValue nextResult)
  [8962] (9331/31) Normal[8962] let status = __x11__
  [8963] (9349/44) Call[8963] app __x16__ = (IsAbruptCompletion status)
  [8964] (9347/43) Call[8964] access __x15__ = (lhs "ForDeclarationBindingInitialization" nextValue iterationEnv)
  [8965] (9310/19) Normal[8965] assert (is-instance-of lhs ForDeclaration)
  [8966] (9311/20) Call[8966] app __x6__ = (NewDeclarativeEnvironment oldEnv)
  [8967] (9350/44) If[8967] __x16__
  [8968] (9352/45) Normal[8968] CONTEXT.LexicalEnvironment = oldEnv
  [8969] (9365/52) Call[8969] access __x19__ = (stmt "Evaluation")
  [8970] (9272/0) Normal[8970] iteratorKind = ~sync~
  [8971] (9274/1) Normal[8971] let oldEnv = CONTEXT.LexicalEnvironment
  [8972] (9368/54) Call[8972] app __x20__ = (LoopContinues result labelSet)
  [8973] (9369/54) If[8973] (= __x20__ false)
  [8974] (9278/4) If[8974] (&& (= destructuring true) (= lhsKind ~assignment~))
  [8975] (9384/61) Normal[8975] return [? __x24__]
  [8976] (9314/21) Normal[8976] __x7__
  [8977] (9315/22) Normal[8977] CONTEXT.LexicalEnvironment = iterationEnv
  [8978] (9321/26) Normal[8978] let lhsRef = [! __x9__]
  [8979] (9281/6) Normal[8979] let assignmentPattern = (parse-syntax lhs "AssignmentPattern")
  [8980] (9342/39) Call[8980] access __x14__ = (lhs "BindingInitialization" nextValue undefined)
  [8981] (9287/9) If[8981] (= iteratorKind ~async~)
  [8982] (9292/10) If[8982] (! (= (typeof nextResult) Object))
  [8983] (9325/28) Call[8983] app __x10__ = (IsAbruptCompletion lhsRef)
  [8984] (9367/53) Normal[8984] CONTEXT.LexicalEnvironment = oldEnv
  [8985] (9330/31) Call[8985] app __x11__ = (InitializeReferencedBinding lhsRef nextValue)
  [8986] (9355/46) Call[8986] app __x17__ = (AsyncIteratorClose iteratorRecord status)
  [8987] (9293/10) Normal[8987] throw TypeError
  [8988] (9295/11) Call[8988] app __x3__ = (IteratorComplete nextResult)
  [8989] (9313/21) Call[8989] access __x7__ = (lhs "ForDeclarationBindingInstantiation" iterationEnv)
  [8990] (9316/23) If[8990] (= destructuring false)
  [8991] (9301/13) Normal[8991] let nextValue = [? __x4__]
  [8992] (9333/33) Call[8992] app __x12__ = (PutValue lhsRef nextValue)
  [8993] (9348/43) Normal[8993] let status = __x15__
  [8994] (9306/16) Normal[8994] let lhsRef = __x5__
  [8995] (9366/52) Normal[8995] let result = __x19__
  [8996] (9286/8) Normal[8996] let nextResult = [? __x1__]
  [8997] (9343/39) Normal[8997] let status = __x14__
  [8998] (9335/27) If[8998] (= lhsKind ~assignment~)
  [8999] (9337/36) Call[8999] access __x13__ = (assignmentPattern "DestructuringAssignmentEvaluation" nextValue)
  [9000] (9377/59) Normal[9000] status = __x22__
  [9001] (9378/60) If[9001] (= iteratorKind ~async~)
  [9002] (9370/55) If[9002] (= iterationKind ~enumerate~)
  [9003] (9375/58) Normal[9003] assert (= iterationKind ~iterate~)
  [9004] (9280/5) Normal[9004] assert (is-instance-of lhs LeftHandSideExpression)
  [9005] (9275/2) Normal[9005] let V = undefined
  [9006] (9376/59) Call[9006] app __x22__ = (UpdateEmpty result V)
  [9007] (9318/25) Call[9007] access __x8__ = (lhs "BoundNames")
  [9008] (9334/33) Normal[9008] let status = __x12__
  [9009] (9353/46) If[9009] (= iteratorKind ~async~)
  [9010] (9296/11) Normal[9010] let done = [? __x3__]
  [9011] (9338/36) Normal[9011] let status = __x13__
  [9012] (9312/20) Normal[9012] let iterationEnv = __x6__
Algo: ForInOfHeadEvaluation [850]
  [9013] Entry[9013]
  [9014] (9390/0) Normal[9014] let oldEnv = CONTEXT.LexicalEnvironment
  [9015] (9395/4) Normal[9015] let __x1__ = uninitializedBoundNames
  [9016] (9396/4) Normal[9016] let __x2__ = 0i
  [9017] (9401/5) Call[9017] app __x3__ = (newEnv.CreateMutableBinding newEnv name false)
  [9018] (9402/5) Normal[9018] [! __x3__]
  [9019] (9405/7) Call[9019] access __x4__ = (expr "Evaluation")
  [9020] (9406/7) Normal[9020] let exprRef = __x4__
  [9021] (9391/1) If[9021] (< 0i uninitializedBoundNames.length)
  [9022] (9397/4) Loop[9022] (< __x2__ __x1__.length)
  [9023] (9400/4) Normal[9023] __x2__ = (+ __x2__ 1i)
  [9024] (9403/6) Normal[9024] CONTEXT.LexicalEnvironment = newEnv
  [9025] (9393/3) Call[9025] app __x0__ = (NewDeclarativeEnvironment oldEnv)
  [9026] LoopCont[9026]
  [9027] (9399/4) Normal[9027] let name = __x1__[__x2__]
  [9028] (9394/3) Normal[9028] let newEnv = __x0__
  [9029] (9409/9) Normal[9029] let exprValue = [? __x5__]
  [9030] (9410/10) If[9030] (= iterationKind ~enumerate~)
  [9031] (9407/8) Normal[9031] CONTEXT.LexicalEnvironment = oldEnv
  [9032] (9417/14) Call[9032] app __x7__ = (EnumerateObjectProperties obj)
  [9033] (9418/14) Normal[9033] let iterator = [? __x7__]
  [9034] (9419/15) Call[9034] app __x8__ = (GetV iterator "next")
  [9035] (9412/11) If[9035] (|| (= exprValue undefined) (= exprValue null))
  [9036] (9413/12) Normal[9036] return (comp[~break~] ~empty~ => ~empty~)
  [9037] (9415/13) Call[9037] app __x6__ = (ToObject exprValue)
  [9038] (9423/18) Normal[9038] assert (|| (= iterationKind ~iterate~) (= iterationKind ~async-iterate~))
  [9039] (9424/19) If[9039] (= iterationKind ~async-iterate~)
  [9040] (9421/16) Normal[9040] return (new Record("Iterator" -> iterator, "NextMethod" -> nextMethod, "Done" -> false))
  [9041] Exit[9041]
  [9042] (9427/21) Call[9042] app __x9__ = (GetIterator exprValue iteratorHint)
  [9043] (9428/21) Normal[9043] return [? __x9__]
  [9044] (9408/9) Call[9044] app __x5__ = (GetValue exprRef)
  [9045] (9426/19) Normal[9045] let iteratorHint = ~sync~
  [9046] (9416/13) Normal[9046] let obj = [! __x6__]
  [9047] (9420/15) Normal[9047] let nextMethod = [! __x8__]
  [9048] (9425/19) Normal[9048] let iteratorHint = ~async~
Algo: ForInOfStatement[0,0].ContainsDuplicateLabels [851]
  [9049] Entry[9049]
  [9050] (9430)Normal[9050] let ForInOfStatement = this
  [9051] (9431/0) Call[9051] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9052] (9432/0) Normal[9052] return __x0__
  [9053] Exit[9053]
Algo: ForInOfStatement[0,0].ContainsUndefinedBreakTarget [852]
  [9054] Entry[9054]
  [9055] (9434)Normal[9055] let ForInOfStatement = this
  [9056] (9435/0) Call[9056] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9057] (9436/0) Normal[9057] return __x0__
  [9058] Exit[9058]
Algo: ForInOfStatement[0,0].ContainsUndefinedContinueTarget [853]
  [9059] Entry[9059]
  [9060] (9438)Normal[9060] let ForInOfStatement = this
  [9061] (9439/0) Call[9061] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9062] (9440/0) Normal[9062] return __x0__
  [9063] Exit[9063]
Algo: ForInOfStatement[0,0].EarlyErrors [854]
  [9064] Entry[9064]
  [9065] (9442)Normal[9065] let ForInOfStatement = this
  [9066] (9443/0) Call[9066] app __x0__ = (IsLabelledFunction Statement)
  [9067] (9444/0) If[9067] (= __x0__ true)
  [9068] (9445/0) Normal[9068] throw SyntaxError
  [9069] Exit[9069]
Algo: ForInOfStatement[0,0].ForInOfLoopEvaluation [855]
  [9070] Entry[9070]
  [9071] (9448)Normal[9071] let ForInOfStatement = this
  [9072] (9452/1) Normal[9072] return [? __x1__]
  [9073] Exit[9073]
  [9074] (9449/0) Call[9074] app __x0__ = (ForInOfHeadEvaluation (new []) Expression ~enumerate~)
  [9075] (9450/0) Normal[9075] let keyResult = [? __x0__]
  [9076] (9451/1) Call[9076] app __x1__ = (ForInOfBodyEvaluation LeftHandSideExpression Statement keyResult ~enumerate~ ~assignment~ labelSet)
Algo: ForInOfStatement[0,0].HasCallInTailPosition [856]
  [9077] Entry[9077]
  [9078] (9454)Normal[9078] let ForInOfStatement = this
  [9079] (9455/0) Call[9079] access __x0__ = (Statement "HasCallInTailPosition" call)
  [9080] (9456/0) Normal[9080] return __x0__
  [9081] Exit[9081]
Algo: ForInOfStatement[0,0].VarDeclaredNames [857]
  [9082] Entry[9082]
  [9083] (9458)Normal[9083] let ForInOfStatement = this
  [9084] (9459/0) Call[9084] access __x0__ = (Statement "VarDeclaredNames")
  [9085] (9460/0) Normal[9085] return __x0__
  [9086] Exit[9086]
Algo: ForInOfStatement[0,0].VarScopedDeclarations [858]
  [9087] Entry[9087]
  [9088] (9462)Normal[9088] let ForInOfStatement = this
  [9089] (9463/0) Call[9089] access __x0__ = (Statement "VarScopedDeclarations")
  [9090] (9464/0) Normal[9090] return __x0__
  [9091] Exit[9091]
Algo: ForInOfStatement[1,0].ContainsDuplicateLabels [859]
  [9092] Entry[9092]
  [9093] (9466)Normal[9093] let ForInOfStatement = this
  [9094] (9467/0) Call[9094] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9095] (9468/0) Normal[9095] return __x0__
  [9096] Exit[9096]
Algo: ForInOfStatement[1,0].ContainsUndefinedBreakTarget [860]
  [9097] Entry[9097]
  [9098] (9470)Normal[9098] let ForInOfStatement = this
  [9099] (9471/0) Call[9099] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9100] (9472/0) Normal[9100] return __x0__
  [9101] Exit[9101]
Algo: ForInOfStatement[1,0].ContainsUndefinedContinueTarget [861]
  [9102] Entry[9102]
  [9103] (9474)Normal[9103] let ForInOfStatement = this
  [9104] (9475/0) Call[9104] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9105] (9476/0) Normal[9105] return __x0__
  [9106] Exit[9106]
Algo: ForInOfStatement[1,0].EarlyErrors [862]
  [9107] Entry[9107]
  [9108] (9478)Normal[9108] let ForInOfStatement = this
  [9109] (9479/0) Call[9109] app __x0__ = (IsLabelledFunction Statement)
  [9110] (9480/0) If[9110] (= __x0__ true)
  [9111] (9481/0) Normal[9111] throw SyntaxError
  [9112] Exit[9112]
Algo: ForInOfStatement[1,0].ForInOfLoopEvaluation [863]
  [9113] Entry[9113]
  [9114] (9484)Normal[9114] let ForInOfStatement = this
  [9115] (9488/1) Normal[9115] return [? __x1__]
  [9116] Exit[9116]
  [9117] (9485/0) Call[9117] app __x0__ = (ForInOfHeadEvaluation (new []) Expression ~enumerate~)
  [9118] (9486/0) Normal[9118] let keyResult = [? __x0__]
  [9119] (9487/1) Call[9119] app __x1__ = (ForInOfBodyEvaluation ForBinding Statement keyResult ~enumerate~ ~varBinding~ labelSet)
Algo: ForInOfStatement[1,0].HasCallInTailPosition [864]
  [9120] Entry[9120]
  [9121] (9490)Normal[9121] let ForInOfStatement = this
  [9122] (9491/0) Call[9122] access __x0__ = (Statement "HasCallInTailPosition" call)
  [9123] (9492/0) Normal[9123] return __x0__
  [9124] Exit[9124]
Algo: ForInOfStatement[1,0].VarDeclaredNames [865]
  [9125] Entry[9125]
  [9126] (9494)Normal[9126] let ForInOfStatement = this
  [9127] (9498/1) Normal[9127] let __x2__ = __x1__
  [9128] (9499/1) Normal[9128] let __x3__ = 0i
  [9129] (9504/1) Normal[9129] append __x4__ -> names
  [9130] LoopCont[9130]
  [9131] (9495/0) Call[9131] access __x0__ = (ForBinding "BoundNames")
  [9132] (9500/1) Loop[9132] (< __x3__ __x2__.length)
  [9133] (9503/1) Normal[9133] __x3__ = (+ __x3__ 1i)
  [9134] (9496/0) Normal[9134] let names = __x0__
  [9135] (9505/2) Normal[9135] return names
  [9136] Exit[9136]
  [9137] (9502/1) Normal[9137] let __x4__ = __x2__[__x3__]
  [9138] (9497/1) Call[9138] access __x1__ = (Statement "VarDeclaredNames")
Algo: ForInOfStatement[1,0].VarScopedDeclarations [866]
  [9139] Entry[9139]
  [9140] (9507)Normal[9140] let ForInOfStatement = this
  [9141] (9511/1) Normal[9141] let __x2__ = 0i
  [9142] (9512/1) Loop[9142] (< __x2__ __x1__.length)
  [9143] LoopCont[9143]
  [9144] (9508/0) Normal[9144] let declarations = (new [ForBinding])
  [9145] (9514/1) Normal[9145] let __x3__ = __x1__[__x2__]
  [9146] (9517/2) Normal[9146] return declarations
  [9147] (9516/1) Normal[9147] append __x3__ -> declarations
  [9148] (9509/1) Call[9148] access __x0__ = (Statement "VarScopedDeclarations")
  [9149] (9515/1) Normal[9149] __x2__ = (+ __x2__ 1i)
  [9150] (9510/1) Normal[9150] let __x1__ = __x0__
  [9151] Exit[9151]
Algo: ForInOfStatement[2,0].ContainsDuplicateLabels [867]
  [9152] Entry[9152]
  [9153] (9519)Normal[9153] let ForInOfStatement = this
  [9154] (9520/0) Call[9154] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9155] (9521/0) Normal[9155] return __x0__
  [9156] Exit[9156]
Algo: ForInOfStatement[2,0].ContainsUndefinedBreakTarget [868]
  [9157] Entry[9157]
  [9158] (9523)Normal[9158] let ForInOfStatement = this
  [9159] (9524/0) Call[9159] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9160] (9525/0) Normal[9160] return __x0__
  [9161] Exit[9161]
Algo: ForInOfStatement[2,0].ContainsUndefinedContinueTarget [869]
  [9162] Entry[9162]
  [9163] (9527)Normal[9163] let ForInOfStatement = this
  [9164] (9528/0) Call[9164] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9165] (9529/0) Normal[9165] return __x0__
  [9166] Exit[9166]
Algo: ForInOfStatement[2,0].EarlyErrors [870]
  [9167] Entry[9167]
  [9168] (9531)Normal[9168] let ForInOfStatement = this
  [9169] (9536/1) Call[9169] access __x1__ = (ForDeclaration "BoundNames")
  [9170] (9537/1) Call[9170] access __x2__ = (Statement "VarDeclaredNames")
  [9171] (9541/1) Normal[9171] let __x6__ = 0i
  [9172] (9542/1) Normal[9172] let __x7__ = false
  [9173] (9556/2) Normal[9173] throw SyntaxError
  [9174] Exit[9174]
  [9175] (9546/1) Loop[9175] (< __x6__ __x4__.length)
  [9176] (9547/1) If[9176] (= __x3__[__x5__] __x4__[__x6__])
  [9177] LoopCont[9177]
  [9178] (9551/1) Normal[9178] throw SyntaxError
  [9179] (9553/2) Call[9179] access __x8__ = (ForDeclaration "BoundNames")
  [9180] (9532/0) Call[9180] access __x0__ = (ForDeclaration "BoundNames")
  [9181] (9538/1) Normal[9181] let __x3__ = __x1__
  [9182] (9554/2) Call[9182] app __x9__ = (IsDuplicate __x8__)
  [9183] (9540/1) Normal[9183] let __x5__ = 0i
  [9184] (9545/1) Normal[9184] __x6__ = 0i
  [9185] (9533/0) If[9185] (contains __x0__ "let")
  [9186] LoopCont[9186]
  [9187] (9555/2) If[9187] __x9__
  [9188] (9543/1) Loop[9188] (< __x5__ __x3__.length)
  [9189] (9550/1) If[9189] __x7__
  [9190] (9539/1) Normal[9190] let __x4__ = __x2__
  [9191] (9534/0) Normal[9191] throw SyntaxError
  [9192] (9548/1) Normal[9192] __x7__ = true
Algo: ForInOfStatement[2,0].ForInOfLoopEvaluation [871]
  [9193] Entry[9193]
  [9194] (9559)Normal[9194] let ForInOfStatement = this
  [9195] (9563/1) Call[9195] app __x2__ = (ForInOfBodyEvaluation ForDeclaration Statement keyResult ~enumerate~ ~lexicalBinding~ labelSet)
  [9196] (9564/1) Normal[9196] return [? __x2__]
  [9197] (9560/0) Call[9197] access __x0__ = (ForDeclaration "BoundNames")
  [9198] Exit[9198]
  [9199] (9561/0) Call[9199] app __x1__ = (ForInOfHeadEvaluation __x0__ Expression ~enumerate~)
  [9200] (9562/0) Normal[9200] let keyResult = [? __x1__]
Algo: ForInOfStatement[2,0].HasCallInTailPosition [872]
  [9201] Entry[9201]
  [9202] (9566)Normal[9202] let ForInOfStatement = this
  [9203] (9567/0) Call[9203] access __x0__ = (Statement "HasCallInTailPosition" call)
  [9204] (9568/0) Normal[9204] return __x0__
  [9205] Exit[9205]
Algo: ForInOfStatement[2,0].VarDeclaredNames [873]
  [9206] Entry[9206]
  [9207] (9570)Normal[9207] let ForInOfStatement = this
  [9208] (9571/0) Call[9208] access __x0__ = (Statement "VarDeclaredNames")
  [9209] (9572/0) Normal[9209] return __x0__
  [9210] Exit[9210]
Algo: ForInOfStatement[2,0].VarScopedDeclarations [874]
  [9211] Entry[9211]
  [9212] (9574)Normal[9212] let ForInOfStatement = this
  [9213] (9575/0) Call[9213] access __x0__ = (Statement "VarScopedDeclarations")
  [9214] (9576/0) Normal[9214] return __x0__
  [9215] Exit[9215]
Algo: ForInOfStatement[3,0].ContainsDuplicateLabels [875]
  [9216] Entry[9216]
  [9217] (9578)Normal[9217] let ForInOfStatement = this
  [9218] (9579/0) Call[9218] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9219] (9580/0) Normal[9219] return __x0__
  [9220] Exit[9220]
Algo: ForInOfStatement[3,0].ContainsUndefinedBreakTarget [876]
  [9221] Entry[9221]
  [9222] (9582)Normal[9222] let ForInOfStatement = this
  [9223] (9583/0) Call[9223] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9224] (9584/0) Normal[9224] return __x0__
  [9225] Exit[9225]
Algo: ForInOfStatement[3,0].ContainsUndefinedContinueTarget [877]
  [9226] Entry[9226]
  [9227] (9586)Normal[9227] let ForInOfStatement = this
  [9228] (9587/0) Call[9228] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9229] (9588/0) Normal[9229] return __x0__
  [9230] Exit[9230]
Algo: ForInOfStatement[3,0].EarlyErrors [878]
  [9231] Entry[9231]
  [9232] (9590)Normal[9232] let ForInOfStatement = this
  [9233] (9591/0) Call[9233] app __x0__ = (IsLabelledFunction Statement)
  [9234] (9592/0) If[9234] (= __x0__ true)
  [9235] (9593/0) Normal[9235] throw SyntaxError
  [9236] Exit[9236]
Algo: ForInOfStatement[3,0].ForInOfLoopEvaluation [879]
  [9237] Entry[9237]
  [9238] (9596)Normal[9238] let ForInOfStatement = this
  [9239] (9600/1) Normal[9239] return [? __x1__]
  [9240] Exit[9240]
  [9241] (9597/0) Call[9241] app __x0__ = (ForInOfHeadEvaluation (new []) AssignmentExpression ~iterate~)
  [9242] (9598/0) Normal[9242] let keyResult = [? __x0__]
  [9243] (9599/1) Call[9243] app __x1__ = (ForInOfBodyEvaluation LeftHandSideExpression Statement keyResult ~iterate~ ~assignment~ labelSet)
Algo: ForInOfStatement[3,0].HasCallInTailPosition [880]
  [9244] Entry[9244]
  [9245] (9602)Normal[9245] let ForInOfStatement = this
  [9246] (9603/0) Normal[9246] return false
  [9247] Exit[9247]
Algo: ForInOfStatement[3,0].VarDeclaredNames [881]
  [9248] Entry[9248]
  [9249] (9605)Normal[9249] let ForInOfStatement = this
  [9250] (9606/0) Call[9250] access __x0__ = (Statement "VarDeclaredNames")
  [9251] (9607/0) Normal[9251] return __x0__
  [9252] Exit[9252]
Algo: ForInOfStatement[3,0].VarScopedDeclarations [882]
  [9253] Entry[9253]
  [9254] (9609)Normal[9254] let ForInOfStatement = this
  [9255] (9610/0) Call[9255] access __x0__ = (Statement "VarScopedDeclarations")
  [9256] (9611/0) Normal[9256] return __x0__
  [9257] Exit[9257]
Algo: ForInOfStatement[4,0].ContainsDuplicateLabels [883]
  [9258] Entry[9258]
  [9259] (9613)Normal[9259] let ForInOfStatement = this
  [9260] (9614/0) Call[9260] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9261] (9615/0) Normal[9261] return __x0__
  [9262] Exit[9262]
Algo: ForInOfStatement[4,0].ContainsUndefinedBreakTarget [884]
  [9263] Entry[9263]
  [9264] (9617)Normal[9264] let ForInOfStatement = this
  [9265] (9618/0) Call[9265] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9266] (9619/0) Normal[9266] return __x0__
  [9267] Exit[9267]
Algo: ForInOfStatement[4,0].ContainsUndefinedContinueTarget [885]
  [9268] Entry[9268]
  [9269] (9621)Normal[9269] let ForInOfStatement = this
  [9270] (9622/0) Call[9270] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9271] (9623/0) Normal[9271] return __x0__
  [9272] Exit[9272]
Algo: ForInOfStatement[4,0].EarlyErrors [886]
  [9273] Entry[9273]
  [9274] (9625)Normal[9274] let ForInOfStatement = this
  [9275] (9626/0) Call[9275] app __x0__ = (IsLabelledFunction Statement)
  [9276] (9627/0) If[9276] (= __x0__ true)
  [9277] (9628/0) Normal[9277] throw SyntaxError
  [9278] Exit[9278]
Algo: ForInOfStatement[4,0].ForInOfLoopEvaluation [887]
  [9279] Entry[9279]
  [9280] (9631)Normal[9280] let ForInOfStatement = this
  [9281] (9635/1) Normal[9281] return [? __x1__]
  [9282] Exit[9282]
  [9283] (9632/0) Call[9283] app __x0__ = (ForInOfHeadEvaluation (new []) AssignmentExpression ~iterate~)
  [9284] (9633/0) Normal[9284] let keyResult = [? __x0__]
  [9285] (9634/1) Call[9285] app __x1__ = (ForInOfBodyEvaluation ForBinding Statement keyResult ~iterate~ ~varBinding~ labelSet)
Algo: ForInOfStatement[4,0].HasCallInTailPosition [888]
  [9286] Entry[9286]
  [9287] (9637)Normal[9287] let ForInOfStatement = this
  [9288] (9638/0) Normal[9288] return false
  [9289] Exit[9289]
Algo: ForInOfStatement[4,0].VarDeclaredNames [889]
  [9290] Entry[9290]
  [9291] (9640)Normal[9291] let ForInOfStatement = this
  [9292] (9644/1) Normal[9292] let __x2__ = __x1__
  [9293] (9645/1) Normal[9293] let __x3__ = 0i
  [9294] (9650/1) Normal[9294] append __x4__ -> names
  [9295] LoopCont[9295]
  [9296] (9641/0) Call[9296] access __x0__ = (ForBinding "BoundNames")
  [9297] (9646/1) Loop[9297] (< __x3__ __x2__.length)
  [9298] (9649/1) Normal[9298] __x3__ = (+ __x3__ 1i)
  [9299] (9642/0) Normal[9299] let names = __x0__
  [9300] (9651/2) Normal[9300] return names
  [9301] Exit[9301]
  [9302] (9648/1) Normal[9302] let __x4__ = __x2__[__x3__]
  [9303] (9643/1) Call[9303] access __x1__ = (Statement "VarDeclaredNames")
Algo: ForInOfStatement[4,0].VarScopedDeclarations [890]
  [9304] Entry[9304]
  [9305] (9653)Normal[9305] let ForInOfStatement = this
  [9306] (9657/1) Normal[9306] let __x2__ = 0i
  [9307] (9658/1) Loop[9307] (< __x2__ __x1__.length)
  [9308] LoopCont[9308]
  [9309] (9654/0) Normal[9309] let declarations = (new [ForBinding])
  [9310] (9660/1) Normal[9310] let __x3__ = __x1__[__x2__]
  [9311] (9663/2) Normal[9311] return declarations
  [9312] (9662/1) Normal[9312] append __x3__ -> declarations
  [9313] (9655/1) Call[9313] access __x0__ = (Statement "VarScopedDeclarations")
  [9314] (9661/1) Normal[9314] __x2__ = (+ __x2__ 1i)
  [9315] (9656/1) Normal[9315] let __x1__ = __x0__
  [9316] Exit[9316]
Algo: ForInOfStatement[5,0].ContainsDuplicateLabels [891]
  [9317] Entry[9317]
  [9318] (9665)Normal[9318] let ForInOfStatement = this
  [9319] (9666/0) Call[9319] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9320] (9667/0) Normal[9320] return __x0__
  [9321] Exit[9321]
Algo: ForInOfStatement[5,0].ContainsUndefinedBreakTarget [892]
  [9322] Entry[9322]
  [9323] (9669)Normal[9323] let ForInOfStatement = this
  [9324] (9670/0) Call[9324] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9325] (9671/0) Normal[9325] return __x0__
  [9326] Exit[9326]
Algo: ForInOfStatement[5,0].ContainsUndefinedContinueTarget [893]
  [9327] Entry[9327]
  [9328] (9673)Normal[9328] let ForInOfStatement = this
  [9329] (9674/0) Call[9329] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9330] (9675/0) Normal[9330] return __x0__
  [9331] Exit[9331]
Algo: ForInOfStatement[5,0].EarlyErrors [894]
  [9332] Entry[9332]
  [9333] (9677)Normal[9333] let ForInOfStatement = this
  [9334] (9682/1) Call[9334] access __x1__ = (ForDeclaration "BoundNames")
  [9335] (9683/1) Call[9335] access __x2__ = (Statement "VarDeclaredNames")
  [9336] (9687/1) Normal[9336] let __x6__ = 0i
  [9337] (9688/1) Normal[9337] let __x7__ = false
  [9338] (9702/2) Normal[9338] throw SyntaxError
  [9339] Exit[9339]
  [9340] (9692/1) Loop[9340] (< __x6__ __x4__.length)
  [9341] (9693/1) If[9341] (= __x3__[__x5__] __x4__[__x6__])
  [9342] LoopCont[9342]
  [9343] (9697/1) Normal[9343] throw SyntaxError
  [9344] (9699/2) Call[9344] access __x8__ = (ForDeclaration "BoundNames")
  [9345] (9678/0) Call[9345] access __x0__ = (ForDeclaration "BoundNames")
  [9346] (9684/1) Normal[9346] let __x3__ = __x1__
  [9347] (9700/2) Call[9347] app __x9__ = (IsDuplicate __x8__)
  [9348] (9686/1) Normal[9348] let __x5__ = 0i
  [9349] (9691/1) Normal[9349] __x6__ = 0i
  [9350] (9679/0) If[9350] (contains __x0__ "let")
  [9351] LoopCont[9351]
  [9352] (9701/2) If[9352] __x9__
  [9353] (9689/1) Loop[9353] (< __x5__ __x3__.length)
  [9354] (9696/1) If[9354] __x7__
  [9355] (9685/1) Normal[9355] let __x4__ = __x2__
  [9356] (9680/0) Normal[9356] throw SyntaxError
  [9357] (9694/1) Normal[9357] __x7__ = true
Algo: ForInOfStatement[5,0].ForInOfLoopEvaluation [895]
  [9358] Entry[9358]
  [9359] (9705)Normal[9359] let ForInOfStatement = this
  [9360] (9709/1) Call[9360] app __x2__ = (ForInOfBodyEvaluation ForDeclaration Statement keyResult ~iterate~ ~lexicalBinding~ labelSet)
  [9361] (9710/1) Normal[9361] return [? __x2__]
  [9362] (9706/0) Call[9362] access __x0__ = (ForDeclaration "BoundNames")
  [9363] Exit[9363]
  [9364] (9707/0) Call[9364] app __x1__ = (ForInOfHeadEvaluation __x0__ AssignmentExpression ~iterate~)
  [9365] (9708/0) Normal[9365] let keyResult = [? __x1__]
Algo: ForInOfStatement[5,0].HasCallInTailPosition [896]
  [9366] Entry[9366]
  [9367] (9712)Normal[9367] let ForInOfStatement = this
  [9368] (9713/0) Normal[9368] return false
  [9369] Exit[9369]
Algo: ForInOfStatement[5,0].VarDeclaredNames [897]
  [9370] Entry[9370]
  [9371] (9715)Normal[9371] let ForInOfStatement = this
  [9372] (9716/0) Call[9372] access __x0__ = (Statement "VarDeclaredNames")
  [9373] (9717/0) Normal[9373] return __x0__
  [9374] Exit[9374]
Algo: ForInOfStatement[5,0].VarScopedDeclarations [898]
  [9375] Entry[9375]
  [9376] (9719)Normal[9376] let ForInOfStatement = this
  [9377] (9720/0) Call[9377] access __x0__ = (Statement "VarScopedDeclarations")
  [9378] (9721/0) Normal[9378] return __x0__
  [9379] Exit[9379]
Algo: ForInOfStatement[6,0].ContainsDuplicateLabels [899]
  [9380] Entry[9380]
  [9381] (9723)Normal[9381] let ForInOfStatement = this
  [9382] (9724/0) Call[9382] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9383] (9725/0) Normal[9383] return __x0__
  [9384] Exit[9384]
Algo: ForInOfStatement[6,0].ContainsUndefinedBreakTarget [900]
  [9385] Entry[9385]
  [9386] (9727)Normal[9386] let ForInOfStatement = this
  [9387] (9728/0) Call[9387] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9388] (9729/0) Normal[9388] return __x0__
  [9389] Exit[9389]
Algo: ForInOfStatement[6,0].ContainsUndefinedContinueTarget [901]
  [9390] Entry[9390]
  [9391] (9731)Normal[9391] let ForInOfStatement = this
  [9392] (9732/0) Call[9392] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9393] (9733/0) Normal[9393] return __x0__
  [9394] Exit[9394]
Algo: ForInOfStatement[6,0].EarlyErrors [902]
  [9395] Entry[9395]
  [9396] (9735)Normal[9396] let ForInOfStatement = this
  [9397] (9736/0) Call[9397] app __x0__ = (IsLabelledFunction Statement)
  [9398] (9737/0) If[9398] (= __x0__ true)
  [9399] (9738/0) Normal[9399] throw SyntaxError
  [9400] Exit[9400]
Algo: ForInOfStatement[6,0].ForInOfLoopEvaluation [903]
  [9401] Entry[9401]
  [9402] (9741)Normal[9402] let ForInOfStatement = this
  [9403] (9745/1) Normal[9403] return [? __x1__]
  [9404] Exit[9404]
  [9405] (9742/0) Call[9405] app __x0__ = (ForInOfHeadEvaluation (new []) AssignmentExpression ~async-iterate~)
  [9406] (9743/0) Normal[9406] let keyResult = [? __x0__]
  [9407] (9744/1) Call[9407] app __x1__ = (ForInOfBodyEvaluation LeftHandSideExpression Statement keyResult ~iterate~ ~assignment~ labelSet ~async~)
Algo: ForInOfStatement[6,0].HasCallInTailPosition [904]
  [9408] Entry[9408]
  [9409] (9747)Normal[9409] let ForInOfStatement = this
  [9410] (9748/0) Call[9410] access __x0__ = (Statement "HasCallInTailPosition" call)
  [9411] (9749/0) Normal[9411] return __x0__
  [9412] Exit[9412]
Algo: ForInOfStatement[6,0].VarDeclaredNames [905]
  [9413] Entry[9413]
  [9414] (9751)Normal[9414] let ForInOfStatement = this
  [9415] (9752/0) Call[9415] access __x0__ = (Statement "VarDeclaredNames")
  [9416] (9753/0) Normal[9416] return __x0__
  [9417] Exit[9417]
Algo: ForInOfStatement[6,0].VarScopedDeclarations [906]
  [9418] Entry[9418]
  [9419] (9755)Normal[9419] let ForInOfStatement = this
  [9420] (9756/0) Call[9420] access __x0__ = (Statement "VarScopedDeclarations")
  [9421] (9757/0) Normal[9421] return __x0__
  [9422] Exit[9422]
Algo: ForInOfStatement[7,0].ContainsDuplicateLabels [907]
  [9423] Entry[9423]
  [9424] (9759)Normal[9424] let ForInOfStatement = this
  [9425] (9760/0) Call[9425] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9426] (9761/0) Normal[9426] return __x0__
  [9427] Exit[9427]
Algo: ForInOfStatement[7,0].ContainsUndefinedBreakTarget [908]
  [9428] Entry[9428]
  [9429] (9763)Normal[9429] let ForInOfStatement = this
  [9430] (9764/0) Call[9430] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9431] (9765/0) Normal[9431] return __x0__
  [9432] Exit[9432]
Algo: ForInOfStatement[7,0].ContainsUndefinedContinueTarget [909]
  [9433] Entry[9433]
  [9434] (9767)Normal[9434] let ForInOfStatement = this
  [9435] (9768/0) Call[9435] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9436] (9769/0) Normal[9436] return __x0__
  [9437] Exit[9437]
Algo: ForInOfStatement[7,0].EarlyErrors [910]
  [9438] Entry[9438]
  [9439] (9771)Normal[9439] let ForInOfStatement = this
  [9440] (9772/0) Call[9440] app __x0__ = (IsLabelledFunction Statement)
  [9441] (9773/0) If[9441] (= __x0__ true)
  [9442] (9774/0) Normal[9442] throw SyntaxError
  [9443] Exit[9443]
Algo: ForInOfStatement[7,0].ForInOfLoopEvaluation [911]
  [9444] Entry[9444]
  [9445] (9777)Normal[9445] let ForInOfStatement = this
  [9446] (9781/1) Normal[9446] return [? __x1__]
  [9447] Exit[9447]
  [9448] (9778/0) Call[9448] app __x0__ = (ForInOfHeadEvaluation (new []) AssignmentExpression ~async-iterate~)
  [9449] (9779/0) Normal[9449] let keyResult = [? __x0__]
  [9450] (9780/1) Call[9450] app __x1__ = (ForInOfBodyEvaluation ForBinding Statement keyResult ~iterate~ ~varBinding~ labelSet ~async~)
Algo: ForInOfStatement[7,0].HasCallInTailPosition [912]
  [9451] Entry[9451]
  [9452] (9783)Normal[9452] let ForInOfStatement = this
  [9453] (9784/0) Call[9453] access __x0__ = (Statement "HasCallInTailPosition" call)
  [9454] (9785/0) Normal[9454] return __x0__
  [9455] Exit[9455]
Algo: ForInOfStatement[7,0].VarDeclaredNames [913]
  [9456] Entry[9456]
  [9457] (9787)Normal[9457] let ForInOfStatement = this
  [9458] (9791/1) Normal[9458] let __x2__ = __x1__
  [9459] (9792/1) Normal[9459] let __x3__ = 0i
  [9460] (9797/1) Normal[9460] append __x4__ -> names
  [9461] LoopCont[9461]
  [9462] (9788/0) Call[9462] access __x0__ = (ForBinding "BoundNames")
  [9463] (9793/1) Loop[9463] (< __x3__ __x2__.length)
  [9464] (9796/1) Normal[9464] __x3__ = (+ __x3__ 1i)
  [9465] (9789/0) Normal[9465] let names = __x0__
  [9466] (9798/2) Normal[9466] return names
  [9467] Exit[9467]
  [9468] (9795/1) Normal[9468] let __x4__ = __x2__[__x3__]
  [9469] (9790/1) Call[9469] access __x1__ = (Statement "VarDeclaredNames")
Algo: ForInOfStatement[7,0].VarScopedDeclarations [914]
  [9470] Entry[9470]
  [9471] (9800)Normal[9471] let ForInOfStatement = this
  [9472] (9804/1) Normal[9472] let __x2__ = 0i
  [9473] (9805/1) Loop[9473] (< __x2__ __x1__.length)
  [9474] LoopCont[9474]
  [9475] (9801/0) Normal[9475] let declarations = (new [ForBinding])
  [9476] (9807/1) Normal[9476] let __x3__ = __x1__[__x2__]
  [9477] (9810/2) Normal[9477] return declarations
  [9478] (9809/1) Normal[9478] append __x3__ -> declarations
  [9479] (9802/1) Call[9479] access __x0__ = (Statement "VarScopedDeclarations")
  [9480] (9808/1) Normal[9480] __x2__ = (+ __x2__ 1i)
  [9481] (9803/1) Normal[9481] let __x1__ = __x0__
  [9482] Exit[9482]
Algo: ForInOfStatement[8,0].ContainsDuplicateLabels [915]
  [9483] Entry[9483]
  [9484] (9812)Normal[9484] let ForInOfStatement = this
  [9485] (9813/0) Call[9485] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9486] (9814/0) Normal[9486] return __x0__
  [9487] Exit[9487]
Algo: ForInOfStatement[8,0].ContainsUndefinedBreakTarget [916]
  [9488] Entry[9488]
  [9489] (9816)Normal[9489] let ForInOfStatement = this
  [9490] (9817/0) Call[9490] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9491] (9818/0) Normal[9491] return __x0__
  [9492] Exit[9492]
Algo: ForInOfStatement[8,0].ContainsUndefinedContinueTarget [917]
  [9493] Entry[9493]
  [9494] (9820)Normal[9494] let ForInOfStatement = this
  [9495] (9821/0) Call[9495] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9496] (9822/0) Normal[9496] return __x0__
  [9497] Exit[9497]
Algo: ForInOfStatement[8,0].EarlyErrors [918]
  [9498] Entry[9498]
  [9499] (9824)Normal[9499] let ForInOfStatement = this
  [9500] (9829/1) Call[9500] access __x1__ = (ForDeclaration "BoundNames")
  [9501] (9830/1) Call[9501] access __x2__ = (Statement "VarDeclaredNames")
  [9502] (9834/1) Normal[9502] let __x6__ = 0i
  [9503] (9835/1) Normal[9503] let __x7__ = false
  [9504] (9849/2) Normal[9504] throw SyntaxError
  [9505] Exit[9505]
  [9506] (9839/1) Loop[9506] (< __x6__ __x4__.length)
  [9507] (9840/1) If[9507] (= __x3__[__x5__] __x4__[__x6__])
  [9508] LoopCont[9508]
  [9509] (9844/1) Normal[9509] throw SyntaxError
  [9510] (9846/2) Call[9510] access __x8__ = (ForDeclaration "BoundNames")
  [9511] (9825/0) Call[9511] access __x0__ = (ForDeclaration "BoundNames")
  [9512] (9831/1) Normal[9512] let __x3__ = __x1__
  [9513] (9847/2) Call[9513] app __x9__ = (IsDuplicate __x8__)
  [9514] (9833/1) Normal[9514] let __x5__ = 0i
  [9515] (9838/1) Normal[9515] __x6__ = 0i
  [9516] (9826/0) If[9516] (contains __x0__ "let")
  [9517] LoopCont[9517]
  [9518] (9848/2) If[9518] __x9__
  [9519] (9836/1) Loop[9519] (< __x5__ __x3__.length)
  [9520] (9843/1) If[9520] __x7__
  [9521] (9832/1) Normal[9521] let __x4__ = __x2__
  [9522] (9827/0) Normal[9522] throw SyntaxError
  [9523] (9841/1) Normal[9523] __x7__ = true
Algo: ForInOfStatement[8,0].ForInOfLoopEvaluation [919]
  [9524] Entry[9524]
  [9525] (9852)Normal[9525] let ForInOfStatement = this
  [9526] (9856/1) Call[9526] app __x2__ = (ForInOfBodyEvaluation ForDeclaration Statement keyResult ~iterate~ ~lexicalBinding~ labelSet ~async~)
  [9527] (9857/1) Normal[9527] return [? __x2__]
  [9528] (9853/0) Call[9528] access __x0__ = (ForDeclaration "BoundNames")
  [9529] Exit[9529]
  [9530] (9854/0) Call[9530] app __x1__ = (ForInOfHeadEvaluation __x0__ AssignmentExpression ~async-iterate~)
  [9531] (9855/0) Normal[9531] let keyResult = [? __x1__]
Algo: ForInOfStatement[8,0].HasCallInTailPosition [920]
  [9532] Entry[9532]
  [9533] (9859)Normal[9533] let ForInOfStatement = this
  [9534] (9860/0) Call[9534] access __x0__ = (Statement "HasCallInTailPosition" call)
  [9535] (9861/0) Normal[9535] return __x0__
  [9536] Exit[9536]
Algo: ForInOfStatement[8,0].VarDeclaredNames [921]
  [9537] Entry[9537]
  [9538] (9863)Normal[9538] let ForInOfStatement = this
  [9539] (9864/0) Call[9539] access __x0__ = (Statement "VarDeclaredNames")
  [9540] (9865/0) Normal[9540] return __x0__
  [9541] Exit[9541]
Algo: ForInOfStatement[8,0].VarScopedDeclarations [922]
  [9542] Entry[9542]
  [9543] (9867)Normal[9543] let ForInOfStatement = this
  [9544] (9868/0) Call[9544] access __x0__ = (Statement "VarScopedDeclarations")
  [9545] (9869/0) Normal[9545] return __x0__
  [9546] Exit[9546]
Algo: ForStatement[0,0].ContainsDuplicateLabels [923]
  [9547] Entry[9547]
  [9548] (9871)Normal[9548] let ForStatement = this
  [9549] (9872/0) Call[9549] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9550] (9873/0) Normal[9550] return __x0__
  [9551] Exit[9551]
Algo: ForStatement[0,0].ContainsUndefinedBreakTarget [924]
  [9552] Entry[9552]
  [9553] (9875)Normal[9553] let ForStatement = this
  [9554] (9876/0) Call[9554] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9555] (9877/0) Normal[9555] return __x0__
  [9556] Exit[9556]
Algo: ForStatement[0,0].ContainsUndefinedContinueTarget [925]
  [9557] Entry[9557]
  [9558] (9879)Normal[9558] let ForStatement = this
  [9559] (9880/0) Call[9559] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9560] (9881/0) Normal[9560] return __x0__
  [9561] Exit[9561]
Algo: ForStatement[0,0].EarlyErrors [926]
  [9562] Entry[9562]
  [9563] (9883)Normal[9563] let ForStatement = this
  [9564] (9884/0) Call[9564] app __x0__ = (IsLabelledFunction Statement)
  [9565] (9885/0) If[9565] (= __x0__ true)
  [9566] (9886/0) Normal[9566] throw SyntaxError
  [9567] Exit[9567]
Algo: ForStatement[0,0].ForLoopEvaluation [927]
  [9568] Entry[9568]
  [9569] (9889)Normal[9569] let ForStatement = this
  [9570] (9894/2) Call[9570] app __x1__ = (GetValue exprRef)
  [9571] (9895/2) Normal[9571] [? __x1__]
  [9572] (9890/0) If[9572] (! (= Expression0 absent))
  [9573] (9897/3) Call[9573] app __x2__ = (ForBodyEvaluation Expression1 Expression2 Statement (new []) labelSet)
  [9574] (9892/1) Call[9574] access __x0__ = (Expression0 "Evaluation")
  [9575] (9898/3) Normal[9575] return [? __x2__]
  [9576] (9893/1) Normal[9576] let exprRef = __x0__
  [9577] Exit[9577]
Algo: ForStatement[0,0].HasCallInTailPosition [928]
  [9578] Entry[9578]
  [9579] (9900)Normal[9579] let ForStatement = this
  [9580] (9901/0) Call[9580] access __x0__ = (Statement "HasCallInTailPosition" call)
  [9581] (9902/0) Normal[9581] return __x0__
  [9582] Exit[9582]
Algo: ForStatement[0,0].VarDeclaredNames [929]
  [9583] Entry[9583]
  [9584] (9904)Normal[9584] let ForStatement = this
  [9585] (9905/0) Call[9585] access __x0__ = (Statement "VarDeclaredNames")
  [9586] (9906/0) Normal[9586] return __x0__
  [9587] Exit[9587]
Algo: ForStatement[0,0].VarScopedDeclarations [930]
  [9588] Entry[9588]
  [9589] (9908)Normal[9589] let ForStatement = this
  [9590] (9909/0) Call[9590] access __x0__ = (Statement "VarScopedDeclarations")
  [9591] (9910/0) Normal[9591] return __x0__
  [9592] Exit[9592]
Algo: ForStatement[0,1].ContainsDuplicateLabels [931]
  [9593] Entry[9593]
  [9594] (9912)Normal[9594] let ForStatement = this
  [9595] (9913/0) Call[9595] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9596] (9914/0) Normal[9596] return __x0__
  [9597] Exit[9597]
Algo: ForStatement[0,1].ContainsUndefinedBreakTarget [932]
  [9598] Entry[9598]
  [9599] (9916)Normal[9599] let ForStatement = this
  [9600] (9917/0) Call[9600] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9601] (9918/0) Normal[9601] return __x0__
  [9602] Exit[9602]
Algo: ForStatement[0,1].ContainsUndefinedContinueTarget [933]
  [9603] Entry[9603]
  [9604] (9920)Normal[9604] let ForStatement = this
  [9605] (9921/0) Call[9605] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9606] (9922/0) Normal[9606] return __x0__
  [9607] Exit[9607]
Algo: ForStatement[0,1].EarlyErrors [934]
  [9608] Entry[9608]
  [9609] (9924)Normal[9609] let ForStatement = this
  [9610] (9925/0) Call[9610] app __x0__ = (IsLabelledFunction Statement)
  [9611] (9926/0) If[9611] (= __x0__ true)
  [9612] (9927/0) Normal[9612] throw SyntaxError
  [9613] Exit[9613]
Algo: ForStatement[0,1].ForLoopEvaluation [935]
  [9614] Entry[9614]
  [9615] (9930)Normal[9615] let ForStatement = this
  [9616] (9935/2) Call[9616] app __x1__ = (GetValue exprRef)
  [9617] (9936/2) Normal[9617] [? __x1__]
  [9618] (9931/0) If[9618] (! (= Expression0 absent))
  [9619] (9938/3) Call[9619] app __x2__ = (ForBodyEvaluation Expression1 Expression2 Statement (new []) labelSet)
  [9620] (9933/1) Call[9620] access __x0__ = (Expression0 "Evaluation")
  [9621] (9939/3) Normal[9621] return [? __x2__]
  [9622] (9934/1) Normal[9622] let exprRef = __x0__
  [9623] Exit[9623]
Algo: ForStatement[0,1].HasCallInTailPosition [936]
  [9624] Entry[9624]
  [9625] (9941)Normal[9625] let ForStatement = this
  [9626] (9942/0) Call[9626] access __x0__ = (Statement "HasCallInTailPosition" call)
  [9627] (9943/0) Normal[9627] return __x0__
  [9628] Exit[9628]
Algo: ForStatement[0,1].VarDeclaredNames [937]
  [9629] Entry[9629]
  [9630] (9945)Normal[9630] let ForStatement = this
  [9631] (9946/0) Call[9631] access __x0__ = (Statement "VarDeclaredNames")
  [9632] (9947/0) Normal[9632] return __x0__
  [9633] Exit[9633]
Algo: ForStatement[0,1].VarScopedDeclarations [938]
  [9634] Entry[9634]
  [9635] (9949)Normal[9635] let ForStatement = this
  [9636] (9950/0) Call[9636] access __x0__ = (Statement "VarScopedDeclarations")
  [9637] (9951/0) Normal[9637] return __x0__
  [9638] Exit[9638]
Algo: ForStatement[0,2].ContainsDuplicateLabels [939]
  [9639] Entry[9639]
  [9640] (9953)Normal[9640] let ForStatement = this
  [9641] (9954/0) Call[9641] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9642] (9955/0) Normal[9642] return __x0__
  [9643] Exit[9643]
Algo: ForStatement[0,2].ContainsUndefinedBreakTarget [940]
  [9644] Entry[9644]
  [9645] (9957)Normal[9645] let ForStatement = this
  [9646] (9958/0) Call[9646] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9647] (9959/0) Normal[9647] return __x0__
  [9648] Exit[9648]
Algo: ForStatement[0,2].ContainsUndefinedContinueTarget [941]
  [9649] Entry[9649]
  [9650] (9961)Normal[9650] let ForStatement = this
  [9651] (9962/0) Call[9651] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9652] (9963/0) Normal[9652] return __x0__
  [9653] Exit[9653]
Algo: ForStatement[0,2].EarlyErrors [942]
  [9654] Entry[9654]
  [9655] (9965)Normal[9655] let ForStatement = this
  [9656] (9966/0) Call[9656] app __x0__ = (IsLabelledFunction Statement)
  [9657] (9967/0) If[9657] (= __x0__ true)
  [9658] (9968/0) Normal[9658] throw SyntaxError
  [9659] Exit[9659]
Algo: ForStatement[0,2].ForLoopEvaluation [943]
  [9660] Entry[9660]
  [9661] (9971)Normal[9661] let ForStatement = this
  [9662] (9976/2) Call[9662] app __x1__ = (GetValue exprRef)
  [9663] (9977/2) Normal[9663] [? __x1__]
  [9664] (9972/0) If[9664] (! (= Expression0 absent))
  [9665] (9979/3) Call[9665] app __x2__ = (ForBodyEvaluation Expression1 Expression2 Statement (new []) labelSet)
  [9666] (9974/1) Call[9666] access __x0__ = (Expression0 "Evaluation")
  [9667] (9980/3) Normal[9667] return [? __x2__]
  [9668] (9975/1) Normal[9668] let exprRef = __x0__
  [9669] Exit[9669]
Algo: ForStatement[0,2].HasCallInTailPosition [944]
  [9670] Entry[9670]
  [9671] (9982)Normal[9671] let ForStatement = this
  [9672] (9983/0) Call[9672] access __x0__ = (Statement "HasCallInTailPosition" call)
  [9673] (9984/0) Normal[9673] return __x0__
  [9674] Exit[9674]
Algo: ForStatement[0,2].VarDeclaredNames [945]
  [9675] Entry[9675]
  [9676] (9986)Normal[9676] let ForStatement = this
  [9677] (9987/0) Call[9677] access __x0__ = (Statement "VarDeclaredNames")
  [9678] (9988/0) Normal[9678] return __x0__
  [9679] Exit[9679]
Algo: ForStatement[0,2].VarScopedDeclarations [946]
  [9680] Entry[9680]
  [9681] (9990)Normal[9681] let ForStatement = this
  [9682] (9991/0) Call[9682] access __x0__ = (Statement "VarScopedDeclarations")
  [9683] (9992/0) Normal[9683] return __x0__
  [9684] Exit[9684]
Algo: ForStatement[0,3].ContainsDuplicateLabels [947]
  [9685] Entry[9685]
  [9686] (9994)Normal[9686] let ForStatement = this
  [9687] (9995/0) Call[9687] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9688] (9996/0) Normal[9688] return __x0__
  [9689] Exit[9689]
Algo: ForStatement[0,3].ContainsUndefinedBreakTarget [948]
  [9690] Entry[9690]
  [9691] (9998)Normal[9691] let ForStatement = this
  [9692] (9999/0) Call[9692] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9693] (10000/0) Normal[9693] return __x0__
  [9694] Exit[9694]
Algo: ForStatement[0,3].ContainsUndefinedContinueTarget [949]
  [9695] Entry[9695]
  [9696] (10002)Normal[9696] let ForStatement = this
  [9697] (10003/0) Call[9697] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9698] (10004/0) Normal[9698] return __x0__
  [9699] Exit[9699]
Algo: ForStatement[0,3].EarlyErrors [950]
  [9700] Entry[9700]
  [9701] (10006)Normal[9701] let ForStatement = this
  [9702] (10007/0) Call[9702] app __x0__ = (IsLabelledFunction Statement)
  [9703] (10008/0) If[9703] (= __x0__ true)
  [9704] (10009/0) Normal[9704] throw SyntaxError
  [9705] Exit[9705]
Algo: ForStatement[0,3].ForLoopEvaluation [951]
  [9706] Entry[9706]
  [9707] (10012)Normal[9707] let ForStatement = this
  [9708] (10017/2) Call[9708] app __x1__ = (GetValue exprRef)
  [9709] (10018/2) Normal[9709] [? __x1__]
  [9710] (10013/0) If[9710] (! (= Expression0 absent))
  [9711] (10020/3) Call[9711] app __x2__ = (ForBodyEvaluation Expression1 Expression2 Statement (new []) labelSet)
  [9712] (10015/1) Call[9712] access __x0__ = (Expression0 "Evaluation")
  [9713] (10021/3) Normal[9713] return [? __x2__]
  [9714] (10016/1) Normal[9714] let exprRef = __x0__
  [9715] Exit[9715]
Algo: ForStatement[0,3].HasCallInTailPosition [952]
  [9716] Entry[9716]
  [9717] (10023)Normal[9717] let ForStatement = this
  [9718] (10024/0) Call[9718] access __x0__ = (Statement "HasCallInTailPosition" call)
  [9719] (10025/0) Normal[9719] return __x0__
  [9720] Exit[9720]
Algo: ForStatement[0,3].VarDeclaredNames [953]
  [9721] Entry[9721]
  [9722] (10027)Normal[9722] let ForStatement = this
  [9723] (10028/0) Call[9723] access __x0__ = (Statement "VarDeclaredNames")
  [9724] (10029/0) Normal[9724] return __x0__
  [9725] Exit[9725]
Algo: ForStatement[0,3].VarScopedDeclarations [954]
  [9726] Entry[9726]
  [9727] (10031)Normal[9727] let ForStatement = this
  [9728] (10032/0) Call[9728] access __x0__ = (Statement "VarScopedDeclarations")
  [9729] (10033/0) Normal[9729] return __x0__
  [9730] Exit[9730]
Algo: ForStatement[0,4].ContainsDuplicateLabels [955]
  [9731] Entry[9731]
  [9732] (10035)Normal[9732] let ForStatement = this
  [9733] (10036/0) Call[9733] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9734] (10037/0) Normal[9734] return __x0__
  [9735] Exit[9735]
Algo: ForStatement[0,4].ContainsUndefinedBreakTarget [956]
  [9736] Entry[9736]
  [9737] (10039)Normal[9737] let ForStatement = this
  [9738] (10040/0) Call[9738] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9739] (10041/0) Normal[9739] return __x0__
  [9740] Exit[9740]
Algo: ForStatement[0,4].ContainsUndefinedContinueTarget [957]
  [9741] Entry[9741]
  [9742] (10043)Normal[9742] let ForStatement = this
  [9743] (10044/0) Call[9743] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9744] (10045/0) Normal[9744] return __x0__
  [9745] Exit[9745]
Algo: ForStatement[0,4].EarlyErrors [958]
  [9746] Entry[9746]
  [9747] (10047)Normal[9747] let ForStatement = this
  [9748] (10048/0) Call[9748] app __x0__ = (IsLabelledFunction Statement)
  [9749] (10049/0) If[9749] (= __x0__ true)
  [9750] (10050/0) Normal[9750] throw SyntaxError
  [9751] Exit[9751]
Algo: ForStatement[0,4].ForLoopEvaluation [959]
  [9752] Entry[9752]
  [9753] (10053)Normal[9753] let ForStatement = this
  [9754] (10058/2) Call[9754] app __x1__ = (GetValue exprRef)
  [9755] (10059/2) Normal[9755] [? __x1__]
  [9756] (10054/0) If[9756] (! (= Expression0 absent))
  [9757] (10061/3) Call[9757] app __x2__ = (ForBodyEvaluation Expression1 Expression2 Statement (new []) labelSet)
  [9758] (10056/1) Call[9758] access __x0__ = (Expression0 "Evaluation")
  [9759] (10062/3) Normal[9759] return [? __x2__]
  [9760] (10057/1) Normal[9760] let exprRef = __x0__
  [9761] Exit[9761]
Algo: ForStatement[0,4].HasCallInTailPosition [960]
  [9762] Entry[9762]
  [9763] (10064)Normal[9763] let ForStatement = this
  [9764] (10065/0) Call[9764] access __x0__ = (Statement "HasCallInTailPosition" call)
  [9765] (10066/0) Normal[9765] return __x0__
  [9766] Exit[9766]
Algo: ForStatement[0,4].VarDeclaredNames [961]
  [9767] Entry[9767]
  [9768] (10068)Normal[9768] let ForStatement = this
  [9769] (10069/0) Call[9769] access __x0__ = (Statement "VarDeclaredNames")
  [9770] (10070/0) Normal[9770] return __x0__
  [9771] Exit[9771]
Algo: ForStatement[0,4].VarScopedDeclarations [962]
  [9772] Entry[9772]
  [9773] (10072)Normal[9773] let ForStatement = this
  [9774] (10073/0) Call[9774] access __x0__ = (Statement "VarScopedDeclarations")
  [9775] (10074/0) Normal[9775] return __x0__
  [9776] Exit[9776]
Algo: ForStatement[0,5].ContainsDuplicateLabels [963]
  [9777] Entry[9777]
  [9778] (10076)Normal[9778] let ForStatement = this
  [9779] (10077/0) Call[9779] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9780] (10078/0) Normal[9780] return __x0__
  [9781] Exit[9781]
Algo: ForStatement[0,5].ContainsUndefinedBreakTarget [964]
  [9782] Entry[9782]
  [9783] (10080)Normal[9783] let ForStatement = this
  [9784] (10081/0) Call[9784] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9785] (10082/0) Normal[9785] return __x0__
  [9786] Exit[9786]
Algo: ForStatement[0,5].ContainsUndefinedContinueTarget [965]
  [9787] Entry[9787]
  [9788] (10084)Normal[9788] let ForStatement = this
  [9789] (10085/0) Call[9789] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9790] (10086/0) Normal[9790] return __x0__
  [9791] Exit[9791]
Algo: ForStatement[0,5].EarlyErrors [966]
  [9792] Entry[9792]
  [9793] (10088)Normal[9793] let ForStatement = this
  [9794] (10089/0) Call[9794] app __x0__ = (IsLabelledFunction Statement)
  [9795] (10090/0) If[9795] (= __x0__ true)
  [9796] (10091/0) Normal[9796] throw SyntaxError
  [9797] Exit[9797]
Algo: ForStatement[0,5].ForLoopEvaluation [967]
  [9798] Entry[9798]
  [9799] (10094)Normal[9799] let ForStatement = this
  [9800] (10099/2) Call[9800] app __x1__ = (GetValue exprRef)
  [9801] (10100/2) Normal[9801] [? __x1__]
  [9802] (10095/0) If[9802] (! (= Expression0 absent))
  [9803] (10102/3) Call[9803] app __x2__ = (ForBodyEvaluation Expression1 Expression2 Statement (new []) labelSet)
  [9804] (10097/1) Call[9804] access __x0__ = (Expression0 "Evaluation")
  [9805] (10103/3) Normal[9805] return [? __x2__]
  [9806] (10098/1) Normal[9806] let exprRef = __x0__
  [9807] Exit[9807]
Algo: ForStatement[0,5].HasCallInTailPosition [968]
  [9808] Entry[9808]
  [9809] (10105)Normal[9809] let ForStatement = this
  [9810] (10106/0) Call[9810] access __x0__ = (Statement "HasCallInTailPosition" call)
  [9811] (10107/0) Normal[9811] return __x0__
  [9812] Exit[9812]
Algo: ForStatement[0,5].VarDeclaredNames [969]
  [9813] Entry[9813]
  [9814] (10109)Normal[9814] let ForStatement = this
  [9815] (10110/0) Call[9815] access __x0__ = (Statement "VarDeclaredNames")
  [9816] (10111/0) Normal[9816] return __x0__
  [9817] Exit[9817]
Algo: ForStatement[0,5].VarScopedDeclarations [970]
  [9818] Entry[9818]
  [9819] (10113)Normal[9819] let ForStatement = this
  [9820] (10114/0) Call[9820] access __x0__ = (Statement "VarScopedDeclarations")
  [9821] (10115/0) Normal[9821] return __x0__
  [9822] Exit[9822]
Algo: ForStatement[0,6].ContainsDuplicateLabels [971]
  [9823] Entry[9823]
  [9824] (10117)Normal[9824] let ForStatement = this
  [9825] (10118/0) Call[9825] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9826] (10119/0) Normal[9826] return __x0__
  [9827] Exit[9827]
Algo: ForStatement[0,6].ContainsUndefinedBreakTarget [972]
  [9828] Entry[9828]
  [9829] (10121)Normal[9829] let ForStatement = this
  [9830] (10122/0) Call[9830] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9831] (10123/0) Normal[9831] return __x0__
  [9832] Exit[9832]
Algo: ForStatement[0,6].ContainsUndefinedContinueTarget [973]
  [9833] Entry[9833]
  [9834] (10125)Normal[9834] let ForStatement = this
  [9835] (10126/0) Call[9835] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9836] (10127/0) Normal[9836] return __x0__
  [9837] Exit[9837]
Algo: ForStatement[0,6].EarlyErrors [974]
  [9838] Entry[9838]
  [9839] (10129)Normal[9839] let ForStatement = this
  [9840] (10130/0) Call[9840] app __x0__ = (IsLabelledFunction Statement)
  [9841] (10131/0) If[9841] (= __x0__ true)
  [9842] (10132/0) Normal[9842] throw SyntaxError
  [9843] Exit[9843]
Algo: ForStatement[0,6].ForLoopEvaluation [975]
  [9844] Entry[9844]
  [9845] (10135)Normal[9845] let ForStatement = this
  [9846] (10140/2) Call[9846] app __x1__ = (GetValue exprRef)
  [9847] (10141/2) Normal[9847] [? __x1__]
  [9848] (10136/0) If[9848] (! (= Expression0 absent))
  [9849] (10143/3) Call[9849] app __x2__ = (ForBodyEvaluation Expression1 Expression2 Statement (new []) labelSet)
  [9850] (10138/1) Call[9850] access __x0__ = (Expression0 "Evaluation")
  [9851] (10144/3) Normal[9851] return [? __x2__]
  [9852] (10139/1) Normal[9852] let exprRef = __x0__
  [9853] Exit[9853]
Algo: ForStatement[0,6].HasCallInTailPosition [976]
  [9854] Entry[9854]
  [9855] (10146)Normal[9855] let ForStatement = this
  [9856] (10147/0) Call[9856] access __x0__ = (Statement "HasCallInTailPosition" call)
  [9857] (10148/0) Normal[9857] return __x0__
  [9858] Exit[9858]
Algo: ForStatement[0,6].VarDeclaredNames [977]
  [9859] Entry[9859]
  [9860] (10150)Normal[9860] let ForStatement = this
  [9861] (10151/0) Call[9861] access __x0__ = (Statement "VarDeclaredNames")
  [9862] (10152/0) Normal[9862] return __x0__
  [9863] Exit[9863]
Algo: ForStatement[0,6].VarScopedDeclarations [978]
  [9864] Entry[9864]
  [9865] (10154)Normal[9865] let ForStatement = this
  [9866] (10155/0) Call[9866] access __x0__ = (Statement "VarScopedDeclarations")
  [9867] (10156/0) Normal[9867] return __x0__
  [9868] Exit[9868]
Algo: ForStatement[0,7].ContainsDuplicateLabels [979]
  [9869] Entry[9869]
  [9870] (10158)Normal[9870] let ForStatement = this
  [9871] (10159/0) Call[9871] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9872] (10160/0) Normal[9872] return __x0__
  [9873] Exit[9873]
Algo: ForStatement[0,7].ContainsUndefinedBreakTarget [980]
  [9874] Entry[9874]
  [9875] (10162)Normal[9875] let ForStatement = this
  [9876] (10163/0) Call[9876] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9877] (10164/0) Normal[9877] return __x0__
  [9878] Exit[9878]
Algo: ForStatement[0,7].ContainsUndefinedContinueTarget [981]
  [9879] Entry[9879]
  [9880] (10166)Normal[9880] let ForStatement = this
  [9881] (10167/0) Call[9881] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9882] (10168/0) Normal[9882] return __x0__
  [9883] Exit[9883]
Algo: ForStatement[0,7].EarlyErrors [982]
  [9884] Entry[9884]
  [9885] (10170)Normal[9885] let ForStatement = this
  [9886] (10171/0) Call[9886] app __x0__ = (IsLabelledFunction Statement)
  [9887] (10172/0) If[9887] (= __x0__ true)
  [9888] (10173/0) Normal[9888] throw SyntaxError
  [9889] Exit[9889]
Algo: ForStatement[0,7].ForLoopEvaluation [983]
  [9890] Entry[9890]
  [9891] (10176)Normal[9891] let ForStatement = this
  [9892] (10181/2) Call[9892] app __x1__ = (GetValue exprRef)
  [9893] (10182/2) Normal[9893] [? __x1__]
  [9894] (10177/0) If[9894] (! (= Expression0 absent))
  [9895] (10184/3) Call[9895] app __x2__ = (ForBodyEvaluation Expression1 Expression2 Statement (new []) labelSet)
  [9896] (10179/1) Call[9896] access __x0__ = (Expression0 "Evaluation")
  [9897] (10185/3) Normal[9897] return [? __x2__]
  [9898] (10180/1) Normal[9898] let exprRef = __x0__
  [9899] Exit[9899]
Algo: ForStatement[0,7].HasCallInTailPosition [984]
  [9900] Entry[9900]
  [9901] (10187)Normal[9901] let ForStatement = this
  [9902] (10188/0) Call[9902] access __x0__ = (Statement "HasCallInTailPosition" call)
  [9903] (10189/0) Normal[9903] return __x0__
  [9904] Exit[9904]
Algo: ForStatement[0,7].VarDeclaredNames [985]
  [9905] Entry[9905]
  [9906] (10191)Normal[9906] let ForStatement = this
  [9907] (10192/0) Call[9907] access __x0__ = (Statement "VarDeclaredNames")
  [9908] (10193/0) Normal[9908] return __x0__
  [9909] Exit[9909]
Algo: ForStatement[0,7].VarScopedDeclarations [986]
  [9910] Entry[9910]
  [9911] (10195)Normal[9911] let ForStatement = this
  [9912] (10196/0) Call[9912] access __x0__ = (Statement "VarScopedDeclarations")
  [9913] (10197/0) Normal[9913] return __x0__
  [9914] Exit[9914]
Algo: ForStatement[1,0].ContainsDuplicateLabels [987]
  [9915] Entry[9915]
  [9916] (10199)Normal[9916] let ForStatement = this
  [9917] (10200/0) Call[9917] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9918] (10201/0) Normal[9918] return __x0__
  [9919] Exit[9919]
Algo: ForStatement[1,0].ContainsUndefinedBreakTarget [988]
  [9920] Entry[9920]
  [9921] (10203)Normal[9921] let ForStatement = this
  [9922] (10204/0) Call[9922] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9923] (10205/0) Normal[9923] return __x0__
  [9924] Exit[9924]
Algo: ForStatement[1,0].ContainsUndefinedContinueTarget [989]
  [9925] Entry[9925]
  [9926] (10207)Normal[9926] let ForStatement = this
  [9927] (10208/0) Call[9927] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9928] (10209/0) Normal[9928] return __x0__
  [9929] Exit[9929]
Algo: ForStatement[1,0].EarlyErrors [990]
  [9930] Entry[9930]
  [9931] (10211)Normal[9931] let ForStatement = this
  [9932] (10212/0) Call[9932] app __x0__ = (IsLabelledFunction Statement)
  [9933] (10213/0) If[9933] (= __x0__ true)
  [9934] (10214/0) Normal[9934] throw SyntaxError
  [9935] Exit[9935]
Algo: ForStatement[1,0].ForLoopEvaluation [991]
  [9936] Entry[9936]
  [9937] (10217)Normal[9937] let ForStatement = this
  [9938] (10221/2) Call[9938] app __x1__ = (ForBodyEvaluation Expression0 Expression1 Statement (new []) labelSet)
  [9939] (10222/2) Normal[9939] return [? __x1__]
  [9940] (10218/0) Call[9940] access __x0__ = (VariableDeclarationList "Evaluation")
  [9941] Exit[9941]
  [9942] (10219/0) Normal[9942] let varDcl = __x0__
  [9943] (10220/1) Normal[9943] [? varDcl]
Algo: ForStatement[1,0].HasCallInTailPosition [992]
  [9944] Entry[9944]
  [9945] (10224)Normal[9945] let ForStatement = this
  [9946] (10225/0) Call[9946] access __x0__ = (Statement "HasCallInTailPosition" call)
  [9947] (10226/0) Normal[9947] return __x0__
  [9948] Exit[9948]
Algo: ForStatement[1,0].VarDeclaredNames [993]
  [9949] Entry[9949]
  [9950] (10228)Normal[9950] let ForStatement = this
  [9951] (10232/1) Normal[9951] let __x2__ = __x1__
  [9952] (10233/1) Normal[9952] let __x3__ = 0i
  [9953] (10238/1) Normal[9953] append __x4__ -> names
  [9954] LoopCont[9954]
  [9955] (10229/0) Call[9955] access __x0__ = (VariableDeclarationList "BoundNames")
  [9956] (10234/1) Loop[9956] (< __x3__ __x2__.length)
  [9957] (10237/1) Normal[9957] __x3__ = (+ __x3__ 1i)
  [9958] (10230/0) Normal[9958] let names = __x0__
  [9959] (10239/2) Normal[9959] return names
  [9960] Exit[9960]
  [9961] (10236/1) Normal[9961] let __x4__ = __x2__[__x3__]
  [9962] (10231/1) Call[9962] access __x1__ = (Statement "VarDeclaredNames")
Algo: ForStatement[1,0].VarScopedDeclarations [994]
  [9963] Entry[9963]
  [9964] (10241)Normal[9964] let ForStatement = this
  [9965] (10245/1) Normal[9965] let __x2__ = __x1__
  [9966] (10246/1) Normal[9966] let __x3__ = 0i
  [9967] (10251/1) Normal[9967] append __x4__ -> declarations
  [9968] LoopCont[9968]
  [9969] (10242/0) Call[9969] access __x0__ = (VariableDeclarationList "VarScopedDeclarations")
  [9970] (10247/1) Loop[9970] (< __x3__ __x2__.length)
  [9971] (10250/1) Normal[9971] __x3__ = (+ __x3__ 1i)
  [9972] (10243/0) Normal[9972] let declarations = __x0__
  [9973] (10252/2) Normal[9973] return declarations
  [9974] Exit[9974]
  [9975] (10249/1) Normal[9975] let __x4__ = __x2__[__x3__]
  [9976] (10244/1) Call[9976] access __x1__ = (Statement "VarScopedDeclarations")
Algo: ForStatement[1,1].ContainsDuplicateLabels [995]
  [9977] Entry[9977]
  [9978] (10254)Normal[9978] let ForStatement = this
  [9979] (10255/0) Call[9979] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [9980] (10256/0) Normal[9980] return __x0__
  [9981] Exit[9981]
Algo: ForStatement[1,1].ContainsUndefinedBreakTarget [996]
  [9982] Entry[9982]
  [9983] (10258)Normal[9983] let ForStatement = this
  [9984] (10259/0) Call[9984] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [9985] (10260/0) Normal[9985] return __x0__
  [9986] Exit[9986]
Algo: ForStatement[1,1].ContainsUndefinedContinueTarget [997]
  [9987] Entry[9987]
  [9988] (10262)Normal[9988] let ForStatement = this
  [9989] (10263/0) Call[9989] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [9990] (10264/0) Normal[9990] return __x0__
  [9991] Exit[9991]
Algo: ForStatement[1,1].EarlyErrors [998]
  [9992] Entry[9992]
  [9993] (10266)Normal[9993] let ForStatement = this
  [9994] (10267/0) Call[9994] app __x0__ = (IsLabelledFunction Statement)
  [9995] (10268/0) If[9995] (= __x0__ true)
  [9996] (10269/0) Normal[9996] throw SyntaxError
  [9997] Exit[9997]
Algo: ForStatement[1,1].ForLoopEvaluation [999]
  [9998] Entry[9998]
  [9999] (10272)Normal[9999] let ForStatement = this
  [10000] (10276/2) Call[10000] app __x1__ = (ForBodyEvaluation Expression0 Expression1 Statement (new []) labelSet)
  [10001] (10277/2) Normal[10001] return [? __x1__]
  [10002] (10273/0) Call[10002] access __x0__ = (VariableDeclarationList "Evaluation")
  [10003] Exit[10003]
  [10004] (10274/0) Normal[10004] let varDcl = __x0__
  [10005] (10275/1) Normal[10005] [? varDcl]
Algo: ForStatement[1,1].HasCallInTailPosition [1000]
  [10006] Entry[10006]
  [10007] (10279)Normal[10007] let ForStatement = this
  [10008] (10280/0) Call[10008] access __x0__ = (Statement "HasCallInTailPosition" call)
  [10009] (10281/0) Normal[10009] return __x0__
  [10010] Exit[10010]
Algo: ForStatement[1,1].VarDeclaredNames [1001]
  [10011] Entry[10011]
  [10012] (10283)Normal[10012] let ForStatement = this
  [10013] (10287/1) Normal[10013] let __x2__ = __x1__
  [10014] (10288/1) Normal[10014] let __x3__ = 0i
  [10015] (10293/1) Normal[10015] append __x4__ -> names
  [10016] LoopCont[10016]
  [10017] (10284/0) Call[10017] access __x0__ = (VariableDeclarationList "BoundNames")
  [10018] (10289/1) Loop[10018] (< __x3__ __x2__.length)
  [10019] (10292/1) Normal[10019] __x3__ = (+ __x3__ 1i)
  [10020] (10285/0) Normal[10020] let names = __x0__
  [10021] (10294/2) Normal[10021] return names
  [10022] Exit[10022]
  [10023] (10291/1) Normal[10023] let __x4__ = __x2__[__x3__]
  [10024] (10286/1) Call[10024] access __x1__ = (Statement "VarDeclaredNames")
Algo: ForStatement[1,1].VarScopedDeclarations [1002]
  [10025] Entry[10025]
  [10026] (10296)Normal[10026] let ForStatement = this
  [10027] (10300/1) Normal[10027] let __x2__ = __x1__
  [10028] (10301/1) Normal[10028] let __x3__ = 0i
  [10029] (10306/1) Normal[10029] append __x4__ -> declarations
  [10030] LoopCont[10030]
  [10031] (10297/0) Call[10031] access __x0__ = (VariableDeclarationList "VarScopedDeclarations")
  [10032] (10302/1) Loop[10032] (< __x3__ __x2__.length)
  [10033] (10305/1) Normal[10033] __x3__ = (+ __x3__ 1i)
  [10034] (10298/0) Normal[10034] let declarations = __x0__
  [10035] (10307/2) Normal[10035] return declarations
  [10036] Exit[10036]
  [10037] (10304/1) Normal[10037] let __x4__ = __x2__[__x3__]
  [10038] (10299/1) Call[10038] access __x1__ = (Statement "VarScopedDeclarations")
Algo: ForStatement[1,2].ContainsDuplicateLabels [1003]
  [10039] Entry[10039]
  [10040] (10309)Normal[10040] let ForStatement = this
  [10041] (10310/0) Call[10041] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [10042] (10311/0) Normal[10042] return __x0__
  [10043] Exit[10043]
Algo: ForStatement[1,2].ContainsUndefinedBreakTarget [1004]
  [10044] Entry[10044]
  [10045] (10313)Normal[10045] let ForStatement = this
  [10046] (10314/0) Call[10046] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [10047] (10315/0) Normal[10047] return __x0__
  [10048] Exit[10048]
Algo: ForStatement[1,2].ContainsUndefinedContinueTarget [1005]
  [10049] Entry[10049]
  [10050] (10317)Normal[10050] let ForStatement = this
  [10051] (10318/0) Call[10051] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [10052] (10319/0) Normal[10052] return __x0__
  [10053] Exit[10053]
Algo: ForStatement[1,2].EarlyErrors [1006]
  [10054] Entry[10054]
  [10055] (10321)Normal[10055] let ForStatement = this
  [10056] (10322/0) Call[10056] app __x0__ = (IsLabelledFunction Statement)
  [10057] (10323/0) If[10057] (= __x0__ true)
  [10058] (10324/0) Normal[10058] throw SyntaxError
  [10059] Exit[10059]
Algo: ForStatement[1,2].ForLoopEvaluation [1007]
  [10060] Entry[10060]
  [10061] (10327)Normal[10061] let ForStatement = this
  [10062] (10331/2) Call[10062] app __x1__ = (ForBodyEvaluation Expression0 Expression1 Statement (new []) labelSet)
  [10063] (10332/2) Normal[10063] return [? __x1__]
  [10064] (10328/0) Call[10064] access __x0__ = (VariableDeclarationList "Evaluation")
  [10065] Exit[10065]
  [10066] (10329/0) Normal[10066] let varDcl = __x0__
  [10067] (10330/1) Normal[10067] [? varDcl]
Algo: ForStatement[1,2].HasCallInTailPosition [1008]
  [10068] Entry[10068]
  [10069] (10334)Normal[10069] let ForStatement = this
  [10070] (10335/0) Call[10070] access __x0__ = (Statement "HasCallInTailPosition" call)
  [10071] (10336/0) Normal[10071] return __x0__
  [10072] Exit[10072]
Algo: ForStatement[1,2].VarDeclaredNames [1009]
  [10073] Entry[10073]
  [10074] (10338)Normal[10074] let ForStatement = this
  [10075] (10342/1) Normal[10075] let __x2__ = __x1__
  [10076] (10343/1) Normal[10076] let __x3__ = 0i
  [10077] (10348/1) Normal[10077] append __x4__ -> names
  [10078] LoopCont[10078]
  [10079] (10339/0) Call[10079] access __x0__ = (VariableDeclarationList "BoundNames")
  [10080] (10344/1) Loop[10080] (< __x3__ __x2__.length)
  [10081] (10347/1) Normal[10081] __x3__ = (+ __x3__ 1i)
  [10082] (10340/0) Normal[10082] let names = __x0__
  [10083] (10349/2) Normal[10083] return names
  [10084] Exit[10084]
  [10085] (10346/1) Normal[10085] let __x4__ = __x2__[__x3__]
  [10086] (10341/1) Call[10086] access __x1__ = (Statement "VarDeclaredNames")
Algo: ForStatement[1,2].VarScopedDeclarations [1010]
  [10087] Entry[10087]
  [10088] (10351)Normal[10088] let ForStatement = this
  [10089] (10355/1) Normal[10089] let __x2__ = __x1__
  [10090] (10356/1) Normal[10090] let __x3__ = 0i
  [10091] (10361/1) Normal[10091] append __x4__ -> declarations
  [10092] LoopCont[10092]
  [10093] (10352/0) Call[10093] access __x0__ = (VariableDeclarationList "VarScopedDeclarations")
  [10094] (10357/1) Loop[10094] (< __x3__ __x2__.length)
  [10095] (10360/1) Normal[10095] __x3__ = (+ __x3__ 1i)
  [10096] (10353/0) Normal[10096] let declarations = __x0__
  [10097] (10362/2) Normal[10097] return declarations
  [10098] Exit[10098]
  [10099] (10359/1) Normal[10099] let __x4__ = __x2__[__x3__]
  [10100] (10354/1) Call[10100] access __x1__ = (Statement "VarScopedDeclarations")
Algo: ForStatement[1,3].ContainsDuplicateLabels [1011]
  [10101] Entry[10101]
  [10102] (10364)Normal[10102] let ForStatement = this
  [10103] (10365/0) Call[10103] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [10104] (10366/0) Normal[10104] return __x0__
  [10105] Exit[10105]
Algo: ForStatement[1,3].ContainsUndefinedBreakTarget [1012]
  [10106] Entry[10106]
  [10107] (10368)Normal[10107] let ForStatement = this
  [10108] (10369/0) Call[10108] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [10109] (10370/0) Normal[10109] return __x0__
  [10110] Exit[10110]
Algo: ForStatement[1,3].ContainsUndefinedContinueTarget [1013]
  [10111] Entry[10111]
  [10112] (10372)Normal[10112] let ForStatement = this
  [10113] (10373/0) Call[10113] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [10114] (10374/0) Normal[10114] return __x0__
  [10115] Exit[10115]
Algo: ForStatement[1,3].EarlyErrors [1014]
  [10116] Entry[10116]
  [10117] (10376)Normal[10117] let ForStatement = this
  [10118] (10377/0) Call[10118] app __x0__ = (IsLabelledFunction Statement)
  [10119] (10378/0) If[10119] (= __x0__ true)
  [10120] (10379/0) Normal[10120] throw SyntaxError
  [10121] Exit[10121]
Algo: ForStatement[1,3].ForLoopEvaluation [1015]
  [10122] Entry[10122]
  [10123] (10382)Normal[10123] let ForStatement = this
  [10124] (10386/2) Call[10124] app __x1__ = (ForBodyEvaluation Expression0 Expression1 Statement (new []) labelSet)
  [10125] (10387/2) Normal[10125] return [? __x1__]
  [10126] (10383/0) Call[10126] access __x0__ = (VariableDeclarationList "Evaluation")
  [10127] Exit[10127]
  [10128] (10384/0) Normal[10128] let varDcl = __x0__
  [10129] (10385/1) Normal[10129] [? varDcl]
Algo: ForStatement[1,3].HasCallInTailPosition [1016]
  [10130] Entry[10130]
  [10131] (10389)Normal[10131] let ForStatement = this
  [10132] (10390/0) Call[10132] access __x0__ = (Statement "HasCallInTailPosition" call)
  [10133] (10391/0) Normal[10133] return __x0__
  [10134] Exit[10134]
Algo: ForStatement[1,3].VarDeclaredNames [1017]
  [10135] Entry[10135]
  [10136] (10393)Normal[10136] let ForStatement = this
  [10137] (10397/1) Normal[10137] let __x2__ = __x1__
  [10138] (10398/1) Normal[10138] let __x3__ = 0i
  [10139] (10403/1) Normal[10139] append __x4__ -> names
  [10140] LoopCont[10140]
  [10141] (10394/0) Call[10141] access __x0__ = (VariableDeclarationList "BoundNames")
  [10142] (10399/1) Loop[10142] (< __x3__ __x2__.length)
  [10143] (10402/1) Normal[10143] __x3__ = (+ __x3__ 1i)
  [10144] (10395/0) Normal[10144] let names = __x0__
  [10145] (10404/2) Normal[10145] return names
  [10146] Exit[10146]
  [10147] (10401/1) Normal[10147] let __x4__ = __x2__[__x3__]
  [10148] (10396/1) Call[10148] access __x1__ = (Statement "VarDeclaredNames")
Algo: ForStatement[1,3].VarScopedDeclarations [1018]
  [10149] Entry[10149]
  [10150] (10406)Normal[10150] let ForStatement = this
  [10151] (10410/1) Normal[10151] let __x2__ = __x1__
  [10152] (10411/1) Normal[10152] let __x3__ = 0i
  [10153] (10416/1) Normal[10153] append __x4__ -> declarations
  [10154] LoopCont[10154]
  [10155] (10407/0) Call[10155] access __x0__ = (VariableDeclarationList "VarScopedDeclarations")
  [10156] (10412/1) Loop[10156] (< __x3__ __x2__.length)
  [10157] (10415/1) Normal[10157] __x3__ = (+ __x3__ 1i)
  [10158] (10408/0) Normal[10158] let declarations = __x0__
  [10159] (10417/2) Normal[10159] return declarations
  [10160] Exit[10160]
  [10161] (10414/1) Normal[10161] let __x4__ = __x2__[__x3__]
  [10162] (10409/1) Call[10162] access __x1__ = (Statement "VarScopedDeclarations")
Algo: ForStatement[2,0].ContainsDuplicateLabels [1019]
  [10163] Entry[10163]
  [10164] (10419)Normal[10164] let ForStatement = this
  [10165] (10420/0) Call[10165] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [10166] (10421/0) Normal[10166] return __x0__
  [10167] Exit[10167]
Algo: ForStatement[2,0].ContainsUndefinedBreakTarget [1020]
  [10168] Entry[10168]
  [10169] (10423)Normal[10169] let ForStatement = this
  [10170] (10424/0) Call[10170] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [10171] (10425/0) Normal[10171] return __x0__
  [10172] Exit[10172]
Algo: ForStatement[2,0].ContainsUndefinedContinueTarget [1021]
  [10173] Entry[10173]
  [10174] (10427)Normal[10174] let ForStatement = this
  [10175] (10428/0) Call[10175] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [10176] (10429/0) Normal[10176] return __x0__
  [10177] Exit[10177]
Algo: ForStatement[2,0].EarlyErrors [1022]
  [10178] Entry[10178]
  [10179] (10431)Normal[10179] let ForStatement = this
  [10180] (10435/0) Normal[10180] let __x3__ = __x1__
  [10181] (10436/0) Normal[10181] let __x4__ = 0i
  [10182] (10441/0) Normal[10182] __x5__ = 0i
  [10183] (10442/0) Loop[10183] (< __x5__ __x3__.length)
  [10184] LoopCont[10184]
  [10185] (10432/0) Call[10185] access __x0__ = (LexicalDeclaration "BoundNames")
  [10186] (10437/0) Normal[10186] let __x5__ = 0i
  [10187] (10439/0) Loop[10187] (< __x4__ __x2__.length)
  [10188] (10446/0) If[10188] __x6__
  [10189] (10444/0) Normal[10189] __x6__ = true
  [10190] (10433/0) Call[10190] access __x1__ = (Statement "VarDeclaredNames")
  [10191] (10447/0) Normal[10191] throw SyntaxError
  [10192] Exit[10192]
  [10193] (10443/0) If[10193] (= __x2__[__x4__] __x3__[__x5__])
  [10194] (10438/0) Normal[10194] let __x6__ = false
  [10195] (10434/0) Normal[10195] let __x2__ = __x0__
  [10196] LoopCont[10196]
Algo: ForStatement[2,0].ForLoopEvaluation [1023]
  [10197] Entry[10197]
  [10198] (10450)Normal[10198] let ForStatement = this
  [10199] (10454/2) Call[10199] access __x1__ = (LexicalDeclaration "IsConstantDeclaration")
  [10200] (10455/2) Normal[10200] let isConst = __x1__
  [10201] (10459/4) Normal[10201] let __x4__ = 0i
  [10202] (10460/4) Loop[10202] (< __x4__ __x3__.length)
  [10203] (10464/5) If[10203] (= isConst true)
  [10204] (10466/6) Call[10204] app __x5__ = (loopEnv.CreateImmutableBinding loopEnv dn true)
  [10205] (10469/8) Call[10205] app __x6__ = (loopEnv.CreateMutableBinding loopEnv dn false)
  [10206] (10451/0) Normal[10206] let oldEnv = CONTEXT.LexicalEnvironment
  [10207] (10456/3) Call[10207] access __x2__ = (LexicalDeclaration "BoundNames")
  [10208] (10458/4) Normal[10208] let __x3__ = boundNames
  [10209] (10463/4) Normal[10209] __x4__ = (+ __x4__ 1i)
  [10210] (10452/1) Call[10210] app __x0__ = (NewDeclarativeEnvironment oldEnv)
  [10211] (10462/4) Normal[10211] let dn = __x3__[__x4__]
  [10212] (10457/3) Normal[10212] let boundNames = __x2__
  [10213] (10453/1) Normal[10213] let loopEnv = __x0__
  [10214] (10470/8) Normal[10214] [! __x6__]
  [10215] LoopCont[10215]
  [10216] (10471/9) Normal[10216] CONTEXT.LexicalEnvironment = loopEnv
  [10217] (10467/6) Normal[10217] [! __x5__]
  [10218] (10475/11) If[10218] __x8__
  [10219] (10477/12) Normal[10219] CONTEXT.LexicalEnvironment = oldEnv
  [10220] (10480/14) If[10220] (= isConst false)
  [10221] (10478/13) Normal[10221] return forDcl
  [10222] (10472/10) Call[10222] access __x7__ = (LexicalDeclaration "Evaluation")
  [10223] (10482/14) Normal[10223] let perIterationLets = (new [])
  [10224] (10483/15) Call[10224] app __x9__ = (ForBodyEvaluation Expression0 Expression1 Statement perIterationLets labelSet)
  [10225] (10481/14) Normal[10225] let perIterationLets = boundNames
  [10226] (10473/10) Normal[10226] let forDcl = __x7__
  [10227] (10486/17) Normal[10227] return bodyResult
  [10228] Exit[10228]
  [10229] (10485/16) Normal[10229] CONTEXT.LexicalEnvironment = oldEnv
  [10230] (10474/11) Call[10230] app __x8__ = (IsAbruptCompletion forDcl)
  [10231] (10484/15) Normal[10231] let bodyResult = __x9__
Algo: ForStatement[2,0].HasCallInTailPosition [1024]
  [10232] Entry[10232]
  [10233] (10488)Normal[10233] let ForStatement = this
  [10234] (10489/0) Call[10234] access __x0__ = (Statement "HasCallInTailPosition" call)
  [10235] (10490/0) Normal[10235] return __x0__
  [10236] Exit[10236]
Algo: ForStatement[2,0].VarDeclaredNames [1025]
  [10237] Entry[10237]
  [10238] (10492)Normal[10238] let ForStatement = this
  [10239] (10493/0) Call[10239] access __x0__ = (Statement "VarDeclaredNames")
  [10240] (10494/0) Normal[10240] return __x0__
  [10241] Exit[10241]
Algo: ForStatement[2,0].VarScopedDeclarations [1026]
  [10242] Entry[10242]
  [10243] (10496)Normal[10243] let ForStatement = this
  [10244] (10497/0) Call[10244] access __x0__ = (Statement "VarScopedDeclarations")
  [10245] (10498/0) Normal[10245] return __x0__
  [10246] Exit[10246]
Algo: ForStatement[2,1].ContainsDuplicateLabels [1027]
  [10247] Entry[10247]
  [10248] (10500)Normal[10248] let ForStatement = this
  [10249] (10501/0) Call[10249] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [10250] (10502/0) Normal[10250] return __x0__
  [10251] Exit[10251]
Algo: ForStatement[2,1].ContainsUndefinedBreakTarget [1028]
  [10252] Entry[10252]
  [10253] (10504)Normal[10253] let ForStatement = this
  [10254] (10505/0) Call[10254] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [10255] (10506/0) Normal[10255] return __x0__
  [10256] Exit[10256]
Algo: ForStatement[2,1].ContainsUndefinedContinueTarget [1029]
  [10257] Entry[10257]
  [10258] (10508)Normal[10258] let ForStatement = this
  [10259] (10509/0) Call[10259] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [10260] (10510/0) Normal[10260] return __x0__
  [10261] Exit[10261]
Algo: ForStatement[2,1].EarlyErrors [1030]
  [10262] Entry[10262]
  [10263] (10512)Normal[10263] let ForStatement = this
  [10264] (10516/0) Normal[10264] let __x3__ = __x1__
  [10265] (10517/0) Normal[10265] let __x4__ = 0i
  [10266] (10522/0) Normal[10266] __x5__ = 0i
  [10267] (10523/0) Loop[10267] (< __x5__ __x3__.length)
  [10268] LoopCont[10268]
  [10269] (10513/0) Call[10269] access __x0__ = (LexicalDeclaration "BoundNames")
  [10270] (10518/0) Normal[10270] let __x5__ = 0i
  [10271] (10520/0) Loop[10271] (< __x4__ __x2__.length)
  [10272] (10527/0) If[10272] __x6__
  [10273] (10525/0) Normal[10273] __x6__ = true
  [10274] (10514/0) Call[10274] access __x1__ = (Statement "VarDeclaredNames")
  [10275] (10528/0) Normal[10275] throw SyntaxError
  [10276] Exit[10276]
  [10277] (10524/0) If[10277] (= __x2__[__x4__] __x3__[__x5__])
  [10278] (10519/0) Normal[10278] let __x6__ = false
  [10279] (10515/0) Normal[10279] let __x2__ = __x0__
  [10280] LoopCont[10280]
Algo: ForStatement[2,1].ForLoopEvaluation [1031]
  [10281] Entry[10281]
  [10282] (10531)Normal[10282] let ForStatement = this
  [10283] (10535/2) Call[10283] access __x1__ = (LexicalDeclaration "IsConstantDeclaration")
  [10284] (10536/2) Normal[10284] let isConst = __x1__
  [10285] (10540/4) Normal[10285] let __x4__ = 0i
  [10286] (10541/4) Loop[10286] (< __x4__ __x3__.length)
  [10287] (10545/5) If[10287] (= isConst true)
  [10288] (10547/6) Call[10288] app __x5__ = (loopEnv.CreateImmutableBinding loopEnv dn true)
  [10289] (10550/8) Call[10289] app __x6__ = (loopEnv.CreateMutableBinding loopEnv dn false)
  [10290] (10532/0) Normal[10290] let oldEnv = CONTEXT.LexicalEnvironment
  [10291] (10537/3) Call[10291] access __x2__ = (LexicalDeclaration "BoundNames")
  [10292] (10539/4) Normal[10292] let __x3__ = boundNames
  [10293] (10544/4) Normal[10293] __x4__ = (+ __x4__ 1i)
  [10294] (10533/1) Call[10294] app __x0__ = (NewDeclarativeEnvironment oldEnv)
  [10295] (10543/4) Normal[10295] let dn = __x3__[__x4__]
  [10296] (10538/3) Normal[10296] let boundNames = __x2__
  [10297] (10534/1) Normal[10297] let loopEnv = __x0__
  [10298] (10551/8) Normal[10298] [! __x6__]
  [10299] LoopCont[10299]
  [10300] (10552/9) Normal[10300] CONTEXT.LexicalEnvironment = loopEnv
  [10301] (10548/6) Normal[10301] [! __x5__]
  [10302] (10556/11) If[10302] __x8__
  [10303] (10558/12) Normal[10303] CONTEXT.LexicalEnvironment = oldEnv
  [10304] (10561/14) If[10304] (= isConst false)
  [10305] (10559/13) Normal[10305] return forDcl
  [10306] (10553/10) Call[10306] access __x7__ = (LexicalDeclaration "Evaluation")
  [10307] (10563/14) Normal[10307] let perIterationLets = (new [])
  [10308] (10564/15) Call[10308] app __x9__ = (ForBodyEvaluation Expression0 Expression1 Statement perIterationLets labelSet)
  [10309] (10562/14) Normal[10309] let perIterationLets = boundNames
  [10310] (10554/10) Normal[10310] let forDcl = __x7__
  [10311] (10567/17) Normal[10311] return bodyResult
  [10312] Exit[10312]
  [10313] (10566/16) Normal[10313] CONTEXT.LexicalEnvironment = oldEnv
  [10314] (10555/11) Call[10314] app __x8__ = (IsAbruptCompletion forDcl)
  [10315] (10565/15) Normal[10315] let bodyResult = __x9__
Algo: ForStatement[2,1].HasCallInTailPosition [1032]
  [10316] Entry[10316]
  [10317] (10569)Normal[10317] let ForStatement = this
  [10318] (10570/0) Call[10318] access __x0__ = (Statement "HasCallInTailPosition" call)
  [10319] (10571/0) Normal[10319] return __x0__
  [10320] Exit[10320]
Algo: ForStatement[2,1].VarDeclaredNames [1033]
  [10321] Entry[10321]
  [10322] (10573)Normal[10322] let ForStatement = this
  [10323] (10574/0) Call[10323] access __x0__ = (Statement "VarDeclaredNames")
  [10324] (10575/0) Normal[10324] return __x0__
  [10325] Exit[10325]
Algo: ForStatement[2,1].VarScopedDeclarations [1034]
  [10326] Entry[10326]
  [10327] (10577)Normal[10327] let ForStatement = this
  [10328] (10578/0) Call[10328] access __x0__ = (Statement "VarScopedDeclarations")
  [10329] (10579/0) Normal[10329] return __x0__
  [10330] Exit[10330]
Algo: ForStatement[2,2].ContainsDuplicateLabels [1035]
  [10331] Entry[10331]
  [10332] (10581)Normal[10332] let ForStatement = this
  [10333] (10582/0) Call[10333] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [10334] (10583/0) Normal[10334] return __x0__
  [10335] Exit[10335]
Algo: ForStatement[2,2].ContainsUndefinedBreakTarget [1036]
  [10336] Entry[10336]
  [10337] (10585)Normal[10337] let ForStatement = this
  [10338] (10586/0) Call[10338] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [10339] (10587/0) Normal[10339] return __x0__
  [10340] Exit[10340]
Algo: ForStatement[2,2].ContainsUndefinedContinueTarget [1037]
  [10341] Entry[10341]
  [10342] (10589)Normal[10342] let ForStatement = this
  [10343] (10590/0) Call[10343] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [10344] (10591/0) Normal[10344] return __x0__
  [10345] Exit[10345]
Algo: ForStatement[2,2].EarlyErrors [1038]
  [10346] Entry[10346]
  [10347] (10593)Normal[10347] let ForStatement = this
  [10348] (10597/0) Normal[10348] let __x3__ = __x1__
  [10349] (10598/0) Normal[10349] let __x4__ = 0i
  [10350] (10603/0) Normal[10350] __x5__ = 0i
  [10351] (10604/0) Loop[10351] (< __x5__ __x3__.length)
  [10352] LoopCont[10352]
  [10353] (10594/0) Call[10353] access __x0__ = (LexicalDeclaration "BoundNames")
  [10354] (10599/0) Normal[10354] let __x5__ = 0i
  [10355] (10601/0) Loop[10355] (< __x4__ __x2__.length)
  [10356] (10608/0) If[10356] __x6__
  [10357] (10606/0) Normal[10357] __x6__ = true
  [10358] (10595/0) Call[10358] access __x1__ = (Statement "VarDeclaredNames")
  [10359] (10609/0) Normal[10359] throw SyntaxError
  [10360] Exit[10360]
  [10361] (10605/0) If[10361] (= __x2__[__x4__] __x3__[__x5__])
  [10362] (10600/0) Normal[10362] let __x6__ = false
  [10363] (10596/0) Normal[10363] let __x2__ = __x0__
  [10364] LoopCont[10364]
Algo: ForStatement[2,2].ForLoopEvaluation [1039]
  [10365] Entry[10365]
  [10366] (10612)Normal[10366] let ForStatement = this
  [10367] (10616/2) Call[10367] access __x1__ = (LexicalDeclaration "IsConstantDeclaration")
  [10368] (10617/2) Normal[10368] let isConst = __x1__
  [10369] (10621/4) Normal[10369] let __x4__ = 0i
  [10370] (10622/4) Loop[10370] (< __x4__ __x3__.length)
  [10371] (10626/5) If[10371] (= isConst true)
  [10372] (10628/6) Call[10372] app __x5__ = (loopEnv.CreateImmutableBinding loopEnv dn true)
  [10373] (10631/8) Call[10373] app __x6__ = (loopEnv.CreateMutableBinding loopEnv dn false)
  [10374] (10613/0) Normal[10374] let oldEnv = CONTEXT.LexicalEnvironment
  [10375] (10618/3) Call[10375] access __x2__ = (LexicalDeclaration "BoundNames")
  [10376] (10620/4) Normal[10376] let __x3__ = boundNames
  [10377] (10625/4) Normal[10377] __x4__ = (+ __x4__ 1i)
  [10378] (10614/1) Call[10378] app __x0__ = (NewDeclarativeEnvironment oldEnv)
  [10379] (10624/4) Normal[10379] let dn = __x3__[__x4__]
  [10380] (10619/3) Normal[10380] let boundNames = __x2__
  [10381] (10615/1) Normal[10381] let loopEnv = __x0__
  [10382] (10632/8) Normal[10382] [! __x6__]
  [10383] LoopCont[10383]
  [10384] (10633/9) Normal[10384] CONTEXT.LexicalEnvironment = loopEnv
  [10385] (10629/6) Normal[10385] [! __x5__]
  [10386] (10637/11) If[10386] __x8__
  [10387] (10639/12) Normal[10387] CONTEXT.LexicalEnvironment = oldEnv
  [10388] (10642/14) If[10388] (= isConst false)
  [10389] (10640/13) Normal[10389] return forDcl
  [10390] (10634/10) Call[10390] access __x7__ = (LexicalDeclaration "Evaluation")
  [10391] (10644/14) Normal[10391] let perIterationLets = (new [])
  [10392] (10645/15) Call[10392] app __x9__ = (ForBodyEvaluation Expression0 Expression1 Statement perIterationLets labelSet)
  [10393] (10643/14) Normal[10393] let perIterationLets = boundNames
  [10394] (10635/10) Normal[10394] let forDcl = __x7__
  [10395] (10648/17) Normal[10395] return bodyResult
  [10396] Exit[10396]
  [10397] (10647/16) Normal[10397] CONTEXT.LexicalEnvironment = oldEnv
  [10398] (10636/11) Call[10398] app __x8__ = (IsAbruptCompletion forDcl)
  [10399] (10646/15) Normal[10399] let bodyResult = __x9__
Algo: ForStatement[2,2].HasCallInTailPosition [1040]
  [10400] Entry[10400]
  [10401] (10650)Normal[10401] let ForStatement = this
  [10402] (10651/0) Call[10402] access __x0__ = (Statement "HasCallInTailPosition" call)
  [10403] (10652/0) Normal[10403] return __x0__
  [10404] Exit[10404]
Algo: ForStatement[2,2].VarDeclaredNames [1041]
  [10405] Entry[10405]
  [10406] (10654)Normal[10406] let ForStatement = this
  [10407] (10655/0) Call[10407] access __x0__ = (Statement "VarDeclaredNames")
  [10408] (10656/0) Normal[10408] return __x0__
  [10409] Exit[10409]
Algo: ForStatement[2,2].VarScopedDeclarations [1042]
  [10410] Entry[10410]
  [10411] (10658)Normal[10411] let ForStatement = this
  [10412] (10659/0) Call[10412] access __x0__ = (Statement "VarScopedDeclarations")
  [10413] (10660/0) Normal[10413] return __x0__
  [10414] Exit[10414]
Algo: ForStatement[2,3].ContainsDuplicateLabels [1043]
  [10415] Entry[10415]
  [10416] (10662)Normal[10416] let ForStatement = this
  [10417] (10663/0) Call[10417] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [10418] (10664/0) Normal[10418] return __x0__
  [10419] Exit[10419]
Algo: ForStatement[2,3].ContainsUndefinedBreakTarget [1044]
  [10420] Entry[10420]
  [10421] (10666)Normal[10421] let ForStatement = this
  [10422] (10667/0) Call[10422] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [10423] (10668/0) Normal[10423] return __x0__
  [10424] Exit[10424]
Algo: ForStatement[2,3].ContainsUndefinedContinueTarget [1045]
  [10425] Entry[10425]
  [10426] (10670)Normal[10426] let ForStatement = this
  [10427] (10671/0) Call[10427] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [10428] (10672/0) Normal[10428] return __x0__
  [10429] Exit[10429]
Algo: ForStatement[2,3].EarlyErrors [1046]
  [10430] Entry[10430]
  [10431] (10674)Normal[10431] let ForStatement = this
  [10432] (10678/0) Normal[10432] let __x3__ = __x1__
  [10433] (10679/0) Normal[10433] let __x4__ = 0i
  [10434] (10684/0) Normal[10434] __x5__ = 0i
  [10435] (10685/0) Loop[10435] (< __x5__ __x3__.length)
  [10436] LoopCont[10436]
  [10437] (10675/0) Call[10437] access __x0__ = (LexicalDeclaration "BoundNames")
  [10438] (10680/0) Normal[10438] let __x5__ = 0i
  [10439] (10682/0) Loop[10439] (< __x4__ __x2__.length)
  [10440] (10689/0) If[10440] __x6__
  [10441] (10687/0) Normal[10441] __x6__ = true
  [10442] (10676/0) Call[10442] access __x1__ = (Statement "VarDeclaredNames")
  [10443] (10690/0) Normal[10443] throw SyntaxError
  [10444] Exit[10444]
  [10445] (10686/0) If[10445] (= __x2__[__x4__] __x3__[__x5__])
  [10446] (10681/0) Normal[10446] let __x6__ = false
  [10447] (10677/0) Normal[10447] let __x2__ = __x0__
  [10448] LoopCont[10448]
Algo: ForStatement[2,3].ForLoopEvaluation [1047]
  [10449] Entry[10449]
  [10450] (10693)Normal[10450] let ForStatement = this
  [10451] (10697/2) Call[10451] access __x1__ = (LexicalDeclaration "IsConstantDeclaration")
  [10452] (10698/2) Normal[10452] let isConst = __x1__
  [10453] (10702/4) Normal[10453] let __x4__ = 0i
  [10454] (10703/4) Loop[10454] (< __x4__ __x3__.length)
  [10455] (10707/5) If[10455] (= isConst true)
  [10456] (10709/6) Call[10456] app __x5__ = (loopEnv.CreateImmutableBinding loopEnv dn true)
  [10457] (10712/8) Call[10457] app __x6__ = (loopEnv.CreateMutableBinding loopEnv dn false)
  [10458] (10694/0) Normal[10458] let oldEnv = CONTEXT.LexicalEnvironment
  [10459] (10699/3) Call[10459] access __x2__ = (LexicalDeclaration "BoundNames")
  [10460] (10701/4) Normal[10460] let __x3__ = boundNames
  [10461] (10706/4) Normal[10461] __x4__ = (+ __x4__ 1i)
  [10462] (10695/1) Call[10462] app __x0__ = (NewDeclarativeEnvironment oldEnv)
  [10463] (10705/4) Normal[10463] let dn = __x3__[__x4__]
  [10464] (10700/3) Normal[10464] let boundNames = __x2__
  [10465] (10696/1) Normal[10465] let loopEnv = __x0__
  [10466] (10713/8) Normal[10466] [! __x6__]
  [10467] LoopCont[10467]
  [10468] (10714/9) Normal[10468] CONTEXT.LexicalEnvironment = loopEnv
  [10469] (10710/6) Normal[10469] [! __x5__]
  [10470] (10718/11) If[10470] __x8__
  [10471] (10720/12) Normal[10471] CONTEXT.LexicalEnvironment = oldEnv
  [10472] (10723/14) If[10472] (= isConst false)
  [10473] (10721/13) Normal[10473] return forDcl
  [10474] (10715/10) Call[10474] access __x7__ = (LexicalDeclaration "Evaluation")
  [10475] (10725/14) Normal[10475] let perIterationLets = (new [])
  [10476] (10726/15) Call[10476] app __x9__ = (ForBodyEvaluation Expression0 Expression1 Statement perIterationLets labelSet)
  [10477] (10724/14) Normal[10477] let perIterationLets = boundNames
  [10478] (10716/10) Normal[10478] let forDcl = __x7__
  [10479] (10729/17) Normal[10479] return bodyResult
  [10480] Exit[10480]
  [10481] (10728/16) Normal[10481] CONTEXT.LexicalEnvironment = oldEnv
  [10482] (10717/11) Call[10482] app __x8__ = (IsAbruptCompletion forDcl)
  [10483] (10727/15) Normal[10483] let bodyResult = __x9__
Algo: ForStatement[2,3].HasCallInTailPosition [1048]
  [10484] Entry[10484]
  [10485] (10731)Normal[10485] let ForStatement = this
  [10486] (10732/0) Call[10486] access __x0__ = (Statement "HasCallInTailPosition" call)
  [10487] (10733/0) Normal[10487] return __x0__
  [10488] Exit[10488]
Algo: ForStatement[2,3].VarDeclaredNames [1049]
  [10489] Entry[10489]
  [10490] (10735)Normal[10490] let ForStatement = this
  [10491] (10736/0) Call[10491] access __x0__ = (Statement "VarDeclaredNames")
  [10492] (10737/0) Normal[10492] return __x0__
  [10493] Exit[10493]
Algo: ForStatement[2,3].VarScopedDeclarations [1050]
  [10494] Entry[10494]
  [10495] (10739)Normal[10495] let ForStatement = this
  [10496] (10740/0) Call[10496] access __x0__ = (Statement "VarScopedDeclarations")
  [10497] (10741/0) Normal[10497] return __x0__
  [10498] Exit[10498]
Algo: FormalParameterList[0,0].ExpectedArgumentCount [1051]
  [10499] Entry[10499]
  [10500] (10743)Normal[10500] let FormalParameterList = this
  [10501] (10748/1) Normal[10501] return 1i
  [10502] Exit[10502]
  [10503] (10744/0) Call[10503] access __x0__ = (FormalParameter "HasInitializer")
  [10504] (10745/0) If[10504] (= __x0__ true)
  [10505] (10746/0) Normal[10505] return 0i
Algo: FormalParameterList[1,0].BoundNames [1052]
  [10506] Entry[10506]
  [10507] (10750/0) Call[10507] access __x0__ = (FormalParameterList "BoundNames")
  [10508] (10754/1) Normal[10508] let __x3__ = 0i
  [10509] (10755/1) Loop[10509] (< __x3__ __x2__.length)
  [10510] LoopCont[10510]
  [10511] (10751/0) Normal[10511] let names = __x0__
  [10512] (10757/1) Normal[10512] let __x4__ = __x2__[__x3__]
  [10513] (10760/2) Normal[10513] return names
  [10514] (10759/1) Normal[10514] append __x4__ -> names
  [10515] (10752/1) Call[10515] access __x1__ = (FormalParameter "BoundNames")
  [10516] (10758/1) Normal[10516] __x3__ = (+ __x3__ 1i)
  [10517] (10753/1) Normal[10517] let __x2__ = __x1__
  [10518] Exit[10518]
Algo: FormalParameterList[1,0].ContainsExpression [1053]
  [10519] Entry[10519]
  [10520] (10762/0) Call[10520] access __x0__ = (FormalParameterList "ContainsExpression")
  [10521] (10767/1) Normal[10521] return __x1__
  [10522] Exit[10522]
  [10523] (10763/0) If[10523] (= __x0__ true)
  [10524] (10764/0) Normal[10524] return true
  [10525] (10766/1) Call[10525] access __x1__ = (FormalParameter "ContainsExpression")
Algo: FormalParameterList[1,0].ExpectedArgumentCount [1054]
  [10526] Entry[10526]
  [10527] (10769/0) Call[10527] access __x0__ = (FormalParameterList "ExpectedArgumentCount")
  [10528] (10773/1) Normal[10528] __x1__ = (= __x2__ true)
  [10529] (10774/1) If[10529] __x1__
  [10530] (10780/1) Normal[10530] return count
  [10531] (10782/2) Normal[10531] return (+ count 1i)
  [10532] (10770/0) Normal[10532] let count = __x0__
  [10533] (10779/1) If[10533] __x1__
  [10534] (10777/10) Call[10534] access __x3__ = (FormalParameter "HasInitializer")
  [10535] (10771/1) Normal[10535] let __x1__ = true
  [10536] (10778/10) Normal[10536] __x1__ = (= __x3__ true)
  [10537] (10772/1) Call[10537] access __x2__ = (FormalParameterList "HasInitializer")
  [10538] Exit[10538]
Algo: FormalParameterList[1,0].HasInitializer [1055]
  [10539] Entry[10539]
  [10540] (10784/0) Call[10540] access __x0__ = (FormalParameterList "HasInitializer")
  [10541] (10789/1) Normal[10541] return __x1__
  [10542] Exit[10542]
  [10543] (10785/0) If[10543] (= __x0__ true)
  [10544] (10786/0) Normal[10544] return true
  [10545] (10788/1) Call[10545] access __x1__ = (FormalParameter "HasInitializer")
Algo: FormalParameterList[1,0].IsSimpleParameterList [1056]
  [10546] Entry[10546]
  [10547] (10791/0) Call[10547] access __x0__ = (FormalParameterList "IsSimpleParameterList")
  [10548] (10796/1) Normal[10548] return __x1__
  [10549] Exit[10549]
  [10550] (10792/0) If[10550] (= __x0__ false)
  [10551] (10793/0) Normal[10551] return false
  [10552] (10795/1) Call[10552] access __x1__ = (FormalParameter "IsSimpleParameterList")
Algo: FormalParameterList[1,0].IteratorBindingInitialization [1057]
  [10553] Entry[10553]
  [10554] (10798/0) Call[10554] access __x0__ = (FormalParameterList "IteratorBindingInitialization" iteratorRecord environment)
  [10555] (10799/0) Normal[10555] [? __x0__]
  [10556] (10800/1) Call[10556] access __x1__ = (FormalParameter "IteratorBindingInitialization" iteratorRecord environment)
  [10557] (10801/1) Normal[10557] return __x1__
  [10558] Exit[10558]
Algo: FormalParameter[0,0].IsSimpleParameterList [1058]
  [10559] Entry[10559]
  [10560] (10803)Normal[10560] let FormalParameter = this
  [10561] (10804/0) Call[10561] access __x0__ = (BindingElement "IsSimpleParameterList")
  [10562] (10805/0) Normal[10562] return __x0__
  [10563] Exit[10563]
Algo: FormalParameters[0,0].BoundNames [1059]
  [10564] Entry[10564]
  [10565] (10807)Normal[10565] let FormalParameters = this
  [10566] (10808/0) Normal[10566] return (new [])
  [10567] Exit[10567]
Algo: FormalParameters[0,0].ContainsExpression [1060]
  [10568] Entry[10568]
  [10569] (10810)Normal[10569] let FormalParameters = this
  [10570] (10811/0) Normal[10570] return false
  [10571] Exit[10571]
Algo: FormalParameters[0,0].ExpectedArgumentCount [1061]
  [10572] Entry[10572]
  [10573] (10813)Normal[10573] let FormalParameters = this
  [10574] (10814/0) Normal[10574] return 0i
  [10575] Exit[10575]
Algo: FormalParameters[0,0].IsSimpleParameterList [1062]
  [10576] Entry[10576]
  [10577] (10816)Normal[10577] let FormalParameters = this
  [10578] (10817/0) Normal[10578] return true
  [10579] Exit[10579]
Algo: FormalParameters[0,0].IteratorBindingInitialization [1063]
  [10580] Entry[10580]
  [10581] (10819)Normal[10581] let FormalParameters = this
  [10582] (10820/0) Normal[10582] return ~empty~
  [10583] Exit[10583]
Algo: FormalParameters[1,0].ExpectedArgumentCount [1064]
  [10584] Entry[10584]
  [10585] (10822)Normal[10585] let FormalParameters = this
  [10586] (10823/0) Normal[10586] return 0i
  [10587] Exit[10587]
Algo: FormalParameters[1,0].IsSimpleParameterList [1065]
  [10588] Entry[10588]
  [10589] (10825)Normal[10589] let FormalParameters = this
  [10590] (10826/0) Normal[10590] return false
  [10591] Exit[10591]
Algo: FormalParameters[2,0].EarlyErrors [1066]
  [10592] Entry[10592]
  [10593] (10828)Normal[10593] let FormalParameters = this
  [10594] (10832/0) If[10594] __x0__
  [10595] (10834/0) Call[10595] access __x2__ = (FormalParameterList "BoundNames")
  [10596] (10838/0) If[10596] __x0__
  [10597] (10839/0) Normal[10597] throw SyntaxError
  [10598] Exit[10598]
  [10599] (10829/0) Normal[10599] let __x0__ = true
  [10600] (10835/0) Call[10600] app __x3__ = (IsDuplicate __x2__)
  [10601] (10830/0) Call[10601] access __x1__ = (FormalParameterList "IsSimpleParameterList")
  [10602] (10836/0) Normal[10602] __x0__ = __x3__
  [10603] (10831/0) Normal[10603] __x0__ = (= __x1__ false)
Algo: FormalParameters[4,0].BoundNames [1067]
  [10604] Entry[10604]
  [10605] (10842)Normal[10605] let FormalParameters = this
  [10606] (10846/1) Normal[10606] let __x2__ = __x1__
  [10607] (10847/1) Normal[10607] let __x3__ = 0i
  [10608] (10852/1) Normal[10608] append __x4__ -> names
  [10609] LoopCont[10609]
  [10610] (10843/0) Call[10610] access __x0__ = (FormalParameterList "BoundNames")
  [10611] (10848/1) Loop[10611] (< __x3__ __x2__.length)
  [10612] (10851/1) Normal[10612] __x3__ = (+ __x3__ 1i)
  [10613] (10844/0) Normal[10613] let names = __x0__
  [10614] (10853/2) Normal[10614] return names
  [10615] Exit[10615]
  [10616] (10850/1) Normal[10616] let __x4__ = __x2__[__x3__]
  [10617] (10845/1) Call[10617] access __x1__ = (FunctionRestParameter "BoundNames")
Algo: FormalParameters[4,0].ContainsExpression [1068]
  [10618] Entry[10618]
  [10619] (10855)Normal[10619] let FormalParameters = this
  [10620] (10860/1) Call[10620] access __x1__ = (FunctionRestParameter "ContainsExpression")
  [10621] (10861/1) Normal[10621] return __x1__
  [10622] (10856/0) Call[10622] access __x0__ = (FormalParameterList "ContainsExpression")
  [10623] Exit[10623]
  [10624] (10857/0) If[10624] (= __x0__ true)
  [10625] (10858/0) Normal[10625] return true
Algo: FormalParameters[4,0].ExpectedArgumentCount [1069]
  [10626] Entry[10626]
  [10627] (10863)Normal[10627] let FormalParameters = this
  [10628] (10864/0) Call[10628] access __x0__ = (FormalParameterList "ExpectedArgumentCount")
  [10629] (10865/0) Normal[10629] return __x0__
  [10630] Exit[10630]
Algo: FormalParameters[4,0].IsSimpleParameterList [1070]
  [10631] Entry[10631]
  [10632] (10867)Normal[10632] let FormalParameters = this
  [10633] (10868/0) Normal[10633] return false
  [10634] Exit[10634]
Algo: FormalParameters[4,0].IteratorBindingInitialization [1071]
  [10635] Entry[10635]
  [10636] (10870)Normal[10636] let FormalParameters = this
  [10637] (10874/1) Normal[10637] return __x1__
  [10638] Exit[10638]
  [10639] (10871/0) Call[10639] access __x0__ = (FormalParameterList "IteratorBindingInitialization" iteratorRecord environment)
  [10640] (10872/0) Normal[10640] [? __x0__]
  [10641] (10873/1) Call[10641] access __x1__ = (FunctionRestParameter "IteratorBindingInitialization" iteratorRecord environment)
Algo: FromPropertyDescriptor [1072]
  [10642] Entry[10642]
  [10643] (10876/0) If[10643] (= Desc undefined)
  [10644] (10881/3) If[10644] (! (= Desc.Value absent))
  [10645] (10883/4) Call[10645] app __x1__ = (CreateDataPropertyOrThrow obj "value" Desc.Value)
  [10646] (10886/5) If[10646] (! (= Desc.Writable absent))
  [10647] (10889/6) Normal[10647] [! __x2__]
  [10648] (10891/7) If[10648] (! (= Desc.Get absent))
  [10649] (10896/9) If[10649] (! (= Desc.Set absent))
  [10650] (10898/10) Call[10650] app __x4__ = (CreateDataPropertyOrThrow obj "set" Desc.Set)
  [10651] (10901/11) If[10651] (! (= Desc.Enumerable absent))
  [10652] (10906/13) If[10652] (! (= Desc.Configurable absent))
  [10653] (10908/14) Call[10653] app __x6__ = (CreateDataPropertyOrThrow obj "configurable" Desc.Configurable)
  [10654] (10911/15) Normal[10654] return obj
  [10655] (10877/0) Normal[10655] return undefined
  [10656] (10879/1) Call[10656] app __x0__ = (OrdinaryObjectCreate INTRINSICS["%Object.prototype%"])
  [10657] (10884/4) Normal[10657] [! __x1__]
  [10658] (10909/14) Normal[10658] [! __x6__]
  [10659] (10888/6) Call[10659] app __x2__ = (CreateDataPropertyOrThrow obj "writable" Desc.Writable)
  [10660] (10894/8) Normal[10660] [! __x3__]
  [10661] (10903/12) Call[10661] app __x5__ = (CreateDataPropertyOrThrow obj "enumerable" Desc.Enumerable)
  [10662] (10893/8) Call[10662] app __x3__ = (CreateDataPropertyOrThrow obj "get" Desc.Get)
  [10663] (10880/1) Normal[10663] let obj = [! __x0__]
  [10664] (10904/12) Normal[10664] [! __x5__]
  [10665] (10899/10) Normal[10665] [! __x4__]
  [10666] Exit[10666]
Algo: FulfillPromise [1073]
  [10667] Entry[10667]
  [10668] (10913/0) Normal[10668] assert (= promise.PromiseState ~pending~)
  [10669] (10917/4) Normal[10669] promise.PromiseRejectReactions = undefined
  [10670] (10918/5) Normal[10670] promise.PromiseState = ~fulfilled~
  [10671] (10914/1) Normal[10671] let reactions = promise.PromiseFulfillReactions
  [10672] (10919/6) Call[10672] app __x0__ = (TriggerPromiseReactions reactions value)
  [10673] (10915/2) Normal[10673] promise.PromiseResult = value
  [10674] (10920/6) Normal[10674] return __x0__
  [10675] (10916/3) Normal[10675] promise.PromiseFulfillReactions = undefined
  [10676] Exit[10676]
Algo: FunctionBody[0,0].EarlyErrors [1074]
  [10677] Entry[10677]
  [10678] (10922)Normal[10678] let FunctionBody = this
  [10679] (10926/0) Normal[10679] throw SyntaxError
  [10680] (10928/1) Call[10680] access __x2__ = (FunctionStatementList "LexicallyDeclaredNames")
  [10681] (10932/1) Normal[10681] let __x6__ = 0i
  [10682] (10933/1) Normal[10682] let __x7__ = 0i
  [10683] (10937/1) Normal[10683] __x7__ = 0i
  [10684] (10938/1) Loop[10684] (< __x7__ __x5__.length)
  [10685] (10923/0) Call[10685] access __x0__ = (FunctionStatementList "LexicallyDeclaredNames")
  [10686] (10929/1) Call[10686] access __x3__ = (FunctionStatementList "VarDeclaredNames")
  [10687] (10931/1) Normal[10687] let __x5__ = __x3__
  [10688] (10935/1) Loop[10688] (< __x6__ __x4__.length)
  [10689] (10942/1) If[10689] __x8__
  [10690] (10924/0) Call[10690] app __x1__ = (IsDuplicate __x0__)
  [10691] (10940/1) Normal[10691] __x8__ = true
  [10692] LoopCont[10692]
  [10693] (10934/1) Normal[10693] let __x8__ = false
  [10694] (10930/1) Normal[10694] let __x4__ = __x2__
  [10695] (10925/0) If[10695] __x1__
  [10696] (10939/1) If[10696] (= __x4__[__x6__] __x5__[__x7__])
  [10697] LoopCont[10697]
  [10698] (10947/2) Normal[10698] throw SyntaxError
  [10699] (10949/3) Call[10699] access __x10__ = (FunctionStatementList "ContainsUndefinedBreakTarget" (new []))
  [10700] (10950/3) If[10700] (= __x10__ true)
  [10701] (10943/1) Normal[10701] throw SyntaxError
  [10702] (10945/2) Call[10702] access __x9__ = (FunctionStatementList "ContainsDuplicateLabels" (new []))
  [10703] (10954/4) If[10703] (= __x11__ true)
  [10704] (10955/4) Normal[10704] throw SyntaxError
  [10705] Exit[10705]
  [10706] (10953/4) Call[10706] access __x11__ = (FunctionStatementList "ContainsUndefinedContinueTarget" (new []) (new []))
  [10707] (10946/2) If[10707] (= __x9__ true)
  [10708] (10951/3) Normal[10708] throw SyntaxError
Algo: FunctionBody[0,0].EvaluateBody [1075]
  [10709] Entry[10709]
  [10710] (10958)Normal[10710] let FunctionBody = this
  [10711] (10959/0) Call[10711] access __x0__ = (FunctionBody "EvaluateFunctionBody" functionObject argumentsList)
  [10712] (10960/0) Normal[10712] return [? __x0__]
  [10713] Exit[10713]
Algo: FunctionBody[0,0].EvaluateFunctionBody [1076]
  [10714] Entry[10714]
  [10715] (10962)Normal[10715] let FunctionBody = this
  [10716] (10966/1) Normal[10716] return __x1__
  [10717] Exit[10717]
  [10718] (10963/0) Call[10718] app __x0__ = (FunctionDeclarationInstantiation functionObject argumentsList)
  [10719] (10964/0) Normal[10719] [? __x0__]
  [10720] (10965/1) Call[10720] access __x1__ = (FunctionStatementList "Evaluation")
Algo: FunctionBody[0,0].FunctionBodyContainsUseStrict [1077]
  [10721] Entry[10721]
  [10722] (10968)Normal[10722] let FunctionBody = this
  [10723] (10969/0) Normal[10723] ??? "If the Directive Prologue of nt:{FunctionBody} contains a Use Strict Directive , return value:{true} ; otherwise , return value:{false} ."
  [10724] Exit[10724]
Algo: FunctionDeclarationInstantiation [1078]
  [10725] (11052/47) If[10725] (|| (= strict true) (= simpleParameterList false))
  [10726] (11054/48) Call[10726] app __x19__ = (CreateUnmappedArgumentsObject argumentsList)
  [10727] (11057/51) Call[10727] app __x20__ = (CreateMappedArgumentsObject func formals argumentsList env)
  [10728] (11136/97) Call[10728] access __x41__ = (d "BoundNames")
  [10729] (11137/97) Normal[10729] let __x42__ = __x41__
  [10730] (11093/71) Normal[10730] [! __x29__]
  [10731] (11094/72) Call[10731] app __x30__ = (env.InitializeBinding env n undefined)
  [10732] Entry[10732]
  [10733] (10971/0) Normal[10733] let calleeContext = CONTEXT
  [10734] (11076/62) Normal[10734] [? __x25__]
  [10735] (11080/65) If[10735] (= hasParameterExpressions false)
  [10736] (11109/80) If[10736] (! (contains instantiatedVarNames n))
  [10737] (11111/81) Normal[10737] append n -> instantiatedVarNames
  [10738] LoopCont[10738]
  [10739] (10975/4) Call[10739] access __x0__ = (formals "BoundNames")
  [10740] (10976/4) Normal[10740] let parameterNames = __x0__
  [10741] (11115/83) Normal[10741] let initialValue = undefined
  [10742] (11119/86) Call[10742] app __x36__ = (varEnv.InitializeBinding varEnv n initialValue)
  [10743] (10980/5) Normal[10743] let hasDuplicates = false
  [10744] (10981/6) Call[10744] access __x2__ = (formals "IsSimpleParameterList")
  [10745] (11034/39) Loop[10745] (< __x15__ __x14__.length)
  [10746] (11036/39) Normal[10746] let paramName = __x14__[__x15__]
  [10747] (11050/46) If[10747] (= argumentsObjectNeeded true)
  [10748] (11141/97) Normal[10748] let dn = __x42__[__x43__]
  [10749] (11142/97) Normal[10749] __x43__ = (+ __x43__ 1i)
  [10750] (11152/102) Normal[10750] let __x48__ = 0i
  [10751] (11153/102) Loop[10751] (< __x48__ __x47__.length)
  [10752] (11016/28) If[10752] (|| (contains functionNames "arguments") (contains lexicalNames "arguments"))
  [10753] (11017/29) Normal[10753] argumentsObjectNeeded = false
  [10754] (11020/30) If[10754] (|| (= strict true) (= hasParameterExpressions false))
  [10755] (10994/13) Normal[10755] let __x8__ = __x7__.length
  [10756] (10995/13) Loop[10756] (< 0i __x8__)
  [10757] (11011/22) If[10757] (= func.ThisMode ~lexical~)
  [10758] (11012/24) Normal[10758] argumentsObjectNeeded = false
  [10759] (11013/22) If[10759] (contains parameterNames "arguments")
  [10760] (10997/13) Normal[10760] __x8__ = (- __x8__ 1i)
  [10761] (11010/21) Normal[10761] let argumentsObjectNeeded = true
  [10762] (11030/37) Normal[10762] assert (= __x13__ calleeEnv)
  [10763] (11031/38) Normal[10763] calleeContext.LexicalEnvironment = env
  [10764] (10984/7) Normal[10764] let hasParameterExpressions = __x3__
  [10765] (10985/8) Call[10765] access __x4__ = (code "VarDeclaredNames")
  [10766] (11103/79) Normal[10766] let __x32__ = varNames
  [10767] (11104/79) Normal[10767] let __x33__ = 0i
  [10768] (11105/79) Loop[10768] (< __x33__ __x32__.length)
  [10769] (11157/103) Call[10769] access __x49__ = (f "BoundNames")
  [10770] (11158/103) Normal[10770] let fn = __x49__[0i]
  [10771] (10990/10) Normal[10771] let lexicalNames = __x6__
  [10772] (10991/11) Normal[10772] let functionNames = (new [])
  [10773] (11023/32) Normal[10773] let env = __x10__
  [10774] (11032/39) Normal[10774] let __x14__ = parameterNames
  [10775] (11083/68) Normal[10775] let __x27__ = varNames
  [10776] (11084/68) Normal[10776] let __x28__ = 0i
  [10777] (11151/102) Normal[10777] let __x47__ = functionsToInitialize
  [10778] (11037/39) Normal[10778] __x15__ = (+ __x15__ 1i)
  [10779] (11065/55) Normal[10779] [! __x22__]
  [10780] (11066/56) Call[10780] app __x23__ = (env.InitializeBinding env "arguments" ao)
  [10781] (11001/15) Normal[10781] assert (|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration))
  [10782] (11002/16) Call[10782] access __x9__ = (d "BoundNames")
  [10783] (11163/106) Normal[10783] return ~empty~
  [10784] Exit[10784]
  [10785] (11099/76) Call[10785] app __x31__ = (NewDeclarativeEnvironment env)
  [10786] (11100/76) Normal[10786] let varEnv = __x31__
  [10787] (11117/85) Call[10787] app __x35__ = (env.GetBindingValue env n false)
  [10788] (11118/85) Normal[10788] let initialValue = [! __x35__]
  [10789] (11071/60) Call[10789] app __x24__ = (CreateListIteratorRecord argumentsList)
  [10790] (11072/60) Normal[10790] let iteratorRecord = __x24__
  [10791] (11147/99) Normal[10791] [! __x45__]
  [10792] LoopCont[10792]
  [10793] (11040/42) If[10793] (= alreadyDeclared false)
  [10794] (11042/43) Call[10794] app __x17__ = (env.CreateMutableBinding env paramName false)
  [10795] LoopCont[10795]
  [10796] (11129/94) Normal[10796] let lexDeclarations = __x38__
  [10797] (11130/95) Normal[10797] let __x39__ = lexDeclarations
  [10798] (11112/82) Call[10798] app __x34__ = (varEnv.CreateMutableBinding varEnv n false)
  [10799] (10972/1) Normal[10799] let code = func.ECMAScriptCode
  [10800] (11059/52) If[10800] (= strict true)
  [10801] (11061/53) Call[10801] app __x21__ = (env.CreateImmutableBinding env "arguments" false)
  [10802] (11064/55) Call[10802] app __x22__ = (env.CreateMutableBinding env "arguments" false)
  [10803] (11078/64) Call[10803] access __x26__ = (formals "IteratorBindingInitialization" iteratorRecord env)
  [10804] (11079/64) Normal[10804] [? __x26__]
  [10805] (11131/95) Normal[10805] let __x40__ = 0i
  [10806] (10977/5) Call[10806] app __x1__ = (IsDuplicate parameterNames)
  [10807] (11073/61) If[10807] (= hasDuplicates true)
  [10808] (11095/72) Normal[10808] __x30__
  [10809] (11039/40) Normal[10809] let alreadyDeclared = __x16__
  [10810] (11113/82) Normal[10810] [! __x34__]
  [10811] (11160/104) Normal[10811] let fo = __x50__
  [10812] (11161/105) Call[10812] app __x51__ = (varEnv.SetMutableBinding varEnv fn fo false)
  [10813] (11055/48) Normal[10813] let ao = __x19__
  [10814] (11006/18) Normal[10814] prepend fn -> functionNames
  [10815] (11007/20) Normal[10815] prepend d -> functionsToInitialize
  [10816] (10999/14) If[10816] (! (|| (|| (is-instance-of d VariableDeclaration) (is-instance-of d ForBinding)) (is-instance-of d BindingIdentifier)))
  [10817] LoopCont[10817]
  [10818] (10992/12) Normal[10818] let functionsToInitialize = (new [])
  [10819] (11135/95) Normal[10819] __x40__ = (+ __x40__ 1i)
  [10820] (11082/67) Normal[10820] let instantiatedVarNames = (copy-obj parameterBindings)
  [10821] (11046/45) Call[10821] app __x18__ = (env.InitializeBinding env paramName undefined)
  [10822] (11047/45) Normal[10822] [! __x18__]
  [10823] (11088/68) Normal[10823] __x28__ = (+ __x28__ 1i)
  [10824] (11089/69) If[10824] (! (contains instantiatedVarNames n))
  [10825] (11156/102) Normal[10825] __x48__ = (+ __x48__ 1i)
  [10826] (10979/5) Normal[10826] let hasDuplicates = true
  [10827] (11139/97) Loop[10827] (< __x43__ __x42__.length)
  [10828] LoopCont[10828]
  [10829] (11102/78) Normal[10829] let instantiatedVarNames = (new [])
  [10830] (11120/86) Normal[10830] __x36__
  [10831] (11087/68) Normal[10831] let n = __x27__[__x28__]
  [10832] (10983/7) Call[10832] access __x3__ = (formals "ContainsExpression")
  [10833] (11126/89) Normal[10833] let lexEnv = varEnv
  [10834] (11127/93) Normal[10834] calleeContext.LexicalEnvironment = lexEnv
  [10835] (11015/22) If[10835] (= hasParameterExpressions false)
  [10836] (11132/95) Loop[10836] (< __x40__ __x39__.length)
  [10837] (11058/51) Normal[10837] let ao = __x20__
  [10838] (11125/90) Normal[10838] let lexEnv = __x37__
  [10839] (11097/73) Normal[10839] let varEnv = env
  [10840] (11122/89) If[10840] (= strict false)
  [10841] (10973/2) Normal[10841] let strict = func.Strict
  [10842] (11149/101) Call[10842] app __x46__ = (lexEnv.CreateMutableBinding lexEnv dn false)
  [10843] (11150/101) Normal[10843] [! __x46__]
  [10844] (11022/32) Call[10844] access __x10__ = (calleeContext "LexicalEnvironment")
  [10845] (11162/105) Normal[10845] [! __x51__]
  [10846] (11044/44) If[10846] (= hasDuplicates true)
  [10847] (10987/9) Call[10847] access __x5__ = (code "VarScopedDeclarations")
  [10848] (10988/9) Normal[10848] let varDeclarations = __x5__
  [10849] (11004/17) If[10849] (! (contains functionNames fn))
  [10850] (10993/13) Normal[10850] let __x7__ = varDeclarations
  [10851] (11025/35) Call[10851] access __x11__ = (calleeContext "LexicalEnvironment")
  [10852] (10998/13) Normal[10852] let d = __x7__[__x8__]
  [10853] (11038/40) Call[10853] app __x16__ = (env.HasBinding env paramName)
  [10854] (11114/83) If[10854] (|| (! (contains parameterBindings n)) (contains functionNames n))
  [10855] (10982/6) Normal[10855] let simpleParameterList = __x2__
  [10856] (11033/39) Normal[10856] let __x15__ = 0i
  [10857] (11143/98) Call[10857] access __x44__ = (d "IsConstantDeclaration")
  [10858] (11144/98) If[10858] (= __x44__ true)
  [10859] (11027/36) Call[10859] app __x12__ = (NewDeclarativeEnvironment calleeEnv)
  [10860] (11028/36) Normal[10860] let env = __x12__
  [10861] (11075/62) Call[10861] access __x25__ = (formals "IteratorBindingInitialization" iteratorRecord undefined)
  [10862] (11159/104) Call[10862] access __x50__ = (f "InstantiateFunctionObject" lexEnv)
  [10863] (11107/79) Normal[10863] let n = __x32__[__x33__]
  [10864] (11108/79) Normal[10864] __x33__ = (+ __x33__ 1i)
  [10865] (11068/57) Normal[10865] append "arguments" -> parameterNames
  [10866] (11069/57) Normal[10866] let parameterBindings = parameterNames
  [10867] (11062/53) Normal[10867] [! __x21__]
  [10868] (10978/5) If[10868] __x1__
  [10869] (11014/26) Normal[10869] argumentsObjectNeeded = false
  [10870] (11091/70) Normal[10870] append n -> instantiatedVarNames
  [10871] LoopCont[10871]
  [10872] (11138/97) Normal[10872] let __x43__ = 0i
  [10873] (11155/102) Normal[10873] let f = __x47__[__x48__]
  [10874] (11101/77) Normal[10874] calleeContext.VariableEnvironment = varEnv
  [10875] (11128/94) Call[10875] access __x38__ = (code "LexicallyScopedDeclarations")
  [10876] (11134/95) Normal[10876] let d = __x39__[__x40__]
  [10877] (10974/3) Normal[10877] let formals = func.FormalParameters
  [10878] (11067/56) Normal[10878] __x23__
  [10879] LoopCont[10879]
  [10880] (11146/99) Call[10880] app __x45__ = (lexEnv.CreateImmutableBinding lexEnv dn true)
  [10881] (11026/35) Normal[10881] let calleeEnv = __x11__
  [10882] (11043/43) Normal[10882] [! __x17__]
  [10883] (10989/10) Call[10883] access __x6__ = (code "LexicallyDeclaredNames")
  [10884] (11085/68) Loop[10884] (< __x28__ __x27__.length)
  [10885] (11029/37) Call[10885] access __x13__ = (calleeContext "VariableEnvironment")
  [10886] (10986/8) Normal[10886] let varNames = __x4__
  [10887] (11124/90) Call[10887] app __x37__ = (NewDeclarativeEnvironment varEnv)
  [10888] (11003/16) Normal[10888] let fn = __x9__[0i]
  [10889] (11092/71) Call[10889] app __x29__ = (env.CreateMutableBinding env n false)
  [10890] (11070/46) Normal[10890] let parameterBindings = parameterNames
Algo: FunctionDeclaration[0,0].BoundNames [1079]
  [10891] Entry[10891]
  [10892] (11165)Normal[10892] let FunctionDeclaration = this
  [10893] (11166/0) Call[10893] access __x0__ = (BindingIdentifier "BoundNames")
  [10894] (11167/0) Normal[10894] return __x0__
  [10895] Exit[10895]
Algo: FunctionDeclaration[0,0].Contains [1080]
  [10896] Entry[10896]
  [10897] (11169)Normal[10897] let FunctionDeclaration = this
  [10898] (11170/0) Normal[10898] return false
  [10899] Exit[10899]
Algo: FunctionDeclaration[0,0].EarlyErrors [1081]
  [10900] Entry[10900]
  [10901] (11172)Normal[10901] let FunctionDeclaration = this
  [10902] (11177/1) If[10902] (|| (= __x0__ "eval") (= __x0__ "arguments"))
  [10903] (11178/1) Normal[10903] throw SyntaxError
  [10904] (11181/2) Normal[10904] let __x1__ = true
  [10905] (11184/2) If[10905] __x1__
  [10906] (11186/2) Call[10906] access __x3__ = (FormalParameters "IsSimpleParameterList")
  [10907] (11189/2) If[10907] __x1__
  [10908] (11190/2) Normal[10908] throw SyntaxError
  [10909] (11192/3) Call[10909] access __x4__ = (FormalParameters "BoundNames")
  [10910] (11173/0) Normal[10910] ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  [10911] (11183/2) Normal[10911] __x1__ = (= __x2__ true)
  [10912] (11174/1) If[10912] (&& (! (= BindingIdentifier absent)) true)
  [10913] (11187/2) Normal[10913] __x1__ = (= __x3__ false)
  [10914] (11195/3) Normal[10914] let __x7__ = __x5__
  [10915] (11196/3) Normal[10915] let __x8__ = 0i
  [10916] (11182/2) Call[10916] access __x2__ = (FunctionBody "FunctionBodyContainsUseStrict")
  [10917] (11176/1) Call[10917] access __x0__ = (BindingIdentifier "StringValue")
  [10918] (11193/3) Call[10918] access __x5__ = (FunctionBody "LexicallyDeclaredNames")
  [10919] (11223/7) Normal[10919] throw SyntaxError
  [10920] Exit[10920]
  [10921] (11202/3) Loop[10921] (< __x9__ __x7__.length)
  [10922] (11203/3) If[10922] (= __x6__[__x8__] __x7__[__x9__])
  [10923] LoopCont[10923]
  [10924] (11217/6) Call[10924] access __x13__ = (FormalParameters "Contains" "SuperCall")
  [10925] (11218/6) If[10925] (= __x13__ true)
  [10926] (11204/3) Normal[10926] __x10__ = true
  [10927] LoopCont[10927]
  [10928] (11197/3) Normal[10928] let __x9__ = 0i
  [10929] (11198/3) Normal[10929] let __x10__ = false
  [10930] (11206/3) If[10930] __x10__
  [10931] (11207/3) Normal[10931] throw SyntaxError
  [10932] (11209/4) Call[10932] access __x11__ = (FormalParameters "Contains" "SuperProperty")
  [10933] (11199/3) Loop[10933] (< __x8__ __x6__.length)
  [10934] (11211/4) Normal[10934] throw SyntaxError
  [10935] (11213/5) Call[10935] access __x12__ = (FunctionBody "Contains" "SuperProperty")
  [10936] (11219/6) Normal[10936] throw SyntaxError
  [10937] (11221/7) Call[10937] access __x14__ = (FunctionBody "Contains" "SuperCall")
  [10938] (11222/7) If[10938] (= __x14__ true)
  [10939] (11194/3) Normal[10939] let __x6__ = __x4__
  [10940] (11210/4) If[10940] (= __x11__ true)
  [10941] (11214/5) If[10941] (= __x12__ true)
  [10942] (11201/3) Normal[10942] __x9__ = 0i
  [10943] (11215/5) Normal[10943] throw SyntaxError
Algo: FunctionDeclaration[0,0].Evaluation [1082]
  [10944] Entry[10944]
  [10945] (11226)Normal[10945] let FunctionDeclaration = this
  [10946] (11227/0) Normal[10946] return ~empty~
  [10947] Exit[10947]
Algo: FunctionDeclaration[0,0].InstantiateFunctionObject [1083]
  [10948] Entry[10948]
  [10949] (11229)Normal[10949] let FunctionDeclaration = this
  [10950] (11230/0) Call[10950] access __x0__ = (FunctionDeclaration "InstantiateOrdinaryFunctionObject" scope)
  [10951] (11231/0) Normal[10951] return [? __x0__]
  [10952] Exit[10952]
Algo: FunctionDeclaration[0,0].InstantiateOrdinaryFunctionObject [1084]
  [10953] Entry[10953]
  [10954] (11233)Normal[10954] let FunctionDeclaration = this
  [10955] (11237/2) Call[10955] app __x1__ = (OrdinaryFunctionCreate INTRINSICS["%Function.prototype%"] sourceText FormalParameters FunctionBody ~non-lexical-this~ scope)
  [10956] (11238/2) Normal[10956] let F = __x1__
  [10957] (11242/4) Normal[10957] __x3__
  [10958] (11243/5) Normal[10958] return F
  [10959] (11234/0) Call[10959] access __x0__ = (BindingIdentifier "StringValue")
  [10960] (11239/3) Call[10960] app __x2__ = (SetFunctionName F name)
  [10961] (11241/4) Call[10961] app __x3__ = (MakeConstructor F)
  [10962] (11235/0) Normal[10962] let name = __x0__
  [10963] (11240/3) Normal[10963] __x2__
  [10964] (11236/1) Normal[10964] let sourceText = (get-syntax FunctionDeclaration)
  [10965] Exit[10965]
Algo: FunctionDeclaration[0,0].IsConstantDeclaration [1085]
  [10966] Entry[10966]
  [10967] (11245)Normal[10967] let FunctionDeclaration = this
  [10968] (11246/0) Normal[10968] return false
  [10969] Exit[10969]
Algo: FunctionDeclaration[1,0].BoundNames [1086]
  [10970] Entry[10970]
  [10971] (11248)Normal[10971] let FunctionDeclaration = this
  [10972] (11249/0) Normal[10972] return (new ["*default*"])
  [10973] Exit[10973]
Algo: FunctionDeclaration[1,0].Contains [1087]
  [10974] Entry[10974]
  [10975] (11251)Normal[10975] let FunctionDeclaration = this
  [10976] (11252/0) Normal[10976] return false
  [10977] Exit[10977]
Algo: FunctionDeclaration[1,0].EarlyErrors [1088]
  [10978] Entry[10978]
  [10979] (11254)Normal[10979] let FunctionDeclaration = this
  [10980] (11259/1) If[10980] (|| (= __x0__ "eval") (= __x0__ "arguments"))
  [10981] (11260/1) Normal[10981] throw SyntaxError
  [10982] (11263/2) Normal[10982] let __x1__ = true
  [10983] (11266/2) If[10983] __x1__
  [10984] (11268/2) Call[10984] access __x3__ = (FormalParameters "IsSimpleParameterList")
  [10985] (11271/2) If[10985] __x1__
  [10986] (11272/2) Normal[10986] throw SyntaxError
  [10987] (11274/3) Call[10987] access __x4__ = (FormalParameters "BoundNames")
  [10988] (11255/0) Normal[10988] ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  [10989] (11265/2) Normal[10989] __x1__ = (= __x2__ true)
  [10990] (11256/1) If[10990] (&& (! (= BindingIdentifier absent)) true)
  [10991] (11269/2) Normal[10991] __x1__ = (= __x3__ false)
  [10992] (11277/3) Normal[10992] let __x7__ = __x5__
  [10993] (11278/3) Normal[10993] let __x8__ = 0i
  [10994] (11264/2) Call[10994] access __x2__ = (FunctionBody "FunctionBodyContainsUseStrict")
  [10995] (11258/1) Call[10995] access __x0__ = (BindingIdentifier "StringValue")
  [10996] (11275/3) Call[10996] access __x5__ = (FunctionBody "LexicallyDeclaredNames")
  [10997] (11305/7) Normal[10997] throw SyntaxError
  [10998] Exit[10998]
  [10999] (11284/3) Loop[10999] (< __x9__ __x7__.length)
  [11000] (11285/3) If[11000] (= __x6__[__x8__] __x7__[__x9__])
  [11001] LoopCont[11001]
  [11002] (11299/6) Call[11002] access __x13__ = (FormalParameters "Contains" "SuperCall")
  [11003] (11300/6) If[11003] (= __x13__ true)
  [11004] (11286/3) Normal[11004] __x10__ = true
  [11005] LoopCont[11005]
  [11006] (11279/3) Normal[11006] let __x9__ = 0i
  [11007] (11280/3) Normal[11007] let __x10__ = false
  [11008] (11288/3) If[11008] __x10__
  [11009] (11289/3) Normal[11009] throw SyntaxError
  [11010] (11291/4) Call[11010] access __x11__ = (FormalParameters "Contains" "SuperProperty")
  [11011] (11281/3) Loop[11011] (< __x8__ __x6__.length)
  [11012] (11293/4) Normal[11012] throw SyntaxError
  [11013] (11295/5) Call[11013] access __x12__ = (FunctionBody "Contains" "SuperProperty")
  [11014] (11301/6) Normal[11014] throw SyntaxError
  [11015] (11303/7) Call[11015] access __x14__ = (FunctionBody "Contains" "SuperCall")
  [11016] (11304/7) If[11016] (= __x14__ true)
  [11017] (11276/3) Normal[11017] let __x6__ = __x4__
  [11018] (11292/4) If[11018] (= __x11__ true)
  [11019] (11296/5) If[11019] (= __x12__ true)
  [11020] (11283/3) Normal[11020] __x9__ = 0i
  [11021] (11297/5) Normal[11021] throw SyntaxError
Algo: FunctionDeclaration[1,0].Evaluation [1089]
  [11022] Entry[11022]
  [11023] (11308)Normal[11023] let FunctionDeclaration = this
  [11024] (11309/0) Normal[11024] return ~empty~
  [11025] Exit[11025]
Algo: FunctionDeclaration[1,0].InstantiateFunctionObject [1090]
  [11026] Entry[11026]
  [11027] (11311)Normal[11027] let FunctionDeclaration = this
  [11028] (11312/0) Call[11028] access __x0__ = (FunctionDeclaration "InstantiateOrdinaryFunctionObject" scope)
  [11029] (11313/0) Normal[11029] return [? __x0__]
  [11030] Exit[11030]
Algo: FunctionDeclaration[1,0].InstantiateOrdinaryFunctionObject [1091]
  [11031] Entry[11031]
  [11032] (11315)Normal[11032] let FunctionDeclaration = this
  [11033] (11319/2) Call[11033] app __x1__ = (SetFunctionName F "default")
  [11034] (11320/2) Normal[11034] __x1__
  [11035] (11316/0) Normal[11035] let sourceText = (get-syntax FunctionDeclaration)
  [11036] (11321/3) Call[11036] app __x2__ = (MakeConstructor F)
  [11037] (11323/4) Normal[11037] return F
  [11038] Exit[11038]
  [11039] (11317/1) Call[11039] app __x0__ = (OrdinaryFunctionCreate INTRINSICS["%Function.prototype%"] sourceText FormalParameters FunctionBody ~non-lexical-this~ scope)
  [11040] (11322/3) Normal[11040] __x2__
  [11041] (11318/1) Normal[11041] let F = __x0__
Algo: FunctionDeclaration[1,0].IsConstantDeclaration [1092]
  [11042] Entry[11042]
  [11043] (11325)Normal[11043] let FunctionDeclaration = this
  [11044] (11326/0) Normal[11044] return false
  [11045] Exit[11045]
Algo: FunctionEnvironmentRecord.BindThisValue [1093]
  [11046] Entry[11046]
  [11047] (11328/0) Normal[11047] assert (! (= envRec.ThisBindingStatus ~lexical~))
  [11048] (11333/3) Normal[11048] envRec.ThisBindingStatus = ~initialized~
  [11049] (11334/4) Normal[11049] return V
  [11050] (11329/1) If[11050] (= envRec.ThisBindingStatus ~initialized~)
  [11051] Exit[11051]
  [11052] (11330/1) Normal[11052] throw ReferenceError
  [11053] (11332/2) Normal[11053] envRec.ThisValue = V
Algo: FunctionEnvironmentRecord.GetSuperBase [1094]
  [11054] Entry[11054]
  [11055] (11336/0) Normal[11055] let home = envRec.FunctionObject.HomeObject
  [11056] (11341/3) Call[11056] app __x0__ = (home.GetPrototypeOf home)
  [11057] (11342/3) Normal[11057] return [? __x0__]
  [11058] (11337/1) If[11058] (= home undefined)
  [11059] Exit[11059]
  [11060] (11338/1) Normal[11060] return undefined
  [11061] (11340/2) Normal[11061] assert (= (typeof home) Object)
Algo: FunctionEnvironmentRecord.GetThisBinding [1095]
  [11062] Entry[11062]
  [11063] (11344/0) Normal[11063] assert (! (= envRec.ThisBindingStatus ~lexical~))
  [11064] (11345/1) If[11064] (= envRec.ThisBindingStatus ~uninitialized~)
  [11065] (11346/1) Normal[11065] throw ReferenceError
  [11066] (11348/2) Normal[11066] return envRec.ThisValue
  [11067] Exit[11067]
Algo: FunctionEnvironmentRecord.HasSuperBinding [1096]
  [11068] Entry[11068]
  [11069] (11350/0) If[11069] (= envRec.ThisBindingStatus ~lexical~)
  [11070] (11355/1) Normal[11070] return true
  [11071] Exit[11071]
  [11072] (11351/0) Normal[11072] return false
  [11073] (11353/1) If[11073] (= envRec.FunctionObject.HomeObject undefined)
  [11074] (11354/1) Normal[11074] return false
Algo: FunctionEnvironmentRecord.HasThisBinding [1097]
  [11075] Entry[11075]
  [11076] (11356/0) If[11076] (= envRec.ThisBindingStatus ~lexical~)
  [11077] (11357/0) Normal[11077] return false
  [11078] (11358/0) Normal[11078] return true
  [11079] Exit[11079]
Algo: FunctionExpression[0,0].Contains [1098]
  [11080] Entry[11080]
  [11081] (11360)Normal[11081] let FunctionExpression = this
  [11082] (11361/0) Normal[11082] return false
  [11083] Exit[11083]
Algo: FunctionExpression[0,0].EarlyErrors [1099]
  [11084] Entry[11084]
  [11085] (11363)Normal[11085] let FunctionExpression = this
  [11086] (11368/1) If[11086] (|| (= __x0__ "eval") (= __x0__ "arguments"))
  [11087] (11369/1) Normal[11087] throw SyntaxError
  [11088] (11372/2) Normal[11088] let __x1__ = true
  [11089] (11375/2) If[11089] __x1__
  [11090] (11377/2) Call[11090] access __x3__ = (FormalParameters "IsSimpleParameterList")
  [11091] (11380/2) If[11091] __x1__
  [11092] (11381/2) Normal[11092] throw SyntaxError
  [11093] (11383/3) Call[11093] access __x4__ = (FormalParameters "BoundNames")
  [11094] (11364/0) Normal[11094] ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  [11095] (11374/2) Normal[11095] __x1__ = (= __x2__ true)
  [11096] (11365/1) If[11096] (&& (! (= BindingIdentifier absent)) true)
  [11097] (11378/2) Normal[11097] __x1__ = (= __x3__ false)
  [11098] (11386/3) Normal[11098] let __x7__ = __x5__
  [11099] (11387/3) Normal[11099] let __x8__ = 0i
  [11100] (11373/2) Call[11100] access __x2__ = (FunctionBody "FunctionBodyContainsUseStrict")
  [11101] (11367/1) Call[11101] access __x0__ = (BindingIdentifier "StringValue")
  [11102] (11384/3) Call[11102] access __x5__ = (FunctionBody "LexicallyDeclaredNames")
  [11103] (11414/7) Normal[11103] throw SyntaxError
  [11104] Exit[11104]
  [11105] (11393/3) Loop[11105] (< __x9__ __x7__.length)
  [11106] (11394/3) If[11106] (= __x6__[__x8__] __x7__[__x9__])
  [11107] LoopCont[11107]
  [11108] (11408/6) Call[11108] access __x13__ = (FormalParameters "Contains" "SuperCall")
  [11109] (11409/6) If[11109] (= __x13__ true)
  [11110] (11395/3) Normal[11110] __x10__ = true
  [11111] LoopCont[11111]
  [11112] (11388/3) Normal[11112] let __x9__ = 0i
  [11113] (11389/3) Normal[11113] let __x10__ = false
  [11114] (11397/3) If[11114] __x10__
  [11115] (11398/3) Normal[11115] throw SyntaxError
  [11116] (11400/4) Call[11116] access __x11__ = (FormalParameters "Contains" "SuperProperty")
  [11117] (11390/3) Loop[11117] (< __x8__ __x6__.length)
  [11118] (11402/4) Normal[11118] throw SyntaxError
  [11119] (11404/5) Call[11119] access __x12__ = (FunctionBody "Contains" "SuperProperty")
  [11120] (11410/6) Normal[11120] throw SyntaxError
  [11121] (11412/7) Call[11121] access __x14__ = (FunctionBody "Contains" "SuperCall")
  [11122] (11413/7) If[11122] (= __x14__ true)
  [11123] (11385/3) Normal[11123] let __x6__ = __x4__
  [11124] (11401/4) If[11124] (= __x11__ true)
  [11125] (11405/5) If[11125] (= __x12__ true)
  [11126] (11392/3) Normal[11126] __x9__ = 0i
  [11127] (11406/5) Normal[11127] throw SyntaxError
Algo: FunctionExpression[0,0].Evaluation [1100]
  [11128] Entry[11128]
  [11129] (11417)Normal[11129] let FunctionExpression = this
  [11130] (11418/0) Call[11130] access __x0__ = (FunctionExpression "InstantiateOrdinaryFunctionExpression")
  [11131] (11419/0) Normal[11131] return __x0__
  [11132] Exit[11132]
Algo: FunctionExpression[0,0].HasName [1101]
  [11133] Entry[11133]
  [11134] (11421)Normal[11134] let FunctionExpression = this
  [11135] (11422/0) Normal[11135] return false
  [11136] Exit[11136]
Algo: FunctionExpression[0,0].InstantiateOrdinaryFunctionExpression [1102]
  [11137] Entry[11137]
  [11138] (11424)Normal[11138] let FunctionExpression = this
  [11139] (11429/1) Normal[11139] let scope = __x0__
  [11140] (11430/2) Normal[11140] let sourceText = (get-syntax FunctionExpression)
  [11141] (11434/4) Normal[11141] __x2__
  [11142] (11435/5) Call[11142] app __x3__ = (MakeConstructor closure)
  [11143] (11425/0) If[11143] (= name absent)
  [11144] (11431/3) Call[11144] app __x1__ = (OrdinaryFunctionCreate INTRINSICS["%Function.prototype%"] sourceText FormalParameters FunctionBody ~non-lexical-this~ scope)
  [11145] (11433/4) Call[11145] app __x2__ = (SetFunctionName closure name)
  [11146] (11437/6) Normal[11146] return closure
  [11147] Exit[11147]
  [11148] (11426/0) Normal[11148] name = ""
  [11149] (11428/1) Call[11149] access __x0__ = (CONTEXT "LexicalEnvironment")
  [11150] (11436/5) Normal[11150] __x3__
  [11151] (11432/3) Normal[11151] let closure = __x1__
Algo: FunctionExpression[0,0].IsFunctionDefinition [1103]
  [11152] Entry[11152]
  [11153] (11439)Normal[11153] let FunctionExpression = this
  [11154] (11440/0) Normal[11154] return true
  [11155] Exit[11155]
Algo: FunctionExpression[0,0].NamedEvaluation [1104]
  [11156] Entry[11156]
  [11157] (11442)Normal[11157] let FunctionExpression = this
  [11158] (11443/0) Call[11158] access __x0__ = (FunctionExpression "InstantiateOrdinaryFunctionExpression" name)
  [11159] (11444/0) Normal[11159] return __x0__
  [11160] Exit[11160]
Algo: FunctionExpression[0,1].Contains [1105]
  [11161] Entry[11161]
  [11162] (11446)Normal[11162] let FunctionExpression = this
  [11163] (11447/0) Normal[11163] return false
  [11164] Exit[11164]
Algo: FunctionExpression[0,1].EarlyErrors [1106]
  [11165] Entry[11165]
  [11166] (11449)Normal[11166] let FunctionExpression = this
  [11167] (11454/1) If[11167] (|| (= __x0__ "eval") (= __x0__ "arguments"))
  [11168] (11455/1) Normal[11168] throw SyntaxError
  [11169] (11458/2) Normal[11169] let __x1__ = true
  [11170] (11461/2) If[11170] __x1__
  [11171] (11463/2) Call[11171] access __x3__ = (FormalParameters "IsSimpleParameterList")
  [11172] (11466/2) If[11172] __x1__
  [11173] (11467/2) Normal[11173] throw SyntaxError
  [11174] (11469/3) Call[11174] access __x4__ = (FormalParameters "BoundNames")
  [11175] (11450/0) Normal[11175] ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  [11176] (11460/2) Normal[11176] __x1__ = (= __x2__ true)
  [11177] (11451/1) If[11177] (&& (! (= BindingIdentifier absent)) true)
  [11178] (11464/2) Normal[11178] __x1__ = (= __x3__ false)
  [11179] (11472/3) Normal[11179] let __x7__ = __x5__
  [11180] (11473/3) Normal[11180] let __x8__ = 0i
  [11181] (11459/2) Call[11181] access __x2__ = (FunctionBody "FunctionBodyContainsUseStrict")
  [11182] (11453/1) Call[11182] access __x0__ = (BindingIdentifier "StringValue")
  [11183] (11470/3) Call[11183] access __x5__ = (FunctionBody "LexicallyDeclaredNames")
  [11184] (11500/7) Normal[11184] throw SyntaxError
  [11185] Exit[11185]
  [11186] (11479/3) Loop[11186] (< __x9__ __x7__.length)
  [11187] (11480/3) If[11187] (= __x6__[__x8__] __x7__[__x9__])
  [11188] LoopCont[11188]
  [11189] (11494/6) Call[11189] access __x13__ = (FormalParameters "Contains" "SuperCall")
  [11190] (11495/6) If[11190] (= __x13__ true)
  [11191] (11481/3) Normal[11191] __x10__ = true
  [11192] LoopCont[11192]
  [11193] (11474/3) Normal[11193] let __x9__ = 0i
  [11194] (11475/3) Normal[11194] let __x10__ = false
  [11195] (11483/3) If[11195] __x10__
  [11196] (11484/3) Normal[11196] throw SyntaxError
  [11197] (11486/4) Call[11197] access __x11__ = (FormalParameters "Contains" "SuperProperty")
  [11198] (11476/3) Loop[11198] (< __x8__ __x6__.length)
  [11199] (11488/4) Normal[11199] throw SyntaxError
  [11200] (11490/5) Call[11200] access __x12__ = (FunctionBody "Contains" "SuperProperty")
  [11201] (11496/6) Normal[11201] throw SyntaxError
  [11202] (11498/7) Call[11202] access __x14__ = (FunctionBody "Contains" "SuperCall")
  [11203] (11499/7) If[11203] (= __x14__ true)
  [11204] (11471/3) Normal[11204] let __x6__ = __x4__
  [11205] (11487/4) If[11205] (= __x11__ true)
  [11206] (11491/5) If[11206] (= __x12__ true)
  [11207] (11478/3) Normal[11207] __x9__ = 0i
  [11208] (11492/5) Normal[11208] throw SyntaxError
Algo: FunctionExpression[0,1].Evaluation [1107]
  [11209] Entry[11209]
  [11210] (11503)Normal[11210] let FunctionExpression = this
  [11211] (11504/0) Call[11211] access __x0__ = (FunctionExpression "InstantiateOrdinaryFunctionExpression")
  [11212] (11505/0) Normal[11212] return __x0__
  [11213] Exit[11213]
Algo: FunctionExpression[0,1].HasName [1108]
  [11214] Entry[11214]
  [11215] (11507)Normal[11215] let FunctionExpression = this
  [11216] (11508/0) Normal[11216] return true
  [11217] Exit[11217]
Algo: FunctionExpression[0,1].InstantiateOrdinaryFunctionExpression [1109]
  [11218] Entry[11218]
  [11219] (11510)Normal[11219] let FunctionExpression = this
  [11220] (11514/2) Normal[11220] let scope = CONTEXT.LexicalEnvironment
  [11221] (11515/3) Call[11221] app __x1__ = (NewDeclarativeEnvironment scope)
  [11222] (11519/5) Normal[11222] let sourceText = (get-syntax FunctionExpression)
  [11223] (11520/6) Call[11223] app __x3__ = (OrdinaryFunctionCreate INTRINSICS["%Function.prototype%"] sourceText FormalParameters FunctionBody ~non-lexical-this~ funcEnv)
  [11224] (11523/7) Normal[11224] __x4__
  [11225] (11524/8) Call[11225] app __x5__ = (MakeConstructor closure)
  [11226] (11511/0) Normal[11226] assert (= name absent)
  [11227] (11516/3) Normal[11227] let funcEnv = __x1__
  [11228] (11518/4) Normal[11228] __x2__
  [11229] (11522/7) Call[11229] app __x4__ = (SetFunctionName closure name)
  [11230] (11512/1) Call[11230] access __x0__ = (BindingIdentifier "StringValue")
  [11231] (11526/9) Call[11231] app __x6__ = (funcEnv.InitializeBinding funcEnv name closure)
  [11232] (11527/9) Normal[11232] __x6__
  [11233] (11521/6) Normal[11233] let closure = __x3__
  [11234] (11517/4) Call[11234] app __x2__ = (funcEnv.CreateImmutableBinding funcEnv name false)
  [11235] (11513/1) Normal[11235] name = __x0__
  [11236] (11528/10) Normal[11236] return closure
  [11237] (11525/8) Normal[11237] __x5__
  [11238] Exit[11238]
Algo: FunctionExpression[0,1].IsFunctionDefinition [1110]
  [11239] Entry[11239]
  [11240] (11530)Normal[11240] let FunctionExpression = this
  [11241] (11531/0) Normal[11241] return true
  [11242] Exit[11242]
Algo: FunctionStatementList[0,0].ContainsDuplicateLabels [1111]
  [11243] Entry[11243]
  [11244] (11533)Normal[11244] let FunctionStatementList = this
  [11245] (11534/0) Normal[11245] return false
  [11246] Exit[11246]
Algo: FunctionStatementList[0,0].ContainsUndefinedBreakTarget [1112]
  [11247] Entry[11247]
  [11248] (11536)Normal[11248] let FunctionStatementList = this
  [11249] (11537/0) Normal[11249] return false
  [11250] Exit[11250]
Algo: FunctionStatementList[0,0].ContainsUndefinedContinueTarget [1113]
  [11251] Entry[11251]
  [11252] (11539)Normal[11252] let FunctionStatementList = this
  [11253] (11540/0) Normal[11253] return false
  [11254] Exit[11254]
Algo: FunctionStatementList[0,0].Evaluation [1114]
  [11255] Entry[11255]
  [11256] (11542)Normal[11256] let FunctionStatementList = this
  [11257] (11543/0) Normal[11257] return undefined
  [11258] Exit[11258]
Algo: FunctionStatementList[0,0].HasCallInTailPosition [1115]
  [11259] Entry[11259]
  [11260] (11545)Normal[11260] let FunctionStatementList = this
  [11261] (11546/0) Normal[11261] return false
  [11262] Exit[11262]
Algo: FunctionStatementList[0,0].LexicallyDeclaredNames [1116]
  [11263] Entry[11263]
  [11264] (11548)Normal[11264] let FunctionStatementList = this
  [11265] (11549/0) Normal[11265] return (new [])
  [11266] Exit[11266]
Algo: FunctionStatementList[0,0].LexicallyScopedDeclarations [1117]
  [11267] Entry[11267]
  [11268] (11551)Normal[11268] let FunctionStatementList = this
  [11269] (11552/0) Normal[11269] return (new [])
  [11270] Exit[11270]
Algo: FunctionStatementList[0,0].VarDeclaredNames [1118]
  [11271] Entry[11271]
  [11272] (11554)Normal[11272] let FunctionStatementList = this
  [11273] (11555/0) Normal[11273] return (new [])
  [11274] Exit[11274]
Algo: FunctionStatementList[0,0].VarScopedDeclarations [1119]
  [11275] Entry[11275]
  [11276] (11557)Normal[11276] let FunctionStatementList = this
  [11277] (11558/0) Normal[11277] return (new [])
  [11278] Exit[11278]
Algo: FunctionStatementList[0,1].LexicallyDeclaredNames [1120]
  [11279] Entry[11279]
  [11280] (11560)Normal[11280] let FunctionStatementList = this
  [11281] (11561/0) Call[11281] access __x0__ = (StatementList "TopLevelLexicallyDeclaredNames")
  [11282] (11562/0) Normal[11282] return __x0__
  [11283] Exit[11283]
Algo: FunctionStatementList[0,1].LexicallyScopedDeclarations [1121]
  [11284] Entry[11284]
  [11285] (11564)Normal[11285] let FunctionStatementList = this
  [11286] (11565/0) Call[11286] access __x0__ = (StatementList "TopLevelLexicallyScopedDeclarations")
  [11287] (11566/0) Normal[11287] return __x0__
  [11288] Exit[11288]
Algo: FunctionStatementList[0,1].VarDeclaredNames [1122]
  [11289] Entry[11289]
  [11290] (11568)Normal[11290] let FunctionStatementList = this
  [11291] (11569/0) Call[11291] access __x0__ = (StatementList "TopLevelVarDeclaredNames")
  [11292] (11570/0) Normal[11292] return __x0__
  [11293] Exit[11293]
Algo: FunctionStatementList[0,1].VarScopedDeclarations [1123]
  [11294] Entry[11294]
  [11295] (11572)Normal[11295] let FunctionStatementList = this
  [11296] (11573/0) Call[11296] access __x0__ = (StatementList "TopLevelVarScopedDeclarations")
  [11297] (11574/0) Normal[11297] return __x0__
  [11298] Exit[11298]
Algo: GLOBAL.AggregateError [1124]
  [11299] Entry[11299]
  [11300] (11576)Call[11300] app errors = (GetArgument argumentsList)
  [11301] (11580/0) Normal[11301] let newTarget = NewTarget
  [11302] (11581/1) Call[11302] app __x0__ = (OrdinaryCreateFromConstructor newTarget "%AggregateError.prototype%" (new ["ErrorData"]))
  [11303] (11586/3) Normal[11303] let msg = [? __x1__]
  [11304] (11587/4) Normal[11304] let msgDesc = (new PropertyDescriptor("Value" -> msg, "Writable" -> true, "Enumerable" -> false, "Configurable" -> true))
  [11305] (11591/6) Call[11305] app __x3__ = (IterableToList errors)
  [11306] (11592/6) Normal[11306] let errorsList = [? __x3__]
  [11307] (11577)Call[11307] app message = (GetArgument argumentsList)
  [11308] (11582/1) Normal[11308] let O = [? __x0__]
  [11309] (11585/3) Call[11309] app __x1__ = (ToString message)
  [11310] (11589/5) Normal[11310] [! __x2__]
  [11311] (11578/0) If[11311] (= NewTarget undefined)
  [11312] (11594/7) Call[11312] app __x5__ = (DefinePropertyOrThrow O "errors" (new PropertyDescriptor("Configurable" -> true, "Enumerable" -> false, "Writable" -> true, "Value" -> [! __x4__])))
  [11313] (11595/7) Normal[11313] [! __x5__]
  [11314] (11588/5) Call[11314] app __x2__ = (DefinePropertyOrThrow O "message" msgDesc)
  [11315] (11583/2) If[11315] (! (= message undefined))
  [11316] (11579/0) Normal[11316] let newTarget = CONTEXT.Function
  [11317] (11596/8) Normal[11317] return O
  [11318] (11593/7) Call[11318] app __x4__ = (CreateArrayFromList errorsList)
  [11319] Exit[11319]
Algo: GLOBAL.ArgGetter [1125]
  [11320] Entry[11320]
  [11321] (11598)Call[11321] app value = (GetArgument argumentsList)
  [11322] (11602/3) Call[11322] app __x0__ = (env.GetBindingValue env name false)
  [11323] (11603/3) Normal[11323] return __x0__
  [11324] (11599/0) Normal[11324] let f = CONTEXT.Function
  [11325] Exit[11325]
  [11326] (11600/1) Normal[11326] let name = f.Name
  [11327] (11601/2) Normal[11327] let env = f.Env
Algo: GLOBAL.ArgSetter [1126]
  [11328] Entry[11328]
  [11329] (11605)Call[11329] app value = (GetArgument argumentsList)
  [11330] (11609/3) Call[11330] app __x0__ = (env.SetMutableBinding env name value false)
  [11331] (11610/3) Normal[11331] return __x0__
  [11332] (11606/0) Normal[11332] let f = CONTEXT.Function
  [11333] Exit[11333]
  [11334] (11607/1) Normal[11334] let name = f.Name
  [11335] (11608/2) Normal[11335] let env = f.Env
Algo: GLOBAL.Array [1127]
  [11336] Entry[11336]
  [11337] (11612)Normal[11337] let values = argumentsList
  [11338] (11616/1) Call[11338] app __x0__ = (GetPrototypeFromConstructor newTarget "%Array.prototype%")
  [11339] (11617/1) Normal[11339] let proto = [? __x0__]
  [11340] (11622/4) Normal[11340] return [! __x1__]
  [11341] Exit[11341]
  [11342] (11627/7) Normal[11342] let array = [! __x2__]
  [11343] (11628/8) If[11343] (! (= (typeof len) Number))
  [11344] (11613/0) If[11344] (= NewTarget undefined)
  [11345] (11618/2) Normal[11345] let numberOfArgs = values.length
  [11346] (11621/4) Call[11346] app __x1__ = (ArrayCreate 0i proto)
  [11347] (11626/7) Call[11347] app __x2__ = (ArrayCreate 0i proto)
  [11348] (11614/0) Normal[11348] let newTarget = CONTEXT.Function
  [11349] (11615/0) Normal[11349] let newTarget = NewTarget
  [11350] (11625/6) Normal[11350] let len = values[0i]
  [11351] (11619/3) If[11351] (== numberOfArgs 0i)
  [11352] (11632/10) Normal[11352] let intLen = 1i
  [11353] (11639/14) Call[11353] app __x5__ = (Set array "length" intLen true)
  [11354] (11623/3) If[11354] (== numberOfArgs 1i)
  [11355] (11643/17) Normal[11355] assert (! (< numberOfArgs 2i))
  [11356] (11630/9) Call[11356] app __x3__ = (CreateDataPropertyOrThrow array "0" len)
  [11357] (11634/12) Call[11357] app __x4__ = (ToUint32 len)
  [11358] (11640/14) Normal[11358] [! __x5__]
  [11359] (11641/15) Normal[11359] return array
  [11360] LoopCont[11360]
  [11361] (11647/20) Loop[11361] (< k numberOfArgs)
  [11362] (11635/12) Normal[11362] let intLen = [! __x4__]
  [11363] (11636/13) If[11363] (! (= intLen len))
  [11364] (11646/19) Normal[11364] let k = 0i
  [11365] (11637/13) Normal[11365] throw RangeError
  [11366] (11651/22) Normal[11366] let itemK = values[k]
  [11367] (11652/23) Call[11367] app __x8__ = (CreateDataPropertyOrThrow array Pk itemK)
  [11368] (11645/18) Normal[11368] let array = [? __x6__]
  [11369] (11655/26) Normal[11369] return array
  [11370] (11631/9) Normal[11370] [! __x3__]
  [11371] (11650/21) Normal[11371] let Pk = [! __x7__]
  [11372] (11653/23) Normal[11372] [! __x8__]
  [11373] (11644/18) Call[11373] app __x6__ = (ArrayCreate numberOfArgs proto)
  [11374] (11654/24) Normal[11374] k = (+ k 1i)
  [11375] (11649/21) Call[11375] app __x7__ = (ToString k)
Algo: GLOBAL.Array.from [1128]
  [11376] (11661/1) If[11376] (= mapfn undefined)
  [11377] (11662/1) Normal[11377] let mapping = false
  [11378] (11664/3) Call[11378] app __x0__ = (IsCallable mapfn)
  [11379] (11738/37) Normal[11379] let A = [? __x22__]
  [11380] (11739/38) Normal[11380] let k = 0i
  [11381] (11752/45) Normal[11381] [? __x26__]
  [11382] (11753/46) Normal[11382] k = (+ k 1i)
  [11383] (11740/39) Loop[11383] (< k len)
  [11384] (11743/40) Normal[11384] let Pk = [! __x23__]
  [11385] (11744/41) Call[11385] app __x24__ = (Get arrayLike Pk)
  [11386] Entry[11386]
  [11387] (11657)Call[11387] app items = (GetArgument argumentsList)
  [11388] (11668/4) Normal[11388] let mapping = true
  [11389] (11669/5) Call[11389] app __x1__ = (GetMethod items SYMBOL_iterator)
  [11390] (11727/32) Call[11390] app __x18__ = (ToObject items)
  [11391] (11728/32) Normal[11391] let arrayLike = [! __x18__]
  [11392] (11709/25) Call[11392] app __x13__ = (IsAbruptCompletion mappedValue)
  [11393] (11710/25) If[11393] __x13__
  [11394] (11686/14) If[11394] (! (< k (- (** 2i 53i) 1i)))
  [11395] (11688/15) Call[11395] app __x6__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSICS["%TypeError.prototype%"], "ErrorData" -> undefined)))
  [11396] (11693/17) Call[11396] app __x8__ = (ToString k)
  [11397] (11703/22) Call[11397] app __x11__ = (IteratorValue next)
  [11398] (11704/22) Normal[11398] let nextValue = [? __x11__]
  [11399] (11689/15) Normal[11399] let error = __x6__
  [11400] (11722/29) Call[11400] app __x17__ = (IteratorClose iteratorRecord defineStatus)
  [11401] (11723/29) Normal[11401] return [? __x17__]
  [11402] (11673/7) Call[11402] app __x2__ = (IsConstructor C)
  [11403] (11674/7) If[11403] (= __x2__ true)
  [11404] (11681/11) Call[11404] app __x5__ = (GetIterator items ~sync~ usingIterator)
  [11405] (11682/11) Normal[11405] let iteratorRecord = [? __x5__]
  [11406] (11715/26) Normal[11406] mappedValue = mappedValue.Value
  [11407] (11717/28) Call[11407] app __x15__ = (CreateDataPropertyOrThrow A Pk mappedValue)
  [11408] (11729/33) Call[11408] app __x19__ = (LengthOfArrayLike arrayLike)
  [11409] LoopCont[11409]
  [11410] (11694/17) Normal[11410] let Pk = [! __x8__]
  [11411] (11732/34) If[11411] (= __x20__ true)
  [11412] (11734/35) Call[11412] app __x21__ = (Construct C (new [len]))
  [11413] (11737/37) Call[11413] app __x22__ = (ArrayCreate len)
  [11414] (11658)Call[11414] app mapfn = (GetArgument argumentsList)
  [11415] (11749/43) Normal[11415] let mappedValue = [? __x25__]
  [11416] (11751/45) Call[11416] app __x26__ = (CreateDataPropertyOrThrow A Pk mappedValue)
  [11417] (11731/34) Call[11417] app __x20__ = (IsConstructor C)
  [11418] (11745/41) Normal[11418] let kValue = [? __x24__]
  [11419] (11683/12) Normal[11419] let k = 0i
  [11420] (11697/19) If[11420] (= next false)
  [11421] (11699/20) Call[11421] app __x10__ = (Set A "length" k true)
  [11422] (11691/16) Normal[11422] return [? __x7__]
  [11423] (11705/23) If[11423] (= mapping true)
  [11424] (11666/3) Normal[11424] throw TypeError
  [11425] (11725/30) Normal[11425] k = (+ k 1i)
  [11426] (11671/6) If[11426] (! (= usingIterator undefined))
  [11427] (11708/24) Normal[11427] let mappedValue = __x12__
  [11428] (11748/43) Call[11428] app __x25__ = (Call mapfn thisArg (new [kValue, k]))
  [11429] (11659)Call[11429] app thisArg = (GetArgument argumentsList)
  [11430] (11713/25) Normal[11430] return [? __x14__]
  [11431] (11677/8) Normal[11431] let A = [? __x3__]
  [11432] (11696/18) Normal[11432] let next = [? __x9__]
  [11433] (11700/20) Normal[11433] [? __x10__]
  [11434] (11684/13) Loop[11434] true
  [11435] (11712/25) Call[11435] app __x14__ = (IteratorClose iteratorRecord mappedValue)
  [11436] (11730/33) Normal[11436] let len = [? __x19__]
  [11437] (11690/16) Call[11437] app __x7__ = (IteratorClose iteratorRecord error)
  [11438] (11746/42) If[11438] (= mapping true)
  [11439] (11670/5) Normal[11439] let usingIterator = [? __x1__]
  [11440] LoopCont[11440]
  [11441] (11718/28) Normal[11441] let defineStatus = __x15__
  [11442] (11719/29) Call[11442] app __x16__ = (IsAbruptCompletion defineStatus)
  [11443] (11755/47) Normal[11443] [? __x27__]
  [11444] (11756/48) Normal[11444] return A
  [11445] (11665/3) If[11445] (= __x0__ false)
  [11446] (11707/24) Call[11446] app __x12__ = (Call mapfn thisArg (new [nextValue, k]))
  [11447] (11716/23) Normal[11447] let mappedValue = nextValue
  [11448] (11660/0) Normal[11448] let C = this
  [11449] (11754/47) Call[11449] app __x27__ = (Set A "length" len true)
  [11450] (11701/21) Normal[11450] return A
  [11451] (11735/35) Normal[11451] let A = [? __x21__]
  [11452] (11679/10) Call[11452] app __x4__ = (ArrayCreate 0i)
  [11453] (11680/10) Normal[11453] let A = [! __x4__]
  [11454] (11720/29) If[11454] __x16__
  [11455] (11742/40) Call[11455] app __x23__ = (ToString k)
  [11456] (11676/8) Call[11456] app __x3__ = (Construct C)
  [11457] (11695/18) Call[11457] app __x9__ = (IteratorStep iteratorRecord)
  [11458] (11750/42) Normal[11458] let mappedValue = kValue
  [11459] Exit[11459]
Algo: GLOBAL.Array.isArray [1129]
  [11460] Entry[11460]
  [11461] (11758)Call[11461] app arg = (GetArgument argumentsList)
  [11462] (11759/0) Call[11462] app __x0__ = (IsArray arg)
  [11463] (11760/0) Normal[11463] return [? __x0__]
  [11464] Exit[11464]
Algo: GLOBAL.Array.of [1130]
  [11465] Entry[11465]
  [11466] (11762)Normal[11466] let items = argumentsList
  [11467] (11766/3) Call[11467] app __x0__ = (IsConstructor C)
  [11468] (11767/3) If[11468] (= __x0__ true)
  [11469] (11773/6) Normal[11469] let A = [? __x2__]
  [11470] (11774/7) Normal[11470] let k = 0i
  [11471] (11778/10) Call[11471] app __x3__ = (ToString k)
  [11472] (11779/10) Normal[11472] let Pk = [! __x3__]
  [11473] (11783/13) Call[11473] app __x5__ = (Set A "length" lenNumber true)
  [11474] (11784/13) Normal[11474] [? __x5__]
  [11475] (11763/0) Normal[11475] let len = items.length
  [11476] (11769/4) Call[11476] app __x1__ = (Construct C (new [lenNumber]))
  [11477] (11772/6) Call[11477] app __x2__ = (ArrayCreate len)
  [11478] (11785/14) Normal[11478] return A
  [11479] (11777/9) Normal[11479] let kValue = items[k]
  [11480] (11764/1) Normal[11480] let lenNumber = len
  [11481] (11781/11) Normal[11481] [? __x4__]
  [11482] (11782/12) Normal[11482] k = (+ k 1i)
  [11483] Exit[11483]
  [11484] (11775/8) Loop[11484] (< k len)
  [11485] (11770/4) Normal[11485] let A = [? __x1__]
  [11486] (11765/2) Normal[11486] let C = this
  [11487] LoopCont[11487]
  [11488] (11780/11) Call[11488] app __x4__ = (CreateDataPropertyOrThrow A Pk kValue)
Algo: GLOBAL.Array.prototype.concat [1131]
  [11489] Entry[11489]
  [11490] (11787)Normal[11490] let items = argumentsList
  [11491] (11791/1) Normal[11491] let A = [? __x1__]
  [11492] (11792/2) Normal[11492] let n = 0i
  [11493] (11796/4) Loop[11493] (< __x3__ __x2__.length)
  [11494] (11798/4) Normal[11494] let E = __x2__[__x3__]
  [11495] (11834/23) Call[11495] app __x13__ = (Set A "length" n true)
  [11496] (11801/5) Normal[11496] let spreadable = [? __x4__]
  [11497] (11802/6) If[11497] (= spreadable true)
  [11498] (11788/0) Call[11498] app __x0__ = (ToObject this)
  [11499] (11793/3) Normal[11499] ??? "Prepend id:{O} to id:{items} ."
  [11500] (11795/4) Normal[11500] let __x3__ = 0i
  [11501] (11789/0) Normal[11501] let O = [? __x0__]
  [11502] (11799/4) Normal[11502] __x3__ = (+ __x3__ 1i)
  [11503] (11800/5) Call[11503] app __x4__ = (IsConcatSpreadable E)
  [11504] (11806/8) Normal[11504] let len = [? __x5__]
  [11505] (11807/9) If[11505] (< (- (** 2i 53i) 1i) (+ n len))
  [11506] (11794/4) Normal[11506] let __x2__ = items
  [11507] (11790/1) Call[11507] app __x1__ = (ArraySpeciesCreate O 0i)
  [11508] (11804/7) Normal[11508] let k = 0i
  [11509] (11827/20) If[11509] (! (< n (- (** 2i 53i) 1i)))
  [11510] (11835/23) Normal[11510] [? __x13__]
  [11511] (11814/12) Call[11511] app __x7__ = (HasProperty E P)
  [11512] (11815/12) Normal[11512] let exists = [? __x7__]
  [11513] (11830/21) Call[11513] app __x11__ = (ToString n)
  [11514] (11831/21) Call[11514] app __x12__ = (CreateDataPropertyOrThrow A [! __x11__] E)
  [11515] (11816/13) If[11515] (= exists true)
  [11516] (11808/9) Normal[11516] throw TypeError
  [11517] (11810/10) Loop[11517] (< k len)
  [11518] (11820/15) Call[11518] app __x9__ = (ToString n)
  [11519] (11821/15) Call[11519] app __x10__ = (CreateDataPropertyOrThrow A [! __x9__] subElement)
  [11520] (11812/11) Call[11520] app __x6__ = (ToString k)
  [11521] LoopCont[11521]
  [11522] (11825/17) Normal[11522] k = (+ k 1i)
  [11523] LoopCont[11523]
  [11524] (11819/14) Normal[11524] let subElement = [? __x8__]
  [11525] (11832/21) Normal[11525] [? __x12__]
  [11526] (11805/8) Call[11526] app __x5__ = (LengthOfArrayLike E)
  [11527] (11824/16) Normal[11527] n = (+ n 1i)
  [11528] (11813/11) Normal[11528] let P = [! __x6__]
  [11529] (11836/24) Normal[11529] return A
  [11530] Exit[11530]
  [11531] (11818/14) Call[11531] app __x8__ = (Get E P)
  [11532] (11833/22) Normal[11532] n = (+ n 1i)
  [11533] (11828/20) Normal[11533] throw TypeError
  [11534] (11822/15) Normal[11534] [? __x10__]
Algo: GLOBAL.Array.prototype.copyWithin [1132]
  [11535] Entry[11535]
  [11536] (11838)Call[11536] app target = (GetArgument argumentsList)
  [11537] (11842/0) Normal[11537] let O = [? __x0__]
  [11538] (11843/1) Call[11538] app __x1__ = (LengthOfArrayLike O)
  [11539] (11839)Call[11539] app start = (GetArgument argumentsList)
  [11540] (11840)Call[11540] app end = (GetArgument argumentsList)
  [11541] (11841/0) Call[11541] app __x0__ = (ToObject this)
  [11542] (11847/3) If[11542] (= relativeTarget -Infinity)
  [11543] (11848/3) Normal[11543] let to = 0i
  [11544] (11849/3) If[11544] (< relativeTarget 0i)
  [11545] (11904/29) Normal[11545] assert (= fromPresent false)
  [11546] (11905/30) Call[11546] app __x17__ = (DeletePropertyOrThrow O toKey)
  [11547] (11887/18) Normal[11547] to = (- (+ to count) 1i)
  [11548] (11889/21) Loop[11548] (< 0i count)
  [11549] (11865/9) Call[11549] app __x7__ = (min relativeStart len)
  [11550] (11866/9) Normal[11550] let from = __x7__
  [11551] (11881/14) Call[11551] app __x11__ = (min (- final from) (- len to))
  [11552] (11882/14) Normal[11552] let count = __x11__
  [11553] (11867/10) If[11553] (= end undefined)
  [11554] (11899/26) Call[11554] app __x15__ = (Get O fromKey)
  [11555] (11900/26) Normal[11555] let fromVal = [? __x15__]
  [11556] (11852/4) Normal[11556] let to = __x3__
  [11557] (11856/6) Call[11557] app __x5__ = (ToIntegerOrInfinity start)
  [11558] (11859/7) Normal[11558] let from = 0i
  [11559] (11892/22) Normal[11559] let fromKey = [! __x12__]
  [11560] (11893/23) Call[11560] app __x13__ = (ToString to)
  [11561] (11906/30) Normal[11561] [? __x17__]
  [11562] (11871/11) Normal[11562] let relativeEnd = [? __x8__]
  [11563] (11872/11) If[11563] (= relativeEnd -Infinity)
  [11564] (11909/33) Normal[11564] count = (- count 1i)
  [11565] LoopCont[11565]
  [11566] (11844/1) Normal[11566] let len = [? __x1__]
  [11567] (11908/32) Normal[11567] to = (+ to direction)
  [11568] (11860/7) If[11568] (< relativeStart 0i)
  [11569] (11862/8) Call[11569] app __x6__ = (max (+ len relativeStart) 0i)
  [11570] (11876/12) Call[11570] app __x9__ = (max (+ len relativeEnd) 0i)
  [11571] (11877/12) Normal[11571] let final = __x9__
  [11572] (11870/11) Call[11572] app __x8__ = (ToIntegerOrInfinity end)
  [11573] (11883/15) If[11573] (&& (< from to) (< to (+ from count)))
  [11574] (11846/2) Normal[11574] let relativeTarget = [? __x2__]
  [11575] (11901/27) Call[11575] app __x16__ = (Set O toKey fromVal true)
  [11576] (11851/4) Call[11576] app __x3__ = (max (+ len relativeTarget) 0i)
  [11577] (11886/17) Normal[11577] from = (- (+ from count) 1i)
  [11578] (11891/22) Call[11578] app __x12__ = (ToString from)
  [11579] (11857/6) Normal[11579] let relativeStart = [? __x5__]
  [11580] (11874/11) If[11580] (< relativeEnd 0i)
  [11581] (11879/13) Call[11581] app __x10__ = (min relativeEnd len)
  [11582] (11863/8) Normal[11582] let from = __x6__
  [11583] (11910/34) Normal[11583] return O
  [11584] (11907/31) Normal[11584] from = (+ from direction)
  [11585] (11868/10) Normal[11585] let relativeEnd = len
  [11586] (11854/5) Call[11586] app __x4__ = (min relativeTarget len)
  [11587] (11902/27) Normal[11587] [? __x16__]
  [11588] (11895/24) Call[11588] app __x14__ = (HasProperty O fromKey)
  [11589] (11896/24) Normal[11589] let fromPresent = [? __x14__]
  [11590] (11845/2) Call[11590] app __x2__ = (ToIntegerOrInfinity target)
  [11591] (11885/16) Normal[11591] let direction = -1i
  [11592] (11888/15) Normal[11592] let direction = 1i
  [11593] (11880/13) Normal[11593] let final = __x10__
  [11594] (11894/23) Normal[11594] let toKey = [! __x13__]
  [11595] Exit[11595]
  [11596] (11858/7) If[11596] (= relativeStart -Infinity)
  [11597] (11897/25) If[11597] (= fromPresent true)
  [11598] (11855/5) Normal[11598] let to = __x4__
  [11599] (11873/11) Normal[11599] let final = 0i
Algo: GLOBAL.Array.prototype.entries [1133]
  [11600] Entry[11600]
  [11601] (11912/0) Call[11601] app __x0__ = (ToObject this)
  [11602] (11913/0) Normal[11602] let O = [? __x0__]
  [11603] (11914/1) Call[11603] app __x1__ = (CreateArrayIterator O ~key+value~)
  [11604] (11915/1) Normal[11604] return __x1__
  [11605] Exit[11605]
Algo: GLOBAL.Array.prototype.every [1134]
  [11606] Entry[11606]
  [11607] (11917)Call[11607] app callbackfn = (GetArgument argumentsList)
  [11608] (11921/1) Call[11608] app __x1__ = (LengthOfArrayLike O)
  [11609] (11922/1) Normal[11609] let len = [? __x1__]
  [11610] (11927/3) Normal[11610] let k = 0i
  [11611] (11928/4) Loop[11611] (< k len)
  [11612] (11932/6) Call[11612] app __x4__ = (HasProperty O Pk)
  [11613] (11933/6) Normal[11613] let kPresent = [? __x4__]
  [11614] (11939/9) Call[11614] app __x7__ = (ToBoolean [? __x6__])
  [11615] (11940/9) Normal[11615] let testResult = [! __x7__]
  [11616] (11918)Call[11616] app thisArg = (GetArgument argumentsList)
  [11617] (11923/2) Call[11617] app __x2__ = (IsCallable callbackfn)
  [11618] (11941/10) If[11618] (= testResult false)
  [11619] (11925/2) Normal[11619] throw TypeError
  [11620] (11931/5) Normal[11620] let Pk = [! __x3__]
  [11621] (11919/0) Call[11621] app __x0__ = (ToObject this)
  [11622] (11936/8) Call[11622] app __x5__ = (Get O Pk)
  [11623] (11937/8) Normal[11623] let kValue = [? __x5__]
  [11624] (11942/10) Normal[11624] return false
  [11625] (11945/11) Normal[11625] k = (+ k 1i)
  [11626] (11930/5) Call[11626] app __x3__ = (ToString k)
  [11627] (11924/2) If[11627] (= __x2__ false)
  [11628] (11920/0) Normal[11628] let O = [? __x0__]
  [11629] (11938/9) Call[11629] app __x6__ = (Call callbackfn thisArg (new [kValue, k, O]))
  [11630] (11934/7) If[11630] (= kPresent true)
  [11631] (11946/12) Normal[11631] return true
  [11632] LoopCont[11632]
  [11633] Exit[11633]
Algo: GLOBAL.Array.prototype.fill [1135]
  [11634] Entry[11634]
  [11635] (11948)Call[11635] app value = (GetArgument argumentsList)
  [11636] (11952/0) Normal[11636] let O = [? __x0__]
  [11637] (11953/1) Call[11637] app __x1__ = (LengthOfArrayLike O)
  [11638] (11957/3) If[11638] (= relativeStart -Infinity)
  [11639] (11958/3) Normal[11639] let k = 0i
  [11640] (11959/3) If[11640] (< relativeStart 0i)
  [11641] (11962/4) Normal[11641] let k = __x3__
  [11642] (11966/6) If[11642] (= end undefined)
  [11643] (11949)Call[11643] app start = (GetArgument argumentsList)
  [11644] (11954/1) Normal[11644] let len = [? __x1__]
  [11645] (11956/2) Normal[11645] let relativeStart = [? __x2__]
  [11646] (11961/4) Call[11646] app __x3__ = (max (+ len relativeStart) 0i)
  [11647] (11950)Call[11647] app end = (GetArgument argumentsList)
  [11648] (11964/5) Call[11648] app __x4__ = (min relativeStart len)
  [11649] (11955/2) Call[11649] app __x2__ = (ToIntegerOrInfinity start)
  [11650] (11967/6) Normal[11650] let relativeEnd = len
  [11651] (11971/7) If[11651] (= relativeEnd -Infinity)
  [11652] (11951/0) Call[11652] app __x0__ = (ToObject this)
  [11653] (11965/5) Normal[11653] let k = __x4__
  [11654] (11975/8) Call[11654] app __x6__ = (max (+ len relativeEnd) 0i)
  [11655] (11976/8) Normal[11655] let final = __x6__
  [11656] (11980/10) Loop[11656] (< k final)
  [11657] (11970/7) Normal[11657] let relativeEnd = [? __x5__]
  [11658] (11982/11) Call[11658] app __x8__ = (ToString k)
  [11659] (11983/11) Normal[11659] let Pk = [! __x8__]
  [11660] (11987/14) Normal[11660] return O
  [11661] (11972/7) Normal[11661] let final = 0i
  [11662] (11973/7) If[11662] (< relativeEnd 0i)
  [11663] (11986/13) Normal[11663] k = (+ k 1i)
  [11664] LoopCont[11664]
  [11665] (11969/7) Call[11665] app __x5__ = (ToIntegerOrInfinity end)
  [11666] (11985/12) Normal[11666] [? __x9__]
  [11667] (11979/9) Normal[11667] let final = __x7__
  [11668] Exit[11668]
  [11669] (11984/12) Call[11669] app __x9__ = (Set O Pk value true)
  [11670] (11978/9) Call[11670] app __x7__ = (min relativeEnd len)
Algo: GLOBAL.Array.prototype.filter [1136]
  [11671] Entry[11671]
  [11672] (11989)Call[11672] app callbackfn = (GetArgument argumentsList)
  [11673] (11993/1) Call[11673] app __x1__ = (LengthOfArrayLike O)
  [11674] (11994/1) Normal[11674] let len = [? __x1__]
  [11675] (11999/3) Call[11675] app __x3__ = (ArraySpeciesCreate O 0i)
  [11676] (12000/3) Normal[11676] let A = [? __x3__]
  [11677] (12003/6) Loop[11677] (< k len)
  [11678] (12005/7) Call[11678] app __x4__ = (ToString k)
  [11679] (12025/16) Normal[11679] return A
  [11680] (11990)Call[11680] app thisArg = (GetArgument argumentsList)
  [11681] (11995/2) Call[11681] app __x2__ = (IsCallable callbackfn)
  [11682] (11997/2) Normal[11682] throw TypeError
  [11683] (12002/5) Normal[11683] let to = 0i
  [11684] (11991/0) Call[11684] app __x0__ = (ToObject this)
  [11685] (12001/4) Normal[11685] let k = 0i
  [11686] (11996/2) If[11686] (= __x2__ false)
  [11687] (11992/0) Normal[11687] let O = [? __x0__]
  [11688] (12008/8) Normal[11688] let kPresent = [? __x5__]
  [11689] (12009/9) If[11689] (= kPresent true)
  [11690] (12006/7) Normal[11690] let Pk = [! __x4__]
  [11691] (12015/11) Normal[11691] let selected = [! __x8__]
  [11692] (12016/12) If[11692] (= selected true)
  [11693] (12018/13) Call[11693] app __x9__ = (ToString to)
  [11694] (12024/15) Normal[11694] k = (+ k 1i)
  [11695] (12011/10) Call[11695] app __x6__ = (Get O Pk)
  [11696] (12012/10) Normal[11696] let kValue = [? __x6__]
  [11697] (12021/14) Normal[11697] to = (+ to 1i)
  [11698] (12020/13) Normal[11698] [? __x10__]
  [11699] (12013/11) Call[11699] app __x7__ = (Call callbackfn thisArg (new [kValue, k, O]))
  [11700] Exit[11700]
  [11701] (12007/8) Call[11701] app __x5__ = (HasProperty O Pk)
  [11702] (12014/11) Call[11702] app __x8__ = (ToBoolean [? __x7__])
  [11703] (12019/13) Call[11703] app __x10__ = (CreateDataPropertyOrThrow A [! __x9__] kValue)
  [11704] LoopCont[11704]
Algo: GLOBAL.Array.prototype.find [1137]
  [11705] Entry[11705]
  [11706] (12027)Call[11706] app predicate = (GetArgument argumentsList)
  [11707] (12031/1) Call[11707] app __x1__ = (LengthOfArrayLike O)
  [11708] (12032/1) Normal[11708] let len = [? __x1__]
  [11709] (12037/3) Normal[11709] let k = 0i
  [11710] (12038/4) Loop[11710] (< k len)
  [11711] (12042/6) Call[11711] app __x4__ = (Get O Pk)
  [11712] (12043/6) Normal[11712] let kValue = [? __x4__]
  [11713] (12048/8) Normal[11713] return kValue
  [11714] (12050/9) Normal[11714] k = (+ k 1i)
  [11715] (12028)Call[11715] app thisArg = (GetArgument argumentsList)
  [11716] (12033/2) Call[11716] app __x2__ = (IsCallable predicate)
  [11717] LoopCont[11717]
  [11718] (12035/2) Normal[11718] throw TypeError
  [11719] (12041/5) Normal[11719] let Pk = [! __x3__]
  [11720] (12029/0) Call[11720] app __x0__ = (ToObject this)
  [11721] (12045/7) Call[11721] app __x6__ = (ToBoolean [? __x5__])
  [11722] (12046/7) Normal[11722] let testResult = [! __x6__]
  [11723] (12040/5) Call[11723] app __x3__ = (ToString k)
  [11724] (12034/2) If[11724] (= __x2__ false)
  [11725] (12030/0) Normal[11725] let O = [? __x0__]
  [11726] (12047/8) If[11726] (= testResult true)
  [11727] (12044/7) Call[11727] app __x5__ = (Call predicate thisArg (new [kValue, k, O]))
  [11728] (12051/10) Normal[11728] return undefined
  [11729] Exit[11729]
Algo: GLOBAL.Array.prototype.findIndex [1138]
  [11730] Entry[11730]
  [11731] (12053)Call[11731] app predicate = (GetArgument argumentsList)
  [11732] (12057/1) Call[11732] app __x1__ = (LengthOfArrayLike O)
  [11733] (12058/1) Normal[11733] let len = [? __x1__]
  [11734] (12063/3) Normal[11734] let k = 0i
  [11735] (12064/4) Loop[11735] (< k len)
  [11736] (12068/6) Call[11736] app __x4__ = (Get O Pk)
  [11737] (12069/6) Normal[11737] let kValue = [? __x4__]
  [11738] (12074/8) Normal[11738] return k
  [11739] (12076/9) Normal[11739] k = (+ k 1i)
  [11740] (12054)Call[11740] app thisArg = (GetArgument argumentsList)
  [11741] (12059/2) Call[11741] app __x2__ = (IsCallable predicate)
  [11742] LoopCont[11742]
  [11743] (12061/2) Normal[11743] throw TypeError
  [11744] (12067/5) Normal[11744] let Pk = [! __x3__]
  [11745] (12055/0) Call[11745] app __x0__ = (ToObject this)
  [11746] (12071/7) Call[11746] app __x6__ = (ToBoolean [? __x5__])
  [11747] (12072/7) Normal[11747] let testResult = [! __x6__]
  [11748] (12066/5) Call[11748] app __x3__ = (ToString k)
  [11749] (12060/2) If[11749] (= __x2__ false)
  [11750] (12056/0) Normal[11750] let O = [? __x0__]
  [11751] (12073/8) If[11751] (= testResult true)
  [11752] (12070/7) Call[11752] app __x5__ = (Call predicate thisArg (new [kValue, k, O]))
  [11753] (12077/10) Normal[11753] return -1i
  [11754] Exit[11754]
Algo: GLOBAL.Array.prototype.flat [1139]
  [11755] Entry[11755]
  [11756] (12079)Call[11756] app depth = (GetArgument argumentsList)
  [11757] (12083/1) Normal[11757] let sourceLen = [? __x1__]
  [11758] (12084/2) Normal[11758] let depthNum = 1i
  [11759] (12089/5) If[11759] (< depthNum 0i)
  [11760] (12090/5) Normal[11760] depthNum = 0i
  [11761] (12093/6) Call[11761] app __x3__ = (ArraySpeciesCreate O 0i)
  [11762] (12095/7) Call[11762] app __x4__ = (FlattenIntoArray A O sourceLen 0i depthNum)
  [11763] (12096/7) Normal[11763] [? __x4__]
  [11764] (12080/0) Call[11764] app __x0__ = (ToObject this)
  [11765] (12085/3) If[11765] (! (= depth undefined))
  [11766] (12088/4) Normal[11766] depthNum = [? __x2__]
  [11767] (12094/6) Normal[11767] let A = [? __x3__]
  [11768] (12081/0) Normal[11768] let O = [? __x0__]
  [11769] (12087/4) Call[11769] app __x2__ = (ToIntegerOrInfinity depth)
  [11770] (12082/1) Call[11770] app __x1__ = (LengthOfArrayLike O)
  [11771] (12097/8) Normal[11771] return A
  [11772] Exit[11772]
Algo: GLOBAL.Array.prototype.flatMap [1140]
  [11773] Entry[11773]
  [11774] (12099)Call[11774] app mapperFunction = (GetArgument argumentsList)
  [11775] (12103/1) Call[11775] app __x1__ = (LengthOfArrayLike O)
  [11776] (12104/1) Normal[11776] let sourceLen = [? __x1__]
  [11777] (12109/3) Call[11777] app __x3__ = (ArraySpeciesCreate O 0i)
  [11778] (12110/3) Normal[11778] let A = [? __x3__]
  [11779] (12113/5) Normal[11779] return A
  [11780] Exit[11780]
  [11781] (12100)Call[11781] app thisArg = (GetArgument argumentsList)
  [11782] (12105/2) Call[11782] app __x2__ = (IsCallable mapperFunction)
  [11783] (12107/2) Normal[11783] throw TypeError
  [11784] (12112/4) Normal[11784] [? __x4__]
  [11785] (12101/0) Call[11785] app __x0__ = (ToObject this)
  [11786] (12111/4) Call[11786] app __x4__ = (FlattenIntoArray A O sourceLen 0i 1i mapperFunction thisArg)
  [11787] (12106/2) If[11787] (= [! __x2__] false)
  [11788] (12102/0) Normal[11788] let O = [? __x0__]
Algo: GLOBAL.Array.prototype.forEach [1141]
  [11789] Entry[11789]
  [11790] (12115)Call[11790] app callbackfn = (GetArgument argumentsList)
  [11791] (12119/1) Call[11791] app __x1__ = (LengthOfArrayLike O)
  [11792] (12120/1) Normal[11792] let len = [? __x1__]
  [11793] (12125/3) Normal[11793] let k = 0i
  [11794] (12126/4) Loop[11794] (< k len)
  [11795] (12130/6) Call[11795] app __x4__ = (HasProperty O Pk)
  [11796] (12131/6) Normal[11796] let kPresent = [? __x4__]
  [11797] (12137/9) Normal[11797] [? __x6__]
  [11798] (12139/10) Normal[11798] k = (+ k 1i)
  [11799] (12116)Call[11799] app thisArg = (GetArgument argumentsList)
  [11800] (12121/2) Call[11800] app __x2__ = (IsCallable callbackfn)
  [11801] LoopCont[11801]
  [11802] (12123/2) Normal[11802] throw TypeError
  [11803] (12129/5) Normal[11803] let Pk = [! __x3__]
  [11804] (12117/0) Call[11804] app __x0__ = (ToObject this)
  [11805] (12134/8) Call[11805] app __x5__ = (Get O Pk)
  [11806] (12135/8) Normal[11806] let kValue = [? __x5__]
  [11807] (12128/5) Call[11807] app __x3__ = (ToString k)
  [11808] (12122/2) If[11808] (= __x2__ false)
  [11809] (12118/0) Normal[11809] let O = [? __x0__]
  [11810] (12136/9) Call[11810] app __x6__ = (Call callbackfn thisArg (new [kValue, k, O]))
  [11811] (12132/7) If[11811] (= kPresent true)
  [11812] (12140/11) Normal[11812] return undefined
  [11813] Exit[11813]
Algo: GLOBAL.Array.prototype.includes [1142]
  [11814] Entry[11814]
  [11815] (12142)Call[11815] app searchElement = (GetArgument argumentsList)
  [11816] (12146/1) Call[11816] app __x1__ = (LengthOfArrayLike O)
  [11817] (12147/1) Normal[11817] let len = [? __x1__]
  [11818] (12152/3) Normal[11818] let n = [? __x2__]
  [11819] (12153/5) If[11819] (= n Infinity)
  [11820] (12156/6) Normal[11820] n = 0i
  [11821] (12158/7) If[11821] (! (< n 0i))
  [11822] (12143)Call[11822] app fromIndex = (GetArgument argumentsList)
  [11823] (12148/2) If[11823] (= len 0i)
  [11824] (12151/3) Call[11824] app __x2__ = (ToIntegerOrInfinity fromIndex)
  [11825] (12155/5) If[11825] (= n -Infinity)
  [11826] (12144/0) Call[11826] app __x0__ = (ToObject this)
  [11827] (12161/10) Normal[11827] let k = (+ len n)
  [11828] (12162/11) If[11828] (< k 0i)
  [11829] (12154/5) Normal[11829] return false
  [11830] (12149/2) Normal[11830] return false
  [11831] (12145/0) Normal[11831] let O = [? __x0__]
  [11832] (12163/11) Normal[11832] k = 0i
  [11833] (12165/12) Loop[11833] (< k len)
  [11834] (12159/8) Normal[11834] let k = n
  [11835] (12170/14) Call[11835] app __x5__ = (SameValueZero searchElement elementK)
  [11836] (12171/14) If[11836] (= __x5__ true)
  [11837] (12172/14) Normal[11837] return true
  [11838] (12174/15) Normal[11838] k = (+ k 1i)
  [11839] (12167/13) Call[11839] app __x3__ = (ToString k)
  [11840] (12175/16) Normal[11840] return false
  [11841] Exit[11841]
  [11842] LoopCont[11842]
  [11843] (12168/13) Call[11843] app __x4__ = (Get O [! __x3__])
  [11844] (12169/13) Normal[11844] let elementK = [? __x4__]
Algo: GLOBAL.Array.prototype.indexOf [1143]
  [11845] Entry[11845]
  [11846] (12177)Call[11846] app searchElement = (GetArgument argumentsList)
  [11847] (12181/1) Call[11847] app __x1__ = (LengthOfArrayLike O)
  [11848] (12182/1) Normal[11848] let len = [? __x1__]
  [11849] (12187/3) Normal[11849] let n = [? __x2__]
  [11850] (12188/5) If[11850] (= n Infinity)
  [11851] (12191/6) Normal[11851] n = 0i
  [11852] (12193/7) If[11852] (! (< n 0i))
  [11853] (12178)Call[11853] app fromIndex = (GetArgument argumentsList)
  [11854] (12183/2) If[11854] (= len 0i)
  [11855] (12186/3) Call[11855] app __x2__ = (ToIntegerOrInfinity fromIndex)
  [11856] (12190/5) If[11856] (= n -Infinity)
  [11857] (12179/0) Call[11857] app __x0__ = (ToObject this)
  [11858] (12189/5) Normal[11858] return -1i
  [11859] (12184/2) Normal[11859] return -1i
  [11860] (12180/0) Normal[11860] let O = [? __x0__]
  [11861] (12197/11) If[11861] (< k 0i)
  [11862] (12198/11) Normal[11862] k = 0i
  [11863] (12200/12) Loop[11863] (< k len)
  [11864] (12194/8) Normal[11864] let k = n
  [11865] (12196/10) Normal[11865] let k = (+ len n)
  [11866] (12205/14) If[11866] (= kPresent true)
  [11867] (12207/15) Call[11867] app __x5__ = (ToString k)
  [11868] (12216/18) Normal[11868] k = (+ k 1i)
  [11869] (12208/15) Call[11869] app __x6__ = (Get O [! __x5__])
  [11870] (12202/13) Call[11870] app __x3__ = (ToString k)
  [11871] (12217/19) Normal[11871] return -1i
  [11872] (12211/16) Normal[11872] let same = __x7__
  [11873] (12212/17) If[11873] (= same true)
  [11874] (12210/16) Call[11874] app __x7__ = (StrictEqualityComparison searchElement elementK)
  [11875] (12203/13) Call[11875] app __x4__ = (HasProperty O [! __x3__])
  [11876] LoopCont[11876]
  [11877] Exit[11877]
  [11878] (12204/13) Normal[11878] let kPresent = [? __x4__]
  [11879] (12209/15) Normal[11879] let elementK = [? __x6__]
  [11880] (12213/17) Normal[11880] return k
Algo: GLOBAL.Array.prototype.join [1144]
  [11881] Entry[11881]
  [11882] (12219)Call[11882] app separator = (GetArgument argumentsList)
  [11883] (12223/1) Normal[11883] let len = [? __x1__]
  [11884] (12224/2) If[11884] (= separator undefined)
  [11885] (12229/4) Normal[11885] let R = ""
  [11886] (12230/5) Normal[11886] let k = 0i
  [11887] (12234/7) Normal[11887] R = (+ R sep)
  [11888] (12236/8) Call[11888] app __x3__ = (ToString k)
  [11889] (12242/10) Call[11889] app __x5__ = (ToString element)
  [11890] (12243/10) Normal[11890] let next = [? __x5__]
  [11891] (12220/0) Call[11891] app __x0__ = (ToObject this)
  [11892] (12225/2) Normal[11892] let sep = ","
  [11893] (12227/3) Call[11893] app __x2__ = (ToString separator)
  [11894] (12244/10) Normal[11894] R = (+ R next)
  [11895] (12228/3) Normal[11895] let sep = [? __x2__]
  [11896] (12233/7) If[11896] (< 0i k)
  [11897] (12221/0) Normal[11897] let O = [? __x0__]
  [11898] (12238/8) Normal[11898] let element = [? __x4__]
  [11899] (12239/9) If[11899] (|| (= element undefined) (= element null))
  [11900] (12245/11) Normal[11900] k = (+ k 1i)
  [11901] (12231/6) Loop[11901] (< k len)
  [11902] (12246/12) Normal[11902] return R
  [11903] (12222/1) Call[11903] app __x1__ = (LengthOfArrayLike O)
  [11904] (12240/9) Normal[11904] let next = ""
  [11905] (12237/8) Call[11905] app __x4__ = (Get O [! __x3__])
  [11906] LoopCont[11906]
  [11907] Exit[11907]
Algo: GLOBAL.Array.prototype.keys [1145]
  [11908] Entry[11908]
  [11909] (12248/0) Call[11909] app __x0__ = (ToObject this)
  [11910] (12249/0) Normal[11910] let O = [? __x0__]
  [11911] (12250/1) Call[11911] app __x1__ = (CreateArrayIterator O ~key~)
  [11912] (12251/1) Normal[11912] return __x1__
  [11913] Exit[11913]
Algo: GLOBAL.Array.prototype.lastIndexOf [1146]
  [11914] Entry[11914]
  [11915] (12253)Call[11915] app searchElement = (GetArgument argumentsList)
  [11916] (12257/1) Call[11916] app __x1__ = (LengthOfArrayLike O)
  [11917] (12258/1) Normal[11917] let len = [? __x1__]
  [11918] (12264/3) Call[11918] app __x2__ = (ToIntegerOrInfinity fromIndex)
  [11919] (12265/3) Normal[11919] let n = [? __x2__]
  [11920] (12268/4) Normal[11920] return -1i
  [11921] (12270/5) If[11921] (! (< n 0i))
  [11922] (12254)Call[11922] app fromIndex = (GetArgument argumentsList)
  [11923] (12259/2) If[11923] (= len 0i)
  [11924] (12262/3) If[11924] (! (= fromIndex absent))
  [11925] (12266/3) Normal[11925] let n = (- len 1i)
  [11926] (12267/4) If[11926] (= n -Infinity)
  [11927] (12255/0) Call[11927] app __x0__ = (ToObject this)
  [11928] (12260/2) Normal[11928] return -1i
  [11929] (12256/0) Normal[11929] let O = [? __x0__]
  [11930] (12274/5) Normal[11930] let k = (+ len n)
  [11931] (12275/9) Loop[11931] (! (< k 0i))
  [11932] (12272/6) Call[11932] app __x3__ = (min n (- len 1i))
  [11933] (12282/12) Call[11933] app __x6__ = (ToString k)
  [11934] (12283/12) Call[11934] app __x7__ = (Get O [! __x6__])
  [11935] (12284/12) Normal[11935] let elementK = [? __x7__]
  [11936] (12277/10) Call[11936] app __x4__ = (ToString k)
  [11937] (12278/10) Call[11937] app __x5__ = (HasProperty O [! __x4__])
  [11938] (12287/14) If[11938] (= same true)
  [11939] (12288/14) Normal[11939] return k
  [11940] (12291/15) Normal[11940] k = (- k 1i)
  [11941] (12286/13) Normal[11941] let same = __x8__
  [11942] (12279/10) Normal[11942] let kPresent = [? __x5__]
  [11943] (12292/16) Normal[11943] return -1i
  [11944] Exit[11944]
  [11945] LoopCont[11945]
  [11946] (12273/6) Normal[11946] let k = __x3__
  [11947] (12280/11) If[11947] (= kPresent true)
  [11948] (12285/13) Call[11948] app __x8__ = (StrictEqualityComparison searchElement elementK)
Algo: GLOBAL.Array.prototype.map [1147]
  [11949] Entry[11949]
  [11950] (12294)Call[11950] app callbackfn = (GetArgument argumentsList)
  [11951] (12298/1) Call[11951] app __x1__ = (LengthOfArrayLike O)
  [11952] (12299/1) Normal[11952] let len = [? __x1__]
  [11953] (12304/3) Call[11953] app __x3__ = (ArraySpeciesCreate O len)
  [11954] (12305/3) Normal[11954] let A = [? __x3__]
  [11955] (12309/6) Call[11955] app __x4__ = (ToString k)
  [11956] (12310/6) Normal[11956] let Pk = [! __x4__]
  [11957] (12316/9) Normal[11957] let kValue = [? __x6__]
  [11958] (12317/10) Call[11958] app __x7__ = (Call callbackfn thisArg (new [kValue, k, O]))
  [11959] (12295)Call[11959] app thisArg = (GetArgument argumentsList)
  [11960] (12300/2) Call[11960] app __x2__ = (IsCallable callbackfn)
  [11961] (12318/10) Normal[11961] let mappedValue = [? __x7__]
  [11962] (12302/2) Normal[11962] throw TypeError
  [11963] (12307/5) Loop[11963] (< k len)
  [11964] (12323/13) Normal[11964] return A
  [11965] (12296/0) Call[11965] app __x0__ = (ToObject this)
  [11966] (12312/7) Normal[11966] let kPresent = [? __x5__]
  [11967] (12313/8) If[11967] (= kPresent true)
  [11968] (12306/4) Normal[11968] let k = 0i
  [11969] (12301/2) If[11969] (= __x2__ false)
  [11970] (12297/0) Normal[11970] let O = [? __x0__]
  [11971] (12315/9) Call[11971] app __x6__ = (Get O Pk)
  [11972] (12322/12) Normal[11972] k = (+ k 1i)
  [11973] (12311/7) Call[11973] app __x5__ = (HasProperty O Pk)
  [11974] (12320/11) Normal[11974] [? __x8__]
  [11975] LoopCont[11975]
  [11976] (12319/11) Call[11976] app __x8__ = (CreateDataPropertyOrThrow A Pk mappedValue)
  [11977] Exit[11977]
Algo: GLOBAL.Array.prototype.pop [1148]
  [11978] Entry[11978]
  [11979] (12325/0) Call[11979] app __x0__ = (ToObject this)
  [11980] (12329/2) If[11980] (== len 0i)
  [11981] (12331/3) Call[11981] app __x2__ = (Set O "length" 0i true)
  [11982] (12335/6) Normal[11982] assert (< 0i len)
  [11983] (12336/7) Normal[11983] let newLen = (- len 1i)
  [11984] (12337/8) Call[11984] app __x3__ = (ToString newLen)
  [11985] (12340/9) Normal[11985] let element = [? __x4__]
  [11986] (12341/10) Call[11986] app __x5__ = (DeletePropertyOrThrow O index)
  [11987] (12326/0) Normal[11987] let O = [? __x0__]
  [11988] (12332/3) Normal[11988] [? __x2__]
  [11989] (12339/9) Call[11989] app __x4__ = (Get O index)
  [11990] (12327/1) Call[11990] app __x1__ = (LengthOfArrayLike O)
  [11991] (12343/11) Call[11991] app __x6__ = (Set O "length" newLen true)
  [11992] (12344/11) Normal[11992] [? __x6__]
  [11993] (12338/8) Normal[11993] let index = [! __x3__]
  [11994] (12333/4) Normal[11994] return undefined
  [11995] (12328/1) Normal[11995] let len = [? __x1__]
  [11996] (12345/12) Normal[11996] return element
  [11997] (12342/10) Normal[11997] [? __x5__]
  [11998] Exit[11998]
Algo: GLOBAL.Array.prototype.push [1149]
  [11999] Entry[11999]
  [12000] (12347)Normal[12000] let items = argumentsList
  [12001] (12351/1) Normal[12001] let len = [? __x1__]
  [12002] (12352/2) Normal[12002] let argCount = items.length
  [12003] (12357/4) Normal[12003] let __x3__ = 0i
  [12004] (12358/4) Loop[12004] (< __x3__ __x2__.length)
  [12005] (12362/5) Call[12005] app __x4__ = (ToString len)
  [12006] (12363/5) Call[12006] app __x5__ = (Set O [! __x4__] E true)
  [12007] (12367/7) Normal[12007] [? __x6__]
  [12008] (12368/8) Normal[12008] return len
  [12009] (12348/0) Call[12009] app __x0__ = (ToObject this)
  [12010] (12353/3) If[12010] (< (- (** 2i 53i) 1i) (+ len argCount))
  [12011] Exit[12011]
  [12012] (12356/4) Normal[12012] let __x2__ = items
  [12013] (12361/4) Normal[12013] __x3__ = (+ __x3__ 1i)
  [12014] (12349/0) Normal[12014] let O = [? __x0__]
  [12015] (12365/6) Normal[12015] len = (+ len 1i)
  [12016] LoopCont[12016]
  [12017] (12360/4) Normal[12017] let E = __x2__[__x3__]
  [12018] (12354/3) Normal[12018] throw TypeError
  [12019] (12350/1) Call[12019] app __x1__ = (LengthOfArrayLike O)
  [12020] (12364/5) Normal[12020] [? __x5__]
  [12021] (12366/7) Call[12021] app __x6__ = (Set O "length" len true)
Algo: GLOBAL.Array.prototype.reduce [1150]
  [12022] Entry[12022]
  [12023] (12370)Call[12023] app callbackfn = (GetArgument argumentsList)
  [12024] (12374/1) Call[12024] app __x1__ = (LengthOfArrayLike O)
  [12025] (12375/1) Normal[12025] let len = [? __x1__]
  [12026] (12380/3) If[12026] (&& (== len 0i) (= initialValue absent))
  [12027] (12381/3) Normal[12027] throw TypeError
  [12028] (12383/4) Normal[12028] let k = 0i
  [12029] (12385/6) If[12029] (! (= initialValue absent))
  [12030] (12386/7) Normal[12030] accumulator = initialValue
  [12031] (12388/9) Normal[12031] let kPresent = false
  [12032] (12371)Call[12032] app initialValue = (GetArgument argumentsList)
  [12033] (12376/2) Call[12033] app __x2__ = (IsCallable callbackfn)
  [12034] (12378/2) Normal[12034] throw TypeError
  [12035] (12372/0) Call[12035] app __x0__ = (ToObject this)
  [12036] (12384/5) Normal[12036] let accumulator = undefined
  [12037] (12391/11) Call[12037] app __x3__ = (ToString k)
  [12038] (12392/11) Normal[12038] let Pk = [! __x3__]
  [12039] (12377/2) If[12039] (= __x2__ false)
  [12040] (12373/0) Normal[12040] let O = [? __x0__]
  [12041] (12404/17) Loop[12041] (< k len)
  [12042] (12398/14) Normal[12042] accumulator = [? __x5__]
  [12043] (12400/15) Normal[12043] k = (+ k 1i)
  [12044] (12414/22) Call[12044] app __x9__ = (Call callbackfn undefined (new [accumulator, kValue, k, O]))
  [12045] (12415/22) Normal[12045] accumulator = [? __x9__]
  [12046] LoopCont[12046]
  [12047] (12393/12) Call[12047] app __x4__ = (HasProperty O Pk)
  [12048] (12394/12) Normal[12048] kPresent = [? __x4__]
  [12049] (12406/18) Call[12049] app __x6__ = (ToString k)
  [12050] (12418/24) Normal[12050] return accumulator
  [12051] (12395/13) If[12051] (= kPresent true)
  [12052] (12409/19) Normal[12052] let kPresent = [? __x7__]
  [12053] (12410/20) If[12053] (= kPresent true)
  [12054] (12402/16) Normal[12054] throw TypeError
  [12055] (12417/23) Normal[12055] k = (+ k 1i)
  [12056] Exit[12056]
  [12057] (12389/10) Loop[12057] (&& (= kPresent false) (< k len))
  [12058] (12401/16) If[12058] (= kPresent false)
  [12059] (12408/19) Call[12059] app __x7__ = (HasProperty O Pk)
  [12060] (12412/21) Call[12060] app __x8__ = (Get O Pk)
  [12061] (12397/14) Call[12061] app __x5__ = (Get O Pk)
  [12062] LoopCont[12062]
  [12063] (12413/21) Normal[12063] let kValue = [? __x8__]
  [12064] (12407/18) Normal[12064] let Pk = [! __x6__]
Algo: GLOBAL.Array.prototype.reduceRight [1151]
  [12065] Entry[12065]
  [12066] (12420)Call[12066] app callbackfn = (GetArgument argumentsList)
  [12067] (12424/1) Call[12067] app __x1__ = (LengthOfArrayLike O)
  [12068] (12425/1) Normal[12068] let len = [? __x1__]
  [12069] (12430/3) If[12069] (&& (= len 0i) (= initialValue absent))
  [12070] (12431/3) Normal[12070] throw TypeError
  [12071] (12433/4) Normal[12071] let k = (- len 1i)
  [12072] (12435/6) If[12072] (! (= initialValue absent))
  [12073] (12436/7) Normal[12073] accumulator = initialValue
  [12074] (12438/9) Normal[12074] let kPresent = false
  [12075] (12421)Call[12075] app initialValue = (GetArgument argumentsList)
  [12076] (12426/2) Call[12076] app __x2__ = (IsCallable callbackfn)
  [12077] (12428/2) Normal[12077] throw TypeError
  [12078] (12422/0) Call[12078] app __x0__ = (ToObject this)
  [12079] (12434/5) Normal[12079] let accumulator = undefined
  [12080] (12441/11) Call[12080] app __x3__ = (ToString k)
  [12081] (12442/11) Normal[12081] let Pk = [! __x3__]
  [12082] (12427/2) If[12082] (= __x2__ false)
  [12083] (12423/0) Normal[12083] let O = [? __x0__]
  [12084] (12454/17) Loop[12084] (! (< k 0i))
  [12085] (12448/14) Normal[12085] accumulator = [? __x5__]
  [12086] (12450/15) Normal[12086] k = (- k 1i)
  [12087] (12464/22) Call[12087] app __x9__ = (Call callbackfn undefined (new [accumulator, kValue, k, O]))
  [12088] (12465/22) Normal[12088] accumulator = [? __x9__]
  [12089] LoopCont[12089]
  [12090] (12443/12) Call[12090] app __x4__ = (HasProperty O Pk)
  [12091] (12444/12) Normal[12091] kPresent = [? __x4__]
  [12092] (12456/18) Call[12092] app __x6__ = (ToString k)
  [12093] (12468/24) Normal[12093] return accumulator
  [12094] (12445/13) If[12094] (= kPresent true)
  [12095] (12459/19) Normal[12095] let kPresent = [? __x7__]
  [12096] (12460/20) If[12096] (= kPresent true)
  [12097] (12452/16) Normal[12097] throw TypeError
  [12098] (12467/23) Normal[12098] k = (- k 1i)
  [12099] Exit[12099]
  [12100] (12439/10) Loop[12100] (&& (= kPresent false) (! (< k 0i)))
  [12101] (12451/16) If[12101] (= kPresent false)
  [12102] (12458/19) Call[12102] app __x7__ = (HasProperty O Pk)
  [12103] (12462/21) Call[12103] app __x8__ = (Get O Pk)
  [12104] (12447/14) Call[12104] app __x5__ = (Get O Pk)
  [12105] LoopCont[12105]
  [12106] (12463/21) Normal[12106] let kValue = [? __x8__]
  [12107] (12457/18) Normal[12107] let Pk = [! __x6__]
Algo: GLOBAL.Array.prototype.reverse [1152]
  [12108] Entry[12108]
  [12109] (12470/0) Call[12109] app __x0__ = (ToObject this)
  [12110] (12474/2) Call[12110] app __x2__ = (floor (/ len 2i))
  [12111] (12475/2) Normal[12111] let middle = __x2__
  [12112] (12480/6) Call[12112] app __x3__ = (ToString upper)
  [12113] (12481/6) Normal[12113] let upperP = [! __x3__]
  [12114] (12484/8) Call[12114] app __x5__ = (HasProperty O lowerP)
  [12115] (12485/8) Normal[12115] let lowerExists = [? __x5__]
  [12116] (12471/0) Normal[12116] let O = [? __x0__]
  [12117] (12476/3) Normal[12117] let lower = 0i
  [12118] (12479/5) Normal[12118] let upper = (- (- len lower) 1i)
  [12119] (12472/1) Call[12119] app __x1__ = (LengthOfArrayLike O)
  [12120] (12482/7) Call[12120] app __x4__ = (ToString lower)
  [12121] (12483/7) Normal[12121] let lowerP = [! __x4__]
  [12122] (12489/10) Normal[12122] let lowerValue = [? __x6__]
  [12123] (12491/11) Call[12123] app __x7__ = (HasProperty O upperP)
  [12124] (12477/4) Loop[12124] (! (== lower middle))
  [12125] (12518/27) Normal[12125] return O
  [12126] (12473/1) Normal[12126] let len = [? __x1__]
  [12127] (12486/9) If[12127] (= lowerExists true)
  [12128] Exit[12128]
  [12129] (12498/14) If[12129] (&& (= lowerExists true) (= upperExists true))
  [12130] (12500/15) Call[12130] app __x9__ = (Set O lowerP upperValue true)
  [12131] (12504/14) If[12131] (&& (= lowerExists false) (= upperExists true))
  [12132] (12514/22) Call[12132] app __x14__ = (Set O upperP lowerValue true)
  [12133] (12515/22) Normal[12133] [? __x14__]
  [12134] (12501/15) Normal[12134] [? __x9__]
  [12135] (12492/11) Normal[12135] let upperExists = [? __x7__]
  [12136] (12493/12) If[12136] (= upperExists true)
  [12137] (12506/18) Call[12137] app __x11__ = (Set O lowerP upperValue true)
  [12138] (12510/14) If[12138] (&& (= lowerExists true) (= upperExists false))
  [12139] (12495/13) Call[12139] app __x8__ = (Get O upperP)
  [12140] (12509/19) Normal[12140] [? __x12__]
  [12141] (12517/26) Normal[12141] lower = (+ lower 1i)
  [12142] (12503/16) Normal[12142] [? __x10__]
  [12143] LoopCont[12143]
  [12144] (12488/10) Call[12144] app __x6__ = (Get O lowerP)
  [12145] (12508/19) Call[12145] app __x12__ = (DeletePropertyOrThrow O upperP)
  [12146] (12512/21) Call[12146] app __x13__ = (DeletePropertyOrThrow O lowerP)
  [12147] (12516/14) Normal[12147] assert (&& (= lowerExists false) (= upperExists false))
  [12148] (12496/13) Normal[12148] let upperValue = [? __x8__]
  [12149] (12502/16) Call[12149] app __x10__ = (Set O upperP lowerValue true)
  [12150] (12513/21) Normal[12150] [? __x13__]
  [12151] (12507/18) Normal[12151] [? __x11__]
Algo: GLOBAL.Array.prototype.shift [1153]
  [12152] Entry[12152]
  [12153] (12520/0) Call[12153] app __x0__ = (ToObject this)
  [12154] (12524/2) If[12154] (== len 0i)
  [12155] (12526/3) Call[12155] app __x2__ = (Set O "length" 0i true)
  [12156] (12530/5) Call[12156] app __x3__ = (Get O "0")
  [12157] (12531/5) Normal[12157] let first = [? __x3__]
  [12158] (12532/6) Normal[12158] let k = 1i
  [12159] (12536/8) Normal[12159] let from = [! __x4__]
  [12160] (12537/9) Call[12160] app __x5__ = (ToString (- k 1i))
  [12161] (12521/0) Normal[12161] let O = [? __x0__]
  [12162] (12527/3) Normal[12162] [? __x2__]
  [12163] (12535/8) Call[12163] app __x4__ = (ToString k)
  [12164] (12522/1) Call[12164] app __x1__ = (LengthOfArrayLike O)
  [12165] (12533/7) Loop[12165] (< k len)
  [12166] (12552/18) Call[12166] app __x10__ = (ToString (- len 1i))
  [12167] (12528/4) Normal[12167] return undefined
  [12168] (12523/1) Normal[12168] let len = [? __x1__]
  [12169] (12540/10) Normal[12169] let fromPresent = [? __x6__]
  [12170] (12541/11) If[12170] (= fromPresent true)
  [12171] (12538/9) Normal[12171] let to = [! __x5__]
  [12172] (12548/15) Normal[12172] assert (= fromPresent false)
  [12173] (12549/16) Call[12173] app __x9__ = (DeletePropertyOrThrow O to)
  [12174] (12550/16) Normal[12174] [? __x9__]
  [12175] (12543/12) Call[12175] app __x7__ = (Get O from)
  [12176] (12544/12) Normal[12176] let fromVal = [? __x7__]
  [12177] (12553/18) Call[12177] app __x11__ = (DeletePropertyOrThrow O [! __x10__])
  [12178] LoopCont[12178]
  [12179] (12545/13) Call[12179] app __x8__ = (Set O to fromVal true)
  [12180] (12556/19) Normal[12180] [? __x12__]
  [12181] (12557/20) Normal[12181] return first
  [12182] (12539/10) Call[12182] app __x6__ = (HasProperty O from)
  [12183] (12555/19) Call[12183] app __x12__ = (Set O "length" (- len 1i) true)
  [12184] Exit[12184]
  [12185] (12546/13) Normal[12185] [? __x8__]
  [12186] (12551/17) Normal[12186] k = (+ k 1i)
  [12187] (12554/18) Normal[12187] [? __x11__]
Algo: GLOBAL.Array.prototype.slice [1154]
  [12188] Entry[12188]
  [12189] (12559)Call[12189] app start = (GetArgument argumentsList)
  [12190] (12563/1) Call[12190] app __x1__ = (LengthOfArrayLike O)
  [12191] (12564/1) Normal[12191] let len = [? __x1__]
  [12192] (12568/3) Normal[12192] let k = 0i
  [12193] (12576/6) If[12193] (= end undefined)
  [12194] (12574/5) Call[12194] app __x4__ = (min relativeStart len)
  [12195] (12575/5) Normal[12195] let k = __x4__
  [12196] (12560)Call[12196] app end = (GetArgument argumentsList)
  [12197] (12565/2) Call[12197] app __x2__ = (ToIntegerOrInfinity start)
  [12198] (12567/3) If[12198] (= relativeStart -Infinity)
  [12199] (12569/3) If[12199] (< relativeStart 0i)
  [12200] (12561/0) Call[12200] app __x0__ = (ToObject this)
  [12201] (12571/4) Call[12201] app __x3__ = (max (+ len relativeStart) 0i)
  [12202] (12572/4) Normal[12202] let k = __x3__
  [12203] (12566/2) Normal[12203] let relativeStart = [? __x2__]
  [12204] (12562/0) Normal[12204] let O = [? __x0__]
  [12205] (12607/18) Normal[12205] [? __x14__]
  [12206] (12609/19) Normal[12206] k = (+ k 1i)
  [12207] (12586/8) Normal[12207] let final = __x6__
  [12208] (12590/10) Call[12208] app __x8__ = (max (- final k) 0i)
  [12209] (12601/16) If[12209] (= kPresent true)
  [12210] (12603/17) Call[12210] app __x12__ = (Get O Pk)
  [12211] (12588/9) Call[12211] app __x7__ = (min relativeEnd len)
  [12212] (12589/9) Normal[12212] let final = __x7__
  [12213] (12581/7) If[12213] (= relativeEnd -Infinity)
  [12214] (12582/7) Normal[12214] let final = 0i
  [12215] (12583/7) If[12215] (< relativeEnd 0i)
  [12216] (12611/21) Call[12216] app __x15__ = (Set A "length" n true)
  [12217] (12612/21) Normal[12217] [? __x15__]
  [12218] (12592/11) Call[12218] app __x9__ = (ArraySpeciesCreate O count)
  [12219] (12593/11) Normal[12219] let A = [? __x9__]
  [12220] (12597/14) Call[12220] app __x10__ = (ToString k)
  [12221] (12598/14) Normal[12221] let Pk = [! __x10__]
  [12222] (12591/10) Normal[12222] let count = __x8__
  [12223] (12604/17) Normal[12223] let kValue = [? __x12__]
  [12224] (12606/18) Call[12224] app __x14__ = (CreateDataPropertyOrThrow A [! __x13__] kValue)
  [12225] LoopCont[12225]
  [12226] (12595/13) Loop[12226] (< k final)
  [12227] (12577/6) Normal[12227] let relativeEnd = len
  [12228] (12599/15) Call[12228] app __x11__ = (HasProperty O Pk)
  [12229] (12585/8) Call[12229] app __x6__ = (max (+ len relativeEnd) 0i)
  [12230] (12610/20) Normal[12230] n = (+ n 1i)
  [12231] (12605/18) Call[12231] app __x13__ = (ToString n)
  [12232] (12600/15) Normal[12232] let kPresent = [? __x11__]
  [12233] (12613/22) Normal[12233] return A
  [12234] Exit[12234]
  [12235] (12579/7) Call[12235] app __x5__ = (ToIntegerOrInfinity end)
  [12236] (12580/7) Normal[12236] let relativeEnd = [? __x5__]
  [12237] (12594/12) Normal[12237] let n = 0i
Algo: GLOBAL.Array.prototype.some [1155]
  [12238] Entry[12238]
  [12239] (12615)Call[12239] app callbackfn = (GetArgument argumentsList)
  [12240] (12619/1) Call[12240] app __x1__ = (LengthOfArrayLike O)
  [12241] (12620/1) Normal[12241] let len = [? __x1__]
  [12242] (12625/3) Normal[12242] let k = 0i
  [12243] (12626/4) Loop[12243] (< k len)
  [12244] (12630/6) Call[12244] app __x4__ = (HasProperty O Pk)
  [12245] (12631/6) Normal[12245] let kPresent = [? __x4__]
  [12246] (12637/9) Call[12246] app __x7__ = (ToBoolean [? __x6__])
  [12247] (12638/9) Normal[12247] let testResult = [! __x7__]
  [12248] (12616)Call[12248] app thisArg = (GetArgument argumentsList)
  [12249] (12621/2) Call[12249] app __x2__ = (IsCallable callbackfn)
  [12250] (12639/10) If[12250] (= testResult true)
  [12251] (12623/2) Normal[12251] throw TypeError
  [12252] (12629/5) Normal[12252] let Pk = [! __x3__]
  [12253] (12617/0) Call[12253] app __x0__ = (ToObject this)
  [12254] (12634/8) Call[12254] app __x5__ = (Get O Pk)
  [12255] (12635/8) Normal[12255] let kValue = [? __x5__]
  [12256] (12640/10) Normal[12256] return true
  [12257] (12643/11) Normal[12257] k = (+ k 1i)
  [12258] (12628/5) Call[12258] app __x3__ = (ToString k)
  [12259] (12622/2) If[12259] (= __x2__ false)
  [12260] (12618/0) Normal[12260] let O = [? __x0__]
  [12261] (12636/9) Call[12261] app __x6__ = (Call callbackfn thisArg (new [kValue, k, O]))
  [12262] (12632/7) If[12262] (= kPresent true)
  [12263] (12644/12) Normal[12263] return false
  [12264] LoopCont[12264]
  [12265] Exit[12265]
Algo: GLOBAL.Array.prototype.sort [1156]
  [12266] Entry[12266]
  [12267] (12646)Call[12267] app comparefn = (GetArgument argumentsList)
  [12268] (12651/0) Call[12268] app __x1__ = (IsCallable comparefn)
  [12269] (12652/0) Normal[12269] __x0__ = (= __x1__ false)
  [12270] (12658/1) Normal[12270] let obj = [? __x2__]
  [12271] (12659/2) Call[12271] app __x3__ = (LengthOfArrayLike obj)
  [12272] (12662/4) Normal[12272] let k = 0i
  [12273] (12663/5) Loop[12273] (< k len)
  [12274] (12647/0) Normal[12274] let __x0__ = true
  [12275] (12654/0) If[12275] __x0__
  [12276] (12657/1) Call[12276] app __x2__ = (ToObject this)
  [12277] (12648/0) Normal[12277] __x0__ = (! (= comparefn undefined))
  [12278] (12660/2) Normal[12278] let len = [? __x3__]
  [12279] (12661/3) Normal[12279] let items = (new [])
  [12280] (12667/7) Call[12280] app __x5__ = (HasProperty obj Pk)
  [12281] (12668/7) Normal[12281] let kPresent = [? __x5__]
  [12282] (12655/0) Normal[12282] throw TypeError
  [12283] (12649/0) If[12283] __x0__
  [12284] (12665/6) Call[12284] app __x4__ = (ToString k)
  [12285] (12676/12) Normal[12285] let itemCount = items.length
  [12286] (12675/11) Normal[12286] k = (+ k 1i)
  [12287] LoopCont[12287]
  [12288] (12688/19) Call[12288] app __x10__ = (DeletePropertyOrThrow obj [! __x9__])
  [12289] (12689/19) Normal[12289] [? __x10__]
  [12290] (12669/8) If[12290] (= kPresent true)
  [12291] (12671/9) Call[12291] app __x6__ = (Get obj Pk)
  [12292] (12679/15) Loop[12292] (< j itemCount)
  [12293] (12681/16) Call[12293] app __x7__ = (ToString j)
  [12294] (12685/18) Loop[12294] (< j len)
  [12295] (12672/9) Normal[12295] let kValue = [? __x6__]
  [12296] (12684/17) Normal[12296] j = (+ j 1i)
  [12297] LoopCont[12297]
  [12298] (12678/14) Normal[12298] let j = 0i
  [12299] (12690/20) Normal[12299] j = (+ j 1i)
  [12300] (12691/21) Normal[12300] return obj
  [12301] Exit[12301]
  [12302] (12666/6) Normal[12302] let Pk = [! __x4__]
  [12303] (12683/16) Normal[12303] [? __x8__]
  [12304] (12673/10) Normal[12304] append kValue -> items
  [12305] (12677/13) Normal[12305] ??? "Sort id:{items} using an implementation - defined sequence of calls to SortCompare . If any such call returns an abrupt completion , stop before performing any further calls to SortCompare or steps in this algorithm and return that completion ."
  [12306] LoopCont[12306]
  [12307] (12687/19) Call[12307] app __x9__ = (ToString j)
  [12308] (12682/16) Call[12308] app __x8__ = (Set obj [! __x7__] items[j] true)
Algo: GLOBAL.Array.prototype.splice [1157]
  [12309] (12697/0) Normal[12309] let O = [? __x0__]
  [12310] (12698/1) Call[12310] app __x1__ = (LengthOfArrayLike O)
  [12311] (12773/43) Call[12311] app __x19__ = (ToString (- k 1i))
  [12312] (12774/43) Call[12312] app __x20__ = (DeletePropertyOrThrow O [! __x19__])
  [12313] (12809/60) Normal[12313] [? __x30__]
  [12314] (12810/61) Normal[12314] k = (+ k 1i)
  [12315] Entry[12315]
  [12316] (12693)Call[12316] app start = (GetArgument argumentsList)
  [12317] (12795/55) Normal[12317] assert (= fromPresent false)
  [12318] (12796/56) Call[12318] app __x26__ = (DeletePropertyOrThrow O to)
  [12319] (12702/3) If[12319] (= relativeStart -Infinity)
  [12320] (12703/3) Normal[12320] let actualStart = 0i
  [12321] (12704/3) If[12321] (< relativeStart 0i)
  [12322] (12758/33) Normal[12322] let fromPresent = [? __x15__]
  [12323] (12759/34) If[12323] (= fromPresent true)
  [12324] (12742/24) Normal[12324] [? __x11__]
  [12325] (12744/25) Normal[12325] k = (+ k 1i)
  [12326] (12721/14) Call[12326] app __x5__ = (ToIntegerOrInfinity deleteCount)
  [12327] (12722/14) Normal[12327] let dc = [? __x5__]
  [12328] (12736/22) If[12328] (= fromPresent true)
  [12329] (12738/23) Call[12329] app __x9__ = (Get O from)
  [12330] (12723/15) Normal[12330] ??? "Let id:{actualDeleteCount} be the result of clamping id:{dc} between 0 and id:{len} - id:{actualStart} ."
  [12331] (12754/31) Normal[12331] let from = [! __x13__]
  [12332] (12755/32) Call[12332] app __x14__ = (ToString (+ k itemCount))
  [12333] (12707/4) Normal[12333] let actualStart = __x3__
  [12334] (12711/6) If[12334] (= start absent)
  [12335] (12715/6) If[12335] (= deleteCount absent)
  [12336] (12717/10) Normal[12336] let insertCount = 0i
  [12337] (12720/13) Normal[12337] let insertCount = items.length
  [12338] (12746/26) Normal[12338] [? __x12__]
  [12339] (12747/27) Normal[12339] let itemCount = items.length
  [12340] (12800/58) Normal[12340] k = actualStart
  [12341] (12801/59) Normal[12341] let __x27__ = items
  [12342] (12761/35) Call[12342] app __x16__ = (Get O from)
  [12343] (12766/38) Normal[12343] assert (= fromPresent false)
  [12344] (12783/48) Normal[12344] let from = [! __x21__]
  [12345] (12784/49) Call[12345] app __x22__ = (ToString (- (+ k itemCount) 1i))
  [12346] (12727/17) Call[12346] app __x6__ = (ArraySpeciesCreate O actualDeleteCount)
  [12347] (12728/17) Normal[12347] let A = [? __x6__]
  [12348] (12813/63) Normal[12348] return A
  [12349] Exit[12349]
  [12350] (12790/52) Call[12350] app __x24__ = (Get O from)
  [12351] (12791/52) Normal[12351] let fromValue = [? __x24__]
  [12352] (12764/36) Normal[12352] [? __x17__]
  [12353] (12769/40) Normal[12353] k = (+ k 1i)
  [12354] (12797/56) Normal[12354] [? __x26__]
  [12355] (12694)Call[12355] app deleteCount = (GetArgument argumentsList)
  [12356] (12777/28) If[12356] (< actualDeleteCount itemCount)
  [12357] (12779/46) Normal[12357] k = (- len actualDeleteCount)
  [12358] (12699/1) Normal[12358] let len = [? __x1__]
  [12359] (12763/36) Call[12359] app __x17__ = (Set O to fromValue true)
  [12360] (12792/53) Call[12360] app __x25__ = (Set O to fromValue true)
  [12361] LoopCont[12361]
  [12362] (12775/43) Normal[12362] [? __x20__]
  [12363] (12718/11) Normal[12363] let actualDeleteCount = (- len actualStart)
  [12364] (12732/20) Call[12364] app __x7__ = (ToString (+ actualStart k))
  [12365] (12733/20) Normal[12365] let from = [! __x7__]
  [12366] (12725/16) Normal[12366] throw TypeError
  [12367] (12739/23) Normal[12367] let fromValue = [? __x9__]
  [12368] LoopCont[12368]
  [12369] (12780/47) Loop[12369] (< actualStart k)
  [12370] LoopCont[12370]
  [12371] (12805/59) Normal[12371] let E = __x27__[__x28__]
  [12372] (12806/59) Normal[12372] __x28__ = (+ __x28__ 1i)
  [12373] (12701/2) Normal[12373] let relativeStart = [? __x2__]
  [12374] (12756/32) Normal[12374] let to = [! __x14__]
  [12375] (12782/48) Call[12375] app __x21__ = (ToString (- (+ k actualDeleteCount) 1i))
  [12376] (12803/59) Loop[12376] (< __x28__ __x27__.length)
  [12377] (12811/62) Call[12377] app __x31__ = (Set O "length" (+ (- len actualDeleteCount) itemCount) true)
  [12378] (12706/4) Call[12378] app __x3__ = (max (+ len relativeStart) 0i)
  [12379] (12741/24) Call[12379] app __x11__ = (CreateDataPropertyOrThrow A [! __x10__] fromValue)
  [12380] LoopCont[12380]
  [12381] (12771/42) Loop[12381] (< (+ (- len actualDeleteCount) itemCount) k)
  [12382] (12812/62) Normal[12382] [? __x31__]
  [12383] (12695)Normal[12383] let items = argumentsList
  [12384] (12745/26) Call[12384] app __x12__ = (Set A "length" actualDeleteCount true)
  [12385] (12768/39) Normal[12385] [? __x18__]
  [12386] (12713/7) Normal[12386] let insertCount = 0i
  [12387] (12730/19) Loop[12387] (< k actualDeleteCount)
  [12388] (12734/21) Call[12388] app __x8__ = (HasProperty O from)
  [12389] (12724/16) If[12389] (< (- (** 2i 53i) 1i) (- (+ len insertCount) actualDeleteCount))
  [12390] LoopCont[12390]
  [12391] (12762/35) Normal[12391] let fromValue = [? __x16__]
  [12392] (12776/44) Normal[12392] k = (- k 1i)
  [12393] (12709/5) Call[12393] app __x4__ = (min relativeStart len)
  [12394] (12757/33) Call[12394] app __x15__ = (HasProperty O from)
  [12395] (12750/29) Normal[12395] k = actualStart
  [12396] (12751/30) Loop[12396] (< k (- len actualDeleteCount))
  [12397] (12793/53) Normal[12397] [? __x25__]
  [12398] (12786/50) Call[12398] app __x23__ = (HasProperty O from)
  [12399] (12787/50) Normal[12399] let fromPresent = [? __x23__]
  [12400] (12700/2) Call[12400] app __x2__ = (ToIntegerOrInfinity start)
  [12401] (12740/24) Call[12401] app __x10__ = (ToString k)
  [12402] (12807/60) Call[12402] app __x29__ = (ToString k)
  [12403] (12798/57) Normal[12403] k = (- k 1i)
  [12404] (12696/0) Call[12404] app __x0__ = (ToObject this)
  [12405] (12785/49) Normal[12405] let to = [! __x22__]
  [12406] (12735/21) Normal[12406] let fromPresent = [? __x8__]
  [12407] (12748/28) If[12407] (< itemCount actualDeleteCount)
  [12408] (12767/39) Call[12408] app __x18__ = (DeletePropertyOrThrow O to)
  [12409] (12714/8) Normal[12409] let actualDeleteCount = 0i
  [12410] (12802/59) Normal[12410] let __x28__ = 0i
  [12411] (12753/31) Call[12411] app __x13__ = (ToString (+ k actualDeleteCount))
  [12412] (12770/41) Normal[12412] k = len
  [12413] (12710/5) Normal[12413] let actualStart = __x4__
  [12414] (12729/18) Normal[12414] let k = 0i
  [12415] (12808/60) Call[12415] app __x30__ = (Set O [! __x29__] E true)
  [12416] (12788/51) If[12416] (= fromPresent true)
Algo: GLOBAL.Array.prototype.toLocaleString [1158]
  [12417] Entry[12417]
  [12418] (12815)Call[12418] app reserved1 = (GetArgument argumentsList)
  [12419] (12819/1) Call[12419] app __x1__ = (LengthOfArrayLike array)
  [12420] (12820/1) Normal[12420] let len = [? __x1__]
  [12421] (12824/5) Loop[12421] (< k len)
  [12422] (12826/6) If[12422] (< 0i k)
  [12423] (12840/13) Normal[12423] return R
  [12424] (12830/8) Call[12424] app __x3__ = (Get array [! __x2__])
  [12425] (12831/8) Normal[12425] let nextElement = [? __x3__]
  [12426] (12837/11) Normal[12426] R = (+ R S)
  [12427] (12839/12) Normal[12427] k = (+ k 1i)
  [12428] (12816)Call[12428] app reserved2 = (GetArgument argumentsList)
  [12429] (12821/2) Normal[12429] ??? "Let id:{separator} be the String value for the list - separator String appropriate for the host environment ' s current locale ( this is derived in an implementation - defined way ) ."
  [12430] LoopCont[12430]
  [12431] (12823/4) Normal[12431] let k = 0i
  [12432] (12829/8) Call[12432] app __x2__ = (ToString k)
  [12433] (12817/0) Call[12433] app __x0__ = (ToObject this)
  [12434] (12834/10) Call[12434] app __x4__ = (Invoke nextElement "toLocaleString")
  [12435] (12835/10) Call[12435] app __x5__ = (ToString [? __x4__])
  [12436] (12827/7) Normal[12436] R = (+ R separator)
  [12437] (12822/3) Normal[12437] let R = ""
  [12438] (12818/0) Normal[12438] let array = [? __x0__]
  [12439] (12836/10) Normal[12439] let S = [? __x5__]
  [12440] (12832/9) If[12440] (! (|| (= nextElement undefined) (= nextElement null)))
  [12441] Exit[12441]
Algo: GLOBAL.Array.prototype.toString [1159]
  [12442] Entry[12442]
  [12443] (12842/0) Call[12443] app __x0__ = (ToObject this)
  [12444] (12846/2) Call[12444] app __x2__ = (IsCallable func)
  [12445] (12847/2) If[12445] (= __x2__ false)
  [12446] (12843/0) Normal[12446] let array = [? __x0__]
  [12447] (12848/2) Normal[12447] func = INTRINSICS["%Object.prototype.toString%"]
  [12448] (12850/3) Call[12448] app __x3__ = (Call func array)
  [12449] (12851/3) Normal[12449] return [? __x3__]
  [12450] Exit[12450]
  [12451] (12844/1) Call[12451] app __x1__ = (Get array "join")
  [12452] (12845/1) Normal[12452] let func = [? __x1__]
Algo: GLOBAL.Array.prototype.unshift [1160]
  [12453] Entry[12453]
  [12454] (12853)Normal[12454] let items = argumentsList
  [12455] (12857/1) Normal[12455] let len = [? __x1__]
  [12456] (12858/2) Normal[12456] let argCount = items.length
  [12457] (12864/5) Normal[12457] let k = len
  [12458] (12865/6) Loop[12458] (< 0i k)
  [12459] (12869/8) Call[12459] app __x3__ = (ToString (- (+ k argCount) 1i))
  [12460] (12870/8) Normal[12460] let to = [! __x3__]
  [12461] (12854/0) Call[12461] app __x0__ = (ToObject this)
  [12462] (12859/3) If[12462] (< 0i argCount)
  [12463] (12862/4) Normal[12463] throw TypeError
  [12464] (12855/0) Normal[12464] let O = [? __x0__]
  [12465] (12867/7) Call[12465] app __x2__ = (ToString (- k 1i))
  [12466] (12868/7) Normal[12466] let from = [! __x2__]
  [12467] (12873/10) If[12467] (= fromPresent true)
  [12468] (12875/11) Call[12468] app __x5__ = (Get O from)
  [12469] (12880/14) Normal[12469] assert (= fromPresent false)
  [12470] (12884/17) Normal[12470] let j = 0i
  [12471] (12861/4) If[12471] (< (- (** 2i 53i) 1i) (+ len argCount))
  [12472] (12856/1) Call[12472] app __x1__ = (LengthOfArrayLike O)
  [12473] (12871/9) Call[12473] app __x4__ = (HasProperty O from)
  [12474] (12881/15) Call[12474] app __x7__ = (DeletePropertyOrThrow O to)
  [12475] (12882/15) Normal[12475] [? __x7__]
  [12476] (12894/20) Normal[12476] j = (+ j 1i)
  [12477] LoopCont[12477]
  [12478] (12883/16) Normal[12478] k = (- k 1i)
  [12479] (12876/11) Normal[12479] let fromValue = [? __x5__]
  [12480] (12877/12) Call[12480] app __x6__ = (Set O to fromValue true)
  [12481] (12885/18) Normal[12481] let __x8__ = items
  [12482] (12886/18) Normal[12482] let __x9__ = 0i
  [12483] (12878/12) Normal[12483] [? __x6__]
  [12484] (12890/18) Normal[12484] __x9__ = (+ __x9__ 1i)
  [12485] (12891/19) Call[12485] app __x10__ = (ToString j)
  [12486] (12887/18) Loop[12486] (< __x9__ __x8__.length)
  [12487] (12898/22) Normal[12487] return (+ len argCount)
  [12488] Exit[12488]
  [12489] (12872/9) Normal[12489] let fromPresent = [? __x4__]
  [12490] (12889/18) Normal[12490] let E = __x8__[__x9__]
  [12491] (12892/19) Call[12491] app __x11__ = (Set O [! __x10__] E true)
  [12492] LoopCont[12492]
  [12493] (12896/21) Call[12493] app __x12__ = (Set O "length" (+ len argCount) true)
  [12494] (12897/21) Normal[12494] [? __x12__]
  [12495] (12893/19) Normal[12495] [? __x11__]
Algo: GLOBAL.Array.prototype.values [1161]
  [12496] Entry[12496]
  [12497] (12900/0) Call[12497] app __x0__ = (ToObject this)
  [12498] (12901/0) Normal[12498] let O = [? __x0__]
  [12499] (12902/1) Call[12499] app __x1__ = (CreateArrayIterator O ~value~)
  [12500] (12903/1) Normal[12500] return __x1__
  [12501] Exit[12501]
Algo: GLOBAL.Array.prototype[SYMBOL_unscopables] [1162]
  [12502] Entry[12502]
  [12503] (12905/0) Call[12503] app __x0__ = (OrdinaryObjectCreate null)
  [12504] (12909/2) Call[12504] app __x2__ = (CreateDataPropertyOrThrow unscopableList "entries" true)
  [12505] (12910/2) Normal[12505] [! __x2__]
  [12506] (12914/4) Normal[12506] [! __x4__]
  [12507] (12915/5) Call[12507] app __x5__ = (CreateDataPropertyOrThrow unscopableList "findIndex" true)
  [12508] (12918/6) Normal[12508] [! __x6__]
  [12509] (12919/7) Call[12509] app __x7__ = (CreateDataPropertyOrThrow unscopableList "flatMap" true)
  [12510] (12924/9) Normal[12510] [! __x9__]
  [12511] (12925/10) Call[12511] app __x10__ = (CreateDataPropertyOrThrow unscopableList "values" true)
  [12512] (12906/0) Normal[12512] let unscopableList = [! __x0__]
  [12513] (12911/3) Call[12513] app __x3__ = (CreateDataPropertyOrThrow unscopableList "fill" true)
  [12514] (12926/10) Normal[12514] [! __x10__]
  [12515] (12913/4) Call[12515] app __x4__ = (CreateDataPropertyOrThrow unscopableList "find" true)
  [12516] (12917/6) Call[12516] app __x6__ = (CreateDataPropertyOrThrow unscopableList "flat" true)
  [12517] (12907/1) Call[12517] app __x1__ = (CreateDataPropertyOrThrow unscopableList "copyWithin" true)
  [12518] (12921/8) Call[12518] app __x8__ = (CreateDataPropertyOrThrow unscopableList "includes" true)
  [12519] (12922/8) Normal[12519] [! __x8__]
  [12520] (12927/11) Normal[12520] return unscopableList
  [12521] (12916/5) Normal[12521] [! __x5__]
  [12522] (12912/3) Normal[12522] [! __x3__]
  [12523] (12908/1) Normal[12523] [! __x1__]
  [12524] (12923/9) Call[12524] app __x9__ = (CreateDataPropertyOrThrow unscopableList "keys" true)
  [12525] (12920/7) Normal[12525] [! __x7__]
  [12526] Exit[12526]
Algo: GLOBAL.ArrayBuffer [1163]
  [12527] Entry[12527]
  [12528] (12929)Call[12528] app length = (GetArgument argumentsList)
  [12529] (12934/1) Normal[12529] let byteLength = [? __x0__]
  [12530] (12935/2) Call[12530] app __x1__ = (AllocateArrayBuffer NewTarget byteLength)
  [12531] (12930/0) If[12531] (= NewTarget undefined)
  [12532] (12936/2) Normal[12532] return [? __x1__]
  [12533] (12931/0) Normal[12533] throw TypeError
  [12534] (12933/1) Call[12534] app __x0__ = (ToIndex length)
  [12535] Exit[12535]
Algo: GLOBAL.ArrayBuffer.isView [1164]
  [12536] Entry[12536]
  [12537] (12938)Call[12537] app arg = (GetArgument argumentsList)
  [12538] (12943/1) Normal[12538] return true
  [12539] (12945/2) Normal[12539] return false
  [12540] (12939/0) If[12540] (! (= (typeof arg) Object))
  [12541] Exit[12541]
  [12542] (12940/0) Normal[12542] return false
  [12543] (12942/1) If[12543] (! (= arg.ViewedArrayBuffer absent))
Algo: GLOBAL.ArrayBuffer.prototype.byteLength [1165]
  [12544] Entry[12544]
  [12545] (12947/0) Normal[12545] let O = this
  [12546] (12951/2) If[12546] (= __x1__ true)
  [12547] (12952/2) Normal[12547] throw TypeError
  [12548] (12954/3) Call[12548] app __x2__ = (IsDetachedBuffer O)
  [12549] (12958/4) Normal[12549] let length = O.ArrayBufferByteLength
  [12550] (12959/5) Normal[12550] return length
  [12551] (12948/1) Call[12551] app __x0__ = (RequireInternalSlot O "ArrayBufferData")
  [12552] (12956/3) Normal[12552] return 0i
  [12553] (12949/1) Normal[12553] [? __x0__]
  [12554] (12955/3) If[12554] (= __x2__ true)
  [12555] (12950/2) Call[12555] app __x1__ = (IsSharedArrayBuffer O)
  [12556] Exit[12556]
Algo: GLOBAL.ArrayBuffer.prototype.slice [1166]
  [12557] Entry[12557]
  [12558] (12961)Call[12558] app start = (GetArgument argumentsList)
  [12559] (12965/1) Normal[12559] [? __x0__]
  [12560] (12966/2) Call[12560] app __x1__ = (IsSharedArrayBuffer O)
  [12561] (12962)Call[12561] app end = (GetArgument argumentsList)
  [12562] (12967/2) If[12562] (= __x1__ true)
  [12563] (12963/0) Normal[12563] let O = this
  [12564] (12964/1) Call[12564] app __x0__ = (RequireInternalSlot O "ArrayBufferData")
  [12565] (12971/3) If[12565] (= __x2__ true)
  [12566] (12972/3) Normal[12566] throw TypeError
  [12567] (12974/4) Normal[12567] let len = O.ArrayBufferByteLength
  [12568] (13028/24) Normal[12568] let toBuf = new.ArrayBufferData
  [12569] (13029/25) Call[12569] app __x17__ = (CopyDataBlockBytes toBuf 0i fromBuf first newLen)
  [12570] (13009/17) If[12570] (= __x13__ true)
  [12571] (13010/17) Normal[12571] throw TypeError
  [12572] (13012/18) Call[12572] app __x14__ = (IsDetachedBuffer new)
  [12573] (12989/10) Call[12573] app __x6__ = (ToIntegerOrInfinity end)
  [12574] (12990/10) Normal[12574] let relativeEnd = [? __x6__]
  [12575] (13004/15) Call[12575] app __x11__ = (Construct ctor (new [newLen]))
  [12576] (13005/15) Normal[12576] let new = [? __x11__]
  [12577] (12991/10) If[12577] (= relativeEnd -Infinity)
  [12578] (13023/22) Call[12578] app __x16__ = (IsDetachedBuffer O)
  [12579] (13024/22) If[12579] (= __x16__ true)
  [12580] (12976/5) Normal[12580] let relativeStart = [? __x3__]
  [12581] (12977/6) If[12581] (= relativeStart -Infinity)
  [12582] (12984/8) Call[12582] app __x5__ = (min relativeStart len)
  [12583] (12985/8) Normal[12583] let first = __x5__
  [12584] (13014/18) Normal[12584] throw TypeError
  [12585] (13016/19) Call[12585] app __x15__ = (SameValue new O)
  [12586] (13030/25) Normal[12586] __x17__
  [12587] (12995/11) Call[12587] app __x7__ = (max (+ len relativeEnd) 0i)
  [12588] (12996/11) Normal[12588] let final = __x7__
  [12589] (12986/9) If[12589] (= end undefined)
  [12590] (13000/13) Call[12590] app __x9__ = (max (- final first) 0i)
  [12591] (13001/13) Normal[12591] let newLen = __x9__
  [12592] (12993/10) If[12592] (< relativeEnd 0i)
  [12593] (12998/12) Call[12593] app __x8__ = (min relativeEnd len)
  [12594] (13006/16) Call[12594] app __x12__ = (RequireInternalSlot new "ArrayBufferData")
  [12595] (12970/3) Call[12595] app __x2__ = (IsDetachedBuffer O)
  [12596] (13025/22) Normal[12596] throw TypeError
  [12597] (13027/23) Normal[12597] let fromBuf = O.ArrayBufferData
  [12598] (12975/5) Call[12598] app __x3__ = (ToIntegerOrInfinity start)
  [12599] (13008/17) Call[12599] app __x13__ = (IsSharedArrayBuffer new)
  [12600] (13013/18) If[12600] (= __x14__ true)
  [12601] (12979/6) If[12601] (< relativeStart 0i)
  [12602] (12981/7) Call[12602] app __x4__ = (max (+ len relativeStart) 0i)
  [12603] (12999/12) Normal[12603] let final = __x8__
  [12604] (13002/14) Call[12604] app __x10__ = (SpeciesConstructor O INTRINSICS["%ArrayBuffer%"])
  [12605] (12987/9) Normal[12605] let relativeEnd = len
  [12606] (13031/26) Normal[12606] return new
  [12607] Exit[12607]
  [12608] (12992/10) Normal[12608] let final = 0i
  [12609] (13018/19) Normal[12609] throw TypeError
  [12610] (13020/20) If[12610] (< new.ArrayBufferByteLength newLen)
  [12611] (12968/2) Normal[12611] throw TypeError
  [12612] (13007/16) Normal[12612] [? __x12__]
  [12613] (13003/14) Normal[12613] let ctor = [? __x10__]
  [12614] (13017/19) If[12614] (= __x15__ true)
  [12615] (12982/7) Normal[12615] let first = __x4__
  [12616] (13021/20) Normal[12616] throw TypeError
  [12617] (12978/6) Normal[12617] let first = 0i
Algo: GLOBAL.ArrayBuffer[SYMBOL_species] [1167]
  [12618] Entry[12618]
  [12619] (13032/0) Normal[12619] return this
  [12620] Exit[12620]
Algo: GLOBAL.ArrayIteratorPrototype.next [1168]
  [12621] Entry[12621]
  [12622] (13034/0) Call[12622] app __x0__ = (GeneratorResume this ~empty~ "%ArrayIteratorPrototype%")
  [12623] (13035/0) Normal[12623] return [? __x0__]
  [12624] Exit[12624]
Algo: GLOBAL.Array[SYMBOL_species] [1169]
  [12625] Entry[12625]
  [12626] (13036/0) Normal[12626] return this
  [12627] Exit[12627]
Algo: GLOBAL.AsyncFromSyncIteratorPrototype.next [1170]
  [12628] Entry[12628]
  [12629] (13038)Call[12629] app value = (GetArgument argumentsList)
  [12630] (13042/2) Normal[12630] let promiseCapability = [! __x0__]
  [12631] (13043/3) Normal[12631] let syncIteratorRecord = O.SyncIteratorRecord
  [12632] (13049/7) Call[12632] app __x2__ = (IteratorNext syncIteratorRecord)
  [12633] (13050/7) Normal[12633] let result = __x2__
  [12634] (13053/8) Normal[12634] result = result.Value
  [12635] (13061/8) Normal[12635] result
  [12636] (13062/9) Call[12636] app __x4__ = (AsyncFromSyncIteratorContinuation result promiseCapability)
  [12637] (13063/9) Normal[12637] return [! __x4__]
  [12638] (13039/0) Normal[12638] let O = this
  [12639] (13044/4) If[12639] (! (= value absent))
  [12640] Exit[12640]
  [12641] (13047/5) Normal[12641] let result = __x1__
  [12642] (13051/8) If[12642] (is-completion result)
  [12643] (13052/8) If[12643] (= result.Type ~normal~)
  [12644] (13055/9) Call[12644] app __x3__ = (Call promiseCapability.Reject undefined (new [result.Value]))
  [12645] (13040/1) Normal[12645] assert (&& (= (typeof O) Object) (! (= O.SyncIteratorRecord absent)))
  [12646] (13057/9) Normal[12646] return __x3__
  [12647] (13059/9) Normal[12647] return promiseCapability.Promise
  [12648] (13046/5) Call[12648] app __x1__ = (IteratorNext syncIteratorRecord value)
  [12649] (13041/2) Call[12649] app __x0__ = (NewPromiseCapability INTRINSICS["%Promise%"])
  [12650] (13056/9) If[12650] (&& (is-completion __x3__) (! (= __x3__.Type ~normal~)))
Algo: GLOBAL.AsyncFromSyncIteratorPrototype.return [1171]
  [12651] Entry[12651]
  [12652] (13065)Call[12652] app value = (GetArgument argumentsList)
  [12653] (13069/2) Normal[12653] let promiseCapability = [! __x0__]
  [12654] (13070/3) Normal[12654] let syncIterator = O.SyncIteratorRecord.Iterator
  [12655] (13074/5) If[12655] (= return.Type ~normal~)
  [12656] (13075/5) Normal[12656] return = return.Value
  [12657] (13077/6) Call[12657] app __x2__ = (Call promiseCapability.Reject undefined (new [return.Value]))
  [12658] (13079/6) Normal[12658] return __x2__
  [12659] (13081/6) Normal[12659] return promiseCapability.Promise
  [12660] (13066/0) Normal[12660] let O = this
  [12661] (13071/4) Call[12661] app __x1__ = (GetMethod syncIterator "return")
  [12662] (13073/5) If[12662] (is-completion return)
  [12663] (13083/5) Normal[12663] return
  [12664] (13067/1) Normal[12664] assert (&& (= (typeof O) Object) (! (= O.SyncIteratorRecord absent)))
  [12665] (13078/6) If[12665] (&& (is-completion __x2__) (! (= __x2__.Type ~normal~)))
  [12666] (13086/7) Call[12666] app __x3__ = (CreateIterResultObject value true)
  [12667] (13087/7) Normal[12667] let iterResult = [! __x3__]
  [12668] (13072/4) Normal[12668] let return = __x1__
  [12669] (13068/2) Call[12669] app __x0__ = (NewPromiseCapability INTRINSICS["%Promise%"])
  [12670] (13094/11) Call[12670] app __x5__ = (Call return syncIterator (new [value]))
  [12671] (13095/11) Normal[12671] let result = __x5__
  [12672] (13112/16) Call[12672] app __x8__ = (Call promiseCapability.Reject undefined (new [(new OrdinaryObject("Prototype" -> INTRINSICS["%TypeError.prototype%"], "ErrorData" -> undefined))]))
  [12673] (13113/16) Normal[12673] [! __x8__]
  [12674] (13099/14) If[12674] (is-completion result)
  [12675] (13088/8) Call[12675] app __x4__ = (Call promiseCapability.Resolve undefined (new [iterResult]))
  [12676] (13089/8) Normal[12676] [! __x4__]
  [12677] (13100/14) If[12677] (= result.Type ~normal~)
  [12678] (13101/14) Normal[12678] result = result.Value
  [12679] (13103/15) Call[12679] app __x7__ = (Call promiseCapability.Reject undefined (new [result.Value]))
  [12680] (13090/9) Normal[12680] return promiseCapability.Promise
  [12681] (13105/15) Normal[12681] return __x7__
  [12682] (13107/15) Normal[12682] return promiseCapability.Promise
  [12683] (13109/14) Normal[12683] result
  [12684] (13114/17) Normal[12684] return promiseCapability.Promise
  [12685] (13117/18) Normal[12685] return [! __x9__]
  [12686] Exit[12686]
  [12687] (13084/6) If[12687] (= return undefined)
  [12688] (13092/10) If[12688] (! (= value absent))
  [12689] (13104/15) If[12689] (&& (is-completion __x7__) (! (= __x7__.Type ~normal~)))
  [12690] (13098/13) Normal[12690] let result = __x6__
  [12691] (13116/18) Call[12691] app __x9__ = (AsyncFromSyncIteratorContinuation result promiseCapability)
  [12692] (13110/15) If[12692] (! (= (typeof result) Object))
  [12693] (13097/13) Call[12693] app __x6__ = (Call return syncIterator)
Algo: GLOBAL.AsyncFromSyncIteratorPrototype.throw [1172]
  [12694] Entry[12694]
  [12695] (13119)Call[12695] app value = (GetArgument argumentsList)
  [12696] (13123/2) Normal[12696] let promiseCapability = [! __x0__]
  [12697] (13124/3) Normal[12697] let syncIterator = O.SyncIteratorRecord.Iterator
  [12698] (13128/5) If[12698] (= throw.Type ~normal~)
  [12699] (13129/5) Normal[12699] throw = throw.Value
  [12700] (13131/6) Call[12700] app __x2__ = (Call promiseCapability.Reject undefined (new [throw.Value]))
  [12701] (13133/6) Normal[12701] return __x2__
  [12702] (13135/6) Normal[12702] return promiseCapability.Promise
  [12703] (13120/0) Normal[12703] let O = this
  [12704] (13125/4) Call[12704] app __x1__ = (GetMethod syncIterator "throw")
  [12705] (13127/5) If[12705] (is-completion throw)
  [12706] (13137/5) Normal[12706] throw
  [12707] (13132/6) If[12707] (&& (is-completion __x2__) (! (= __x2__.Type ~normal~)))
  [12708] (13121/1) Normal[12708] assert (&& (= (typeof O) Object) (! (= O.SyncIteratorRecord absent)))
  [12709] (13140/7) Call[12709] app __x3__ = (Call promiseCapability.Reject undefined (new [value]))
  [12710] (13141/7) Normal[12710] [! __x3__]
  [12711] (13126/4) Normal[12711] let throw = __x1__
  [12712] (13122/2) Call[12712] app __x0__ = (NewPromiseCapability INTRINSICS["%Promise%"])
  [12713] (13149/12) Call[12713] app __x5__ = (Call throw syncIterator)
  [12714] (13150/12) Normal[12714] let result = __x5__
  [12715] (13166/16) Normal[12715] return promiseCapability.Promise
  [12716] (13168/17) Call[12716] app __x8__ = (AsyncFromSyncIteratorContinuation result promiseCapability)
  [12717] (13151/13) If[12717] (is-completion result)
  [12718] (13142/8) Normal[12718] return promiseCapability.Promise
  [12719] (13144/9) If[12719] (! (= value absent))
  [12720] (13155/14) Call[12720] app __x6__ = (Call promiseCapability.Reject undefined (new [result.Value]))
  [12721] (13156/14) If[12721] (&& (is-completion __x6__) (! (= __x6__.Type ~normal~)))
  [12722] (13146/10) Call[12722] app __x4__ = (Call throw syncIterator (new [value]))
  [12723] (13161/13) Normal[12723] result
  [12724] (13162/14) If[12724] (! (= (typeof result) Object))
  [12725] (13153/13) Normal[12725] result = result.Value
  [12726] (13169/17) Normal[12726] return [! __x8__]
  [12727] (13138/6) If[12727] (= throw undefined)
  [12728] (13159/14) Normal[12728] return promiseCapability.Promise
  [12729] (13164/15) Call[12729] app __x7__ = (Call promiseCapability.Reject undefined (new [(new OrdinaryObject("Prototype" -> INTRINSICS["%TypeError.prototype%"], "ErrorData" -> undefined))]))
  [12730] (13147/10) Normal[12730] let result = __x4__
  [12731] (13152/13) If[12731] (= result.Type ~normal~)
  [12732] Exit[12732]
  [12733] (13165/15) Normal[12733] [! __x7__]
  [12734] (13157/14) Normal[12734] return __x6__
Algo: GLOBAL.AsyncFunction [1173]
  [12735] Entry[12735]
  [12736] (13171/0) Normal[12736] let C = CONTEXT.Function
  [12737] (13172/1) Normal[12737] let args = argumentsList
  [12738] (13173/2) Call[12738] app __x0__ = (CreateDynamicFunction C NewTarget ~async~ args)
  [12739] (13174/2) Normal[12739] return __x0__
  [12740] Exit[12740]
Algo: GLOBAL.AsyncGenerator.prototype.next [1174]
  [12741] Entry[12741]
  [12742] (13176)Call[12742] app value = (GetArgument argumentsList)
  [12743] (13180/2) Call[12743] app __x1__ = (AsyncGeneratorEnqueue generator completion ~empty~)
  [12744] (13181/2) Normal[12744] return [! __x1__]
  [12745] (13177/0) Normal[12745] let generator = this
  [12746] Exit[12746]
  [12747] (13178/1) Call[12747] app __x0__ = (NormalCompletion value)
  [12748] (13179/1) Normal[12748] let completion = __x0__
Algo: GLOBAL.AsyncGenerator.prototype.return [1175]
  [12749] Entry[12749]
  [12750] (13183)Call[12750] app value = (GetArgument argumentsList)
  [12751] (13187/2) Normal[12751] return [! __x0__]
  [12752] Exit[12752]
  [12753] (13184/0) Normal[12753] let generator = this
  [12754] (13185/1) Normal[12754] let completion = (comp[~return~] value => ~empty~)
  [12755] (13186/2) Call[12755] app __x0__ = (AsyncGeneratorEnqueue generator completion ~empty~)
Algo: GLOBAL.AsyncGenerator.prototype.throw [1176]
  [12756] Entry[12756]
  [12757] (13189)Call[12757] app exception = (GetArgument argumentsList)
  [12758] (13193/2) Call[12758] app __x1__ = (AsyncGeneratorEnqueue generator completion ~empty~)
  [12759] (13194/2) Normal[12759] return [! __x1__]
  [12760] (13190/0) Normal[12760] let generator = this
  [12761] Exit[12761]
  [12762] (13191/1) Call[12762] app __x0__ = (ThrowCompletion exception)
  [12763] (13192/1) Normal[12763] let completion = __x0__
Algo: GLOBAL.AsyncGeneratorFunction [1177]
  [12764] Entry[12764]
  [12765] (13196/0) Normal[12765] let C = CONTEXT.Function
  [12766] (13197/1) Normal[12766] let args = argumentsList
  [12767] (13198/2) Call[12767] app __x0__ = (CreateDynamicFunction C NewTarget ~asyncGenerator~ args)
  [12768] (13199/2) Normal[12768] return [? __x0__]
  [12769] Exit[12769]
Algo: GLOBAL.AsyncGeneratorResumeNextReturnProcessorFulfilledFunctions [1178]
  [12770] Entry[12770]
  [12771] (13201)Call[12771] app value = (GetArgument argumentsList)
  [12772] (13205/2) Normal[12772] return [! __x0__]
  [12773] Exit[12773]
  [12774] (13202/0) Normal[12774] let F = CONTEXT.Function
  [12775] (13203/1) Normal[12775] F.Generator.AsyncGeneratorState = ~completed~
  [12776] (13204/2) Call[12776] app __x0__ = (AsyncGeneratorResolve F.Generator value true)
Algo: GLOBAL.AsyncGeneratorResumeNextReturnProcessorRejectedFunctions [1179]
  [12777] Entry[12777]
  [12778] (13207)Call[12778] app reason = (GetArgument argumentsList)
  [12779] (13211/2) Normal[12779] return [! __x0__]
  [12780] Exit[12780]
  [12781] (13208/0) Normal[12781] let F = CONTEXT.Function
  [12782] (13209/1) Normal[12782] F.Generator.AsyncGeneratorState = ~completed~
  [12783] (13210/2) Call[12783] app __x0__ = (AsyncGeneratorReject F.Generator reason)
Algo: GLOBAL.AsyncIteratorPrototype[SYMBOL_asyncIterator] [1180]
  [12784] Entry[12784]
  [12785] (13212/0) Normal[12785] return this
  [12786] Exit[12786]
Algo: GLOBAL.AsyncfromSyncIteratorValueUnwrapFunctions [1181]
  [12787] Entry[12787]
  [12788] (13214)Call[12788] app value = (GetArgument argumentsList)
  [12789] (13215/0) Normal[12789] let F = CONTEXT.Function
  [12790] (13216/1) Call[12790] app __x0__ = (CreateIterResultObject value F.Done)
  [12791] (13217/1) Normal[12791] return [! __x0__]
  [12792] Exit[12792]
Algo: GLOBAL.Atomics.add [1182]
  [12793] Entry[12793]
  [12794] (13219)Call[12794] app typedArray = (GetArgument argumentsList)
  [12795] (13223/1) Normal[12795] let isLittleEndian = AGENT.LittleEndian
  [12796] (13224/2) Normal[12796] ??? "Let id:{add} be a new read - modify - write modification function with parameters ( id:{xBytes} , id:{yBytes} ) that captures id:{type} and id:{isLittleEndian} and performs the following steps atomically when called : in:{} out:{}"
  [12797] (13220)Call[12797] app index = (GetArgument argumentsList)
  [12798] (13225/10) Call[12798] app __x0__ = (AtomicReadModifyWrite typedArray index value add)
  [12799] (13221)Call[12799] app value = (GetArgument argumentsList)
  [12800] (13226/10) Normal[12800] return [? __x0__]
  [12801] (13222/0) Normal[12801] ??? "Let id:{type} be the Element Type value in link:{table-the-typedarray-constructors} for id:{typedArray} . [ [ TypedArrayName ] ] ."
  [12802] Exit[12802]
Algo: GLOBAL.Atomics.and [1183]
  [12803] Entry[12803]
  [12804] (13228)Call[12804] app typedArray = (GetArgument argumentsList)
  [12805] (13232/2) Call[12805] app __x0__ = (AtomicReadModifyWrite typedArray index value and)
  [12806] (13233/2) Normal[12806] return [? __x0__]
  [12807] (13229)Call[12807] app index = (GetArgument argumentsList)
  [12808] Exit[12808]
  [12809] (13230)Call[12809] app value = (GetArgument argumentsList)
  [12810] (13231/0) Normal[12810] ??? "Let id:{and} be a new read - modify - write modification function with parameters ( id:{xBytes} , id:{yBytes} ) that captures nothing and performs the following steps atomically when called : in:{} out:{}"
Algo: GLOBAL.Atomics.compareExchange [1184]
  [12811] Entry[12811]
  [12812] (13235)Call[12812] app typedArray = (GetArgument argumentsList)
  [12813] (13239/0) Call[12813] app __x0__ = (ValidateIntegerTypedArray typedArray)
  [12814] (13240/0) Normal[12814] let buffer = [? __x0__]
  [12815] (13244/3) Normal[12815] let arrayTypeName = typedArray.TypedArrayName
  [12816] (13245/4) If[12816] (= typedArray.ContentType ~BigInt~)
  [12817] (13249/6) Call[12817] app __x3__ = (ToBigInt replacementValue)
  [12818] (13250/6) Normal[12818] let replacement = [? __x3__]
  [12819] (13236)Call[12819] app index = (GetArgument argumentsList)
  [12820] (13241/1) Normal[12820] let block = buffer.ArrayBufferData
  [12821] (13243/2) Normal[12821] let indexedPosition = [? __x1__]
  [12822] (13237)Call[12822] app expectedValue = (GetArgument argumentsList)
  [12823] (13247/5) Call[12823] app __x2__ = (ToBigInt expectedValue)
  [12824] (13248/5) Normal[12824] let expected = [? __x2__]
  [12825] (13254/9) Call[12825] app __x5__ = (ToIntegerOrInfinity replacementValue)
  [12826] (13255/9) Normal[12826] let replacement = [? __x5__]
  [12827] (13242/2) Call[12827] app __x1__ = (ValidateAtomicAccess typedArray index)
  [12828] (13238)Call[12828] app replacementValue = (GetArgument argumentsList)
  [12829] (13282/32) Normal[12829] ??? "Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are the sequence of id:{elementSize} bytes starting with id:{block} [ id:{indexedPosition} ] ."
  [12830] (13283/33) Call[12830] app __x11__ = (ByteListEqual rawBytesRead expectedBytes)
  [12831] (13261/13) Normal[12831] ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for Element Type id:{elementType} ."
  [12832] (13262/14) Normal[12832] let isLittleEndian = AGENT.LittleEndian
  [12833] (13276/24) Normal[12833] ??? "Let id:{second} be a new read - modify - write modification function with parameters ( id:{oldBytes} , id:{newBytes} ) that captures nothing and performs the following steps atomically when called : in:{} out:{}"
  [12834] (13277/26) Normal[12834] let event = (new ReadModifyWriteSharedMemory("Order" -> ~SeqCst~, "NoTear" -> true, "Block" -> block, "ByteIndex" -> indexedPosition, "ElementSize" -> elementSize, "Payload" -> replacementBytes, "ModifyOp" -> second))
  [12835] (13263/15) Call[12835] app __x7__ = (NumericToRawBytes elementType expected isLittleEndian)
  [12836] (13256/10) Call[12836] app __x6__ = (IsDetachedBuffer buffer)
  [12837] (13257/10) If[12837] (= __x6__ true)
  [12838] (13287/35) Call[12838] app __x12__ = (RawBytesToNumeric elementType rawBytesRead isLittleEndian)
  [12839] (13288/35) Normal[12839] return __x12__
  [12840] (13266/16) Normal[12840] let replacementBytes = __x8__
  [12841] (13267/17) Call[12841] app __x9__ = (IsSharedArrayBuffer buffer)
  [12842] (13258/10) Normal[12842] throw TypeError
  [12843] (13260/6) Normal[12843] let elementType = ~Int8~
  [12844] (13271/19) Normal[12844] ??? "Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) ."
  [12845] (13272/20) Normal[12845] ??? "Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are nondeterministically chosen byte values ."
  [12846] (13265/16) Call[12846] app __x8__ = (NumericToRawBytes elementType replacement isLittleEndian)
  [12847] (13279/29) Normal[12847] append event -> eventList
  [12848] (13280/30) Normal[12848] append (new ChosenValueRecord("Event" -> event, "ChosenValue" -> rawBytesRead)) -> execution.ChosenValues
  [12849] (13285/34) Normal[12849] ??? "Store the individual bytes of id:{replacementBytes} into id:{block} , starting at id:{block} [ id:{indexedPosition} ] ."
  [12850] (13253/8) Normal[12850] let expected = [? __x4__]
  [12851] (13270/18) Normal[12851] let execution = AGENT.CandidateExecution
  [12852] (13273/23) Call[12852] app __x10__ = (ByteListEqual rawBytesRead expectedBytes)
  [12853] (13284/33) If[12853] (= __x11__ true)
  [12854] (13264/15) Normal[12854] let expectedBytes = __x7__
  [12855] (13278/23) Normal[12855] let event = (new ReadSharedMemory("Order" -> ~SeqCst~, "NoTear" -> true, "Block" -> block, "ByteIndex" -> indexedPosition, "ElementSize" -> elementSize))
  [12856] (13274/23) If[12856] (= __x10__ true)
  [12857] (13252/8) Call[12857] app __x4__ = (ToIntegerOrInfinity expectedValue)
  [12858] (13268/17) If[12858] (= __x9__ true)
  [12859] Exit[12859]
Algo: GLOBAL.Atomics.exchange [1185]
  [12860] Entry[12860]
  [12861] (13290)Call[12861] app typedArray = (GetArgument argumentsList)
  [12862] (13294/2) Call[12862] app __x0__ = (AtomicReadModifyWrite typedArray index value second)
  [12863] (13295/2) Normal[12863] return [? __x0__]
  [12864] (13291)Call[12864] app index = (GetArgument argumentsList)
  [12865] Exit[12865]
  [12866] (13292)Call[12866] app value = (GetArgument argumentsList)
  [12867] (13293/0) Normal[12867] ??? "Let id:{second} be a new read - modify - write modification function with parameters ( id:{oldBytes} , id:{newBytes} ) that captures nothing and performs the following steps atomically when called : in:{} out:{}"
Algo: GLOBAL.Atomics.isLockFree [1186]
  [12868] Entry[12868]
  [12869] (13297)Call[12869] app size = (GetArgument argumentsList)
  [12870] (13301/2) If[12870] (== n 1i)
  [12871] (13302/2) Normal[12871] return AR.IsLockFree1
  [12872] (13304/3) If[12872] (== n 2i)
  [12873] (13308/4) Normal[12873] return true
  [12874] (13310/5) If[12874] (== n 8i)
  [12875] (13298/0) Call[12875] app __x0__ = (ToIntegerOrInfinity size)
  [12876] (13307/4) If[12876] (== n 4i)
  [12877] (13313/6) Normal[12877] return false
  [12878] Exit[12878]
  [12879] (13299/0) Normal[12879] let n = [? __x0__]
  [12880] (13311/5) Normal[12880] return AR.IsLockFree8
  [12881] (13305/3) Normal[12881] return AR.IsLockFree2
  [12882] (13300/1) Normal[12882] let AR = AGENT
Algo: GLOBAL.Atomics.load [1187]
  [12883] Entry[12883]
  [12884] (13315)Call[12884] app typedArray = (GetArgument argumentsList)
  [12885] (13319/1) Call[12885] app __x1__ = (ValidateAtomicAccess typedArray index)
  [12886] (13320/1) Normal[12886] let indexedPosition = [? __x1__]
  [12887] (13325/4) Normal[12887] let arrayTypeName = typedArray.TypedArrayName
  [12888] (13326/6) Normal[12888] let elementType = ~Int8~
  [12889] (13316)Call[12889] app index = (GetArgument argumentsList)
  [12890] (13321/2) Call[12890] app __x2__ = (IsDetachedBuffer buffer)
  [12891] (13323/2) Normal[12891] throw TypeError
  [12892] (13328/6) Normal[12892] return __x3__
  [12893] Exit[12893]
  [12894] (13317/0) Call[12894] app __x0__ = (ValidateIntegerTypedArray typedArray)
  [12895] (13327/6) Call[12895] app __x3__ = (GetValueFromBuffer buffer indexedPosition elementType true ~SeqCst~)
  [12896] (13322/2) If[12896] (= __x2__ true)
  [12897] (13318/0) Normal[12897] let buffer = [? __x0__]
Algo: GLOBAL.Atomics.notify [1188]
  [12898] Entry[12898]
  [12899] (13330)Call[12899] app typedArray = (GetArgument argumentsList)
  [12900] (13334/0) Normal[12900] let buffer = [? __x0__]
  [12901] (13335/1) Call[12901] app __x1__ = (ValidateAtomicAccess typedArray index)
  [12902] (13340/4) Call[12902] app __x2__ = (ToIntegerOrInfinity count)
  [12903] (13341/4) Normal[12903] let intCount = [? __x2__]
  [12904] (13344/6) Normal[12904] let block = buffer.ArrayBufferData
  [12905] (13345/7) Normal[12905] let arrayTypeName = typedArray.TypedArrayName
  [12906] (13331)Call[12906] app index = (GetArgument argumentsList)
  [12907] (13336/1) Normal[12907] let indexedPosition = [? __x1__]
  [12908] (13338/2) Normal[12908] let c = Infinity
  [12909] (13343/5) Normal[12909] let c = __x3__
  [12910] (13332)Call[12910] app count = (GetArgument argumentsList)
  [12911] (13342/5) Call[12911] app __x3__ = (max intCount 0i)
  [12912] (13337/2) If[12912] (= count undefined)
  [12913] (13348/8) Normal[12913] return 0i
  [12914] (13350/9) Call[12914] app __x5__ = (GetWaiterList block indexedPosition)
  [12915] (13333/0) Call[12915] app __x0__ = (ValidateIntegerTypedArray typedArray true)
  [12916] (13346/8) Call[12916] app __x4__ = (IsSharedArrayBuffer buffer)
  [12917] (13355/12) Call[12917] app __x7__ = (RemoveWaiters WL c)
  [12918] (13356/12) Normal[12918] let S = __x7__
  [12919] (13357/13) Loop[12919] (< 0i S.length)
  [12920] (13351/9) Normal[12920] let WL = __x5__
  [12921] (13352/10) Normal[12921] let n = 0i
  [12922] (13361/16) Call[12922] app __x8__ = (NotifyWaiter WL W)
  [12923] (13362/16) Normal[12923] __x8__
  [12924] (13360/15) Normal[12924] (pop S 0i)
  [12925] (13353/11) Call[12925] app __x6__ = (EnterCriticalSection WL)
  [12926] (13364/18) Call[12926] app __x9__ = (LeaveCriticalSection WL)
  [12927] (13365/18) Normal[12927] __x9__
  [12928] (13347/8) If[12928] (= __x4__ false)
  [12929] LoopCont[12929]
  [12930] (13366/19) Normal[12930] return n
  [12931] (13354/11) Normal[12931] __x6__
  [12932] (13359/14) Normal[12932] let W = S[0i]
  [12933] Exit[12933]
  [12934] (13363/17) Normal[12934] n = (+ n 1i)
Algo: GLOBAL.Atomics.or [1189]
  [12935] Entry[12935]
  [12936] (13368)Call[12936] app typedArray = (GetArgument argumentsList)
  [12937] (13372/2) Call[12937] app __x0__ = (AtomicReadModifyWrite typedArray index value or)
  [12938] (13373/2) Normal[12938] return [? __x0__]
  [12939] (13369)Call[12939] app index = (GetArgument argumentsList)
  [12940] Exit[12940]
  [12941] (13370)Call[12941] app value = (GetArgument argumentsList)
  [12942] (13371/0) Normal[12942] ??? "Let id:{or} be a new read - modify - write modification function with parameters ( id:{xBytes} , id:{yBytes} ) that captures nothing and performs the following steps atomically when called : in:{} out:{}"
Algo: GLOBAL.Atomics.store [1190]
  [12943] Entry[12943]
  [12944] (13375)Call[12944] app typedArray = (GetArgument argumentsList)
  [12945] (13379/0) Normal[12945] let buffer = [? __x0__]
  [12946] (13380/1) Call[12946] app __x1__ = (ValidateAtomicAccess typedArray index)
  [12947] (13385/3) Call[12947] app __x2__ = (ToBigInt value)
  [12948] (13386/3) Normal[12948] let v = [? __x2__]
  [12949] (13390/5) Call[12949] app __x4__ = (IsDetachedBuffer buffer)
  [12950] (13391/5) If[12950] (= __x4__ true)
  [12951] (13397/9) Normal[12951] return v
  [12952] Exit[12952]
  [12953] (13376)Call[12953] app index = (GetArgument argumentsList)
  [12954] (13381/1) Normal[12954] let indexedPosition = [? __x1__]
  [12955] (13383/3) If[12955] (|| (= arrayTypeName "BigUint64Array") (= arrayTypeName "BigInt64Array"))
  [12956] (13388/4) Call[12956] app __x3__ = (ToIntegerOrInfinity value)
  [12957] (13389/4) Normal[12957] let v = [? __x3__]
  [12958] (13377)Call[12958] app value = (GetArgument argumentsList)
  [12959] (13394/6) Normal[12959] let elementType = ~Int8~
  [12960] (13395/8) Call[12960] app __x5__ = (SetValueInBuffer buffer indexedPosition elementType v true ~SeqCst~)
  [12961] (13382/2) Normal[12961] let arrayTypeName = typedArray.TypedArrayName
  [12962] (13378/0) Call[12962] app __x0__ = (ValidateIntegerTypedArray typedArray)
  [12963] (13396/8) Normal[12963] __x5__
  [12964] (13392/5) Normal[12964] throw TypeError
Algo: GLOBAL.Atomics.sub [1191]
  [12965] Entry[12965]
  [12966] (13399)Call[12966] app typedArray = (GetArgument argumentsList)
  [12967] (13403/1) Normal[12967] let isLittleEndian = AGENT.LittleEndian
  [12968] (13404/2) Normal[12968] ??? "Let id:{subtract} be a new read - modify - write modification function with parameters ( id:{xBytes} , id:{yBytes} ) that captures id:{type} and id:{isLittleEndian} and performs the following steps atomically when called : in:{} out:{}"
  [12969] (13400)Call[12969] app index = (GetArgument argumentsList)
  [12970] (13405/10) Call[12970] app __x0__ = (AtomicReadModifyWrite typedArray index value subtract)
  [12971] (13401)Call[12971] app value = (GetArgument argumentsList)
  [12972] (13406/10) Normal[12972] return [? __x0__]
  [12973] (13402/0) Normal[12973] ??? "Let id:{type} be the Element Type value in link:{table-the-typedarray-constructors} for id:{typedArray} . [ [ TypedArrayName ] ] ."
  [12974] Exit[12974]
Algo: GLOBAL.Atomics.wait [1192]
  [12975] Entry[12975]
  [12976] (13408)Call[12976] app typedArray = (GetArgument argumentsList)
  [12977] (13412/0) Call[12977] app __x0__ = (ValidateIntegerTypedArray typedArray true)
  [12978] (13413/0) Normal[12978] let buffer = [? __x0__]
  [12979] (13418/2) Call[12979] app __x2__ = (ValidateAtomicAccess typedArray index)
  [12980] (13419/2) Normal[12980] let indexedPosition = [? __x2__]
  [12981] (13409)Call[12981] app index = (GetArgument argumentsList)
  [12982] (13414/1) Call[12982] app __x1__ = (IsSharedArrayBuffer buffer)
  [12983] (13410)Call[12983] app value = (GetArgument argumentsList)
  [12984] (13415/1) If[12984] (= __x1__ false)
  [12985] (13416/1) Normal[12985] throw TypeError
  [12986] (13411)Call[12986] app timeout = (GetArgument argumentsList)
  [12987] (13456/18) Call[12987] app __x12__ = (AgentSignifier)
  [12988] (13457/18) Normal[12988] let W = __x12__
  [12989] (13435/9) Call[12989] app __x6__ = (max q 0i)
  [12990] (13436/9) Normal[12990] let t = __x6__
  [12991] (13449/14) Normal[12991] let w = [! __x10__]
  [12992] (13450/15) If[12992] (! (== v w))
  [12993] (13437/8) Call[12993] app __x7__ = (AgentCanSuspend)
  [12994] (13468/25) Normal[12994] __x16__
  [12995] (13469/26) If[12995] (= notified true)
  [12996] (13423/4) Call[12996] app __x3__ = (ToBigInt64 value)
  [12997] (13424/4) Normal[12997] let v = [? __x3__]
  [12998] (13430/7) If[12998] (|| (= q NaN) (= q Infinity))
  [12999] (13431/7) Normal[12999] let t = Infinity
  [13000] (13432/7) If[13000] (= q -Infinity)
  [13001] (13460/20) Call[13001] app __x14__ = (SuspendAgent WL W t)
  [13002] (13461/20) Normal[13002] let notified = __x14__
  [13003] (13440/9) Normal[13003] throw TypeError
  [13004] (13442/10) Normal[13004] let block = buffer.ArrayBufferData
  [13005] (13445/12) Call[13005] app __x9__ = (EnterCriticalSection WL)
  [13006] (13446/12) Normal[13006] __x9__
  [13007] (13439/9) If[13007] (= B false)
  [13008] (13452/16) Call[13008] app __x11__ = (LeaveCriticalSection WL)
  [13009] (13470/26) Normal[13009] return "ok"
  [13010] (13472/27) Normal[13010] return "timed-out"
  [13011] (13421/4) If[13011] (= arrayTypeName "BigInt64Array")
  [13012] (13426/5) Call[13012] app __x4__ = (ToInt32 value)
  [13013] (13454/17) Normal[13013] return "not-equal"
  [13014] (13459/19) Normal[13014] __x13__
  [13015] (13427/5) Normal[13015] let v = [? __x4__]
  [13016] (13428/6) Call[13016] app __x5__ = (ToNumber timeout)
  [13017] (13444/11) Normal[13017] let WL = __x8__
  [13018] (13447/6) Normal[13018] let elementType = ~Int8~
  [13019] (13433/8) Normal[13019] let t = 0i
  [13020] (13458/19) Call[13020] app __x13__ = (AddWaiter WL W)
  [13021] (13438/8) Normal[13021] let B = __x7__
  [13022] (13420/3) Normal[13022] let arrayTypeName = typedArray.TypedArrayName
  [13023] (13465/24) Call[13023] app __x15__ = (RemoveWaiter WL W)
  [13024] (13466/24) Normal[13024] __x15__
  [13025] (13453/16) Normal[13025] __x11__
  [13026] (13448/14) Call[13026] app __x10__ = (GetValueFromBuffer buffer indexedPosition elementType true ~SeqCst~)
  [13027] (13462/21) If[13027] (= notified true)
  [13028] (13467/25) Call[13028] app __x16__ = (LeaveCriticalSection WL)
  [13029] (13429/6) Normal[13029] let q = [? __x5__]
  [13030] (13443/11) Call[13030] app __x8__ = (GetWaiterList block indexedPosition)
  [13031] Exit[13031]
Algo: GLOBAL.Atomics.xor [1193]
  [13032] Entry[13032]
  [13033] (13474)Call[13033] app typedArray = (GetArgument argumentsList)
  [13034] (13478/2) Call[13034] app __x0__ = (AtomicReadModifyWrite typedArray index value xor)
  [13035] (13479/2) Normal[13035] return [? __x0__]
  [13036] (13475)Call[13036] app index = (GetArgument argumentsList)
  [13037] Exit[13037]
  [13038] (13476)Call[13038] app value = (GetArgument argumentsList)
  [13039] (13477/0) Normal[13039] ??? "Let id:{xor} be a new read - modify - write modification function with parameters ( id:{xBytes} , id:{yBytes} ) that captures nothing and performs the following steps atomically when called : in:{} out:{}"
Algo: GLOBAL.AwaitFulfilledFunctions [1195]
  [13046] Entry[13046]
  [13047] (13481)Call[13047] app value = (GetArgument argumentsList)
  [13048] (13485/3) Normal[13048] CONTEXT = null
  [13049] (13486/4) Normal[13049] append asyncContext -> EXECUTION_STACK
  [13050] (13496/7) Normal[13050] return undefined
  [13051] Exit[13051]
  [13052] (13482/0) Normal[13052] let F = CONTEXT.Function
  [13053] (13487/4) Normal[13053] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [13054] (13489/5) Arrow[13054] withcont __x1__ () = {
  if (= asyncContext.ReturnCont absent) asyncContext.ReturnCont = (new []) else {}
  append __x1__ -> asyncContext.ReturnCont
  app _ = (asyncContext.ResumeCont __x0__)
} [fid: 1194]
  [13055] (13483/1) Normal[13055] let asyncContext = F.AsyncContext
  [13056] (13488/5) Call[13056] app __x0__ = (NormalCompletion value)
  [13057] (13484/2) Normal[13057] let prevContext = CONTEXT
Algo: GLOBAL.AwaitFulfilledFunctions:5 [1194]
  [13040] Entry[13040]
  [13041] (13491/5) If[13041] (= asyncContext.ReturnCont absent)
  [13042] (13492/5) Normal[13042] asyncContext.ReturnCont = (new [])
  [13043] (13494/5) Normal[13043] append __x1__ -> asyncContext.ReturnCont
  [13044] (13495/5) Call[13044] app _ = (asyncContext.ResumeCont __x0__)
  [13045] Exit[13045]
Algo: GLOBAL.AwaitRejectedFunctions [1197]
  [13064] Entry[13064]
  [13065] (13498)Call[13065] app reason = (GetArgument argumentsList)
  [13066] (13502/3) Normal[13066] CONTEXT = null
  [13067] (13503/4) Normal[13067] append asyncContext -> EXECUTION_STACK
  [13068] (13513/7) Normal[13068] return undefined
  [13069] Exit[13069]
  [13070] (13499/0) Normal[13070] let F = CONTEXT.Function
  [13071] (13504/4) Normal[13071] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [13072] (13506/5) Arrow[13072] withcont __x1__ () = {
  if (= asyncContext.ReturnCont absent) asyncContext.ReturnCont = (new []) else {}
  append __x1__ -> asyncContext.ReturnCont
  app _ = (asyncContext.ResumeCont __x0__)
} [fid: 1196]
  [13073] (13500/1) Normal[13073] let asyncContext = F.AsyncContext
  [13074] (13505/5) Call[13074] app __x0__ = (ThrowCompletion reason)
  [13075] (13501/2) Normal[13075] let prevContext = CONTEXT
Algo: GLOBAL.AwaitRejectedFunctions:5 [1196]
  [13058] Entry[13058]
  [13059] (13508/5) If[13059] (= asyncContext.ReturnCont absent)
  [13060] (13509/5) Normal[13060] asyncContext.ReturnCont = (new [])
  [13061] (13511/5) Normal[13061] append __x1__ -> asyncContext.ReturnCont
  [13062] (13512/5) Call[13062] app _ = (asyncContext.ResumeCont __x0__)
  [13063] Exit[13063]
Algo: GLOBAL.BigInt [1198]
  [13076] Entry[13076]
  [13077] (13515)Call[13077] app value = (GetArgument argumentsList)
  [13078] (13520/1) Normal[13078] let prim = [? __x0__]
  [13079] (13521/2) If[13079] (= (typeof prim) Number)
  [13080] (13527/3) Normal[13080] return [? __x2__]
  [13081] Exit[13081]
  [13082] (13516/0) If[13082] (! (= NewTarget undefined))
  [13083] (13523/2) Call[13083] app __x1__ = (NumberToBigInt prim)
  [13084] (13526/3) Call[13084] app __x2__ = (ToBigInt value)
  [13085] (13517/0) Normal[13085] throw TypeError
  [13086] (13519/1) Call[13086] app __x0__ = (ToPrimitive value ~number~)
  [13087] (13524/2) Normal[13087] return [? __x1__]
Algo: GLOBAL.BigInt.asIntN [1199]
  [13088] Entry[13088]
  [13089] (13529)Call[13089] app bits = (GetArgument argumentsList)
  [13090] (13533/1) Call[13090] app __x1__ = (ToBigInt bigint)
  [13091] (13534/1) Normal[13091] bigint = [? __x1__]
  [13092] (13538/3) Normal[13092] return (convert mod num2bigint)
  [13093] Exit[13093]
  [13094] (13530)Call[13094] app bigint = (GetArgument argumentsList)
  [13095] (13535/2) Normal[13095] let mod = (%% bigint (** 2i bits))
  [13096] (13537/3) Normal[13096] return (convert (- mod (** 2i bits)) num2bigint)
  [13097] (13531/0) Call[13097] app __x0__ = (ToIndex bits)
  [13098] (13536/3) If[13098] (! (< mod (** 2i (- bits 1i))))
  [13099] (13532/0) Normal[13099] bits = [? __x0__]
Algo: GLOBAL.BigInt.asUintN [1200]
  [13100] Entry[13100]
  [13101] (13540)Call[13101] app bits = (GetArgument argumentsList)
  [13102] (13544/1) Call[13102] app __x1__ = (ToBigInt bigint)
  [13103] (13545/1) Normal[13103] bigint = [? __x1__]
  [13104] (13541)Call[13104] app bigint = (GetArgument argumentsList)
  [13105] (13546/2) Normal[13105] return (convert (%% bigint (** 2i bits)) num2bigint)
  [13106] (13542/0) Call[13106] app __x0__ = (ToIndex bits)
  [13107] Exit[13107]
  [13108] (13543/0) Normal[13108] bits = [? __x0__]
Algo: GLOBAL.BigInt.prototype.toString [1201]
  [13109] Entry[13109]
  [13110] (13548)Call[13110] app radix = (GetArgument argumentsList)
  [13111] (13552/1) Normal[13111] let radixMV = 10i
  [13112] (13556/3) If[13112] (|| (< radixMV 2i) (< 36i radixMV))
  [13113] (13559/4) If[13113] (== radixMV 10i)
  [13114] (13561/4) Call[13114] app __x2__ = (ToString x)
  [13115] (13564/5) Normal[13115] ??? "Return the String representation of this Number value using the radix specified by id:{radixMV} . Letters code:{a} - code:{z} are used for digits with values 10 through 35 . The precise algorithm is implementation - defined , however the algorithm should be a generalization of that specified in link:{sec-numeric-types-bigint-tostring} ."
  [13116] (13549/0) Call[13116] app __x0__ = (thisBigIntValue this)
  [13117] (13554/2) Call[13117] app __x1__ = (ToIntegerOrInfinity radix)
  [13118] (13555/2) Normal[13118] let radixMV = [? __x1__]
  [13119] (13557/3) Normal[13119] throw RangeError
  [13120] Exit[13120]
  [13121] (13550/0) Normal[13121] let x = [? __x0__]
  [13122] (13562/4) Normal[13122] return [! __x2__]
  [13123] (13551/1) If[13123] (= radix undefined)
Algo: GLOBAL.BigInt.prototype.valueOf [1202]
  [13124] Entry[13124]
  [13125] (13566/0) Call[13125] app __x0__ = (thisBigIntValue this)
  [13126] (13567/0) Normal[13126] return [? __x0__]
  [13127] Exit[13127]
Algo: GLOBAL.Boolean [1203]
  [13128] Entry[13128]
  [13129] (13569)Call[13129] app value = (GetArgument argumentsList)
  [13130] (13573/1) Normal[13130] return b
  [13131] (13575/2) Call[13131] app __x1__ = (OrdinaryCreateFromConstructor NewTarget "%Boolean.prototype%" (new ["BooleanData"]))
  [13132] (13570/0) Call[13132] app __x0__ = (ToBoolean value)
  [13133] (13576/2) Normal[13133] let O = [? __x1__]
  [13134] (13578/4) Normal[13134] return O
  [13135] Exit[13135]
  [13136] (13571/0) Normal[13136] let b = [! __x0__]
  [13137] (13577/3) Normal[13137] O.BooleanData = b
  [13138] (13572/1) If[13138] (= NewTarget undefined)
Algo: GLOBAL.Boolean.prototype.toString [1204]
  [13139] Entry[13139]
  [13140] (13580/0) Call[13140] app __x0__ = (thisBooleanValue this)
  [13141] (13584/1) Normal[13141] return "false"
  [13142] Exit[13142]
  [13143] (13581/0) Normal[13143] let b = [? __x0__]
  [13144] (13582/1) If[13144] (= b true)
  [13145] (13583/1) Normal[13145] return "true"
Algo: GLOBAL.Boolean.prototype.valueOf [1205]
  [13146] Entry[13146]
  [13147] (13586/0) Call[13147] app __x0__ = (thisBooleanValue this)
  [13148] (13587/0) Normal[13148] return [? __x0__]
  [13149] Exit[13149]
Algo: GLOBAL.CatchFinallyFunctions [1207]
  [13154] Entry[13154]
  [13155] (13589)Call[13155] app reason = (GetArgument argumentsList)
  [13156] (13593/2) Normal[13156] assert (= __x0__ true)
  [13157] (13594/3) Call[13157] app __x1__ = (Call onFinally undefined)
  [13158] (13598/5) Normal[13158] assert (= __x2__ true)
  [13159] (13599/6) Call[13159] app __x3__ = (PromiseResolve C result)
  [13160] (13605/7) Normal[13160] let thrower = (new OrdinaryObject("Call" -> closure))
  [13161] (13606/8) Call[13161] app __x4__ = (Invoke promise "then" (new [thrower]))
  [13162] (13590/0) Normal[13162] let F = CONTEXT.Function
  [13163] (13595/3) Normal[13163] let result = [? __x1__]
  [13164] (13597/5) Call[13164] app __x2__ = (IsConstructor C)
  [13165] (13601/7) Arrow[13165] clo closure = (this, V, argumentsList)[reason] => {
  app thrown = (ThrowCompletion reason)
  return thrown
} [fid: 1206]
  [13166] (13591/1) Normal[13166] let onFinally = F.OnFinally
  [13167] (13600/6) Normal[13167] let promise = [? __x3__]
  [13168] (13596/4) Normal[13168] let C = F.Constructor
  [13169] (13592/2) Call[13169] app __x0__ = (IsCallable onFinally)
  [13170] (13607/8) Normal[13170] return [? __x4__]
  [13171] Exit[13171]
Algo: GLOBAL.CatchFinallyFunctions:7 [1206]
  [13150] Entry[13150]
  [13151] (13603)Call[13151] app thrown = (ThrowCompletion reason)
  [13152] (13604)Normal[13152] return thrown
  [13153] Exit[13153]
Algo: GLOBAL.CreateDataPropertyOnObjectFunctions [1208]
  [13172] Entry[13172]
  [13173] (13609)Call[13173] app key = (GetArgument argumentsList)
  [13174] (13613/3) Call[13174] app __x0__ = (ToPropertyKey key)
  [13175] (13614/3) Normal[13175] let propertyKey = [? __x0__]
  [13176] (13610)Call[13176] app value = (GetArgument argumentsList)
  [13177] (13615/4) Call[13177] app __x1__ = (CreateDataPropertyOrThrow O propertyKey value)
  [13178] (13617/5) Normal[13178] return undefined
  [13179] Exit[13179]
  [13180] (13611/0) Normal[13180] let O = this
  [13181] (13616/4) Normal[13181] [! __x1__]
  [13182] (13612/1) Normal[13182] assert (= (typeof O) Object)
Algo: GLOBAL.DataView [1209]
  [13183] Entry[13183]
  [13184] (13619)Call[13184] app buffer = (GetArgument argumentsList)
  [13185] (13623/0) Normal[13185] throw TypeError
  [13186] (13625/1) Call[13186] app __x0__ = (RequireInternalSlot buffer "ArrayBufferData")
  [13187] (13629/3) Call[13187] app __x2__ = (IsDetachedBuffer buffer)
  [13188] (13630/3) If[13188] (= __x2__ true)
  [13189] (13634/5) If[13189] (< bufferByteLength offset)
  [13190] (13635/5) Normal[13190] throw RangeError
  [13191] (13637/6) If[13191] (= byteLength undefined)
  [13192] (13620)Call[13192] app byteOffset = (GetArgument argumentsList)
  [13193] (13626/1) Normal[13193] [? __x0__]
  [13194] (13628/2) Normal[13194] let offset = [? __x1__]
  [13195] (13633/4) Normal[13195] let bufferByteLength = buffer.ArrayBufferByteLength
  [13196] (13621)Call[13196] app byteLength = (GetArgument argumentsList)
  [13197] (13638/7) Normal[13197] let viewByteLength = (- bufferByteLength offset)
  [13198] (13645/11) Call[13198] app __x4__ = (OrdinaryCreateFromConstructor NewTarget "%DataView.prototype%" (new ["DataView", "ViewedArrayBuffer", "ByteLength", "ByteOffset"]))
  [13199] (13631/3) Normal[13199] throw TypeError
  [13200] (13627/2) Call[13200] app __x1__ = (ToIndex byteOffset)
  [13201] (13622/0) If[13201] (= NewTarget undefined)
  [13202] (13640/9) Call[13202] app __x3__ = (ToIndex byteLength)
  [13203] (13641/9) Normal[13203] let viewByteLength = [? __x3__]
  [13204] (13647/12) Call[13204] app __x5__ = (IsDetachedBuffer buffer)
  [13205] (13648/12) If[13205] (= __x5__ true)
  [13206] (13649/12) Normal[13206] throw TypeError
  [13207] (13651/13) Normal[13207] O.ViewedArrayBuffer = buffer
  [13208] (13642/10) If[13208] (< bufferByteLength (+ offset viewByteLength))
  [13209] (13643/10) Normal[13209] throw RangeError
  [13210] (13653/15) Normal[13210] O.ByteOffset = offset
  [13211] (13654/16) Normal[13211] return O
  [13212] (13652/14) Normal[13212] O.ByteLength = viewByteLength
  [13213] (13646/11) Normal[13213] let O = [? __x4__]
  [13214] Exit[13214]
Algo: GLOBAL.DataView.prototype.buffer [1210]
  [13215] Entry[13215]
  [13216] (13656/0) Normal[13216] let O = this
  [13217] (13660/3) Normal[13217] let buffer = O.ViewedArrayBuffer
  [13218] (13661/4) Normal[13218] return buffer
  [13219] (13657/1) Call[13219] app __x0__ = (RequireInternalSlot O "DataView")
  [13220] Exit[13220]
  [13221] (13658/1) Normal[13221] [? __x0__]
  [13222] (13659/2) Normal[13222] assert (! (= O.ViewedArrayBuffer absent))
Algo: GLOBAL.DataView.prototype.byteLength [1211]
  [13223] Entry[13223]
  [13224] (13663/0) Normal[13224] let O = this
  [13225] (13667/3) Normal[13225] let buffer = O.ViewedArrayBuffer
  [13226] (13668/4) Call[13226] app __x1__ = (IsDetachedBuffer buffer)
  [13227] (13673/6) Normal[13227] return size
  [13228] Exit[13228]
  [13229] (13664/1) Call[13229] app __x0__ = (RequireInternalSlot O "DataView")
  [13230] (13669/4) If[13230] (= __x1__ true)
  [13231] (13672/5) Normal[13231] let size = O.ByteLength
  [13232] (13665/1) Normal[13232] [? __x0__]
  [13233] (13670/4) Normal[13233] throw TypeError
  [13234] (13666/2) Normal[13234] assert (! (= O.ViewedArrayBuffer absent))
Algo: GLOBAL.DataView.prototype.byteOffset [1212]
  [13235] Entry[13235]
  [13236] (13675/0) Normal[13236] let O = this
  [13237] (13679/3) Normal[13237] let buffer = O.ViewedArrayBuffer
  [13238] (13680/4) Call[13238] app __x1__ = (IsDetachedBuffer buffer)
  [13239] (13685/6) Normal[13239] return offset
  [13240] Exit[13240]
  [13241] (13676/1) Call[13241] app __x0__ = (RequireInternalSlot O "DataView")
  [13242] (13681/4) If[13242] (= __x1__ true)
  [13243] (13684/5) Normal[13243] let offset = O.ByteOffset
  [13244] (13677/1) Normal[13244] [? __x0__]
  [13245] (13682/4) Normal[13245] throw TypeError
  [13246] (13678/2) Normal[13246] assert (! (= O.ViewedArrayBuffer absent))
Algo: GLOBAL.Date [1213]
  [13247] Entry[13247]
  [13248] (13687)Normal[13248] let values = argumentsList
  [13249] (13692/2) Normal[13249] return __x0__
  [13250] (13694/3) Normal[13250] let numberOfArgs = values.length
  [13251] (13688/0) If[13251] (= NewTarget undefined)
  [13252] (13690/1) Normal[13252] ??? "Let id:{now} be the time value ( UTC ) identifying the current time ."
  [13253] (13691/2) Call[13253] app __x0__ = (ToDateString now)
  [13254] (13699/7) Normal[13254] let value = values[0i]
  [13255] (13700/8) If[13255] (&& (= (typeof value) Object) (! (= value.DateValue absent)))
  [13256] (13755/31) Call[13256] app __x15__ = (MakeDate __x13__ __x14__)
  [13257] (13756/31) Normal[13257] let finalDate = __x15__
  [13258] (13739/25) Normal[13258] let s = 0i
  [13259] (13740/26) If[13259] (< 6i numberOfArgs)
  [13260] (13717/20) Normal[13260] let y = [? __x5__]
  [13261] (13718/21) Call[13261] app __x6__ = (ToNumber values[1i])
  [13262] (13733/24) Normal[13262] let min = [? __x9__]
  [13263] (13735/25) If[13263] (< 5i numberOfArgs)
  [13264] (13719/21) Normal[13264] let m = [? __x6__]
  [13265] (13751/30) Normal[13265] let yr = (+ 1900i yi)
  [13266] (13753/31) Call[13266] app __x13__ = (MakeDay yr m dt)
  [13267] (13705/11) Call[13267] app __x2__ = (ToPrimitive value)
  [13268] (13706/11) Normal[13268] let v = [? __x2__]
  [13269] (13712/17) Call[13269] app __x4__ = (TimeClip tv)
  [13270] (13713/17) Normal[13270] let dv = __x4__
  [13271] (13744/26) Normal[13271] let milli = 0i
  [13272] (13745/27) If[13272] (= y NaN)
  [13273] (13757/32) Call[13273] app __x16__ = (UTC finalDate)
  [13274] (13723/22) Normal[13274] let dt = [? __x7__]
  [13275] (13725/23) If[13275] (< 3i numberOfArgs)
  [13276] (13760/33) Call[13276] app __x18__ = (OrdinaryCreateFromConstructor NewTarget "%Date.prototype%" (new ["DateValue"]))
  [13277] (13761/33) Normal[13277] let O = [? __x18__]
  [13278] (13695/4) If[13278] (== numberOfArgs 0i)
  [13279] (13759/32) Normal[13279] let dv = __x17__
  [13280] (13728/23) Normal[13280] let h = [? __x8__]
  [13281] (13730/24) If[13281] (< 4i numberOfArgs)
  [13282] (13722/22) Call[13282] app __x7__ = (ToNumber values[2i])
  [13283] (13734/24) Normal[13283] let min = 0i
  [13284] (13697/4) If[13284] (== numberOfArgs 1i)
  [13285] (13715/19) Normal[13285] assert (! (< numberOfArgs 2i))
  [13286] (13752/30) Normal[13286] let yr = y
  [13287] (13703/9) Normal[13287] let tv = [! __x1__]
  [13288] (13738/25) Normal[13288] let s = [? __x10__]
  [13289] (13743/26) Normal[13289] let milli = [? __x11__]
  [13290] (13763/35) Normal[13290] return O
  [13291] Exit[13291]
  [13292] (13708/14) Normal[13292] ??? "Let id:{tv} be the result of parsing id:{v} as a date , in exactly the same manner as for the code:{parse} method ( link:{sec-date.parse} ) ."
  [13293] (13727/23) Call[13293] app __x8__ = (ToNumber values[3i])
  [13294] (13729/23) Normal[13294] let h = 0i
  [13295] (13716/20) Call[13295] app __x5__ = (ToNumber values[0i])
  [13296] (13742/26) Call[13296] app __x11__ = (ToNumber values[6i])
  [13297] (13758/32) Call[13297] app __x17__ = (TimeClip __x16__)
  [13298] (13720/22) If[13298] (< 2i numberOfArgs)
  [13299] (13724/22) Normal[13299] let dt = 1i
  [13300] (13702/9) Call[13300] app __x1__ = (thisTimeValue value)
  [13301] (13754/31) Call[13301] app __x14__ = (MakeTime h min s milli)
  [13302] (13748/29) Call[13302] app __x12__ = (ToIntegerOrInfinity y)
  [13303] (13749/29) Normal[13303] let yi = [! __x12__]
  [13304] (13696/5) Normal[13304] ??? "Let id:{dv} be the time value ( UTC ) identifying the current time ."
  [13305] (13737/25) Call[13305] app __x10__ = (ToNumber values[5i])
  [13306] (13732/24) Call[13306] app __x9__ = (ToNumber values[4i])
  [13307] (13746/27) Normal[13307] let yr = NaN
  [13308] (13762/34) Normal[13308] O.DateValue = dv
  [13309] (13710/16) Call[13309] app __x3__ = (ToNumber v)
  [13310] (13711/16) Normal[13310] let tv = [? __x3__]
  [13311] (13750/30) If[13311] (&& (! (< yi 0i)) (! (< 99i yi)))
  [13312] (13707/12) If[13312] (= (typeof v) String)
Algo: GLOBAL.Date.UTC [1214]
  [13313] Entry[13313]
  [13314] (13765)Call[13314] app year = (GetArgument argumentsList)
  [13315] (13769)Call[13315] app minutes = (GetArgument argumentsList)
  [13316] (13770)Call[13316] app seconds = (GetArgument argumentsList)
  [13317] (13774/1) If[13317] (! (= month absent))
  [13318] (13776/1) Call[13318] app __x1__ = (ToNumber month)
  [13319] (13778/1) Normal[13319] let m = 0i
  [13320] (13779/2) If[13320] (! (= date absent))
  [13321] (13781/2) Call[13321] app __x2__ = (ToNumber date)
  [13322] (13783/2) Normal[13322] let dt = 1i
  [13323] (13766)Call[13323] app month = (GetArgument argumentsList)
  [13324] (13771)Call[13324] app ms = (GetArgument argumentsList)
  [13325] (13773/0) Normal[13325] let y = [? __x0__]
  [13326] (13767)Call[13326] app date = (GetArgument argumentsList)
  [13327] (13777/1) Normal[13327] let m = [? __x1__]
  [13328] (13784/3) If[13328] (! (= hours absent))
  [13329] (13786/3) Call[13329] app __x3__ = (ToNumber hours)
  [13330] (13788/3) Normal[13330] let h = 0i
  [13331] (13772/0) Call[13331] app __x0__ = (ToNumber year)
  [13332] (13768)Call[13332] app hours = (GetArgument argumentsList)
  [13333] (13782/2) Normal[13333] let dt = [? __x2__]
  [13334] (13813/11) Call[13334] app __x9__ = (MakeTime h min s milli)
  [13335] (13814/11) Call[13335] app __x10__ = (MakeDate __x8__ __x9__)
  [13336] (13792/4) Normal[13336] let min = [? __x4__]
  [13337] (13794/5) If[13337] (! (= seconds absent))
  [13338] (13808/9) Normal[13338] let yi = [! __x7__]
  [13339] (13809/10) If[13339] (&& (! (< yi 0i)) (! (< 99i yi)))
  [13340] (13793/4) Normal[13340] let min = 0i
  [13341] (13787/3) Normal[13341] let h = [? __x3__]
  [13342] (13789/4) If[13342] (! (= minutes absent))
  [13343] (13798/5) Normal[13343] let s = 0i
  [13344] (13799/6) If[13344] (! (= ms absent))
  [13345] (13803/6) Normal[13345] let milli = 0i
  [13346] (13804/7) If[13346] (= y NaN)
  [13347] (13797/5) Normal[13347] let s = [? __x5__]
  [13348] (13810/10) Normal[13348] let yr = (+ 1900i yi)
  [13349] (13811/10) Normal[13349] let yr = y
  [13350] (13812/11) Call[13350] app __x8__ = (MakeDay yr m dt)
  [13351] (13816/11) Normal[13351] return __x11__
  [13352] Exit[13352]
  [13353] (13802/6) Normal[13353] let milli = [? __x6__]
  [13354] (13805/7) Normal[13354] let yr = NaN
  [13355] (13807/9) Call[13355] app __x7__ = (ToIntegerOrInfinity y)
  [13356] (13791/4) Call[13356] app __x4__ = (ToNumber minutes)
  [13357] (13815/11) Call[13357] app __x11__ = (TimeClip __x10__)
  [13358] (13796/5) Call[13358] app __x5__ = (ToNumber seconds)
  [13359] (13801/6) Call[13359] app __x6__ = (ToNumber ms)
Algo: GLOBAL.Date.prototype.getDate [1215]
  [13360] Entry[13360]
  [13361] (13818/0) Call[13361] app __x0__ = (thisTimeValue this)
  [13362] (13823/2) Call[13362] app __x1__ = (LocalTime t)
  [13363] (13824/2) Call[13363] app __x2__ = (DateFromTime __x1__)
  [13364] (13819/0) Normal[13364] let t = [? __x0__]
  [13365] (13825/2) Normal[13365] return __x2__
  [13366] (13820/1) If[13366] (= t NaN)
  [13367] Exit[13367]
  [13368] (13821/1) Normal[13368] return NaN
Algo: GLOBAL.Date.prototype.getDay [1216]
  [13369] Entry[13369]
  [13370] (13827/0) Call[13370] app __x0__ = (thisTimeValue this)
  [13371] (13832/2) Call[13371] app __x1__ = (LocalTime t)
  [13372] (13833/2) Call[13372] app __x2__ = (WeekDay __x1__)
  [13373] (13828/0) Normal[13373] let t = [? __x0__]
  [13374] (13834/2) Normal[13374] return __x2__
  [13375] (13829/1) If[13375] (= t NaN)
  [13376] Exit[13376]
  [13377] (13830/1) Normal[13377] return NaN
Algo: GLOBAL.Date.prototype.getFullYear [1217]
  [13378] Entry[13378]
  [13379] (13836/0) Call[13379] app __x0__ = (thisTimeValue this)
  [13380] (13841/2) Call[13380] app __x1__ = (LocalTime t)
  [13381] (13842/2) Call[13381] app __x2__ = (YearFromTime __x1__)
  [13382] (13837/0) Normal[13382] let t = [? __x0__]
  [13383] (13843/2) Normal[13383] return __x2__
  [13384] (13838/1) If[13384] (= t NaN)
  [13385] Exit[13385]
  [13386] (13839/1) Normal[13386] return NaN
Algo: GLOBAL.Date.prototype.getHours [1218]
  [13387] Entry[13387]
  [13388] (13845/0) Call[13388] app __x0__ = (thisTimeValue this)
  [13389] (13850/2) Call[13389] app __x1__ = (LocalTime t)
  [13390] (13851/2) Call[13390] app __x2__ = (HourFromTime __x1__)
  [13391] (13846/0) Normal[13391] let t = [? __x0__]
  [13392] (13852/2) Normal[13392] return __x2__
  [13393] (13847/1) If[13393] (= t NaN)
  [13394] Exit[13394]
  [13395] (13848/1) Normal[13395] return NaN
Algo: GLOBAL.Date.prototype.getMilliseconds [1219]
  [13396] Entry[13396]
  [13397] (13854/0) Call[13397] app __x0__ = (thisTimeValue this)
  [13398] (13859/2) Call[13398] app __x1__ = (LocalTime t)
  [13399] (13860/2) Call[13399] app __x2__ = (msFromTime __x1__)
  [13400] (13855/0) Normal[13400] let t = [? __x0__]
  [13401] (13861/2) Normal[13401] return __x2__
  [13402] (13856/1) If[13402] (= t NaN)
  [13403] Exit[13403]
  [13404] (13857/1) Normal[13404] return NaN
Algo: GLOBAL.Date.prototype.getMinutes [1220]
  [13405] Entry[13405]
  [13406] (13863/0) Call[13406] app __x0__ = (thisTimeValue this)
  [13407] (13868/2) Call[13407] app __x1__ = (LocalTime t)
  [13408] (13869/2) Call[13408] app __x2__ = (MinFromTime __x1__)
  [13409] (13864/0) Normal[13409] let t = [? __x0__]
  [13410] (13870/2) Normal[13410] return __x2__
  [13411] (13865/1) If[13411] (= t NaN)
  [13412] Exit[13412]
  [13413] (13866/1) Normal[13413] return NaN
Algo: GLOBAL.Date.prototype.getMonth [1221]
  [13414] Entry[13414]
  [13415] (13872/0) Call[13415] app __x0__ = (thisTimeValue this)
  [13416] (13877/2) Call[13416] app __x1__ = (LocalTime t)
  [13417] (13878/2) Call[13417] app __x2__ = (MonthFromTime __x1__)
  [13418] (13873/0) Normal[13418] let t = [? __x0__]
  [13419] (13879/2) Normal[13419] return __x2__
  [13420] (13874/1) If[13420] (= t NaN)
  [13421] Exit[13421]
  [13422] (13875/1) Normal[13422] return NaN
Algo: GLOBAL.Date.prototype.getSeconds [1222]
  [13423] Entry[13423]
  [13424] (13881/0) Call[13424] app __x0__ = (thisTimeValue this)
  [13425] (13886/2) Call[13425] app __x1__ = (LocalTime t)
  [13426] (13887/2) Call[13426] app __x2__ = (SecFromTime __x1__)
  [13427] (13882/0) Normal[13427] let t = [? __x0__]
  [13428] (13888/2) Normal[13428] return __x2__
  [13429] (13883/1) If[13429] (= t NaN)
  [13430] Exit[13430]
  [13431] (13884/1) Normal[13431] return NaN
Algo: GLOBAL.Date.prototype.getTime [1223]
  [13432] Entry[13432]
  [13433] (13890/0) Call[13433] app __x0__ = (thisTimeValue this)
  [13434] (13891/0) Normal[13434] return [? __x0__]
  [13435] Exit[13435]
Algo: GLOBAL.Date.prototype.getTimezoneOffset [1224]
  [13436] Entry[13436]
  [13437] (13893/0) Call[13437] app __x0__ = (thisTimeValue this)
  [13438] (13898/2) Call[13438] app __x1__ = (LocalTime t)
  [13439] (13899/2) Normal[13439] return (/ (- t __x1__) 60000.0)
  [13440] (13894/0) Normal[13440] let t = [? __x0__]
  [13441] Exit[13441]
  [13442] (13895/1) If[13442] (= t NaN)
  [13443] (13896/1) Normal[13443] return NaN
Algo: GLOBAL.Date.prototype.getUTCDate [1225]
  [13444] Entry[13444]
  [13445] (13901/0) Call[13445] app __x0__ = (thisTimeValue this)
  [13446] (13906/2) Call[13446] app __x1__ = (DateFromTime t)
  [13447] (13907/2) Normal[13447] return __x1__
  [13448] (13902/0) Normal[13448] let t = [? __x0__]
  [13449] Exit[13449]
  [13450] (13903/1) If[13450] (= t NaN)
  [13451] (13904/1) Normal[13451] return NaN
Algo: GLOBAL.Date.prototype.getUTCDay [1226]
  [13452] Entry[13452]
  [13453] (13909/0) Call[13453] app __x0__ = (thisTimeValue this)
  [13454] (13914/2) Call[13454] app __x1__ = (WeekDay t)
  [13455] (13915/2) Normal[13455] return __x1__
  [13456] (13910/0) Normal[13456] let t = [? __x0__]
  [13457] Exit[13457]
  [13458] (13911/1) If[13458] (= t NaN)
  [13459] (13912/1) Normal[13459] return NaN
Algo: GLOBAL.Date.prototype.getUTCFullYear [1227]
  [13460] Entry[13460]
  [13461] (13917/0) Call[13461] app __x0__ = (thisTimeValue this)
  [13462] (13922/2) Call[13462] app __x1__ = (YearFromTime t)
  [13463] (13923/2) Normal[13463] return __x1__
  [13464] (13918/0) Normal[13464] let t = [? __x0__]
  [13465] Exit[13465]
  [13466] (13919/1) If[13466] (= t NaN)
  [13467] (13920/1) Normal[13467] return NaN
Algo: GLOBAL.Date.prototype.getUTCHours [1228]
  [13468] Entry[13468]
  [13469] (13925/0) Call[13469] app __x0__ = (thisTimeValue this)
  [13470] (13930/2) Call[13470] app __x1__ = (HourFromTime t)
  [13471] (13931/2) Normal[13471] return __x1__
  [13472] (13926/0) Normal[13472] let t = [? __x0__]
  [13473] Exit[13473]
  [13474] (13927/1) If[13474] (= t NaN)
  [13475] (13928/1) Normal[13475] return NaN
Algo: GLOBAL.Date.prototype.getUTCMilliseconds [1229]
  [13476] Entry[13476]
  [13477] (13933/0) Call[13477] app __x0__ = (thisTimeValue this)
  [13478] (13938/2) Call[13478] app __x1__ = (msFromTime t)
  [13479] (13939/2) Normal[13479] return __x1__
  [13480] (13934/0) Normal[13480] let t = [? __x0__]
  [13481] Exit[13481]
  [13482] (13935/1) If[13482] (= t NaN)
  [13483] (13936/1) Normal[13483] return NaN
Algo: GLOBAL.Date.prototype.getUTCMinutes [1230]
  [13484] Entry[13484]
  [13485] (13941/0) Call[13485] app __x0__ = (thisTimeValue this)
  [13486] (13946/2) Call[13486] app __x1__ = (MinFromTime t)
  [13487] (13947/2) Normal[13487] return __x1__
  [13488] (13942/0) Normal[13488] let t = [? __x0__]
  [13489] Exit[13489]
  [13490] (13943/1) If[13490] (= t NaN)
  [13491] (13944/1) Normal[13491] return NaN
Algo: GLOBAL.Date.prototype.getUTCMonth [1231]
  [13492] Entry[13492]
  [13493] (13949/0) Call[13493] app __x0__ = (thisTimeValue this)
  [13494] (13954/2) Call[13494] app __x1__ = (MonthFromTime t)
  [13495] (13955/2) Normal[13495] return __x1__
  [13496] (13950/0) Normal[13496] let t = [? __x0__]
  [13497] Exit[13497]
  [13498] (13951/1) If[13498] (= t NaN)
  [13499] (13952/1) Normal[13499] return NaN
Algo: GLOBAL.Date.prototype.getUTCSeconds [1232]
  [13500] Entry[13500]
  [13501] (13957/0) Call[13501] app __x0__ = (thisTimeValue this)
  [13502] (13962/2) Call[13502] app __x1__ = (SecFromTime t)
  [13503] (13963/2) Normal[13503] return __x1__
  [13504] (13958/0) Normal[13504] let t = [? __x0__]
  [13505] Exit[13505]
  [13506] (13959/1) If[13506] (= t NaN)
  [13507] (13960/1) Normal[13507] return NaN
Algo: GLOBAL.Date.prototype.setDate [1233]
  [13508] Entry[13508]
  [13509] (13965)Call[13509] app date = (GetArgument argumentsList)
  [13510] (13969/1) Call[13510] app __x2__ = (ToNumber date)
  [13511] (13970/1) Normal[13511] let dt = [? __x2__]
  [13512] (13974/2) Call[13512] app __x6__ = (TimeWithinDay t)
  [13513] (13975/2) Call[13513] app __x7__ = (MakeDate __x5__ __x6__)
  [13514] (13978/3) Call[13514] app __x9__ = (TimeClip __x8__)
  [13515] (13979/3) Normal[13515] let u = __x9__
  [13516] (13966/0) Call[13516] app __x0__ = (thisTimeValue this)
  [13517] (13971/2) Call[13517] app __x3__ = (YearFromTime t)
  [13518] (13973/2) Call[13518] app __x5__ = (MakeDay __x3__ __x4__ dt)
  [13519] (13977/3) Call[13519] app __x8__ = (UTC newDate)
  [13520] (13967/0) Call[13520] app __x1__ = (LocalTime [? __x0__])
  [13521] (13981/5) Normal[13521] return u
  [13522] Exit[13522]
  [13523] (13976/2) Normal[13523] let newDate = __x7__
  [13524] (13972/2) Call[13524] app __x4__ = (MonthFromTime t)
  [13525] (13968/0) Normal[13525] let t = __x1__
  [13526] (13980/4) Normal[13526] this.DateValue = u
Algo: GLOBAL.Date.prototype.setFullYear [1234]
  [13527] Entry[13527]
  [13528] (13983)Call[13528] app year = (GetArgument argumentsList)
  [13529] (13987/0) Normal[13529] let t = [? __x0__]
  [13530] (13988/1) If[13530] (= t NaN)
  [13531] (13993/2) Call[13531] app __x2__ = (ToNumber year)
  [13532] (13994/2) Normal[13532] let y = [? __x2__]
  [13533] (13998/3) Normal[13533] let m = __x3__
  [13534] (14002/4) If[13534] (= date absent)
  [13535] (13984)Call[13535] app month = (GetArgument argumentsList)
  [13536] (13989/1) Normal[13536] t = 0i
  [13537] (13991/2) Call[13537] app __x1__ = (LocalTime t)
  [13538] (13992/2) Normal[13538] t = __x1__
  [13539] (13997/3) Call[13539] app __x3__ = (MonthFromTime t)
  [13540] (13985)Call[13540] app date = (GetArgument argumentsList)
  [13541] (14004/4) Call[13541] app __x5__ = (DateFromTime t)
  [13542] (14007/5) Call[13542] app __x6__ = (ToNumber date)
  [13543] (13995/3) If[13543] (= month absent)
  [13544] (14000/4) Call[13544] app __x4__ = (ToNumber month)
  [13545] (13986/0) Call[13545] app __x0__ = (thisTimeValue this)
  [13546] (14005/4) Normal[13546] let dt = __x5__
  [13547] (14001/4) Normal[13547] let m = [? __x4__]
  [13548] (14011/5) Call[13548] app __x9__ = (MakeDate __x7__ __x8__)
  [13549] (14012/5) Normal[13549] let newDate = __x9__
  [13550] (14013/6) Call[13550] app __x10__ = (UTC newDate)
  [13551] (14008/5) Normal[13551] let dt = [? __x6__]
  [13552] (14016/7) Normal[13552] this.DateValue = u
  [13553] (14017/8) Normal[13553] return u
  [13554] (14015/6) Normal[13554] let u = __x11__
  [13555] (14009/5) Call[13555] app __x7__ = (MakeDay y m dt)
  [13556] (14010/5) Call[13556] app __x8__ = (TimeWithinDay t)
  [13557] (14014/6) Call[13557] app __x11__ = (TimeClip __x10__)
  [13558] Exit[13558]
Algo: GLOBAL.Date.prototype.setHours [1235]
  [13559] Entry[13559]
  [13560] (14019)Call[13560] app hour = (GetArgument argumentsList)
  [13561] (14023/0) Call[13561] app __x0__ = (thisTimeValue this)
  [13562] (14024/0) Call[13562] app __x1__ = (LocalTime [? __x0__])
  [13563] (14028/2) If[13563] (= min absent)
  [13564] (14030/2) Call[13564] app __x3__ = (MinFromTime t)
  [13565] (14033/3) Call[13565] app __x4__ = (ToNumber min)
  [13566] (14034/3) Normal[13566] let m = [? __x4__]
  [13567] (14035/3) If[13567] (= sec absent)
  [13568] (14020)Call[13568] app min = (GetArgument argumentsList)
  [13569] (14025/0) Normal[13569] let t = __x1__
  [13570] (14027/1) Normal[13570] let h = [? __x2__]
  [13571] (14021)Call[13571] app sec = (GetArgument argumentsList)
  [13572] (14031/2) Normal[13572] let m = __x3__
  [13573] (14026/1) Call[13573] app __x2__ = (ToNumber hour)
  [13574] (14022)Call[13574] app ms = (GetArgument argumentsList)
  [13575] (14040/4) Call[13575] app __x6__ = (ToNumber sec)
  [13576] (14041/4) Normal[13576] let s = [? __x6__]
  [13577] (14037/3) Call[13577] app __x5__ = (SecFromTime t)
  [13578] (14048/5) Normal[13578] let milli = [? __x8__]
  [13579] (14049/5) Call[13579] app __x9__ = (Day t)
  [13580] (14050/5) Call[13580] app __x10__ = (MakeTime h m s milli)
  [13581] (14042/4) If[13581] (= ms absent)
  [13582] (14044/4) Call[13582] app __x7__ = (msFromTime t)
  [13583] (14047/5) Call[13583] app __x8__ = (ToNumber ms)
  [13584] (14053/6) Call[13584] app __x12__ = (UTC date)
  [13585] (14054/6) Call[13585] app __x13__ = (TimeClip __x12__)
  [13586] (14052/5) Normal[13586] let date = __x11__
  [13587] (14045/4) Normal[13587] let milli = __x7__
  [13588] (14057/8) Normal[13588] return u
  [13589] Exit[13589]
  [13590] (14056/7) Normal[13590] this.DateValue = u
  [13591] (14038/3) Normal[13591] let s = __x5__
  [13592] (14051/5) Call[13592] app __x11__ = (MakeDate __x9__ __x10__)
  [13593] (14055/6) Normal[13593] let u = __x13__
Algo: GLOBAL.Date.prototype.setMilliseconds [1236]
  [13594] Entry[13594]
  [13595] (14059)Call[13595] app ms = (GetArgument argumentsList)
  [13596] (14063/1) Call[13596] app __x2__ = (ToNumber ms)
  [13597] (14064/1) Normal[13597] ms = [? __x2__]
  [13598] (14068/2) Call[13598] app __x6__ = (MakeTime __x3__ __x4__ __x5__ ms)
  [13599] (14069/2) Normal[13599] let time = __x6__
  [13600] (14072/3) Call[13600] app __x9__ = (UTC __x8__)
  [13601] (14073/3) Call[13601] app __x10__ = (TimeClip __x9__)
  [13602] (14060/0) Call[13602] app __x0__ = (thisTimeValue this)
  [13603] (14065/2) Call[13603] app __x3__ = (HourFromTime t)
  [13604] (14067/2) Call[13604] app __x5__ = (SecFromTime t)
  [13605] (14071/3) Call[13605] app __x8__ = (MakeDate __x7__ time)
  [13606] (14061/0) Call[13606] app __x1__ = (LocalTime [? __x0__])
  [13607] (14075/4) Normal[13607] this.DateValue = u
  [13608] (14076/5) Normal[13608] return u
  [13609] (14070/3) Call[13609] app __x7__ = (Day t)
  [13610] (14066/2) Call[13610] app __x4__ = (MinFromTime t)
  [13611] (14062/0) Normal[13611] let t = __x1__
  [13612] Exit[13612]
  [13613] (14074/3) Normal[13613] let u = __x10__
Algo: GLOBAL.Date.prototype.setMinutes [1237]
  [13614] Entry[13614]
  [13615] (14078)Call[13615] app min = (GetArgument argumentsList)
  [13616] (14082/0) Call[13616] app __x1__ = (LocalTime [? __x0__])
  [13617] (14083/0) Normal[13617] let t = __x1__
  [13618] (14088/2) Call[13618] app __x3__ = (SecFromTime t)
  [13619] (14089/2) Normal[13619] let s = __x3__
  [13620] (14093/3) If[13620] (= ms absent)
  [13621] (14095/3) Call[13621] app __x5__ = (msFromTime t)
  [13622] (14098/4) Call[13622] app __x6__ = (ToNumber ms)
  [13623] (14101/4) Call[13623] app __x8__ = (HourFromTime t)
  [13624] (14102/4) Call[13624] app __x9__ = (MakeTime __x8__ m s milli)
  [13625] (14079)Call[13625] app sec = (GetArgument argumentsList)
  [13626] (14084/1) Call[13626] app __x2__ = (ToNumber min)
  [13627] (14086/2) If[13627] (= sec absent)
  [13628] (14091/3) Call[13628] app __x4__ = (ToNumber sec)
  [13629] (14092/3) Normal[13629] let s = [? __x4__]
  [13630] (14080)Call[13630] app ms = (GetArgument argumentsList)
  [13631] (14099/4) Normal[13631] let milli = [? __x6__]
  [13632] (14085/1) Normal[13632] let m = [? __x2__]
  [13633] (14081/0) Call[13633] app __x0__ = (thisTimeValue this)
  [13634] (14100/4) Call[13634] app __x7__ = (Day t)
  [13635] (14096/3) Normal[13635] let milli = __x5__
  [13636] (14105/5) Call[13636] app __x11__ = (UTC date)
  [13637] (14106/5) Call[13637] app __x12__ = (TimeClip __x11__)
  [13638] (14107/5) Normal[13638] let u = __x12__
  [13639] (14109/7) Normal[13639] return u
  [13640] Exit[13640]
  [13641] (14103/4) Call[13641] app __x10__ = (MakeDate __x7__ __x9__)
  [13642] (14104/4) Normal[13642] let date = __x10__
  [13643] (14108/6) Normal[13643] this.DateValue = u
Algo: GLOBAL.Date.prototype.setMonth [1238]
  [13644] Entry[13644]
  [13645] (14111)Call[13645] app month = (GetArgument argumentsList)
  [13646] (14115/0) Normal[13646] let t = __x1__
  [13647] (14116/1) Call[13647] app __x2__ = (ToNumber month)
  [13648] (14121/2) Normal[13648] let dt = __x3__
  [13649] (14125/3) Call[13649] app __x5__ = (YearFromTime t)
  [13650] (14126/3) Call[13650] app __x6__ = (MakeDay __x5__ m dt)
  [13651] (14127/3) Call[13651] app __x7__ = (TimeWithinDay t)
  [13652] (14132/4) Normal[13652] let u = __x10__
  [13653] (14133/5) Normal[13653] this.DateValue = u
  [13654] (14112)Call[13654] app date = (GetArgument argumentsList)
  [13655] (14117/1) Normal[13655] let m = [? __x2__]
  [13656] (14134/6) Normal[13656] return u
  [13657] (14120/2) Call[13657] app __x3__ = (DateFromTime t)
  [13658] (14113/0) Call[13658] app __x0__ = (thisTimeValue this)
  [13659] (14129/3) Normal[13659] let newDate = __x8__
  [13660] (14130/4) Call[13660] app __x9__ = (UTC newDate)
  [13661] Exit[13661]
  [13662] (14124/3) Normal[13662] let dt = [? __x4__]
  [13663] (14118/2) If[13663] (= date absent)
  [13664] (14114/0) Call[13664] app __x1__ = (LocalTime [? __x0__])
  [13665] (14131/4) Call[13665] app __x10__ = (TimeClip __x9__)
  [13666] (14128/3) Call[13666] app __x8__ = (MakeDate __x6__ __x7__)
  [13667] (14123/3) Call[13667] app __x4__ = (ToNumber date)
Algo: GLOBAL.Date.prototype.setSeconds [1239]
  [13668] Entry[13668]
  [13669] (14136)Call[13669] app sec = (GetArgument argumentsList)
  [13670] (14140/0) Normal[13670] let t = __x1__
  [13671] (14141/1) Call[13671] app __x2__ = (ToNumber sec)
  [13672] (14146/2) Normal[13672] let milli = __x3__
  [13673] (14150/3) Call[13673] app __x5__ = (Day t)
  [13674] (14151/3) Call[13674] app __x6__ = (HourFromTime t)
  [13675] (14152/3) Call[13675] app __x7__ = (MinFromTime t)
  [13676] (14157/4) Call[13676] app __x11__ = (TimeClip __x10__)
  [13677] (14158/4) Normal[13677] let u = __x11__
  [13678] (14137)Call[13678] app ms = (GetArgument argumentsList)
  [13679] (14142/1) Normal[13679] let s = [? __x2__]
  [13680] (14159/5) Normal[13680] this.DateValue = u
  [13681] (14145/2) Call[13681] app __x3__ = (msFromTime t)
  [13682] (14138/0) Call[13682] app __x0__ = (thisTimeValue this)
  [13683] (14154/3) Call[13683] app __x9__ = (MakeDate __x5__ __x8__)
  [13684] (14155/3) Normal[13684] let date = __x9__
  [13685] (14160/6) Normal[13685] return u
  [13686] (14149/3) Normal[13686] let milli = [? __x4__]
  [13687] (14143/2) If[13687] (= ms absent)
  [13688] (14139/0) Call[13688] app __x1__ = (LocalTime [? __x0__])
  [13689] (14156/4) Call[13689] app __x10__ = (UTC date)
  [13690] (14153/3) Call[13690] app __x8__ = (MakeTime __x6__ __x7__ s milli)
  [13691] (14148/3) Call[13691] app __x4__ = (ToNumber ms)
  [13692] Exit[13692]
Algo: GLOBAL.Date.prototype.setTime [1240]
  [13693] Entry[13693]
  [13694] (14162)Call[13694] app time = (GetArgument argumentsList)
  [13695] (14166/1) Normal[13695] let t = [? __x1__]
  [13696] (14167/2) Call[13696] app __x2__ = (TimeClip t)
  [13697] (14163/0) Call[13697] app __x0__ = (thisTimeValue this)
  [13698] (14168/2) Normal[13698] let v = __x2__
  [13699] (14170/4) Normal[13699] return v
  [13700] Exit[13700]
  [13701] (14164/0) Normal[13701] [? __x0__]
  [13702] (14169/3) Normal[13702] this.DateValue = v
  [13703] (14165/1) Call[13703] app __x1__ = (ToNumber time)
Algo: GLOBAL.Date.prototype.setUTCDate [1241]
  [13704] Entry[13704]
  [13705] (14172)Call[13705] app date = (GetArgument argumentsList)
  [13706] (14176/1) Normal[13706] let dt = [? __x1__]
  [13707] (14177/2) Call[13707] app __x2__ = (YearFromTime t)
  [13708] (14181/2) Call[13708] app __x6__ = (MakeDate __x4__ __x5__)
  [13709] (14182/2) Normal[13709] let newDate = __x6__
  [13710] (14185/4) Normal[13710] this.DateValue = v
  [13711] (14186/5) Normal[13711] return v
  [13712] (14173/0) Call[13712] app __x0__ = (thisTimeValue this)
  [13713] (14178/2) Call[13713] app __x3__ = (MonthFromTime t)
  [13714] (14180/2) Call[13714] app __x5__ = (TimeWithinDay t)
  [13715] (14184/3) Normal[13715] let v = __x7__
  [13716] (14174/0) Normal[13716] let t = [? __x0__]
  [13717] (14183/3) Call[13717] app __x7__ = (TimeClip newDate)
  [13718] (14179/2) Call[13718] app __x4__ = (MakeDay __x2__ __x3__ dt)
  [13719] (14175/1) Call[13719] app __x1__ = (ToNumber date)
  [13720] Exit[13720]
Algo: GLOBAL.Date.prototype.setUTCFullYear [1242]
  [13721] Entry[13721]
  [13722] (14188)Call[13722] app year = (GetArgument argumentsList)
  [13723] (14192/0) Normal[13723] let t = [? __x0__]
  [13724] (14193/1) If[13724] (= t NaN)
  [13725] (14198/3) If[13725] (= month absent)
  [13726] (14200/3) Call[13726] app __x2__ = (MonthFromTime t)
  [13727] (14203/4) Call[13727] app __x3__ = (ToNumber month)
  [13728] (14204/4) Normal[13728] let m = [? __x3__]
  [13729] (14205/4) If[13729] (= date absent)
  [13730] (14212/5) Call[13730] app __x6__ = (MakeDay y m dt)
  [13731] (14213/5) Call[13731] app __x7__ = (TimeWithinDay t)
  [13732] (14189)Call[13732] app month = (GetArgument argumentsList)
  [13733] (14194/1) Normal[13733] t = 0i
  [13734] (14196/2) Call[13734] app __x1__ = (ToNumber year)
  [13735] (14214/5) Call[13735] app __x8__ = (MakeDate __x6__ __x7__)
  [13736] (14197/2) Normal[13736] let y = [? __x1__]
  [13737] (14190)Call[13737] app date = (GetArgument argumentsList)
  [13738] (14208/4) Normal[13738] let dt = __x4__
  [13739] (14201/3) Normal[13739] let m = __x2__
  [13740] (14191/0) Call[13740] app __x0__ = (thisTimeValue this)
  [13741] (14210/5) Call[13741] app __x5__ = (ToNumber date)
  [13742] (14211/5) Normal[13742] let dt = [? __x5__]
  [13743] (14207/4) Call[13743] app __x4__ = (DateFromTime t)
  [13744] (14216/6) Call[13744] app __x9__ = (TimeClip newDate)
  [13745] (14217/6) Normal[13745] let v = __x9__
  [13746] (14218/7) Normal[13746] this.DateValue = v
  [13747] (14215/5) Normal[13747] let newDate = __x8__
  [13748] (14219/8) Normal[13748] return v
  [13749] Exit[13749]
Algo: GLOBAL.Date.prototype.setUTCHours [1243]
  [13750] Entry[13750]
  [13751] (14221)Call[13751] app hour = (GetArgument argumentsList)
  [13752] (14225/0) Call[13752] app __x0__ = (thisTimeValue this)
  [13753] (14226/0) Normal[13753] let t = [? __x0__]
  [13754] (14231/2) Call[13754] app __x2__ = (MinFromTime t)
  [13755] (14232/2) Normal[13755] let m = __x2__
  [13756] (14236/3) If[13756] (= sec absent)
  [13757] (14238/3) Call[13757] app __x4__ = (SecFromTime t)
  [13758] (14241/4) Call[13758] app __x5__ = (ToNumber sec)
  [13759] (14222)Call[13759] app min = (GetArgument argumentsList)
  [13760] (14227/1) Call[13760] app __x1__ = (ToNumber hour)
  [13761] (14229/2) If[13761] (= min absent)
  [13762] (14234/3) Call[13762] app __x3__ = (ToNumber min)
  [13763] (14235/3) Normal[13763] let m = [? __x3__]
  [13764] (14223)Call[13764] app sec = (GetArgument argumentsList)
  [13765] (14242/4) Normal[13765] let s = [? __x5__]
  [13766] (14228/1) Normal[13766] let h = [? __x1__]
  [13767] (14224)Call[13767] app ms = (GetArgument argumentsList)
  [13768] (14243/4) If[13768] (= ms absent)
  [13769] (14239/3) Normal[13769] let s = __x4__
  [13770] (14250/5) Call[13770] app __x8__ = (Day t)
  [13771] (14251/5) Call[13771] app __x9__ = (MakeTime h m s milli)
  [13772] (14252/5) Call[13772] app __x10__ = (MakeDate __x8__ __x9__)
  [13773] (14245/4) Call[13773] app __x6__ = (msFromTime t)
  [13774] (14246/4) Normal[13774] let milli = __x6__
  [13775] (14255/6) Normal[13775] let v = __x11__
  [13776] (14256/7) Normal[13776] this.DateValue = v
  [13777] (14254/6) Call[13777] app __x11__ = (TimeClip newDate)
  [13778] (14248/5) Call[13778] app __x7__ = (ToNumber ms)
  [13779] (14249/5) Normal[13779] let milli = [? __x7__]
  [13780] (14253/5) Normal[13780] let newDate = __x10__
  [13781] (14257/8) Normal[13781] return v
  [13782] Exit[13782]
Algo: GLOBAL.Date.prototype.setUTCMilliseconds [1244]
  [13783] Entry[13783]
  [13784] (14259)Call[13784] app ms = (GetArgument argumentsList)
  [13785] (14263/1) Normal[13785] let milli = [? __x1__]
  [13786] (14264/2) Call[13786] app __x2__ = (HourFromTime t)
  [13787] (14268/2) Normal[13787] let time = __x5__
  [13788] (14269/3) Call[13788] app __x6__ = (Day t)
  [13789] (14272/3) Normal[13789] let v = __x8__
  [13790] (14273/4) Normal[13790] this.DateValue = v
  [13791] (14260/0) Call[13791] app __x0__ = (thisTimeValue this)
  [13792] (14265/2) Call[13792] app __x3__ = (MinFromTime t)
  [13793] (14267/2) Call[13793] app __x5__ = (MakeTime __x2__ __x3__ __x4__ milli)
  [13794] (14271/3) Call[13794] app __x8__ = (TimeClip __x7__)
  [13795] (14261/0) Normal[13795] let t = [? __x0__]
  [13796] (14270/3) Call[13796] app __x7__ = (MakeDate __x6__ time)
  [13797] (14266/2) Call[13797] app __x4__ = (SecFromTime t)
  [13798] (14262/1) Call[13798] app __x1__ = (ToNumber ms)
  [13799] (14274/5) Normal[13799] return v
  [13800] Exit[13800]
Algo: GLOBAL.Date.prototype.setUTCMinutes [1245]
  [13801] Entry[13801]
  [13802] (14276)Call[13802] app min = (GetArgument argumentsList)
  [13803] (14280/0) Normal[13803] let t = [? __x0__]
  [13804] (14281/1) Call[13804] app __x1__ = (ToNumber min)
  [13805] (14286/2) Normal[13805] let s = __x2__
  [13806] (14290/5) If[13806] (= ms absent)
  [13807] (14292/5) Call[13807] app __x4__ = (msFromTime t)
  [13808] (14293/5) Normal[13808] let milli = __x4__
  [13809] (14299/8) Call[13809] app __x8__ = (MakeTime __x7__ m s milli)
  [13810] (14300/8) Call[13810] app __x9__ = (MakeDate __x6__ __x8__)
  [13811] (14277)Call[13811] app sec = (GetArgument argumentsList)
  [13812] (14282/1) Normal[13812] let m = [? __x1__]
  [13813] (14301/8) Normal[13813] let date = __x9__
  [13814] (14285/2) Call[13814] app __x2__ = (SecFromTime t)
  [13815] (14295/7) Call[13815] app __x5__ = (ToNumber ms)
  [13816] (14278)Call[13816] app ms = (GetArgument argumentsList)
  [13817] (14296/7) Normal[13817] let milli = [? __x5__]
  [13818] (14297/8) Call[13818] app __x6__ = (Day t)
  [13819] (14302/9) Call[13819] app __x10__ = (TimeClip date)
  [13820] (14289/4) Normal[13820] let s = [? __x3__]
  [13821] (14283/2) If[13821] (= sec absent)
  [13822] (14279/0) Call[13822] app __x0__ = (thisTimeValue this)
  [13823] (14298/8) Call[13823] app __x7__ = (HourFromTime t)
  [13824] (14288/4) Call[13824] app __x3__ = (ToNumber sec)
  [13825] (14303/9) Normal[13825] let v = __x10__
  [13826] (14304/10) Normal[13826] this.DateValue = v
  [13827] (14305/11) Normal[13827] return v
  [13828] Exit[13828]
Algo: GLOBAL.Date.prototype.setUTCMonth [1246]
  [13829] Entry[13829]
  [13830] (14307)Call[13830] app month = (GetArgument argumentsList)
  [13831] (14311/1) Call[13831] app __x1__ = (ToNumber month)
  [13832] (14312/1) Normal[13832] let m = [? __x1__]
  [13833] (14318/4) Call[13833] app __x3__ = (ToNumber date)
  [13834] (14319/4) Normal[13834] let dt = [? __x3__]
  [13835] (14322/5) Call[13835] app __x6__ = (TimeWithinDay t)
  [13836] (14323/5) Call[13836] app __x7__ = (MakeDate __x5__ __x6__)
  [13837] (14328/8) Normal[13837] return v
  [13838] Exit[13838]
  [13839] (14308)Call[13839] app date = (GetArgument argumentsList)
  [13840] (14313/2) If[13840] (= date absent)
  [13841] (14316/2) Normal[13841] let dt = __x2__
  [13842] (14320/5) Call[13842] app __x4__ = (YearFromTime t)
  [13843] (14321/5) Call[13843] app __x5__ = (MakeDay __x4__ m dt)
  [13844] (14309/0) Call[13844] app __x0__ = (thisTimeValue this)
  [13845] (14325/6) Call[13845] app __x8__ = (TimeClip newDate)
  [13846] (14326/6) Normal[13846] let v = __x8__
  [13847] (14315/2) Call[13847] app __x2__ = (DateFromTime t)
  [13848] (14310/0) Normal[13848] let t = [? __x0__]
  [13849] (14327/7) Normal[13849] this.DateValue = v
  [13850] (14324/5) Normal[13850] let newDate = __x7__
Algo: GLOBAL.Date.prototype.setUTCSeconds [1247]
  [13851] Entry[13851]
  [13852] (14330)Call[13852] app sec = (GetArgument argumentsList)
  [13853] (14334/1) Call[13853] app __x1__ = (ToNumber sec)
  [13854] (14335/1) Normal[13854] let s = [? __x1__]
  [13855] (14341/4) Call[13855] app __x3__ = (ToNumber ms)
  [13856] (14342/4) Normal[13856] let milli = [? __x3__]
  [13857] (14345/5) Call[13857] app __x6__ = (MinFromTime t)
  [13858] (14346/5) Call[13858] app __x7__ = (MakeTime __x5__ __x6__ s milli)
  [13859] (14351/7) Normal[13859] this.DateValue = v
  [13860] (14352/8) Normal[13860] return v
  [13861] (14331)Call[13861] app ms = (GetArgument argumentsList)
  [13862] (14336/2) If[13862] (= ms absent)
  [13863] Exit[13863]
  [13864] (14339/2) Normal[13864] let milli = __x2__
  [13865] (14343/5) Call[13865] app __x4__ = (Day t)
  [13866] (14344/5) Call[13866] app __x5__ = (HourFromTime t)
  [13867] (14332/0) Call[13867] app __x0__ = (thisTimeValue this)
  [13868] (14348/5) Normal[13868] let date = __x8__
  [13869] (14349/6) Call[13869] app __x9__ = (TimeClip date)
  [13870] (14338/2) Call[13870] app __x2__ = (msFromTime t)
  [13871] (14333/0) Normal[13871] let t = [? __x0__]
  [13872] (14350/6) Normal[13872] let v = __x9__
  [13873] (14347/5) Call[13873] app __x8__ = (MakeDate __x4__ __x7__)
Algo: GLOBAL.Date.prototype.toDateString [1248]
  [13874] Entry[13874]
  [13875] (14354/0) Normal[13875] let O = this
  [13876] (14358/2) Normal[13876] return "Invalid Date"
  [13877] (14360/3) Call[13877] app __x1__ = (LocalTime tv)
  [13878] (14355/1) Call[13878] app __x0__ = (thisTimeValue O)
  [13879] (14361/3) Normal[13879] let t = __x1__
  [13880] (14363/4) Normal[13880] return __x2__
  [13881] Exit[13881]
  [13882] (14356/1) Normal[13882] let tv = [? __x0__]
  [13883] (14362/4) Call[13883] app __x2__ = (DateString t)
  [13884] (14357/2) If[13884] (= tv NaN)
Algo: GLOBAL.Date.prototype.toJSON [1249]
  [13885] Entry[13885]
  [13886] (14365)Call[13886] app key = (GetArgument argumentsList)
  [13887] (14369/1) Normal[13887] let tv = [? __x1__]
  [13888] (14370/2) If[13888] (&& (= (typeof tv) Number) (|| (|| (= tv Infinity) (= tv -Infinity)) (= tv NaN)))
  [13889] (14366/0) Call[13889] app __x0__ = (ToObject this)
  [13890] (14371/2) Normal[13890] return null
  [13891] (14373/3) Call[13891] app __x2__ = (Invoke O "toISOString")
  [13892] (14374/3) Normal[13892] return [? __x2__]
  [13893] Exit[13893]
  [13894] (14367/0) Normal[13894] let O = [? __x0__]
  [13895] (14368/1) Call[13895] app __x1__ = (ToPrimitive O ~number~)
Algo: GLOBAL.Date.prototype.toString [1250]
  [13896] Entry[13896]
  [13897] (14376/0) Call[13897] app __x0__ = (thisTimeValue this)
  [13898] (14377/0) Normal[13898] let tv = [? __x0__]
  [13899] (14378/1) Call[13899] app __x1__ = (ToDateString tv)
  [13900] (14379/1) Normal[13900] return __x1__
  [13901] Exit[13901]
Algo: GLOBAL.Date.prototype.toTimeString [1251]
  [13902] Entry[13902]
  [13903] (14381/0) Normal[13903] let O = this
  [13904] (14385/2) Normal[13904] return "Invalid Date"
  [13905] (14387/3) Call[13905] app __x1__ = (LocalTime tv)
  [13906] (14391/4) Normal[13906] return (+ __x2__ __x3__)
  [13907] Exit[13907]
  [13908] (14382/1) Call[13908] app __x0__ = (thisTimeValue O)
  [13909] (14388/3) Normal[13909] let t = __x1__
  [13910] (14390/4) Call[13910] app __x3__ = (TimeZoneString tv)
  [13911] (14383/1) Normal[13911] let tv = [? __x0__]
  [13912] (14389/4) Call[13912] app __x2__ = (TimeString t)
  [13913] (14384/2) If[13913] (= tv NaN)
Algo: GLOBAL.Date.prototype.toUTCString [1252]
  [13914] Entry[13914]
  [13915] (14393/0) Normal[13915] let O = this
  [13916] (14397/2) Normal[13916] return "Invalid Date"
  [13917] (14399/3) Normal[13917] ??? "Let id:{weekday} be the Name of the entry in link:{sec-todatestring-day-names} with the Number WeekDay ( id:{tv} ) ."
  [13918] (14403/6) Normal[13918] let yv = __x1__
  [13919] (14404/7) If[13919] (! (< yv 0i))
  [13920] (14407/8) Normal[13920] ??? "Let id:{year} be the String representation of abs ( ℝ ( id:{yv} ) ) , formatted as a decimal number ."
  [13921] (14408/9) Call[13921] app __x2__ = (StringPad year 4i "0" ~start~)
  [13922] (14394/1) Call[13922] app __x0__ = (thisTimeValue O)
  [13923] (14400/4) Normal[13923] ??? "Let id:{month} be the Name of the entry in link:{sec-todatestring-month-names} with the Number MonthFromTime ( id:{tv} ) ."
  [13924] (14402/6) Call[13924] app __x1__ = (YearFromTime tv)
  [13925] (14406/7) Normal[13925] let yearSign = "-"
  [13926] (14395/1) Normal[13926] let tv = [? __x0__]
  [13927] (14410/10) Call[13927] app __x3__ = (TimeString tv)
  [13928] (14411/10) Normal[13928] return (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ weekday ",") " ") day) " ") month) " ") yearSign) paddedYear) " ") __x3__)
  [13929] (14405/7) Normal[13929] let yearSign = ""
  [13930] (14401/5) Normal[13930] ??? "Let id:{day} be the String representation of DateFromTime ( id:{tv} ) , formatted as a two - digit decimal number , padded to the left with the code unit 0x0030 ( DIGIT ZERO ) if necessary ."
  [13931] (14396/2) If[13931] (= tv NaN)
  [13932] Exit[13932]
  [13933] (14409/9) Normal[13933] let paddedYear = [! __x2__]
Algo: GLOBAL.Date.prototype.valueOf [1253]
  [13934] Entry[13934]
  [13935] (14413/0) Call[13935] app __x0__ = (thisTimeValue this)
  [13936] (14414/0) Normal[13936] return [? __x0__]
  [13937] Exit[13937]
Algo: GLOBAL.Date.prototype[SYMBOL_toPrimitive] [1254]
  [13938] Entry[13938]
  [13939] (14416)Call[13939] app hint = (GetArgument argumentsList)
  [13940] (14421/2) If[13940] (|| (= hint "string") (= hint "default"))
  [13941] (14422/3) Normal[13941] let tryFirst = ~string~
  [13942] (14423/2) If[13942] (= hint "number")
  [13943] (14426/7) Call[13943] app __x0__ = (OrdinaryToPrimitive O tryFirst)
  [13944] (14427/7) Normal[13944] return [? __x0__]
  [13945] (14417/0) Normal[13945] let O = this
  [13946] (14425/2) Normal[13946] throw TypeError
  [13947] (14418/1) If[13947] (! (= (typeof O) Object))
  [13948] (14424/5) Normal[13948] let tryFirst = ~number~
  [13949] (14419/1) Normal[13949] throw TypeError
  [13950] Exit[13950]
Algo: GLOBAL.DefaultConstructorFunctions [1255]
  [13951] Entry[13951]
  [13952] (14429)Normal[13952] let args = argumentsList
  [13953] (14434/2) If[13953] (= F.ConstructorKind ~derived~)
  [13954] (14436/4) Call[13954] app __x0__ = (F.GetPrototypeOf F)
  [13955] (14445/9) Call[13955] app __x3__ = (OrdinaryCreateFromConstructor NewTarget "%Object.prototype%")
  [13956] (14440/5) Normal[13956] throw TypeError
  [13957] (14442/6) Call[13957] app __x2__ = (Construct func args NewTarget)
  [13958] (14446/9) Normal[13958] return [? __x3__]
  [13959] Exit[13959]
  [13960] (14430/0) If[13960] (= NewTarget undefined)
  [13961] (14437/4) Normal[13961] let func = [! __x0__]
  [13962] (14439/5) If[13962] (= __x1__ false)
  [13963] (14431/0) Normal[13963] throw TypeError
  [13964] (14433/1) Normal[13964] let F = CONTEXT.Function
  [13965] (14443/6) Normal[13965] return [? __x2__]
  [13966] (14438/5) Call[13966] app __x1__ = (IsConstructor func)
Algo: GLOBAL.Error [1256]
  [13967] Entry[13967]
  [13968] (14448)Call[13968] app message = (GetArgument argumentsList)
  [13969] (14452/1) Call[13969] app __x0__ = (OrdinaryCreateFromConstructor newTarget "%Error.prototype%" (new ["ErrorData"]))
  [13970] (14453/1) Normal[13970] let O = [? __x0__]
  [13971] (14458/4) Normal[13971] let msgDesc = (new PropertyDescriptor("Value" -> msg, "Writable" -> true, "Enumerable" -> false, "Configurable" -> true))
  [13972] (14459/5) Call[13972] app __x2__ = (DefinePropertyOrThrow O "message" msgDesc)
  [13973] (14449/0) If[13973] (= NewTarget undefined)
  [13974] (14454/2) If[13974] (! (= message undefined))
  [13975] (14457/3) Normal[13975] let msg = [? __x1__]
  [13976] (14462/6) Normal[13976] return O
  [13977] Exit[13977]
  [13978] (14450/0) Normal[13978] let newTarget = CONTEXT.Function
  [13979] (14451/0) Normal[13979] let newTarget = NewTarget
  [13980] (14460/5) Normal[13980] [! __x2__]
  [13981] (14456/3) Call[13981] app __x1__ = (ToString message)
Algo: GLOBAL.Error.prototype.toString [1257]
  [13982] Entry[13982]
  [13983] (14464/0) Normal[13983] let O = this
  [13984] (14469/2) Normal[13984] let name = [? __x0__]
  [13985] (14470/3) If[13985] (= name undefined)
  [13986] (14475/4) Call[13986] app __x2__ = (Get O "message")
  [13987] (14476/4) Normal[13987] let msg = [? __x2__]
  [13988] (14480/6) Call[13988] app __x3__ = (ToString msg)
  [13989] (14481/6) Normal[13989] msg = [? __x3__]
  [13990] (14488/8) Normal[13990] return (+ (+ (+ name ":") " ") msg)
  [13991] Exit[13991]
  [13992] (14465/1) If[13992] (! (= (typeof O) Object))
  [13993] (14471/3) Normal[13993] name = "Error"
  [13994] (14473/4) Call[13994] app __x1__ = (ToString name)
  [13995] (14474/4) Normal[13995] name = [? __x1__]
  [13996] (14478/5) Normal[13996] msg = ""
  [13997] (14482/6) If[13997] (= name "")
  [13998] (14466/1) Normal[13998] throw TypeError
  [13999] (14468/2) Call[13999] app __x0__ = (Get O "name")
  [14000] (14483/6) Normal[14000] return msg
  [14001] (14485/7) If[14001] (= msg "")
  [14002] (14477/5) If[14002] (= msg undefined)
  [14003] (14486/7) Normal[14003] return name
Algo: GLOBAL.EvalError [1258]
  [14004] Entry[14004]
  [14005] (14490)Call[14005] app message = (GetArgument argumentsList)
  [14006] (14491)Normal[14006] ??? "Need manual modeling"
  [14007] Exit[14007]
Algo: GLOBAL.FinalizationRegistry [1259]
  [14008] Entry[14008]
  [14009] (14493)Call[14009] app cleanupCallback = (GetArgument argumentsList)
  [14010] (14498/1) If[14010] (= __x0__ false)
  [14011] (14499/1) Normal[14011] throw TypeError
  [14012] (14501/2) Call[14012] app __x1__ = (OrdinaryCreateFromConstructor NewTarget "%FinalizationRegistry.prototype%" (new ["Realm", "CleanupCallback", "Cells"]))
  [14013] (14504/4) Normal[14013] finalizationRegistry.Realm = fn.Realm
  [14014] (14505/5) Normal[14014] finalizationRegistry.CleanupCallback = cleanupCallback
  [14015] (14494/0) If[14015] (= NewTarget undefined)
  [14016] (14503/3) Normal[14016] let fn = CONTEXT.Function
  [14017] (14507/7) Normal[14017] return finalizationRegistry
  [14018] Exit[14018]
  [14019] (14495/0) Normal[14019] throw TypeError
  [14020] (14497/1) Call[14020] app __x0__ = (IsCallable cleanupCallback)
  [14021] (14506/6) Normal[14021] finalizationRegistry.Cells = (new [])
  [14022] (14502/2) Normal[14022] let finalizationRegistry = [? __x1__]
Algo: GLOBAL.FinalizationRegistry.prototype.register [1260]
  [14023] Entry[14023]
  [14024] (14509)Call[14024] app target = (GetArgument argumentsList)
  [14025] (14513/1) Call[14025] app __x0__ = (RequireInternalSlot finalizationRegistry "Cells")
  [14026] (14514/1) Normal[14026] [? __x0__]
  [14027] (14519/3) If[14027] (= __x1__ true)
  [14028] (14520/3) Normal[14028] throw TypeError
  [14029] (14522/4) If[14029] (! (= (typeof unregisterToken) Object))
  [14030] (14525/5) Normal[14030] throw TypeError
  [14031] (14527/6) Normal[14031] unregisterToken = ~empty~
  [14032] (14510)Call[14032] app heldValue = (GetArgument argumentsList)
  [14033] (14515/2) If[14033] (! (= (typeof target) Object))
  [14034] (14518/3) Call[14034] app __x1__ = (SameValue target heldValue)
  [14035] (14524/5) If[14035] (! (= unregisterToken undefined))
  [14036] (14511)Call[14036] app unregisterToken = (GetArgument argumentsList)
  [14037] (14530/8) Normal[14037] append cell -> finalizationRegistry.Cells
  [14038] (14531/9) Normal[14038] return undefined
  [14039] (14529/7) Normal[14039] let cell = (new Record("WeakRefTarget" -> target, "HeldValue" -> heldValue, "UnregisterToken" -> unregisterToken))
  [14040] (14516/2) Normal[14040] throw TypeError
  [14041] (14512/0) Normal[14041] let finalizationRegistry = this
  [14042] Exit[14042]
Algo: GLOBAL.FinalizationRegistry.prototype.unregister [1261]
  [14043] Entry[14043]
  [14044] (14533)Call[14044] app unregisterToken = (GetArgument argumentsList)
  [14045] (14537/2) If[14045] (! (= (typeof unregisterToken) Object))
  [14046] (14538/2) Normal[14046] throw TypeError
  [14047] (14540/3) Normal[14047] let removed = false
  [14048] (14543/4) Loop[14048] (< __x2__ __x1__.length)
  [14049] (14545/4) Normal[14049] let cell = __x1__[__x2__]
  [14050] (14559/8) Normal[14050] return removed
  [14051] (14548/5) Normal[14051] __x3__ = (! (= cell.UnregisterToken ~empty~))
  [14052] (14549/5) If[14052] __x3__
  [14053] (14557/7) Normal[14053] removed = true
  [14054] LoopCont[14054]
  [14055] (14534/0) Normal[14055] let finalizationRegistry = this
  [14056] (14542/4) Normal[14056] let __x2__ = 0i
  [14057] (14547/5) Normal[14057] let __x3__ = true
  [14058] (14535/1) Call[14058] app __x0__ = (RequireInternalSlot finalizationRegistry "Cells")
  [14059] (14552/5) Normal[14059] __x3__ = (= __x4__ true)
  [14060] (14554/5) If[14060] __x3__
  [14061] Exit[14061]
  [14062] (14546/4) Normal[14062] __x2__ = (+ __x2__ 1i)
  [14063] (14541/4) Normal[14063] let __x1__ = finalizationRegistry.Cells
  [14064] (14536/1) Normal[14064] [? __x0__]
  [14065] (14556/6) Normal[14065] ??? "Remove id:{cell} from id:{finalizationRegistry} . [ [ Cells ] ] ."
  [14066] (14551/5) Call[14066] app __x4__ = (SameValue cell.UnregisterToken unregisterToken)
Algo: GLOBAL.ForInIteratorPrototype.next [1262]
  [14067] Entry[14067]
  [14068] (14561/0) Normal[14068] let O = this
  [14069] (14565/5) Normal[14069] let remaining = O.RemainingKeys
  [14070] (14566/6) Loop[14070] true
  [14071] (14572/9) Normal[14071] let __x1__ = keys
  [14072] (14573/9) Normal[14072] let __x2__ = 0i
  [14073] (14577/9) Normal[14073] __x2__ = (+ __x2__ 1i)
  [14074] (14578/10) If[14074] (= (typeof key) String)
  [14075] (14562/1) Normal[14075] assert (= (typeof O) Object)
  [14076] (14568/7) If[14076] (= O.ObjectWasVisited false)
  [14077] Exit[14077]
  [14078] (14571/8) Normal[14078] let keys = [? __x0__]
  [14079] (14576/9) Normal[14079] let key = __x1__[__x2__]
  [14080] (14563/3) Normal[14080] let object = O.Object
  [14081] (14574/9) Loop[14081] (< __x2__ __x1__.length)
  [14082] (14581/12) Normal[14082] O.ObjectWasVisited = true
  [14083] (14570/8) Call[14083] app __x0__ = (object.OwnPropertyKeys object)
  [14084] (14583/13) Loop[14084] (< 0i remaining.length)
  [14085] (14564/4) Normal[14085] let visited = O.VisitedKeys
  [14086] (14579/11) Normal[14086] append key -> remaining
  [14087] LoopCont[14087]
  [14088] (14590/16) Normal[14088] let desc = [? __x4__]
  [14089] (14591/16) If[14089] (! (= desc undefined))
  [14090] (14608/24) Normal[14090] return __x7__
  [14091] LoopCont[14091]
  [14092] (14593/16) Normal[14092] append r -> visited
  [14093] LoopCont[14093]
  [14094] (14585/14) Normal[14094] let r = remaining[0i]
  [14095] (14586/15) Normal[14095] let __x3__ = (pop remaining 0i)
  [14096] (14597/16) Normal[14096] return __x5__
  [14097] (14587/16) If[14097] (! (contains visited r))
  [14098] (14603/22) Normal[14098] O.Object = object
  [14099] (14604/23) Normal[14099] O.ObjectWasVisited = false
  [14100] (14596/16) Call[14100] app __x5__ = (CreateIterResultObject r false)
  [14101] (14602/21) Normal[14101] object = [? __x6__]
  [14102] (14605/24) If[14102] (= object null)
  [14103] (14589/16) Call[14103] app __x4__ = (object.GetOwnProperty object r)
  [14104] (14594/16) If[14104] (= desc.Enumerable true)
  [14105] (14607/24) Call[14105] app __x7__ = (CreateIterResultObject undefined true)
  [14106] (14601/21) Call[14106] app __x6__ = (object.GetPrototypeOf object)
Algo: GLOBAL.Function [1263]
  [14107] Entry[14107]
  [14108] (14611/0) Normal[14108] let C = CONTEXT.Function
  [14109] (14612/1) Normal[14109] let args = argumentsList
  [14110] (14613/2) Call[14110] app __x0__ = (CreateDynamicFunction C NewTarget ~normal~ args)
  [14111] (14614/2) Normal[14111] return [? __x0__]
  [14112] Exit[14112]
Algo: GLOBAL.Function.prototype [1264]
  [14113] Entry[14113]
  [14114] (14615)Normal[14114] return undefined
  [14115] Exit[14115]
Algo: GLOBAL.Function.prototype.apply [1265]
  [14116] Entry[14116]
  [14117] (14617)Call[14117] app thisArg = (GetArgument argumentsList)
  [14118] (14621/1) If[14118] (= __x0__ false)
  [14119] (14622/1) Normal[14119] throw TypeError
  [14120] (14624/2) If[14120] (|| (= argArray undefined) (= argArray null))
  [14121] (14628/4) Call[14121] app __x2__ = (Call func thisArg)
  [14122] (14629/4) Normal[14122] return [? __x2__]
  [14123] (14633/6) Call[14123] app __x4__ = (PrepareForTailCall)
  [14124] (14634/6) Normal[14124] __x4__
  [14125] (14618)Call[14125] app argArray = (GetArgument argumentsList)
  [14126] (14627/3) Normal[14126] __x1__
  [14127] (14632/5) Normal[14127] let argList = [? __x3__]
  [14128] (14619/0) Normal[14128] let func = this
  [14129] (14636/7) Normal[14129] return [? __x5__]
  [14130] Exit[14130]
  [14131] (14631/5) Call[14131] app __x3__ = (CreateListFromArrayLike argArray)
  [14132] (14626/3) Call[14132] app __x1__ = (PrepareForTailCall)
  [14133] (14620/1) Call[14133] app __x0__ = (IsCallable func)
  [14134] (14635/7) Call[14134] app __x5__ = (Call func thisArg argList)
Algo: GLOBAL.Function.prototype.bind [1266]
  [14135] Entry[14135]
  [14136] (14638)Call[14136] app thisArg = (GetArgument argumentsList)
  [14137] (14642/1) If[14137] (= __x0__ false)
  [14138] (14643/1) Normal[14138] throw TypeError
  [14139] (14645/2) Call[14139] app __x1__ = (BoundFunctionCreate Target thisArg args)
  [14140] (14648/4) Call[14140] app __x2__ = (HasOwnProperty Target "length")
  [14141] (14649/4) Normal[14141] let targetHasLength = [? __x2__]
  [14142] (14653/6) Normal[14142] let targetLen = [? __x3__]
  [14143] (14654/7) If[14143] (= (typeof targetLen) Number)
  [14144] (14639)Normal[14144] let args = argumentsList
  [14145] (14647/3) Normal[14145] let L = 0i
  [14146] (14652/6) Call[14146] app __x3__ = (Get Target "length")
  [14147] (14640/0) Normal[14147] let Target = this
  [14148] (14650/5) If[14148] (= targetHasLength true)
  [14149] (14668/15) Call[14149] app __x6__ = (SetFunctionLength F L)
  [14150] (14646/2) Normal[14150] let F = [? __x1__]
  [14151] (14641/1) Call[14151] app __x0__ = (IsCallable Target)
  [14152] (14657/8) If[14152] (= targetLen -Infinity)
  [14153] (14658/9) Normal[14153] L = 0i
  [14154] (14660/11) Call[14154] app __x4__ = (ToIntegerOrInfinity targetLen)
  [14155] (14655/8) If[14155] (= targetLen Infinity)
  [14156] (14664/14) Call[14156] app __x5__ = (max (- targetLenAsInt argCount) 0i)
  [14157] (14665/14) Normal[14157] L = __x5__
  [14158] (14661/11) Normal[14158] let targetLenAsInt = [! __x4__]
  [14159] (14671/16) Normal[14159] let targetName = [? __x7__]
  [14160] (14672/17) If[14160] (! (= (typeof targetName) String))
  [14161] (14670/16) Call[14161] app __x7__ = (Get Target "name")
  [14162] (14662/12) Normal[14162] assert (! (|| (|| (= targetLenAsInt Infinity) (= targetLenAsInt -Infinity)) (= targetLenAsInt NaN)))
  [14163] (14676/18) Normal[14163] __x8__
  [14164] (14677/19) Normal[14164] return F
  [14165] (14656/8) Normal[14165] L = Infinity
  [14166] (14675/18) Call[14166] app __x8__ = (SetFunctionName F targetName "bound")
  [14167] Exit[14167]
  [14168] (14663/13) Normal[14168] let argCount = args.length
  [14169] (14669/15) Normal[14169] [! __x6__]
  [14170] (14673/17) Normal[14170] targetName = ""
Algo: GLOBAL.Function.prototype.call [1267]
  [14171] Entry[14171]
  [14172] (14679)Call[14172] app thisArg = (GetArgument argumentsList)
  [14173] (14683/1) If[14173] (= __x0__ false)
  [14174] (14684/1) Normal[14174] throw TypeError
  [14175] (14686/2) Call[14175] app __x1__ = (PrepareForTailCall)
  [14176] (14689/3) Normal[14176] return [? __x2__]
  [14177] Exit[14177]
  [14178] (14680)Normal[14178] let args = argumentsList
  [14179] (14688/3) Call[14179] app __x2__ = (Call func thisArg args)
  [14180] (14681/0) Normal[14180] let func = this
  [14181] (14687/2) Normal[14181] __x1__
  [14182] (14682/1) Call[14182] app __x0__ = (IsCallable func)
Algo: GLOBAL.Function.prototype.toString [1268]
  [14183] Entry[14183]
  [14184] (14691)Normal[14184] let func = this
  [14185] (14698)Normal[14185] return (+ (+ "function " func.InitialName) "() { [native code] }")
  [14186] (14700)Call[14186] app callable = (IsCallable func)
  [14187] (14692)If[14187] (&& (= (typeof func) Object) (= (typeof func.SourceText) String))
  [14188] (14701)If[14188] (&& (= (typeof func) Object) callable)
  [14189] (14705)Normal[14189] throw TypeError
  [14190] Exit[14190]
  [14191] (14694)Normal[14191] return func.SourceText
  [14192] (14696)If[14192] (is-instance-of func BuiltinFunctionObject)
  [14193] (14703)Normal[14193] return "function () { [native code] }"
Algo: GLOBAL.Function.prototype[SYMBOL_hasInstance] [1269]
  [14194] Entry[14194]
  [14195] (14707)Call[14195] app V = (GetArgument argumentsList)
  [14196] (14708/0) Normal[14196] let F = this
  [14197] (14709/1) Call[14197] app __x0__ = (OrdinaryHasInstance F V)
  [14198] (14710/1) Normal[14198] return [? __x0__]
  [14199] Exit[14199]
Algo: GLOBAL.Generator.prototype.next [1270]
  [14200] Entry[14200]
  [14201] (14712)Call[14201] app value = (GetArgument argumentsList)
  [14202] (14713/0) Normal[14202] let g = this
  [14203] (14714/1) Call[14203] app __x0__ = (GeneratorResume g value ~empty~)
  [14204] (14715/1) Normal[14204] return [? __x0__]
  [14205] Exit[14205]
Algo: GLOBAL.Generator.prototype.return [1271]
  [14206] Entry[14206]
  [14207] (14717)Call[14207] app value = (GetArgument argumentsList)
  [14208] (14721/2) Normal[14208] return [? __x0__]
  [14209] Exit[14209]
  [14210] (14718/0) Normal[14210] let g = this
  [14211] (14719/1) Normal[14211] let C = (comp[~return~] value => ~empty~)
  [14212] (14720/2) Call[14212] app __x0__ = (GeneratorResumeAbrupt g C ~empty~)
Algo: GLOBAL.Generator.prototype.throw [1272]
  [14213] Entry[14213]
  [14214] (14723)Call[14214] app exception = (GetArgument argumentsList)
  [14215] (14727/2) Call[14215] app __x1__ = (GeneratorResumeAbrupt g C ~empty~)
  [14216] (14728/2) Normal[14216] return [? __x1__]
  [14217] (14724/0) Normal[14217] let g = this
  [14218] Exit[14218]
  [14219] (14725/1) Call[14219] app __x0__ = (ThrowCompletion exception)
  [14220] (14726/1) Normal[14220] let C = __x0__
Algo: GLOBAL.GeneratorFunction [1273]
  [14221] Entry[14221]
  [14222] (14730/0) Normal[14222] let C = CONTEXT.Function
  [14223] (14731/1) Normal[14223] let args = argumentsList
  [14224] (14732/2) Call[14224] app __x0__ = (CreateDynamicFunction C NewTarget ~generator~ args)
  [14225] (14733/2) Normal[14225] return [? __x0__]
  [14226] Exit[14226]
Algo: GLOBAL.GetCapabilitiesExecutorFunctions [1274]
  [14227] Entry[14227]
  [14228] (14735)Call[14228] app resolve = (GetArgument argumentsList)
  [14229] (14739)Normal[14229] let promiseCapability = F.Capability
  [14230] (14740)If[14230] (! (= promiseCapability.Resolve undefined))
  [14231] (14746)Normal[14231] promiseCapability.Resolve = resolve
  [14232] (14747)Normal[14232] promiseCapability.Reject = reject
  [14233] (14736)Call[14233] app reject = (GetArgument argumentsList)
  [14234] (14741)Normal[14234] throw TypeError
  [14235] (14743)If[14235] (! (= promiseCapability.Reject undefined))
  [14236] (14744)Normal[14236] throw TypeError
  [14237] (14737)Normal[14237] let capability = (new PromiseCapabilityRecord("Resolve" -> undefined, "Reject" -> undefined))
  [14238] (14748)Normal[14238] return undefined
  [14239] Exit[14239]
  [14240] (14738)Normal[14240] let F = CONTEXT.Function
Algo: GLOBAL.HostPrint [1275]
  [14241] Entry[14241]
  [14242] (14750)Call[14242] app str = (GetArgument argumentsList)
  [14243] (14751)Normal[14243] print [? str]
  [14244] (14752)Normal[14244] return undefined
  [14245] Exit[14245]
Algo: GLOBAL.IfAbruptRejectPromise [1276]
  [14246] Entry[14246]
  [14247] (14754)Call[14247] app value = (GetArgument argumentsList)
  [14248] (14759/1) Call[14248] app __x1__ = (Call capability.Reject undefined (new [value.Value]))
  [14249] (14760/1) Normal[14249] [? __x1__]
  [14250] (14755)Call[14250] app capability = (GetArgument argumentsList)
  [14251] (14761/2) Normal[14251] return capability.Promise
  [14252] (14763/3) Normal[14252] value = value.Value
  [14253] Exit[14253]
  [14254] (14756/0) Call[14254] app __x0__ = (IsAbruptCompletion value)
  [14255] (14757/0) If[14255] __x0__
  [14256] (14762/0) If[14256] (is-completion value)
Algo: GLOBAL.InternalizeJSONProperty [1277]
  [14257] Entry[14257]
  [14258] (14766)Call[14258] app holder = (GetArgument argumentsList)
  [14259] (14770/0) Normal[14259] let val = [? __x0__]
  [14260] (14771/1) If[14260] (= (typeof val) Object)
  [14261] (14777/4) Normal[14261] let I = 0i
  [14262] (14778/5) Call[14262] app __x2__ = (LengthOfArrayLike val)
  [14263] (14782/7) Call[14263] app __x3__ = (ToString I)
  [14264] (14783/7) Normal[14264] let prop = [! __x3__]
  [14265] (14767)Call[14265] app name = (GetArgument argumentsList)
  [14266] (14773/2) Call[14266] app __x1__ = (IsArray val)
  [14267] (14813/22) Call[14267] app __x13__ = (Call reviver holder (new [name, val]))
  [14268] (14775/3) If[14268] (= isArray true)
  [14269] (14795/15) Call[14269] app __x7__ = (EnumerableOwnPropertyNames val ~key~)
  [14270] (14768)Call[14270] app reviver = (GetArgument argumentsList)
  [14271] (14779/5) Normal[14271] let len = [? __x2__]
  [14272] (14780/6) Loop[14272] (< I len)
  [14273] (14786/9) If[14273] (= newElement undefined)
  [14274] (14788/10) Call[14274] app __x5__ = (val.Delete val prop)
  [14275] (14791/12) Call[14275] app __x6__ = (CreateDataProperty val prop newElement)
  [14276] (14774/2) Normal[14276] let isArray = [? __x1__]
  [14277] (14769/0) Call[14277] app __x0__ = (Get holder name)
  [14278] (14784/8) Call[14278] app __x4__ = (InternalizeJSONProperty val prop reviver)
  [14279] LoopCont[14279]
  [14280] (14810/21) Call[14280] app __x12__ = (CreateDataProperty val P newElement)
  [14281] (14811/21) Normal[14281] [? __x12__]
  [14282] (14796/15) Normal[14282] let keys = [? __x7__]
  [14283] (14789/10) Normal[14283] [? __x5__]
  [14284] (14793/13) Normal[14284] I = (+ I 1i)
  [14285] (14799/16) Loop[14285] (< __x9__ __x8__.length)
  [14286] (14801/16) Normal[14286] let P = __x8__[__x9__]
  [14287] (14792/12) Normal[14287] [? __x6__]
  [14288] (14804/17) Normal[14288] let newElement = [? __x10__]
  [14289] (14805/18) If[14289] (= newElement undefined)
  [14290] (14798/16) Normal[14290] let __x9__ = 0i
  [14291] LoopCont[14291]
  [14292] (14814/22) Normal[14292] return [? __x13__]
  [14293] Exit[14293]
  [14294] (14785/8) Normal[14294] let newElement = [? __x4__]
  [14295] (14803/17) Call[14295] app __x10__ = (InternalizeJSONProperty val P reviver)
  [14296] (14807/19) Call[14296] app __x11__ = (val.Delete val P)
  [14297] (14797/16) Normal[14297] let __x8__ = keys
  [14298] (14808/19) Normal[14298] [? __x11__]
  [14299] (14802/16) Normal[14299] __x9__ = (+ __x9__ 1i)
Algo: GLOBAL.IteratorPrototype[SYMBOL_iterator] [1278]
  [14300] Entry[14300]
  [14301] (14815/0) Normal[14301] return this
  [14302] Exit[14302]
Algo: GLOBAL.JSON.parse [1279]
  [14303] Entry[14303]
  [14304] (14817)Call[14304] app text = (GetArgument argumentsList)
  [14305] (14821/1) Normal[14305] ??? "Parse ! StringToCodePoints ( id:{jsonString} ) as a JSON text as specified in ECMA - 404 . Throw a value:{SyntaxError} exception if it is not a valid JSON text as defined in that specification ."
  [14306] (14822/2) Normal[14306] let scriptString = (+ (+ "(" jsonString) ");")
  [14307] (14826/5) Normal[14307] ??? "Let id:{completion} be the result of evaluating id:{script} . The extended PropertyDefinitionEvaluation semantics defined in link:{sec-__proto__-property-names-in-object-initializers} must not be used during the evaluation ."
  [14308] (14827/6) Normal[14308] let unfiltered = completion.Value
  [14309] (14831/9) Call[14309] app __x3__ = (OrdinaryObjectCreate INTRINSICS["%Object.prototype%"])
  [14310] (14832/9) Normal[14310] let root = [! __x3__]
  [14311] (14837/12) Normal[14311] return [? __x5__]
  [14312] Exit[14312]
  [14313] (14818)Call[14313] app reviver = (GetArgument argumentsList)
  [14314] (14823/3) Call[14314] app __x1__ = (StringToCodePoints scriptString)
  [14315] (14838/8) Normal[14315] return unfiltered
  [14316] (14825/4) Normal[14316] assert (= (typeof script) "AST")
  [14317] (14829/8) If[14317] (= __x2__ true)
  [14318] (14819/0) Call[14318] app __x0__ = (ToString text)
  [14319] (14834/11) Call[14319] app __x4__ = (CreateDataPropertyOrThrow root rootName unfiltered)
  [14320] (14835/11) Normal[14320] [! __x4__]
  [14321] (14828/8) Call[14321] app __x2__ = (IsCallable reviver)
  [14322] (14824/3) Normal[14322] let script = [! __x1__]
  [14323] (14820/0) Normal[14323] let jsonString = [? __x0__]
  [14324] (14836/12) Call[14324] app __x5__ = (InternalizeJSONProperty root rootName reviver)
  [14325] (14833/10) Normal[14325] let rootName = ""
Algo: GLOBAL.JSON.stringify [1280]
  [14326] Entry[14326]
  [14327] (14840)Call[14327] app value = (GetArgument argumentsList)
  [14328] (14844/1) Normal[14328] let indent = ""
  [14329] (14845/2) Normal[14329] let PropertyList = undefined
  [14330] (14841)Call[14330] app replacer = (GetArgument argumentsList)
  [14331] (14846/2) Normal[14331] let ReplacerFunction = undefined
  [14332] (14842)Call[14332] app space = (GetArgument argumentsList)
  [14333] (14847/3) If[14333] (= (typeof replacer) Object)
  [14334] (14849/4) Call[14334] app __x0__ = (IsCallable replacer)
  [14335] (14881/23) If[14335] (= (typeof space) Object)
  [14336] (14843/0) Normal[14336] let stack = (new [])
  [14337] (14850/4) If[14337] (= __x0__ true)
  [14338] (14851/5) Normal[14338] ReplacerFunction = replacer
  [14339] (14853/7) Call[14339] app __x1__ = (IsArray replacer)
  [14340] (14907/39) Call[14340] app __x12__ = (SerializeJSONProperty state "" wrapper)
  [14341] (14908/39) Normal[14341] return [? __x12__]
  [14342] (14892/28) If[14342] (= (typeof space) Number)
  [14343] (14894/29) Call[14343] app __x8__ = (ToIntegerOrInfinity space)
  [14344] (14899/28) If[14344] (= (typeof space) String)
  [14345] (14867/15) Normal[14345] let item = undefined
  [14346] (14868/16) If[14346] (= (typeof v) String)
  [14347] (14884/25) Call[14347] app __x6__ = (ToNumber space)
  [14348] (14885/25) Normal[14348] space = [? __x6__]
  [14349] (14869/16) Normal[14349] item = v
  [14350] (14870/16) If[14350] (= (typeof v) Number)
  [14351] (14903/36) Normal[14351] let wrapper = [! __x10__]
  [14352] (14904/37) Call[14352] app __x11__ = (CreateDataPropertyOrThrow wrapper "" value)
  [14353] (14855/8) If[14353] (= isArray true)
  [14354] (14857/9) Normal[14354] PropertyList = (new [])
  [14355] (14863/13) Call[14355] app __x3__ = (ToString k)
  [14356] (14864/13) Normal[14356] let prop = [! __x3__]
  [14357] (14897/30) Normal[14357] spaceMV = __x9__
  [14358] (14898/31) Normal[14358] ??? "If id:{spaceMV} < 1 , let id:{gap} be the empty String ; otherwise let id:{gap} be the String value containing id:{spaceMV} occurrences of the code unit 0x0020 ( SPACE ) ."
  [14359] Exit[14359]
  [14360] (14873/17) Normal[14360] item = [! __x5__]
  [14361] (14877/20) Normal[14361] ??? "If id:{item} is not value:{undefined} and id:{item} is not currently an element of id:{PropertyList} , then in:{} out:{}"
  [14362] (14865/14) Call[14362] app __x4__ = (Get replacer prop)
  [14363] (14878/22) Normal[14363] k = (+ k 1i)
  [14364] LoopCont[14364]
  [14365] (14872/17) Call[14365] app __x5__ = (ToString v)
  [14366] (14905/37) Normal[14366] [! __x11__]
  [14367] (14854/7) Normal[14367] let isArray = [? __x1__]
  [14368] (14889/27) Normal[14368] space = [? __x7__]
  [14369] (14896/30) Call[14369] app __x9__ = (min 10i spaceMV)
  [14370] (14859/10) Normal[14370] let len = [? __x2__]
  [14371] (14860/11) Normal[14371] let k = 0i
  [14372] (14861/12) Loop[14372] (< k len)
  [14373] (14866/14) Normal[14373] let v = [? __x4__]
  [14374] (14895/29) Normal[14374] let spaceMV = [! __x8__]
  [14375] (14874/16) If[14375] (= (typeof v) Object)
  [14376] (14906/38) Normal[14376] let state = (new Record("ReplacerFunction" -> ReplacerFunction, "Stack" -> stack, "Indent" -> indent, "Gap" -> gap, "PropertyList" -> PropertyList))
  [14377] (14900/33) Normal[14377] ??? "If the length of id:{space} is 10 or less , let id:{gap} be id:{space} ; otherwise let id:{gap} be the substring of id:{space} from 0 to 10 ."
  [14378] (14902/36) Call[14378] app __x10__ = (OrdinaryObjectCreate INTRINSICS["%Object.prototype%"])
  [14379] (14886/24) If[14379] (! (= space.StringData absent))
  [14380] (14888/27) Call[14380] app __x7__ = (ToString space)
  [14381] (14882/24) If[14381] (! (= space.NumberData absent))
  [14382] (14901/28) Normal[14382] let gap = ""
  [14383] (14858/10) Call[14383] app __x2__ = (LengthOfArrayLike replacer)
  [14384] (14875/19) Normal[14384] ??? "If id:{v} has a [ [ StringData ] ] or [ [ NumberData ] ] internal slot , set id:{item} to ? ToString ( id:{v} ) ."
Algo: GLOBAL.Map [1281]
  [14385] Entry[14385]
  [14386] (14910)Call[14386] app iterable = (GetArgument argumentsList)
  [14387] (14915/1) Normal[14387] let map = [? __x0__]
  [14388] (14916/2) Normal[14388] map.MapData = (new [])
  [14389] (14921/4) Normal[14389] let adder = [? __x1__]
  [14390] (14922/5) Call[14390] app __x2__ = (AddEntriesFromIterable map iterable adder)
  [14391] (14911/0) If[14391] (= NewTarget undefined)
  [14392] (14917/3) If[14392] (|| (= iterable undefined) (= iterable null))
  [14393] (14920/4) Call[14393] app __x1__ = (Get map "set")
  [14394] (14912/0) Normal[14394] throw TypeError
  [14395] (14914/1) Call[14395] app __x0__ = (OrdinaryCreateFromConstructor NewTarget "%Map.prototype%" (new ["MapData"]))
  [14396] (14923/5) Normal[14396] return [? __x2__]
  [14397] Exit[14397]
  [14398] (14918/3) Normal[14398] return map
Algo: GLOBAL.Map.prototype.clear [1282]
  [14399] Entry[14399]
  [14400] (14925/0) Normal[14400] let M = this
  [14401] (14929/3) Normal[14401] let __x1__ = entries
  [14402] (14930/3) Normal[14402] let __x2__ = 0i
  [14403] (14935/4) Normal[14403] p.Key = ~empty~
  [14404] (14936/5) Normal[14404] p.Value = ~empty~
  [14405] (14926/1) Call[14405] app __x0__ = (RequireInternalSlot M "MapData")
  [14406] (14931/3) Loop[14406] (< __x2__ __x1__.length)
  [14407] (14934/3) Normal[14407] __x2__ = (+ __x2__ 1i)
  [14408] (14937/6) Normal[14408] return undefined
  [14409] Exit[14409]
  [14410] (14927/1) Normal[14410] [? __x0__]
  [14411] LoopCont[14411]
  [14412] (14933/3) Normal[14412] let p = __x1__[__x2__]
  [14413] (14928/2) Normal[14413] let entries = M.MapData
Algo: GLOBAL.Map.prototype.delete [1283]
  [14414] Entry[14414]
  [14415] (14939)Call[14415] app key = (GetArgument argumentsList)
  [14416] (14943/2) Normal[14416] let entries = M.MapData
  [14417] (14944/3) Normal[14417] let __x1__ = entries
  [14418] (14949/3) Normal[14418] __x2__ = (+ __x2__ 1i)
  [14419] (14950/4) Normal[14419] let __x3__ = true
  [14420] (14954/4) Call[14420] app __x4__ = (SameValueZero p.Key key)
  [14421] (14955/4) Normal[14421] __x3__ = (= __x4__ true)
  [14422] LoopCont[14422]
  [14423] (14946/3) Loop[14423] (< __x2__ __x1__.length)
  [14424] (14940/0) Normal[14424] let M = this
  [14425] (14945/3) Normal[14425] let __x2__ = 0i
  [14426] (14963/8) Normal[14426] return false
  [14427] Exit[14427]
  [14428] (14948/3) Normal[14428] let p = __x1__[__x2__]
  [14429] (14952/4) If[14429] __x3__
  [14430] (14957/4) If[14430] __x3__
  [14431] (14941/1) Call[14431] app __x0__ = (RequireInternalSlot M "MapData")
  [14432] (14959/5) Normal[14432] p.Key = ~empty~
  [14433] (14960/6) Normal[14433] p.Value = ~empty~
  [14434] (14951/4) Normal[14434] __x3__ = (! (= p.Key ~empty~))
  [14435] (14942/1) Normal[14435] [? __x0__]
  [14436] (14961/7) Normal[14436] return true
Algo: GLOBAL.Map.prototype.entries [1284]
  [14437] Entry[14437]
  [14438] (14965/0) Normal[14438] let M = this
  [14439] (14966/1) Call[14439] app __x0__ = (CreateMapIterator M ~key+value~)
  [14440] (14967/1) Normal[14440] return [? __x0__]
  [14441] Exit[14441]
Algo: GLOBAL.Map.prototype.forEach [1285]
  [14442] Entry[14442]
  [14443] (14969)Call[14443] app callbackfn = (GetArgument argumentsList)
  [14444] (14973/1) Normal[14444] [? __x0__]
  [14445] (14974/2) Call[14445] app __x1__ = (IsCallable callbackfn)
  [14446] (14979/4) Normal[14446] let __x2__ = entries
  [14447] (14980/4) Normal[14447] let __x3__ = 0i
  [14448] (14984/4) Normal[14448] __x3__ = (+ __x3__ 1i)
  [14449] (14985/5) If[14449] (! (= e.Key ~empty~))
  [14450] (14970)Call[14450] app thisArg = (GetArgument argumentsList)
  [14451] (14975/2) If[14451] (= __x1__ false)
  [14452] (14978/3) Normal[14452] let entries = M.MapData
  [14453] (14983/4) Normal[14453] let e = __x2__[__x3__]
  [14454] (14971/0) Normal[14454] let M = this
  [14455] (14988/6) Normal[14455] [? __x4__]
  [14456] LoopCont[14456]
  [14457] (14981/4) Loop[14457] (< __x3__ __x2__.length)
  [14458] (14990/7) Normal[14458] return undefined
  [14459] (14976/2) Normal[14459] throw TypeError
  [14460] (14972/1) Call[14460] app __x0__ = (RequireInternalSlot M "MapData")
  [14461] (14987/6) Call[14461] app __x4__ = (Call callbackfn thisArg (new [e.Value, e.Key, M]))
  [14462] Exit[14462]
Algo: GLOBAL.Map.prototype.get [1286]
  [14463] Entry[14463]
  [14464] (14992)Call[14464] app key = (GetArgument argumentsList)
  [14465] (14996/2) Normal[14465] let entries = M.MapData
  [14466] (14997/3) Normal[14466] let __x1__ = entries
  [14467] (15002/3) Normal[14467] __x2__ = (+ __x2__ 1i)
  [14468] (15003/4) Normal[14468] let __x3__ = true
  [14469] (15007/4) Call[14469] app __x4__ = (SameValueZero p.Key key)
  [14470] (15008/4) Normal[14470] __x3__ = (= __x4__ true)
  [14471] (14993/0) Normal[14471] let M = this
  [14472] (14998/3) Normal[14472] let __x2__ = 0i
  [14473] (15001/3) Normal[14473] let p = __x1__[__x2__]
  [14474] (15005/4) If[14474] __x3__
  [14475] (15010/4) If[14475] __x3__
  [14476] (14994/1) Call[14476] app __x0__ = (RequireInternalSlot M "MapData")
  [14477] (15011/4) Normal[14477] return p.Value
  [14478] LoopCont[14478]
  [14479] (15004/4) Normal[14479] __x3__ = (! (= p.Key ~empty~))
  [14480] (14999/3) Loop[14480] (< __x2__ __x1__.length)
  [14481] (14995/1) Normal[14481] [? __x0__]
  [14482] (15013/5) Normal[14482] return undefined
  [14483] Exit[14483]
Algo: GLOBAL.Map.prototype.has [1287]
  [14484] Entry[14484]
  [14485] (15015)Call[14485] app key = (GetArgument argumentsList)
  [14486] (15019/2) Normal[14486] let entries = M.MapData
  [14487] (15020/3) Normal[14487] let __x1__ = entries
  [14488] (15025/3) Normal[14488] __x2__ = (+ __x2__ 1i)
  [14489] (15026/4) Normal[14489] let __x3__ = true
  [14490] (15030/4) Call[14490] app __x4__ = (SameValueZero p.Key key)
  [14491] (15031/4) Normal[14491] __x3__ = (= __x4__ true)
  [14492] (15016/0) Normal[14492] let M = this
  [14493] (15021/3) Normal[14493] let __x2__ = 0i
  [14494] (15024/3) Normal[14494] let p = __x1__[__x2__]
  [14495] (15028/4) If[14495] __x3__
  [14496] (15033/4) If[14496] __x3__
  [14497] (15017/1) Call[14497] app __x0__ = (RequireInternalSlot M "MapData")
  [14498] (15034/4) Normal[14498] return true
  [14499] LoopCont[14499]
  [14500] (15027/4) Normal[14500] __x3__ = (! (= p.Key ~empty~))
  [14501] (15022/3) Loop[14501] (< __x2__ __x1__.length)
  [14502] (15018/1) Normal[14502] [? __x0__]
  [14503] (15036/5) Normal[14503] return false
  [14504] Exit[14504]
Algo: GLOBAL.Map.prototype.keys [1288]
  [14505] Entry[14505]
  [14506] (15038/0) Normal[14506] let M = this
  [14507] (15039/1) Call[14507] app __x0__ = (CreateMapIterator M ~key~)
  [14508] (15040/1) Normal[14508] return [? __x0__]
  [14509] Exit[14509]
Algo: GLOBAL.Map.prototype.set [1289]
  [14510] Entry[14510]
  [14511] (15042)Call[14511] app key = (GetArgument argumentsList)
  [14512] (15046/1) Normal[14512] [? __x0__]
  [14513] (15047/2) Normal[14513] let entries = M.MapData
  [14514] (15052/3) Normal[14514] let p = __x1__[__x2__]
  [14515] (15053/3) Normal[14515] __x2__ = (+ __x2__ 1i)
  [14516] (15056/4) If[14516] __x3__
  [14517] (15058/4) Call[14517] app __x4__ = (SameValueZero p.Key key)
  [14518] (15061/4) If[14518] __x3__
  [14519] LoopCont[14519]
  [14520] (15050/3) Loop[14520] (< __x2__ __x1__.length)
  [14521] (15043)Call[14521] app value = (GetArgument argumentsList)
  [14522] (15048/3) Normal[14522] let __x1__ = entries
  [14523] (15066/7) If[14523] (= key -0.0)
  [14524] (15067/7) Normal[14524] key = 0i
  [14525] (15069/8) Normal[14525] let p = (new Record("Key" -> key, "Value" -> value))
  [14526] (15055/4) Normal[14526] __x3__ = (! (= p.Key ~empty~))
  [14527] (15044/0) Normal[14527] let M = this
  [14528] (15063/5) Normal[14528] p.Value = value
  [14529] (15054/4) Normal[14529] let __x3__ = true
  [14530] (15049/3) Normal[14530] let __x2__ = 0i
  [14531] (15045/1) Call[14531] app __x0__ = (RequireInternalSlot M "MapData")
  [14532] (15064/6) Normal[14532] return M
  [14533] (15059/4) Normal[14533] __x3__ = (= __x4__ true)
  [14534] (15070/9) Normal[14534] append p -> entries
  [14535] (15071/10) Normal[14535] return M
  [14536] Exit[14536]
Algo: GLOBAL.Map.prototype.size [1290]
  [14537] Entry[14537]
  [14538] (15073/0) Normal[14538] let M = this
  [14539] (15077/3) Normal[14539] let count = 0i
  [14540] (15078/4) Normal[14540] let __x1__ = entries
  [14541] (15083/4) Normal[14541] __x2__ = (+ __x2__ 1i)
  [14542] (15084/5) If[14542] (! (= p.Key ~empty~))
  [14543] (15087/6) Normal[14543] return count
  [14544] Exit[14544]
  [14545] (15074/1) Call[14545] app __x0__ = (RequireInternalSlot M "MapData")
  [14546] (15079/4) Normal[14546] let __x2__ = 0i
  [14547] (15082/4) Normal[14547] let p = __x1__[__x2__]
  [14548] LoopCont[14548]
  [14549] (15080/4) Loop[14549] (< __x2__ __x1__.length)
  [14550] (15075/1) Normal[14550] [? __x0__]
  [14551] (15085/5) Normal[14551] count = (+ count 1i)
  [14552] (15076/2) Normal[14552] let entries = M.MapData
Algo: GLOBAL.Map.prototype.values [1291]
  [14553] Entry[14553]
  [14554] (15089/0) Normal[14554] let M = this
  [14555] (15090/1) Call[14555] app __x0__ = (CreateMapIterator M ~value~)
  [14556] (15091/1) Normal[14556] return [? __x0__]
  [14557] Exit[14557]
Algo: GLOBAL.MapIteratorPrototype.next [1292]
  [14558] Entry[14558]
  [14559] (15093/0) Call[14559] app __x0__ = (GeneratorResume this ~empty~ "%MapIteratorPrototype%")
  [14560] (15094/0) Normal[14560] return [? __x0__]
  [14561] Exit[14561]
Algo: GLOBAL.Map[SYMBOL_species] [1293]
  [14562] Entry[14562]
  [14563] (15095/0) Normal[14563] return this
  [14564] Exit[14564]
Algo: GLOBAL.Math.abs [1294]
  [14565] Entry[14565]
  [14566] (15097)Call[14566] app x = (GetArgument argumentsList)
  [14567] (15101/1) Normal[14567] return NaN
  [14568] (15103/2) If[14568] (= n -0.0)
  [14569] (15109/4) If[14569] (< n 0i)
  [14570] (15110/4) Normal[14570] return (- n)
  [14571] (15112/5) Normal[14571] return n
  [14572] (15098/0) Call[14572] app __x0__ = (ToNumber x)
  [14573] (15104/2) Normal[14573] return 0i
  [14574] (15106/3) If[14574] (= n -Infinity)
  [14575] (15107/3) Normal[14575] return Infinity
  [14576] (15099/0) Normal[14576] let n = [? __x0__]
  [14577] Exit[14577]
  [14578] (15100/1) If[14578] (= n NaN)
Algo: GLOBAL.Math.acos [1295]
  [14579] Entry[14579]
  [14580] (15114)Call[14580] app x = (GetArgument argumentsList)
  [14581] (15118/1) Normal[14581] return NaN
  [14582] (15120/2) If[14582] (= n 1i)
  [14583] (15115/0) Call[14583] app __x0__ = (ToNumber x)
  [14584] (15121/2) Normal[14584] return 0i
  [14585] (15123/3) Normal[14585] ??? "Return an implementation - approximated value representing the result of the inverse cosine of ℝ ( id:{n} ) ."
  [14586] (15116/0) Normal[14586] let n = [? __x0__]
  [14587] (15117/1) If[14587] (|| (|| (= n NaN) (< 1i n)) (< n -1i))
  [14588] Exit[14588]
Algo: GLOBAL.Math.acosh [1296]
  [14589] Entry[14589]
  [14590] (15125)Call[14590] app x = (GetArgument argumentsList)
  [14591] (15129/1) Normal[14591] return n
  [14592] (15131/2) If[14592] (= n 1i)
  [14593] (15137/4) Normal[14593] ??? "Return an implementation - approximated value representing the result of the inverse hyperbolic cosine of ℝ ( id:{n} ) ."
  [14594] Exit[14594]
  [14595] (15126/0) Call[14595] app __x0__ = (ToNumber x)
  [14596] (15132/2) Normal[14596] return 0i
  [14597] (15134/3) If[14597] (< n 1i)
  [14598] (15135/3) Normal[14598] return NaN
  [14599] (15127/0) Normal[14599] let n = [? __x0__]
  [14600] (15128/1) If[14600] (|| (= n NaN) (= n Infinity))
Algo: GLOBAL.Math.asin [1297]
  [14601] Entry[14601]
  [14602] (15139)Call[14602] app x = (GetArgument argumentsList)
  [14603] (15143/1) Normal[14603] return n
  [14604] (15145/2) If[14604] (|| (< 1i n) (< n -1i))
  [14605] (15140/0) Call[14605] app __x0__ = (ToNumber x)
  [14606] (15146/2) Normal[14606] return NaN
  [14607] (15148/3) Normal[14607] ??? "Return an implementation - approximated value representing the result of the inverse sine of ℝ ( id:{n} ) ."
  [14608] (15141/0) Normal[14608] let n = [? __x0__]
  [14609] (15142/1) If[14609] (|| (|| (= n NaN) (= n 0i)) (= n -0.0))
  [14610] Exit[14610]
Algo: GLOBAL.Math.asinh [1298]
  [14611] Entry[14611]
  [14612] (15150)Call[14612] app x = (GetArgument argumentsList)
  [14613] (15154/1) Normal[14613] return n
  [14614] (15156/2) Normal[14614] ??? "Return an implementation - approximated value representing the result of the inverse hyperbolic sine of ℝ ( id:{n} ) ."
  [14615] (15151/0) Call[14615] app __x0__ = (ToNumber x)
  [14616] Exit[14616]
  [14617] (15152/0) Normal[14617] let n = [? __x0__]
  [14618] (15153/1) If[14618] (|| (|| (|| (|| (= n NaN) (= n 0i)) (= n -0.0)) (= n Infinity)) (= n -Infinity))
Algo: GLOBAL.Math.atan [1299]
  [14619] Entry[14619]
  [14620] (15158)Call[14620] app x = (GetArgument argumentsList)
  [14621] (15162/1) Normal[14621] return n
  [14622] (15164/2) Normal[14622] ??? "If id:{n} is value:{+∞} sub:{𝔽} , return an implementation - approximated value representing π / 2 ."
  [14623] (15159/0) Call[14623] app __x0__ = (ToNumber x)
  [14624] (15165/3) Normal[14624] ??? "If id:{n} is value:{-∞} sub:{𝔽} , return an implementation - approximated value representing - π / 2 ."
  [14625] (15160/0) Normal[14625] let n = [? __x0__]
  [14626] (15166/4) Normal[14626] ??? "Return an implementation - approximated value representing the result of the inverse tangent of ℝ ( id:{n} ) ."
  [14627] (15161/1) If[14627] (|| (|| (= n NaN) (= n 0i)) (= n -0.0))
  [14628] Exit[14628]
Algo: GLOBAL.Math.atanh [1300]
  [14629] Entry[14629]
  [14630] (15168)Call[14630] app x = (GetArgument argumentsList)
  [14631] (15172/1) Normal[14631] return n
  [14632] (15174/2) If[14632] (|| (< 1i n) (< n -1i))
  [14633] (15180/4) If[14633] (= n -1i)
  [14634] (15181/4) Normal[14634] return -Infinity
  [14635] (15183/5) Normal[14635] ??? "Return an implementation - approximated value representing the result of the inverse hyperbolic tangent of ℝ ( id:{n} ) ."
  [14636] (15169/0) Call[14636] app __x0__ = (ToNumber x)
  [14637] (15175/2) Normal[14637] return NaN
  [14638] (15177/3) If[14638] (= n 1i)
  [14639] (15178/3) Normal[14639] return Infinity
  [14640] (15170/0) Normal[14640] let n = [? __x0__]
  [14641] Exit[14641]
  [14642] (15171/1) If[14642] (|| (|| (= n NaN) (= n 0i)) (= n -0.0))
Algo: GLOBAL.Math.cbrt [1301]
  [14643] Entry[14643]
  [14644] (15185)Call[14644] app x = (GetArgument argumentsList)
  [14645] (15189/1) Normal[14645] return n
  [14646] (15191/2) Normal[14646] ??? "Return an implementation - approximated value representing the result of the cube root of ℝ ( id:{n} ) ."
  [14647] (15186/0) Call[14647] app __x0__ = (ToNumber x)
  [14648] Exit[14648]
  [14649] (15187/0) Normal[14649] let n = [? __x0__]
  [14650] (15188/1) If[14650] (|| (|| (|| (|| (= n NaN) (= n 0i)) (= n -0.0)) (= n Infinity)) (= n -Infinity))
Algo: GLOBAL.Math.ceil [1302]
  [14651] Entry[14651]
  [14652] (15193)Call[14652] app x = (GetArgument argumentsList)
  [14653] (15197/1) Normal[14653] return n
  [14654] (15199/2) If[14654] (&& (< n 0i) (< -1i n))
  [14655] (15194/0) Call[14655] app __x0__ = (ToNumber x)
  [14656] (15200/2) Normal[14656] return -0.0
  [14657] (15202/3) Normal[14657] ??? "If id:{n} is an integral Number , return id:{n} ."
  [14658] (15203/4) Normal[14658] ??? "Return the smallest ( closest to - ∞ ) integral Number value that is not less than id:{n} ."
  [14659] Exit[14659]
  [14660] (15195/0) Normal[14660] let n = [? __x0__]
  [14661] (15196/1) If[14661] (|| (|| (|| (|| (= n NaN) (= n 0i)) (= n -0.0)) (= n Infinity)) (= n -Infinity))
Algo: GLOBAL.Math.cos [1303]
  [14662] Entry[14662]
  [14663] (15205)Call[14663] app x = (GetArgument argumentsList)
  [14664] (15209/1) Normal[14664] return n
  [14665] (15211/2) If[14665] (|| (= n Infinity) (= n -Infinity))
  [14666] (15206/0) Call[14666] app __x0__ = (ToNumber x)
  [14667] (15212/2) Normal[14667] return NaN
  [14668] (15214/3) Normal[14668] ??? "Return an implementation - approximated value representing the result of the cosine of ℝ ( id:{n} ) ."
  [14669] (15207/0) Normal[14669] let n = [? __x0__]
  [14670] (15208/1) If[14670] (|| (|| (= n NaN) (= n 0i)) (= n -0.0))
  [14671] Exit[14671]
Algo: GLOBAL.Math.cosh [1304]
  [14672] Entry[14672]
  [14673] (15216)Call[14673] app x = (GetArgument argumentsList)
  [14674] (15220/1) Normal[14674] return n
  [14675] (15222/2) If[14675] (|| (= n 0i) (= n -0.0))
  [14676] (15217/0) Call[14676] app __x0__ = (ToNumber x)
  [14677] (15223/2) Normal[14677] return 1i
  [14678] (15225/3) Normal[14678] ??? "Return an implementation - approximated value representing the result of the hyperbolic cosine of ℝ ( id:{n} ) ."
  [14679] (15218/0) Normal[14679] let n = [? __x0__]
  [14680] (15219/1) If[14680] (|| (|| (= n NaN) (= n Infinity)) (= n -Infinity))
  [14681] Exit[14681]
Algo: GLOBAL.Math.exp [1305]
  [14682] Entry[14682]
  [14683] (15227)Call[14683] app x = (GetArgument argumentsList)
  [14684] (15231/1) Normal[14684] return n
  [14685] (15233/2) If[14685] (|| (= n 0i) (= n -0.0))
  [14686] (15239/4) Normal[14686] ??? "Return an implementation - approximated value representing the result of the exponential function of ℝ ( id:{n} ) ."
  [14687] Exit[14687]
  [14688] (15228/0) Call[14688] app __x0__ = (ToNumber x)
  [14689] (15234/2) Normal[14689] return 1i
  [14690] (15236/3) If[14690] (= n -Infinity)
  [14691] (15237/3) Normal[14691] return 0i
  [14692] (15229/0) Normal[14692] let n = [? __x0__]
  [14693] (15230/1) If[14693] (|| (= n NaN) (= n Infinity))
Algo: GLOBAL.Math.floor [1306]
  [14694] Entry[14694]
  [14695] (15241)Call[14695] app x = (GetArgument argumentsList)
  [14696] (15245/1) Normal[14696] return n
  [14697] (15247/2) If[14697] (&& (< n 1i) (< 0i n))
  [14698] (15242/0) Call[14698] app __x0__ = (ToNumber x)
  [14699] (15248/2) Normal[14699] return 0i
  [14700] (15250/3) Normal[14700] ??? "If id:{n} is an integral Number , return id:{n} ."
  [14701] (15251/4) Normal[14701] ??? "Return the greatest ( closest to + ∞ ) integral Number value that is not greater than id:{n} ."
  [14702] Exit[14702]
  [14703] (15243/0) Normal[14703] let n = [? __x0__]
  [14704] (15244/1) If[14704] (|| (|| (|| (|| (= n NaN) (= n 0i)) (= n -0.0)) (= n Infinity)) (= n -Infinity))
Algo: GLOBAL.Math.fround [1307]
  [14705] Entry[14705]
  [14706] (15253)Call[14706] app x = (GetArgument argumentsList)
  [14707] (15257/1) Normal[14707] return NaN
  [14708] (15259/2) Normal[14708] ??? "If id:{n} is one of value:{+0} sub:{𝔽} , value:{-0} sub:{𝔽} , value:{+∞} sub:{𝔽} , or value:{-∞} sub:{𝔽} , return id:{n} ."
  [14709] (15254/0) Call[14709] app __x0__ = (ToNumber x)
  [14710] (15260/3) Normal[14710] ??? "Let id:{n32} be the result of converting id:{n} to a value in IEEE 754 - 2019 binary32 format using roundTiesToEven mode ."
  [14711] (15262/5) Normal[14711] return n64
  [14712] Exit[14712]
  [14713] (15255/0) Normal[14713] let n = [? __x0__]
  [14714] (15261/4) Normal[14714] ??? "Let id:{n64} be the result of converting id:{n32} to a value in IEEE 754 - 2019 binary64 format ."
  [14715] (15256/1) If[14715] (= n NaN)
Algo: GLOBAL.Math.hypot [1308]
  [14716] Entry[14716]
  [14717] (15264)Normal[14717] let args = argumentsList
  [14718] (15268/1) Loop[14718] (< __x1__ __x0__.length)
  [14719] (15270/1) Normal[14719] let arg = __x0__[__x1__]
  [14720] (15275/4) Normal[14720] let onlyZero = true
  [14721] (15274/3) Normal[14721] append n -> coerced
  [14722] LoopCont[14722]
  [14723] (15277/5) Normal[14723] let __x4__ = 0i
  [14724] (15278/5) Loop[14724] (< __x4__ __x3__.length)
  [14725] (15285/7) If[14725] (= number -Infinity)
  [14726] (15286/7) Normal[14726] return Infinity
  [14727] (15288/8) If[14727] (! (|| (= number 0i) (= number -0.0)))
  [14728] (15265/0) Normal[14728] let coerced = (new [])
  [14729] (15271/1) Normal[14729] __x1__ = (+ __x1__ 1i)
  [14730] (15273/2) Normal[14730] let n = [? __x2__]
  [14731] (15276/5) Normal[14731] let __x3__ = coerced
  [14732] (15266/1) Normal[14732] let __x0__ = args
  [14733] (15281/5) Normal[14733] __x4__ = (+ __x4__ 1i)
  [14734] (15282/6) If[14734] (|| (= number NaN) (= number Infinity))
  [14735] (15272/2) Call[14735] app __x2__ = (ToNumber arg)
  [14736] (15267/1) Normal[14736] let __x1__ = 0i
  [14737] (15283/6) Normal[14737] return number
  [14738] (15280/5) Normal[14738] let number = __x3__[__x4__]
  [14739] (15291/9) If[14739] (= onlyZero true)
  [14740] LoopCont[14740]
  [14741] (15292/9) Normal[14741] return 0i
  [14742] (15294/10) Normal[14742] ??? "Return an implementation - approximated value representing the square root of the sum of squares of the mathematical values of the elements of id:{coerced} ."
  [14743] (15289/8) Normal[14743] onlyZero = false
  [14744] Exit[14744]
Algo: GLOBAL.Math.imul [1309]
  [14745] Entry[14745]
  [14746] (15296)Call[14746] app x = (GetArgument argumentsList)
  [14747] (15300/1) Call[14747] app __x1__ = (ToUint32 y)
  [14748] (15301/1) Normal[14748] let b = [? __x1__]
  [14749] (15305/3) Normal[14749] return product
  [14750] Exit[14750]
  [14751] (15297)Call[14751] app y = (GetArgument argumentsList)
  [14752] (15302/2) Normal[14752] let product = (%% (* a b) (** 2i 32i))
  [14753] (15304/3) Normal[14753] return (- product (** 2i 32i))
  [14754] (15298/0) Call[14754] app __x0__ = (ToUint32 x)
  [14755] (15303/3) If[14755] (! (< product (** 2i 31i)))
  [14756] (15299/0) Normal[14756] let a = [? __x0__]
Algo: GLOBAL.Math.log [1310]
  [14757] Entry[14757]
  [14758] (15307)Call[14758] app x = (GetArgument argumentsList)
  [14759] (15311/1) Normal[14759] return n
  [14760] (15313/2) If[14760] (= n 1i)
  [14761] (15319/4) If[14761] (< n 0i)
  [14762] (15320/4) Normal[14762] return NaN
  [14763] (15322/5) Normal[14763] ??? "Return an implementation - approximated value representing the result of the natural logarithm of ℝ ( id:{n} ) ."
  [14764] (15308/0) Call[14764] app __x0__ = (ToNumber x)
  [14765] (15314/2) Normal[14765] return 0i
  [14766] (15316/3) If[14766] (|| (= n 0i) (= n -0.0))
  [14767] (15317/3) Normal[14767] return -Infinity
  [14768] (15309/0) Normal[14768] let n = [? __x0__]
  [14769] Exit[14769]
  [14770] (15310/1) If[14770] (|| (= n NaN) (= n Infinity))
Algo: GLOBAL.Math.max [1311]
  [14771] Entry[14771]
  [14772] (15324)Normal[14772] let args = argumentsList
  [14773] (15328/1) Loop[14773] (< __x1__ __x0__.length)
  [14774] (15330/1) Normal[14774] let arg = __x0__[__x1__]
  [14775] (15335/4) Normal[14775] let highest = -Infinity
  [14776] (15334/3) Normal[14776] append n -> coerced
  [14777] LoopCont[14777]
  [14778] (15337/5) Normal[14778] let __x4__ = 0i
  [14779] (15338/5) Loop[14779] (< __x4__ __x3__.length)
  [14780] (15345/7) If[14780] (&& (= number 0i) (= highest -0.0))
  [14781] (15346/7) Normal[14781] highest = 0i
  [14782] (15348/8) If[14782] (< highest number)
  [14783] (15325/0) Normal[14783] let coerced = (new [])
  [14784] (15331/1) Normal[14784] __x1__ = (+ __x1__ 1i)
  [14785] (15333/2) Normal[14785] let n = [? __x2__]
  [14786] (15336/5) Normal[14786] let __x3__ = coerced
  [14787] (15326/1) Normal[14787] let __x0__ = args
  [14788] (15341/5) Normal[14788] __x4__ = (+ __x4__ 1i)
  [14789] (15342/6) If[14789] (= number NaN)
  [14790] (15349/8) Normal[14790] highest = number
  [14791] LoopCont[14791]
  [14792] (15332/2) Call[14792] app __x2__ = (ToNumber arg)
  [14793] (15327/1) Normal[14793] let __x1__ = 0i
  [14794] (15343/6) Normal[14794] return NaN
  [14795] (15340/5) Normal[14795] let number = __x3__[__x4__]
  [14796] (15351/9) Normal[14796] return highest
  [14797] Exit[14797]
Algo: GLOBAL.Math.min [1312]
  [14798] Entry[14798]
  [14799] (15353)Normal[14799] let args = argumentsList
  [14800] (15357/1) Loop[14800] (< __x1__ __x0__.length)
  [14801] (15359/1) Normal[14801] let arg = __x0__[__x1__]
  [14802] (15364/4) Normal[14802] let lowest = Infinity
  [14803] (15363/3) Normal[14803] append n -> coerced
  [14804] LoopCont[14804]
  [14805] (15366/5) Normal[14805] let __x4__ = 0i
  [14806] (15367/5) Loop[14806] (< __x4__ __x3__.length)
  [14807] (15374/7) If[14807] (&& (= number -0.0) (= lowest 0i))
  [14808] (15375/7) Normal[14808] lowest = -0.0
  [14809] (15377/8) If[14809] (< number lowest)
  [14810] (15354/0) Normal[14810] let coerced = (new [])
  [14811] (15360/1) Normal[14811] __x1__ = (+ __x1__ 1i)
  [14812] (15362/2) Normal[14812] let n = [? __x2__]
  [14813] (15365/5) Normal[14813] let __x3__ = coerced
  [14814] (15355/1) Normal[14814] let __x0__ = args
  [14815] (15370/5) Normal[14815] __x4__ = (+ __x4__ 1i)
  [14816] (15371/6) If[14816] (= number NaN)
  [14817] (15378/8) Normal[14817] lowest = number
  [14818] LoopCont[14818]
  [14819] (15361/2) Call[14819] app __x2__ = (ToNumber arg)
  [14820] (15356/1) Normal[14820] let __x1__ = 0i
  [14821] (15372/6) Normal[14821] return NaN
  [14822] (15369/5) Normal[14822] let number = __x3__[__x4__]
  [14823] (15380/9) Normal[14823] return lowest
  [14824] Exit[14824]
Algo: GLOBAL.Math.pow [1313]
  [14825] Entry[14825]
  [14826] (15382)Call[14826] app base = (GetArgument argumentsList)
  [14827] (15386/1) Call[14827] app __x1__ = (ToNumber exponent)
  [14828] (15387/1) Normal[14828] exponent = [? __x1__]
  [14829] (15383)Call[14829] app exponent = (GetArgument argumentsList)
  [14830] (15388/2) Call[14830] app __x2__ = (PRIMITIVE[Number].exponentiate base exponent)
  [14831] (15384/0) Call[14831] app __x0__ = (ToNumber base)
  [14832] (15389/2) Normal[14832] return [! __x2__]
  [14833] (15385/0) Normal[14833] base = [? __x0__]
  [14834] Exit[14834]
Algo: GLOBAL.Math.round [1314]
  [14835] Entry[14835]
  [14836] (15391)Call[14836] app x = (GetArgument argumentsList)
  [14837] (15395/2) If[14837] (&& (< n 0.5) (< 0i n))
  [14838] (15396/2) Normal[14838] return 0i
  [14839] (15398/3) If[14839] (&& (< n 0i) (! (< n -0.5)))
  [14840] (15392/0) Call[14840] app __x0__ = (ToNumber x)
  [14841] (15401/4) Normal[14841] ??? "Return the integral Number closest to id:{n} , preferring the Number closer to + ∞ in the case of a tie ."
  [14842] Exit[14842]
  [14843] (15393/0) Normal[14843] let n = [? __x0__]
  [14844] (15399/3) Normal[14844] return -0.0
  [14845] (15394/1) Normal[14845] ??? "If id:{n} is value:{NaN} , value:{+∞} sub:{𝔽} , value:{-∞} sub:{𝔽} , or an integral Number , return id:{n} ."
Algo: GLOBAL.Math.sign [1315]
  [14846] Entry[14846]
  [14847] (15403)Call[14847] app x = (GetArgument argumentsList)
  [14848] (15407/1) Normal[14848] return n
  [14849] (15409/2) If[14849] (< n 0i)
  [14850] (15404/0) Call[14850] app __x0__ = (ToNumber x)
  [14851] (15410/2) Normal[14851] return -1i
  [14852] (15412/3) Normal[14852] return 1i
  [14853] (15405/0) Normal[14853] let n = [? __x0__]
  [14854] (15406/1) If[14854] (|| (|| (= n NaN) (= n 0i)) (= n -0.0))
  [14855] Exit[14855]
Algo: GLOBAL.Math.sin [1316]
  [14856] Entry[14856]
  [14857] (15414)Call[14857] app x = (GetArgument argumentsList)
  [14858] (15418/1) Normal[14858] return n
  [14859] (15420/2) If[14859] (|| (= n Infinity) (= n -Infinity))
  [14860] (15415/0) Call[14860] app __x0__ = (ToNumber x)
  [14861] (15421/2) Normal[14861] return NaN
  [14862] (15423/3) Normal[14862] ??? "Return an implementation - approximated value representing the result of the sine of ℝ ( id:{n} ) ."
  [14863] (15416/0) Normal[14863] let n = [? __x0__]
  [14864] (15417/1) If[14864] (|| (|| (= n NaN) (= n 0i)) (= n -0.0))
  [14865] Exit[14865]
Algo: GLOBAL.Math.sinh [1317]
  [14866] Entry[14866]
  [14867] (15425)Call[14867] app x = (GetArgument argumentsList)
  [14868] (15429/1) Normal[14868] return n
  [14869] (15431/2) Normal[14869] ??? "Return an implementation - approximated value representing the result of the hyperbolic sine of ℝ ( id:{n} ) ."
  [14870] (15426/0) Call[14870] app __x0__ = (ToNumber x)
  [14871] Exit[14871]
  [14872] (15427/0) Normal[14872] let n = [? __x0__]
  [14873] (15428/1) If[14873] (|| (|| (|| (|| (= n NaN) (= n 0i)) (= n -0.0)) (= n Infinity)) (= n -Infinity))
Algo: GLOBAL.Math.sqrt [1318]
  [14874] Entry[14874]
  [14875] (15433)Call[14875] app x = (GetArgument argumentsList)
  [14876] (15437/1) Normal[14876] return n
  [14877] (15439/2) If[14877] (< n 0i)
  [14878] (15434/0) Call[14878] app __x0__ = (ToNumber x)
  [14879] (15440/2) Normal[14879] return NaN
  [14880] (15442/3) Normal[14880] ??? "Return an implementation - approximated value representing the result of the square root of ℝ ( id:{n} ) ."
  [14881] (15435/0) Normal[14881] let n = [? __x0__]
  [14882] (15436/1) If[14882] (|| (|| (|| (= n NaN) (= n 0i)) (= n -0.0)) (= n Infinity))
  [14883] Exit[14883]
Algo: GLOBAL.Math.tan [1319]
  [14884] Entry[14884]
  [14885] (15444)Call[14885] app x = (GetArgument argumentsList)
  [14886] (15448/1) Normal[14886] return n
  [14887] (15450/2) If[14887] (|| (= n Infinity) (= n -Infinity))
  [14888] (15445/0) Call[14888] app __x0__ = (ToNumber x)
  [14889] (15451/2) Normal[14889] return NaN
  [14890] (15453/3) Normal[14890] ??? "Return an implementation - approximated value representing the result of the tangent of ℝ ( id:{n} ) ."
  [14891] (15446/0) Normal[14891] let n = [? __x0__]
  [14892] (15447/1) If[14892] (|| (|| (= n NaN) (= n 0i)) (= n -0.0))
  [14893] Exit[14893]
Algo: GLOBAL.Math.tanh [1320]
  [14894] Entry[14894]
  [14895] (15455)Call[14895] app x = (GetArgument argumentsList)
  [14896] (15459/1) Normal[14896] return n
  [14897] (15461/2) If[14897] (= n Infinity)
  [14898] (15467/4) Normal[14898] ??? "Return an implementation - approximated value representing the result of the hyperbolic tangent of ℝ ( id:{n} ) ."
  [14899] Exit[14899]
  [14900] (15456/0) Call[14900] app __x0__ = (ToNumber x)
  [14901] (15462/2) Normal[14901] return 1i
  [14902] (15464/3) If[14902] (= n -Infinity)
  [14903] (15465/3) Normal[14903] return -1i
  [14904] (15457/0) Normal[14904] let n = [? __x0__]
  [14905] (15458/1) If[14905] (|| (|| (= n NaN) (= n 0i)) (= n -0.0))
Algo: GLOBAL.Math.trunc [1321]
  [14906] Entry[14906]
  [14907] (15469)Call[14907] app x = (GetArgument argumentsList)
  [14908] (15473/1) Normal[14908] return n
  [14909] (15475/2) If[14909] (&& (< n 1i) (< 0i n))
  [14910] (15481/4) Normal[14910] ??? "Return the integral Number nearest id:{n} in the direction of value:{+0} sub:{𝔽} ."
  [14911] Exit[14911]
  [14912] (15470/0) Call[14912] app __x0__ = (ToNumber x)
  [14913] (15476/2) Normal[14913] return 0i
  [14914] (15478/3) If[14914] (&& (< n 0i) (< -1i n))
  [14915] (15479/3) Normal[14915] return -0.0
  [14916] (15471/0) Normal[14916] let n = [? __x0__]
  [14917] (15472/1) If[14917] (|| (|| (|| (|| (= n NaN) (= n 0i)) (= n -0.0)) (= n Infinity)) (= n -Infinity))
Algo: GLOBAL.Number [1322]
  [14918] Entry[14918]
  [14919] (15483)Call[14919] app value = (GetArgument argumentsList)
  [14920] (15488/2) If[14920] (= (typeof prim) BigInt)
  [14921] (15489/2) Normal[14921] let n = prim
  [14922] (15490/2) Normal[14922] let n = prim
  [14923] (15493/6) Normal[14923] return n
  [14924] (15495/7) Call[14924] app __x1__ = (OrdinaryCreateFromConstructor NewTarget "%Number.prototype%" (new ["NumberData"]))
  [14925] (15498/9) Normal[14925] return O
  [14926] Exit[14926]
  [14927] (15484/0) If[14927] (! (= value absent))
  [14928] (15492/6) If[14928] (= NewTarget undefined)
  [14929] (15497/8) Normal[14929] O.NumberData = n
  [14930] (15486/1) Call[14930] app __x0__ = (ToNumeric value)
  [14931] (15491/0) Normal[14931] let n = 0i
  [14932] (15496/7) Normal[14932] let O = [? __x1__]
  [14933] (15487/1) Normal[14933] let prim = [? __x0__]
Algo: GLOBAL.Number.isFinite [1323]
  [14934] Entry[14934]
  [14935] (15500)Call[14935] app number = (GetArgument argumentsList)
  [14936] (15505/1) Normal[14936] return false
  [14937] Exit[14937]
  [14938] (15501/0) If[14938] (! (= (typeof number) Number))
  [14939] (15506/1) Normal[14939] return true
  [14940] (15502/0) Normal[14940] return false
  [14941] (15504/1) If[14941] (|| (|| (= number NaN) (= number Infinity)) (= number -Infinity))
Algo: GLOBAL.Number.isInteger [1324]
  [14942] Entry[14942]
  [14943] (15508)Call[14943] app number = (GetArgument argumentsList)
  [14944] (15509/0) Call[14944] app __x0__ = (IsIntegralNumber number)
  [14945] (15510/0) Normal[14945] return [! __x0__]
  [14946] Exit[14946]
Algo: GLOBAL.Number.isNaN [1325]
  [14947] Entry[14947]
  [14948] (15512)Call[14948] app number = (GetArgument argumentsList)
  [14949] (15517/1) Normal[14949] return true
  [14950] Exit[14950]
  [14951] (15513/0) If[14951] (! (= (typeof number) Number))
  [14952] (15518/1) Normal[14952] return false
  [14953] (15514/0) Normal[14953] return false
  [14954] (15516/1) If[14954] (= number NaN)
Algo: GLOBAL.Number.isSafeInteger [1326]
  [14955] Entry[14955]
  [14956] (15520)Call[14956] app number = (GetArgument argumentsList)
  [14957] (15525/1) If[14957] (! (< (- (** 2i 53i) 1i) __x1__))
  [14958] (15526/1) Normal[14958] return true
  [14959] (15529/2) Normal[14959] return false
  [14960] (15521/0) Call[14960] app __x0__ = (IsIntegralNumber number)
  [14961] (15522/0) If[14961] (= [! __x0__] true)
  [14962] Exit[14962]
  [14963] (15524/1) Call[14963] app __x1__ = (abs number)
Algo: GLOBAL.Number.prototype.toExponential [1327]
  [14964] Entry[14964]
  [14965] (15531)Call[14965] app fractionDigits = (GetArgument argumentsList)
  [14966] (15535/1) Normal[14966] let f = [? __x1__]
  [14967] (15536/3) If[14967] (|| (|| (= x Infinity) (= x -Infinity)) (= x NaN))
  [14968] (15542/4) Normal[14968] throw RangeError
  [14969] (15544/5) Normal[14969] x = x
  [14970] (15548/8) Normal[14970] s = "-"
  [14971] (15549/9) Normal[14971] x = (- x)
  [14972] (15532/0) Call[14972] app __x0__ = (thisNumberValue this)
  [14973] (15538/3) Call[14973] app __x2__ = (PRIMITIVE[Number].toString x)
  [14974] (15541/4) If[14974] (|| (< f 0i) (< 100i f))
  [14975] (15546/7) If[14975] (< x 0i)
  [14976] (15551/10) If[14976] (== x 0i)
  [14977] (15533/0) Normal[14977] let x = [? __x0__]
  [14978] (15545/6) Normal[14978] let s = ""
  [14979] (15539/3) Normal[14979] return [! __x2__]
  [14980] (15554/12) Normal[14980] let e = 0i
  [14981] (15560/19) If[14981] (! (== f 0i))
  [14982] (15534/1) Call[14982] app __x1__ = (ToIntegerOrInfinity fractionDigits)
  [14983] (15562/20) Normal[14983] ??? "Let id:{a} be the first code unit of id:{m} ."
  [14984] (15563/21) Normal[14984] ??? "Let id:{b} be the other id:{f} code units of id:{m} ."
  [14985] (15579/34) Normal[14985] return (+ s m)
  [14986] Exit[14986]
  [14987] (15564/22) Normal[14987] m = (+ (+ a ".") b)
  [14988] (15557/15) Normal[14988] ??? "Let id:{e} and id:{n} be integers such that 10 sup:{id:{f}} ≤ id:{n} < 10 sup:{id:{f} + 1} and for which id:{n} × 10 sup:{id:{e} - id:{n}} - id:{x} is as close to zero as possible . If there are two such sets of id:{e} and id:{n} , pick the id:{e} and id:{n} for which id:{n} × 10 sup:{id:{e} - id:{f}} is larger ."
  [14989] (15559/18) Normal[14989] ??? "Let id:{m} be the String value consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) ."
  [14990] (15569/25) Normal[14990] let d = "0"
  [14991] (15578/33) Normal[14991] m = (+ (+ (+ m "e") c) d)
  [14992] (15568/24) Normal[14992] let c = "+"
  [14993] (15558/14) Normal[14993] ??? "Let id:{e} , id:{n} , and id:{f} be integers such that id:{f} ≥ 0 , 10 sup:{id:{f}} ≤ id:{n} < 10 sup:{id:{f} + 1} , id:{n} × 10 sup:{id:{e} - id:{f}} is id:{x} , and id:{f} is as small as possible . Note that the decimal representation of id:{n} has id:{f} + 1 digits , id:{n} is not divisible by 10 , and the least significant digit of id:{n} is not necessarily uniquely determined by these criteria ."
  [14994] (15575/30) Normal[14994] let c = "-"
  [14995] (15576/31) Normal[14995] e = (- e)
  [14996] (15553/11) Normal[14996] ??? "Let id:{m} be the String value consisting of id:{f} + 1 occurrences of the code unit 0x0030 ( DIGIT ZERO ) ."
  [14997] (15574/29) Normal[14997] assert (< e 0i)
  [14998] (15577/32) Normal[14998] ??? "Let id:{d} be the String value consisting of the digits of the decimal representation of id:{e} ( in order , with no leading zeroes ) ."
  [14999] (15566/23) If[14999] (== e 0i)
  [15000] (15571/27) If[15000] (< 0i e)
  [15001] (15556/14) If[15001] (! (= fractionDigits undefined))
  [15002] (15572/27) Normal[15002] let c = "+"
Algo: GLOBAL.Number.prototype.toFixed [1328]
  [15003] Entry[15003]
  [15004] (15581)Call[15004] app fractionDigits = (GetArgument argumentsList)
  [15005] (15585/1) Normal[15005] let f = [? __x1__]
  [15006] (15586/3) If[15006] (|| (|| (= f Infinity) (= f -Infinity)) (= f NaN))
  [15007] (15592/5) If[15007] (|| (|| (= x Infinity) (= x -Infinity)) (= x NaN))
  [15008] (15594/5) Call[15008] app __x2__ = (PRIMITIVE[Number].toString x)
  [15009] (15597/6) Normal[15009] x = x
  [15010] (15598/7) Normal[15010] let s = ""
  [15011] (15599/8) If[15011] (< x 0i)
  [15012] (15582/0) Call[15012] app __x0__ = (thisNumberValue this)
  [15013] (15587/3) Normal[15013] throw RangeError
  [15014] (15589/4) If[15014] (|| (< f 0i) (< 100i f))
  [15015] (15590/4) Normal[15015] throw RangeError
  [15016] (15583/0) Normal[15016] let x = [? __x0__]
  [15017] (15595/5) Normal[15017] return [! __x2__]
  [15018] (15584/1) Call[15018] app __x1__ = (ToIntegerOrInfinity fractionDigits)
  [15019] (15604/11) If[15019] (! (< x (** 10i 21i)))
  [15020] (15606/12) Call[15020] app __x3__ = (ToString x)
  [15021] (15609/14) Normal[15021] ??? "Let id:{n} be an integer for which id:{n} / 10 sup:{id:{f}} - id:{x} is as close to zero as possible . If there are two such id:{n} , pick the larger id:{n} ."
  [15022] (15601/9) Normal[15022] s = "-"
  [15023] (15613/17) Normal[15023] let k = m.length
  [15024] (15614/18) If[15024] (! (< f k))
  [15025] (15616/19) Normal[15025] ??? "Let id:{z} be the String value consisting of id:{f} + 1 - id:{k} occurrences of the code unit 0x0030 ( DIGIT ZERO ) ."
  [15026] (15620/22) Normal[15026] ??? "Let id:{a} be the first id:{k} - id:{f} code units of id:{m} ."
  [15027] (15607/12) Normal[15027] let m = [! __x3__]
  [15028] (15624/25) Normal[15028] return (+ s m)
  [15029] (15621/23) Normal[15029] ??? "Let id:{b} be the other id:{f} code units of id:{m} ."
  [15030] (15618/21) Normal[15030] k = (+ f 1i)
  [15031] (15610/15) Normal[15031] ??? "If id:{n} = 0 , let id:{m} be the String value:{\"0\"} . Otherwise , let id:{m} be the String value consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) ."
  [15032] Exit[15032]
  [15033] (15602/10) Normal[15033] x = (- x)
  [15034] (15611/16) If[15034] (! (== f 0i))
  [15035] (15617/20) Normal[15035] m = (+ z m)
  [15036] (15622/24) Normal[15036] m = (+ (+ a ".") b)
Algo: GLOBAL.Number.prototype.toLocaleString [1329]
  [15037] Entry[15037]
  [15038] (15626)Call[15038] app reserved1 = (GetArgument argumentsList)
  [15039] (15627)Call[15039] app reserved2 = (GetArgument argumentsList)
  [15040] (15628/0) Normal[15040] ??? "Not Supported"
  [15041] Exit[15041]
Algo: GLOBAL.Number.prototype.toPrecision [1330]
  [15042] Entry[15042]
  [15043] (15630)Call[15043] app precision = (GetArgument argumentsList)
  [15044] (15635/1) Call[15044] app __x1__ = (ToString x)
  [15045] (15636/1) Normal[15045] return [! __x1__]
  [15046] (15642/3) Call[15046] app __x3__ = (PRIMITIVE[Number].toString x)
  [15047] (15643/3) Normal[15047] return [! __x3__]
  [15048] (15648/5) Normal[15048] x = x
  [15049] (15649/6) Normal[15049] let s = ""
  [15050] (15631/0) Call[15050] app __x0__ = (thisNumberValue this)
  [15051] (15638/2) Call[15051] app __x2__ = (ToIntegerOrInfinity precision)
  [15052] (15640/3) If[15052] (|| (|| (= x Infinity) (= x -Infinity)) (= x NaN))
  [15053] (15645/4) If[15053] (|| (< p 1i) (< 100i p))
  [15054] (15632/0) Normal[15054] let x = [? __x0__]
  [15055] (15646/4) Normal[15055] throw RangeError
  [15056] (15653/9) Normal[15056] x = (- x)
  [15057] (15655/10) If[15057] (== x 0i)
  [15058] (15639/2) Normal[15058] let p = [? __x2__]
  [15059] (15633/1) If[15059] (= precision undefined)
  [15060] (15650/7) If[15060] (< x 0i)
  [15061] (15686/35) Normal[15061] return (+ s m)
  [15062] Exit[15062]
  [15063] (15662/16) If[15063] (|| (< e -6i) (! (< e p)))
  [15064] (15664/17) Normal[15064] assert (! (== e 0i))
  [15065] (15680/30) If[15065] (== e (- p 1i))
  [15066] (15681/30) Normal[15066] return (+ s m)
  [15067] (15683/31) If[15067] (! (< e 0i))
  [15068] (15665/18) If[15068] (! (== p 1i))
  [15069] (15657/11) Normal[15069] ??? "Let id:{m} be the String value consisting of id:{p} occurrences of the code unit 0x0030 ( DIGIT ZERO ) ."
  [15070] (15658/12) Normal[15070] let e = 0i
  [15071] (15669/21) Normal[15071] m = (+ (+ a ".") b)
  [15072] (15671/22) If[15072] (< 0i e)
  [15073] (15675/26) Normal[15073] let c = "-"
  [15074] (15676/27) Normal[15074] e = (- e)
  [15075] (15668/20) Normal[15075] ??? "Let id:{b} be the other id:{p} - 1 code units of id:{m} ."
  [15076] (15685/31) Normal[15076] ??? "Set id:{m} to the string - concatenation of the code unit 0x0030 ( DIGIT ZERO ) , the code unit 0x002E ( FULL STOP ) , - ( id:{e} + 1 ) occurrences of the code unit 0x0030 ( DIGIT ZERO ) , and the String id:{m} ."
  [15077] (15652/8) Normal[15077] s = "-"
  [15078] (15674/25) Normal[15078] assert (< e 0i)
  [15079] (15677/28) Normal[15079] ??? "Let id:{d} be the String value consisting of the digits of the decimal representation of id:{e} ( in order , with no leading zeroes ) ."
  [15080] (15660/14) Normal[15080] ??? "Let id:{e} and id:{n} be integers such that 10 sup:{id:{p} - 1} ≤ id:{n} < 10 sup:{id:{p}} and for which id:{n} × 10 sup:{id:{e} - id:{p} + 1} - id:{x} is as close to zero as possible . If there are two such sets of id:{e} and id:{n} , pick the id:{e} and id:{n} for which id:{n} × 10 sup:{id:{e} - id:{p} + 1} is larger ."
  [15081] (15661/15) Normal[15081] ??? "Let id:{m} be the String value consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) ."
  [15082] (15667/19) Normal[15082] ??? "Let id:{a} be the first code unit of id:{m} ."
  [15083] (15684/32) Normal[15083] ??? "Set id:{m} to the string - concatenation of the first id:{e} + 1 code units of id:{m} , the code unit 0x002E ( FULL STOP ) , and the remaining id:{p} - ( id:{e} + 1 ) code units of id:{m} ."
  [15084] (15678/29) Normal[15084] return (+ (+ (+ (+ s m) "e") c) d)
  [15085] (15672/23) Normal[15085] let c = "+"
Algo: GLOBAL.Number.prototype.toString [1331]
  [15086] Entry[15086]
  [15087] (15688)Call[15087] app radix = (GetArgument argumentsList)
  [15088] (15692/1) Normal[15088] let radixMV = 10i
  [15089] (15696/3) If[15089] (|| (< radixMV 2i) (< 36i radixMV))
  [15090] (15699/4) If[15090] (== radixMV 10i)
  [15091] (15701/4) Call[15091] app __x2__ = (ToString x)
  [15092] (15704/5) Normal[15092] return (convert x num2str radixMV)
  [15093] (15689/0) Call[15093] app __x0__ = (thisNumberValue this)
  [15094] (15694/2) Call[15094] app __x1__ = (ToIntegerOrInfinity radix)
  [15095] (15695/2) Normal[15095] let radixMV = [? __x1__]
  [15096] (15697/3) Normal[15096] throw RangeError
  [15097] Exit[15097]
  [15098] (15690/0) Normal[15098] let x = [? __x0__]
  [15099] (15702/4) Normal[15099] return [! __x2__]
  [15100] (15691/1) If[15100] (= radix undefined)
Algo: GLOBAL.Number.prototype.valueOf [1332]
  [15101] Entry[15101]
  [15102] (15706/0) Call[15102] app __x0__ = (thisNumberValue this)
  [15103] (15707/0) Normal[15103] return [? __x0__]
  [15104] Exit[15104]
Algo: GLOBAL.Object [1333]
  [15105] Entry[15105]
  [15106] (15709)Call[15106] app value = (GetArgument argumentsList)
  [15107] (15715/2) If[15107] (|| (= value undefined) (= value null))
  [15108] (15717/2) Call[15108] app __x1__ = (OrdinaryObjectCreate INTRINSICS["%Object.prototype%"])
  [15109] (15720/3) Call[15109] app __x2__ = (ToObject value)
  [15110] (15710/0) If[15110] (! (|| (= NewTarget undefined) (= NewTarget CONTEXT.Function)))
  [15111] (15718/2) Normal[15111] return [! __x1__]
  [15112] (15721/3) Normal[15112] return [! __x2__]
  [15113] Exit[15113]
  [15114] (15712/1) Call[15114] app __x0__ = (OrdinaryCreateFromConstructor NewTarget "%Object.prototype%")
  [15115] (15713/1) Normal[15115] return [? __x0__]
Algo: GLOBAL.Object.assign [1334]
  [15116] Entry[15116]
  [15117] (15723)Call[15117] app target = (GetArgument argumentsList)
  [15118] (15727/1) If[15118] (= argumentsList.length 0i)
  [15119] (15728/1) Normal[15119] return to
  [15120] (15730/2) Normal[15120] let __x1__ = sources
  [15121] (15734/2) Normal[15121] let nextSource = __x1__[__x2__]
  [15122] (15735/2) Normal[15122] __x2__ = (+ __x2__ 1i)
  [15123] (15739/4) Normal[15123] let from = [! __x3__]
  [15124] (15740/5) Call[15124] app __x4__ = (from.OwnPropertyKeys from)
  [15125] (15724)Normal[15125] let sources = argumentsList
  [15126] (15732/2) Loop[15126] (< __x2__ __x1__.length)
  [15127] (15758/11) Normal[15127] return to
  [15128] (15738/4) Call[15128] app __x3__ = (ToObject nextSource)
  [15129] (15725/0) Call[15129] app __x0__ = (ToObject target)
  [15130] (15742/6) Normal[15130] let __x5__ = keys
  [15131] (15743/6) Normal[15131] let __x6__ = 0i
  [15132] (15736/3) If[15132] (! (|| (= nextSource undefined) (= nextSource null)))
  [15133] LoopCont[15133]
  [15134] (15731/2) Normal[15134] let __x2__ = 0i
  [15135] (15726/0) Normal[15135] let to = [? __x0__]
  [15136] (15744/6) Loop[15136] (< __x6__ __x5__.length)
  [15137] (15741/5) Normal[15137] let keys = [? __x4__]
  [15138] (15750/8) If[15138] (&& (! (= desc undefined)) (= desc.Enumerable true))
  [15139] (15752/9) Call[15139] app __x8__ = (Get from nextKey)
  [15140] LoopCont[15140]
  [15141] (15753/9) Normal[15141] let propValue = [? __x8__]
  [15142] (15746/6) Normal[15142] let nextKey = __x5__[__x6__]
  [15143] (15747/6) Normal[15143] __x6__ = (+ __x6__ 1i)
  [15144] (15755/10) Normal[15144] [? __x9__]
  [15145] (15748/7) Call[15145] app __x7__ = (from.GetOwnProperty from nextKey)
  [15146] (15749/7) Normal[15146] let desc = [? __x7__]
  [15147] (15754/10) Call[15147] app __x9__ = (Set to nextKey propValue true)
  [15148] Exit[15148]
Algo: GLOBAL.Object.create [1335]
  [15149] Entry[15149]
  [15150] (15760)Call[15150] app O = (GetArgument argumentsList)
  [15151] (15765/1) Call[15151] app __x0__ = (OrdinaryObjectCreate O)
  [15152] (15766/1) Normal[15152] let obj = [! __x0__]
  [15153] (15772/4) Normal[15153] return obj
  [15154] Exit[15154]
  [15155] (15761)Call[15155] app Properties = (GetArgument argumentsList)
  [15156] (15767/2) If[15156] (! (= Properties undefined))
  [15157] (15770/3) Normal[15157] return [? __x1__]
  [15158] (15762/0) If[15158] (! (|| (= (typeof O) Object) (= (typeof O) Null)))
  [15159] (15769/3) Call[15159] app __x1__ = (ObjectDefineProperties obj Properties)
  [15160] (15763/0) Normal[15160] throw TypeError
Algo: GLOBAL.Object.defineProperties [1336]
  [15161] Entry[15161]
  [15162] (15774)Call[15162] app O = (GetArgument argumentsList)
  [15163] (15779/1) Call[15163] app __x0__ = (ObjectDefineProperties O Properties)
  [15164] (15780/1) Normal[15164] return [? __x0__]
  [15165] (15775)Call[15165] app Properties = (GetArgument argumentsList)
  [15166] Exit[15166]
  [15167] (15776/0) If[15167] (! (= (typeof O) Object))
  [15168] (15777/0) Normal[15168] throw TypeError
Algo: GLOBAL.Object.defineProperty [1337]
  [15169] Entry[15169]
  [15170] (15782)Call[15170] app O = (GetArgument argumentsList)
  [15171] (15786/0) Normal[15171] throw TypeError
  [15172] (15788/1) Call[15172] app __x0__ = (ToPropertyKey P)
  [15173] (15792/3) Call[15173] app __x2__ = (DefinePropertyOrThrow O key desc)
  [15174] (15793/3) Normal[15174] [? __x2__]
  [15175] (15783)Call[15175] app P = (GetArgument argumentsList)
  [15176] (15789/1) Normal[15176] let key = [? __x0__]
  [15177] (15791/2) Normal[15177] let desc = [? __x1__]
  [15178] (15784)Call[15178] app Attributes = (GetArgument argumentsList)
  [15179] (15794/4) Normal[15179] return O
  [15180] Exit[15180]
  [15181] (15790/2) Call[15181] app __x1__ = (ToPropertyDescriptor Attributes)
  [15182] (15785/0) If[15182] (! (= (typeof O) Object))
Algo: GLOBAL.Object.entries [1338]
  [15183] Entry[15183]
  [15184] (15796)Call[15184] app O = (GetArgument argumentsList)
  [15185] (15800/1) Normal[15185] let nameList = [? __x1__]
  [15186] (15801/2) Call[15186] app __x2__ = (CreateArrayFromList nameList)
  [15187] (15797/0) Call[15187] app __x0__ = (ToObject O)
  [15188] (15802/2) Normal[15188] return __x2__
  [15189] (15798/0) Normal[15189] let obj = [? __x0__]
  [15190] Exit[15190]
  [15191] (15799/1) Call[15191] app __x1__ = (EnumerableOwnPropertyNames obj ~key+value~)
Algo: GLOBAL.Object.freeze [1339]
  [15192] Entry[15192]
  [15193] (15804)Call[15193] app O = (GetArgument argumentsList)
  [15194] (15809/1) Normal[15194] let status = [? __x0__]
  [15195] (15810/2) If[15195] (= status false)
  [15196] (15805/0) If[15196] (! (= (typeof O) Object))
  [15197] (15811/2) Normal[15197] throw TypeError
  [15198] (15813/3) Normal[15198] return O
  [15199] (15806/0) Normal[15199] return O
  [15200] (15808/1) Call[15200] app __x0__ = (SetIntegrityLevel O ~frozen~)
  [15201] Exit[15201]
Algo: GLOBAL.Object.fromEntries [1340]
  [15202] Entry[15202]
  [15203] (15815)Call[15203] app iterable = (GetArgument argumentsList)
  [15204] (15819/1) Normal[15204] let obj = [! __x1__]
  [15205] (15820/3) Normal[15205] let stepsDefine = ALGORITHM["GLOBAL.CreateDataPropertyOnObjectFunctions"]
  [15206] (15824/6) Call[15206] app __x3__ = (AddEntriesFromIterable obj iterable adder)
  [15207] (15825/6) Normal[15207] return [? __x3__]
  [15208] (15816/0) Call[15208] app __x0__ = (RequireObjectCoercible iterable)
  [15209] (15821/4) Normal[15209] let lengthDefine = 2i
  [15210] (15823/5) Normal[15210] let adder = [! __x2__]
  [15211] (15817/0) Normal[15211] [? __x0__]
  [15212] (15822/5) Call[15212] app __x2__ = (CreateBuiltinFunction stepsDefine lengthDefine "" (new []))
  [15213] (15818/1) Call[15213] app __x1__ = (OrdinaryObjectCreate INTRINSICS["%Object.prototype%"])
  [15214] Exit[15214]
Algo: GLOBAL.Object.getOwnPropertyDescriptor [1341]
  [15215] Entry[15215]
  [15216] (15827)Call[15216] app O = (GetArgument argumentsList)
  [15217] (15831/1) Call[15217] app __x1__ = (ToPropertyKey P)
  [15218] (15832/1) Normal[15218] let key = [? __x1__]
  [15219] (15836/3) Normal[15219] return __x3__
  [15220] Exit[15220]
  [15221] (15828)Call[15221] app P = (GetArgument argumentsList)
  [15222] (15833/2) Call[15222] app __x2__ = (obj.GetOwnProperty obj key)
  [15223] (15835/3) Call[15223] app __x3__ = (FromPropertyDescriptor desc)
  [15224] (15829/0) Call[15224] app __x0__ = (ToObject O)
  [15225] (15834/2) Normal[15225] let desc = [? __x2__]
  [15226] (15830/0) Normal[15226] let obj = [? __x0__]
Algo: GLOBAL.Object.getOwnPropertyDescriptors [1342]
  [15227] Entry[15227]
  [15228] (15838)Call[15228] app O = (GetArgument argumentsList)
  [15229] (15842/1) Normal[15229] let ownKeys = [? __x1__]
  [15230] (15843/2) Call[15230] app __x2__ = (OrdinaryObjectCreate INTRINSICS["%Object.prototype%"])
  [15231] (15847/3) Loop[15231] (< __x4__ __x3__.length)
  [15232] (15849/3) Normal[15232] let key = __x3__[__x4__]
  [15233] (15860/7) Normal[15233] return descriptors
  [15234] (15852/4) Normal[15234] let desc = [? __x5__]
  [15235] (15853/5) Call[15235] app __x6__ = (FromPropertyDescriptor desc)
  [15236] LoopCont[15236]
  [15237] (15839/0) Call[15237] app __x0__ = (ToObject O)
  [15238] (15844/2) Normal[15238] let descriptors = [! __x2__]
  [15239] Exit[15239]
  [15240] (15846/3) Normal[15240] let __x4__ = 0i
  [15241] (15851/4) Call[15241] app __x5__ = (obj.GetOwnProperty obj key)
  [15242] (15840/0) Normal[15242] let obj = [? __x0__]
  [15243] (15855/6) If[15243] (! (= descriptor undefined))
  [15244] (15857/6) Call[15244] app __x7__ = (CreateDataPropertyOrThrow descriptors key descriptor)
  [15245] (15850/3) Normal[15245] __x4__ = (+ __x4__ 1i)
  [15246] (15845/3) Normal[15246] let __x3__ = ownKeys
  [15247] (15841/1) Call[15247] app __x1__ = (obj.OwnPropertyKeys obj)
  [15248] (15858/6) Normal[15248] [! __x7__]
  [15249] (15854/5) Normal[15249] let descriptor = [! __x6__]
Algo: GLOBAL.Object.getOwnPropertyNames [1343]
  [15250] Entry[15250]
  [15251] (15862)Call[15251] app O = (GetArgument argumentsList)
  [15252] (15863/0) Call[15252] app __x0__ = (GetOwnPropertyKeys O ~string~)
  [15253] (15864/0) Normal[15253] return [? __x0__]
  [15254] Exit[15254]
Algo: GLOBAL.Object.getOwnPropertySymbols [1344]
  [15255] Entry[15255]
  [15256] (15866)Call[15256] app O = (GetArgument argumentsList)
  [15257] (15867/0) Call[15257] app __x0__ = (GetOwnPropertyKeys O ~symbol~)
  [15258] (15868/0) Normal[15258] return [? __x0__]
  [15259] Exit[15259]
Algo: GLOBAL.Object.getPrototypeOf [1345]
  [15260] Entry[15260]
  [15261] (15870)Call[15261] app O = (GetArgument argumentsList)
  [15262] (15874/1) Normal[15262] return [? __x1__]
  [15263] Exit[15263]
  [15264] (15871/0) Call[15264] app __x0__ = (ToObject O)
  [15265] (15872/0) Normal[15265] let obj = [? __x0__]
  [15266] (15873/1) Call[15266] app __x1__ = (obj.GetPrototypeOf obj)
Algo: GLOBAL.Object.is [1346]
  [15267] Entry[15267]
  [15268] (15876)Call[15268] app value1 = (GetArgument argumentsList)
  [15269] (15877)Call[15269] app value2 = (GetArgument argumentsList)
  [15270] (15878/0) Call[15270] app __x0__ = (SameValue value1 value2)
  [15271] (15879/0) Normal[15271] return __x0__
  [15272] Exit[15272]
Algo: GLOBAL.Object.isExtensible [1347]
  [15273] Entry[15273]
  [15274] (15881)Call[15274] app O = (GetArgument argumentsList)
  [15275] (15886/1) Normal[15275] return [? __x0__]
  [15276] Exit[15276]
  [15277] (15882/0) If[15277] (! (= (typeof O) Object))
  [15278] (15883/0) Normal[15278] return false
  [15279] (15885/1) Call[15279] app __x0__ = (IsExtensible O)
Algo: GLOBAL.Object.isFrozen [1348]
  [15280] Entry[15280]
  [15281] (15888)Call[15281] app O = (GetArgument argumentsList)
  [15282] (15893/1) Normal[15282] return [? __x0__]
  [15283] Exit[15283]
  [15284] (15889/0) If[15284] (! (= (typeof O) Object))
  [15285] (15890/0) Normal[15285] return true
  [15286] (15892/1) Call[15286] app __x0__ = (TestIntegrityLevel O ~frozen~)
Algo: GLOBAL.Object.isSealed [1349]
  [15287] Entry[15287]
  [15288] (15895)Call[15288] app O = (GetArgument argumentsList)
  [15289] (15900/1) Normal[15289] return [? __x0__]
  [15290] Exit[15290]
  [15291] (15896/0) If[15291] (! (= (typeof O) Object))
  [15292] (15897/0) Normal[15292] return true
  [15293] (15899/1) Call[15293] app __x0__ = (TestIntegrityLevel O ~sealed~)
Algo: GLOBAL.Object.keys [1350]
  [15294] Entry[15294]
  [15295] (15902)Call[15295] app O = (GetArgument argumentsList)
  [15296] (15906/1) Normal[15296] let nameList = [? __x1__]
  [15297] (15907/2) Call[15297] app __x2__ = (CreateArrayFromList nameList)
  [15298] (15903/0) Call[15298] app __x0__ = (ToObject O)
  [15299] (15908/2) Normal[15299] return __x2__
  [15300] (15904/0) Normal[15300] let obj = [? __x0__]
  [15301] Exit[15301]
  [15302] (15905/1) Call[15302] app __x1__ = (EnumerableOwnPropertyNames obj ~key~)
Algo: GLOBAL.Object.preventExtensions [1351]
  [15303] Entry[15303]
  [15304] (15910)Call[15304] app O = (GetArgument argumentsList)
  [15305] (15915/1) Normal[15305] let status = [? __x0__]
  [15306] (15916/2) If[15306] (= status false)
  [15307] (15911/0) If[15307] (! (= (typeof O) Object))
  [15308] (15917/2) Normal[15308] throw TypeError
  [15309] (15919/3) Normal[15309] return O
  [15310] (15912/0) Normal[15310] return O
  [15311] (15914/1) Call[15311] app __x0__ = (O.PreventExtensions O)
  [15312] Exit[15312]
Algo: GLOBAL.Object.prototype.hasOwnProperty [1352]
  [15313] Entry[15313]
  [15314] (15921)Call[15314] app V = (GetArgument argumentsList)
  [15315] (15925/1) Normal[15315] let O = [? __x1__]
  [15316] (15926/2) Call[15316] app __x2__ = (HasOwnProperty O P)
  [15317] (15922/0) Call[15317] app __x0__ = (ToPropertyKey V)
  [15318] (15927/2) Normal[15318] return [? __x2__]
  [15319] (15923/0) Normal[15319] let P = [? __x0__]
  [15320] Exit[15320]
  [15321] (15924/1) Call[15321] app __x1__ = (ToObject this)
Algo: GLOBAL.Object.prototype.isPrototypeOf [1353]
  [15322] Entry[15322]
  [15323] (15929)Call[15323] app V = (GetArgument argumentsList)
  [15324] (15934/1) Normal[15324] let O = [? __x0__]
  [15325] (15935/2) Loop[15325] true
  [15326] (15940/4) Normal[15326] return false
  [15327] (15942/5) Call[15327] app __x2__ = (SameValue O V)
  [15328] LoopCont[15328]
  [15329] (15930/0) If[15329] (! (= (typeof V) Object))
  [15330] (15937/3) Call[15330] app __x1__ = (V.GetPrototypeOf V)
  [15331] Exit[15331]
  [15332] (15939/4) If[15332] (= V null)
  [15333] (15944/5) Normal[15333] return true
  [15334] (15931/0) Normal[15334] return false
  [15335] (15933/1) Call[15335] app __x0__ = (ToObject this)
  [15336] (15943/5) If[15336] (= __x2__ true)
  [15337] (15938/3) Normal[15337] V = [? __x1__]
Algo: GLOBAL.Object.prototype.propertyIsEnumerable [1354]
  [15338] Entry[15338]
  [15339] (15947)Call[15339] app V = (GetArgument argumentsList)
  [15340] (15951/1) Normal[15340] let O = [? __x1__]
  [15341] (15952/2) Call[15341] app __x2__ = (O.GetOwnProperty O P)
  [15342] (15957/4) Normal[15342] return desc.Enumerable
  [15343] Exit[15343]
  [15344] (15948/0) Call[15344] app __x0__ = (ToPropertyKey V)
  [15345] (15953/2) Normal[15345] let desc = [? __x2__]
  [15346] (15955/3) Normal[15346] return false
  [15347] (15949/0) Normal[15347] let P = [? __x0__]
  [15348] (15954/3) If[15348] (= desc undefined)
  [15349] (15950/1) Call[15349] app __x1__ = (ToObject this)
Algo: GLOBAL.Object.prototype.toLocaleString [1355]
  [15350] Entry[15350]
  [15351] (15959)Call[15351] app reserved1 = (GetArgument argumentsList)
  [15352] (15963/1) Normal[15352] return [? __x0__]
  [15353] Exit[15353]
  [15354] (15960)Call[15354] app reserved2 = (GetArgument argumentsList)
  [15355] (15961/0) Normal[15355] let O = this
  [15356] (15962/1) Call[15356] app __x0__ = (Invoke O "toString")
Algo: GLOBAL.Object.prototype.toString [1356]
  [15357] Entry[15357]
  [15358] (15965/0) If[15358] (= this undefined)
  [15359] (15971/2) Call[15359] app __x0__ = (ToObject this)
  [15360] (15972/2) Normal[15360] let O = [! __x0__]
  [15361] (15976/4) Normal[15361] let builtinTag = "Array"
  [15362] (15994/14) Call[15362] app __x2__ = (Get O SYMBOL_toStringTag)
  [15363] (15980/6) Normal[15363] let builtinTag = "Function"
  [15364] (15966/0) Normal[15364] return "[object Undefined]"
  [15365] (15968/1) If[15365] (= this null)
  [15366] (15973/3) Call[15366] app __x1__ = (IsArray O)
  [15367] (15975/4) If[15367] (= isArray true)
  [15368] (15977/4) If[15368] (! (= O.ParameterMap absent))
  [15369] (15979/4) If[15369] (! (= O.Call absent))
  [15370] (15981/4) If[15370] (! (= O.ErrorData absent))
  [15371] (15978/5) Normal[15371] let builtinTag = "Arguments"
  [15372] (15974/3) Normal[15372] let isArray = [? __x1__]
  [15373] (15969/1) Normal[15373] return "[object Null]"
  [15374] (15984/8) Normal[15374] let builtinTag = "Boolean"
  [15375] (15982/7) Normal[15375] let builtinTag = "Error"
  [15376] (15983/4) If[15376] (! (= O.BooleanData absent))
  [15377] (15990/11) Normal[15377] let builtinTag = "Date"
  [15378] (15991/4) If[15378] (! (= O.RegExpMatcher absent))
  [15379] (15992/12) Normal[15379] let builtinTag = "RegExp"
  [15380] (15993/4) Normal[15380] let builtinTag = "Object"
  [15381] (15986/9) Normal[15381] let builtinTag = "Number"
  [15382] (15995/14) Normal[15382] let tag = [? __x2__]
  [15383] (15996/15) If[15383] (! (= (typeof tag) String))
  [15384] (15987/4) If[15384] (! (= O.StringData absent))
  [15385] (15988/10) Normal[15385] let builtinTag = "String"
  [15386] (15989/4) If[15386] (! (= O.DateValue absent))
  [15387] (15999/16) Normal[15387] return (+ (+ "[object " tag) "]")
  [15388] Exit[15388]
  [15389] (15985/4) If[15389] (! (= O.NumberData absent))
  [15390] (15997/15) Normal[15390] tag = builtinTag
Algo: GLOBAL.Object.prototype.valueOf [1357]
  [15391] Entry[15391]
  [15392] (16001/0) Call[15392] app __x0__ = (ToObject this)
  [15393] (16002/0) Normal[15393] return [? __x0__]
  [15394] Exit[15394]
Algo: GLOBAL.Object.seal [1358]
  [15395] Entry[15395]
  [15396] (16004)Call[15396] app O = (GetArgument argumentsList)
  [15397] (16009/1) Normal[15397] let status = [? __x0__]
  [15398] (16010/2) If[15398] (= status false)
  [15399] (16005/0) If[15399] (! (= (typeof O) Object))
  [15400] (16011/2) Normal[15400] throw TypeError
  [15401] (16013/3) Normal[15401] return O
  [15402] (16006/0) Normal[15402] return O
  [15403] (16008/1) Call[15403] app __x0__ = (SetIntegrityLevel O ~sealed~)
  [15404] Exit[15404]
Algo: GLOBAL.Object.setPrototypeOf [1359]
  [15405] Entry[15405]
  [15406] (16015)Call[15406] app O = (GetArgument argumentsList)
  [15407] (16019/1) If[15407] (! (|| (= (typeof proto) Object) (= (typeof proto) Null)))
  [15408] (16020/1) Normal[15408] throw TypeError
  [15409] (16022/2) If[15409] (! (= (typeof O) Object))
  [15410] (16026/3) Normal[15410] let status = [? __x1__]
  [15411] (16027/4) If[15411] (= status false)
  [15412] (16016)Call[15412] app proto = (GetArgument argumentsList)
  [15413] (16025/3) Call[15413] app __x1__ = (O.SetPrototypeOf O proto)
  [15414] (16030/5) Normal[15414] return O
  [15415] Exit[15415]
  [15416] (16017/0) Call[15416] app __x0__ = (RequireObjectCoercible O)
  [15417] (16028/4) Normal[15417] throw TypeError
  [15418] (16023/2) Normal[15418] return O
  [15419] (16018/0) Normal[15419] O = [? __x0__]
Algo: GLOBAL.Object.values [1360]
  [15420] Entry[15420]
  [15421] (16032)Call[15421] app O = (GetArgument argumentsList)
  [15422] (16036/1) Normal[15422] let nameList = [? __x1__]
  [15423] (16037/2) Call[15423] app __x2__ = (CreateArrayFromList nameList)
  [15424] (16033/0) Call[15424] app __x0__ = (ToObject O)
  [15425] (16038/2) Normal[15425] return __x2__
  [15426] (16034/0) Normal[15426] let obj = [? __x0__]
  [15427] Exit[15427]
  [15428] (16035/1) Call[15428] app __x1__ = (EnumerableOwnPropertyNames obj ~value~)
Algo: GLOBAL.Promise [1361]
  [15429] Entry[15429]
  [15430] (16040)Call[15430] app executor = (GetArgument argumentsList)
  [15431] (16045/1) If[15431] (= __x0__ false)
  [15432] (16046/1) Normal[15432] throw TypeError
  [15433] (16048/2) Call[15433] app __x1__ = (OrdinaryCreateFromConstructor NewTarget "%Promise.prototype%" (new ["PromiseState", "PromiseResult", "PromiseFulfillReactions", "PromiseRejectReactions", "PromiseIsHandled"]))
  [15434] (16051/4) Normal[15434] promise.PromiseFulfillReactions = (new [])
  [15435] (16052/5) Normal[15435] promise.PromiseRejectReactions = (new [])
  [15436] (16055/7) Normal[15436] let resolvingFunctions = __x2__
  [15437] (16056/8) Call[15437] app __x3__ = (Call executor undefined (new [resolvingFunctions.Resolve, resolvingFunctions.Reject]))
  [15438] (16062/10) Normal[15438] [? __x5__]
  [15439] (16064/11) Normal[15439] return promise
  [15440] (16041/0) If[15440] (= NewTarget undefined)
  [15441] Exit[15441]
  [15442] (16050/3) Normal[15442] promise.PromiseState = ~pending~
  [15443] (16054/7) Call[15443] app __x2__ = (CreateResolvingFunctions promise)
  [15444] (16042/0) Normal[15444] throw TypeError
  [15445] (16044/1) Call[15445] app __x0__ = (IsCallable executor)
  [15446] (16058/9) Call[15446] app __x4__ = (IsAbruptCompletion completion)
  [15447] (16059/9) If[15447] __x4__
  [15448] (16053/6) Normal[15448] promise.PromiseIsHandled = false
  [15449] (16049/2) Normal[15449] let promise = [? __x1__]
  [15450] (16061/10) Call[15450] app __x5__ = (Call resolvingFunctions.Reject undefined (new [completion.Value]))
  [15451] (16057/8) Normal[15451] let completion = __x3__
Algo: GLOBAL.Promise.all [1362]
  [15452] Entry[15452]
  [15453] (16066)Call[15453] app iterable = (GetArgument argumentsList)
  [15454] (16070/2) Call[15454] app __x1__ = (GetPromiseResolve C)
  [15455] (16071/2) Normal[15455] let promiseResolve = __x1__
  [15456] (16076/4) Call[15456] app __x2__ = (Call promiseCapability.Reject undefined (new [promiseResolve.Value]))
  [15457] (16077/4) If[15457] (&& (is-completion __x2__) (! (= __x2__.Type ~normal~)))
  [15458] (16082/3) Normal[15458] promiseResolve
  [15459] (16083/4) Call[15459] app __x3__ = (GetIterator iterable)
  [15460] (16067/0) Normal[15460] let C = this
  [15461] (16072/3) If[15461] (is-completion promiseResolve)
  [15462] (16074/3) Normal[15462] promiseResolve = promiseResolve.Value
  [15463] (16080/4) Normal[15463] return promiseCapability.Promise
  [15464] (16068/1) Call[15464] app __x0__ = (NewPromiseCapability C)
  [15465] (16078/4) Normal[15465] return __x2__
  [15466] (16086/5) If[15466] (= iteratorRecord.Type ~normal~)
  [15467] (16087/5) Normal[15467] iteratorRecord = iteratorRecord.Value
  [15468] (16089/6) Call[15468] app __x4__ = (Call promiseCapability.Reject undefined (new [iteratorRecord.Value]))
  [15469] (16073/3) If[15469] (= promiseResolve.Type ~normal~)
  [15470] (16069/1) Normal[15470] let promiseCapability = [? __x0__]
  [15471] (16084/4) Normal[15471] let iteratorRecord = __x3__
  [15472] (16095/5) Normal[15472] iteratorRecord
  [15473] (16096/6) Call[15473] app __x5__ = (PerformPromiseAll iteratorRecord C promiseCapability promiseResolve)
  [15474] (16112/10) Normal[15474] return __x8__
  [15475] (16114/10) Normal[15475] return promiseCapability.Promise
  [15476] (16097/6) Normal[15476] let result = __x5__
  [15477] (16090/6) If[15477] (&& (is-completion __x4__) (! (= __x4__.Type ~normal~)))
  [15478] (16101/8) If[15478] (= iteratorRecord.Done false)
  [15479] (16103/8) Call[15479] app __x7__ = (IteratorClose iteratorRecord result)
  [15480] (16106/9) If[15480] (is-completion result)
  [15481] (16091/6) Normal[15481] return __x4__
  [15482] (16093/6) Normal[15482] return promiseCapability.Promise
  [15483] (16107/9) If[15483] (= result.Type ~normal~)
  [15484] (16108/9) Normal[15484] result = result.Value
  [15485] (16110/10) Call[15485] app __x8__ = (Call promiseCapability.Reject undefined (new [result.Value]))
  [15486] (16099/7) If[15486] __x6__
  [15487] (16118/10) Normal[15487] return result
  [15488] (16116/9) Normal[15488] result
  [15489] (16085/5) If[15489] (is-completion iteratorRecord)
  [15490] (16098/7) Call[15490] app __x6__ = (IsAbruptCompletion result)
  [15491] (16111/10) If[15491] (&& (is-completion __x8__) (! (= __x8__.Type ~normal~)))
  [15492] (16104/8) Normal[15492] result = __x7__
  [15493] Exit[15493]
Algo: GLOBAL.Promise.allSettled [1363]
  [15494] Entry[15494]
  [15495] (16120)Call[15495] app iterable = (GetArgument argumentsList)
  [15496] (16124/2) Call[15496] app __x1__ = (GetPromiseResolve C)
  [15497] (16125/2) Normal[15497] let promiseResolve = __x1__
  [15498] (16130/4) Call[15498] app __x2__ = (Call promiseCapability.Reject undefined (new [promiseResolve.Value]))
  [15499] (16131/4) If[15499] (&& (is-completion __x2__) (! (= __x2__.Type ~normal~)))
  [15500] (16136/3) Normal[15500] promiseResolve
  [15501] (16137/4) Call[15501] app __x3__ = (GetIterator iterable)
  [15502] (16121/0) Normal[15502] let C = this
  [15503] (16126/3) If[15503] (is-completion promiseResolve)
  [15504] (16128/3) Normal[15504] promiseResolve = promiseResolve.Value
  [15505] (16134/4) Normal[15505] return promiseCapability.Promise
  [15506] (16122/1) Call[15506] app __x0__ = (NewPromiseCapability C)
  [15507] (16132/4) Normal[15507] return __x2__
  [15508] (16140/5) If[15508] (= iteratorRecord.Type ~normal~)
  [15509] (16141/5) Normal[15509] iteratorRecord = iteratorRecord.Value
  [15510] (16143/6) Call[15510] app __x4__ = (Call promiseCapability.Reject undefined (new [iteratorRecord.Value]))
  [15511] (16127/3) If[15511] (= promiseResolve.Type ~normal~)
  [15512] (16123/1) Normal[15512] let promiseCapability = [? __x0__]
  [15513] (16138/4) Normal[15513] let iteratorRecord = __x3__
  [15514] (16149/5) Normal[15514] iteratorRecord
  [15515] (16150/6) Call[15515] app __x5__ = (PerformPromiseAllSettled iteratorRecord C promiseCapability promiseResolve)
  [15516] (16166/10) Normal[15516] return __x8__
  [15517] (16168/10) Normal[15517] return promiseCapability.Promise
  [15518] (16151/6) Normal[15518] let result = __x5__
  [15519] (16144/6) If[15519] (&& (is-completion __x4__) (! (= __x4__.Type ~normal~)))
  [15520] (16155/8) If[15520] (= iteratorRecord.Done false)
  [15521] (16157/8) Call[15521] app __x7__ = (IteratorClose iteratorRecord result)
  [15522] (16160/9) If[15522] (is-completion result)
  [15523] (16145/6) Normal[15523] return __x4__
  [15524] (16147/6) Normal[15524] return promiseCapability.Promise
  [15525] (16161/9) If[15525] (= result.Type ~normal~)
  [15526] (16162/9) Normal[15526] result = result.Value
  [15527] (16164/10) Call[15527] app __x8__ = (Call promiseCapability.Reject undefined (new [result.Value]))
  [15528] (16153/7) If[15528] __x6__
  [15529] (16172/10) Normal[15529] return result
  [15530] (16170/9) Normal[15530] result
  [15531] (16139/5) If[15531] (is-completion iteratorRecord)
  [15532] (16152/7) Call[15532] app __x6__ = (IsAbruptCompletion result)
  [15533] (16165/10) If[15533] (&& (is-completion __x8__) (! (= __x8__.Type ~normal~)))
  [15534] (16158/8) Normal[15534] result = __x7__
  [15535] Exit[15535]
Algo: GLOBAL.Promise.any [1364]
  [15536] Entry[15536]
  [15537] (16174)Call[15537] app iterable = (GetArgument argumentsList)
  [15538] (16178/2) Call[15538] app __x1__ = (GetPromiseResolve C)
  [15539] (16179/2) Normal[15539] let promiseResolve = __x1__
  [15540] (16184/4) Call[15540] app __x2__ = (Call promiseCapability.Reject undefined (new [promiseResolve.Value]))
  [15541] (16185/4) If[15541] (&& (is-completion __x2__) (! (= __x2__.Type ~normal~)))
  [15542] (16190/3) Normal[15542] promiseResolve
  [15543] (16191/4) Call[15543] app __x3__ = (GetIterator iterable)
  [15544] (16175/0) Normal[15544] let C = this
  [15545] (16180/3) If[15545] (is-completion promiseResolve)
  [15546] (16182/3) Normal[15546] promiseResolve = promiseResolve.Value
  [15547] (16188/4) Normal[15547] return promiseCapability.Promise
  [15548] (16176/1) Call[15548] app __x0__ = (NewPromiseCapability C)
  [15549] (16186/4) Normal[15549] return __x2__
  [15550] (16194/5) If[15550] (= iteratorRecord.Type ~normal~)
  [15551] (16195/5) Normal[15551] iteratorRecord = iteratorRecord.Value
  [15552] (16197/6) Call[15552] app __x4__ = (Call promiseCapability.Reject undefined (new [iteratorRecord.Value]))
  [15553] (16181/3) If[15553] (= promiseResolve.Type ~normal~)
  [15554] (16177/1) Normal[15554] let promiseCapability = [? __x0__]
  [15555] (16192/4) Normal[15555] let iteratorRecord = __x3__
  [15556] (16203/5) Normal[15556] iteratorRecord
  [15557] (16204/6) Call[15557] app __x5__ = (PerformPromiseAny iteratorRecord C promiseCapability promiseResolve)
  [15558] (16220/10) Normal[15558] return __x8__
  [15559] (16222/10) Normal[15559] return promiseCapability.Promise
  [15560] (16205/6) Normal[15560] let result = __x5__
  [15561] (16198/6) If[15561] (&& (is-completion __x4__) (! (= __x4__.Type ~normal~)))
  [15562] (16209/8) If[15562] (= iteratorRecord.Done false)
  [15563] (16211/8) Call[15563] app __x7__ = (IteratorClose iteratorRecord result)
  [15564] (16214/9) If[15564] (is-completion result)
  [15565] (16199/6) Normal[15565] return __x4__
  [15566] (16201/6) Normal[15566] return promiseCapability.Promise
  [15567] (16215/9) If[15567] (= result.Type ~normal~)
  [15568] (16216/9) Normal[15568] result = result.Value
  [15569] (16218/10) Call[15569] app __x8__ = (Call promiseCapability.Reject undefined (new [result.Value]))
  [15570] (16207/7) If[15570] __x6__
  [15571] (16226/10) Normal[15571] return result
  [15572] (16224/9) Normal[15572] result
  [15573] (16193/5) If[15573] (is-completion iteratorRecord)
  [15574] (16206/7) Call[15574] app __x6__ = (IsAbruptCompletion result)
  [15575] (16219/10) If[15575] (&& (is-completion __x8__) (! (= __x8__.Type ~normal~)))
  [15576] (16212/8) Normal[15576] result = __x7__
  [15577] Exit[15577]
Algo: GLOBAL.Promise.prototype.catch [1365]
  [15578] Entry[15578]
  [15579] (16228)Call[15579] app onRejected = (GetArgument argumentsList)
  [15580] (16229/0) Normal[15580] let promise = this
  [15581] (16230/1) Call[15581] app __x0__ = (Invoke promise "then" (new [undefined, onRejected]))
  [15582] (16231/1) Normal[15582] return [? __x0__]
  [15583] Exit[15583]
Algo: GLOBAL.Promise.prototype.finally [1366]
  [15584] Entry[15584]
  [15585] (16233)Call[15585] app onFinally = (GetArgument argumentsList)
  [15586] (16238/2) Call[15586] app __x0__ = (SpeciesConstructor promise INTRINSICS["%Promise%"])
  [15587] (16239/2) Normal[15587] let C = [? __x0__]
  [15588] (16243/4) If[15588] (= __x2__ false)
  [15589] (16245/5) Normal[15589] let thenFinally = onFinally
  [15590] (16248/8) Normal[15590] let stepsThenFinally = ALGORITHM["GLOBAL.ThenFinallyFunctions"]
  [15591] (16249/9) Normal[15591] let lengthThenFinally = 1i
  [15592] (16250/10) Call[15592] app __x3__ = (CreateBuiltinFunction stepsThenFinally lengthThenFinally "" (new ["Constructor", "OnFinally"]))
  [15593] (16255/14) Normal[15593] let lengthCatchFinally = 1i
  [15594] (16256/15) Call[15594] app __x4__ = (CreateBuiltinFunction stepsCatchFinally lengthCatchFinally "" (new ["Constructor", "OnFinally"]))
  [15595] (16234/0) Normal[15595] let promise = this
  [15596] (16240/3) Call[15596] app __x1__ = (IsConstructor C)
  [15597] (16257/15) Normal[15597] let catchFinally = [! __x4__]
  [15598] (16242/4) Call[15598] app __x2__ = (IsCallable onFinally)
  [15599] (16235/1) If[15599] (! (= (typeof promise) Object))
  [15600] (16252/11) Normal[15600] thenFinally.Constructor = C
  [15601] (16253/12) Normal[15601] thenFinally.OnFinally = onFinally
  [15602] (16258/16) Normal[15602] catchFinally.Constructor = C
  [15603] (16246/6) Normal[15603] let catchFinally = onFinally
  [15604] (16260/18) Call[15604] app __x5__ = (Invoke promise "then" (new [thenFinally, catchFinally]))
  [15605] (16241/3) Normal[15605] assert (= __x1__ true)
  [15606] (16236/1) Normal[15606] throw TypeError
  [15607] (16254/13) Normal[15607] let stepsCatchFinally = ALGORITHM["GLOBAL.CatchFinallyFunctions"]
  [15608] (16251/10) Normal[15608] let thenFinally = [! __x3__]
  [15609] (16259/17) Normal[15609] catchFinally.OnFinally = onFinally
  [15610] (16261/18) Normal[15610] return [? __x5__]
  [15611] Exit[15611]
Algo: GLOBAL.Promise.prototype.then [1367]
  [15612] Entry[15612]
  [15613] (16263)Call[15613] app onFulfilled = (GetArgument argumentsList)
  [15614] (16267/1) If[15614] (= __x0__ false)
  [15615] (16268/1) Normal[15615] throw TypeError
  [15616] (16270/2) Call[15616] app __x1__ = (SpeciesConstructor promise INTRINSICS["%Promise%"])
  [15617] (16273/3) Normal[15617] let resultCapability = [? __x2__]
  [15618] (16274/4) Call[15618] app __x3__ = (PerformPromiseThen promise onFulfilled onRejected resultCapability)
  [15619] (16264)Call[15619] app onRejected = (GetArgument argumentsList)
  [15620] (16272/3) Call[15620] app __x2__ = (NewPromiseCapability C)
  [15621] (16265/0) Normal[15621] let promise = this
  [15622] (16275/4) Normal[15622] return __x3__
  [15623] Exit[15623]
  [15624] (16271/2) Normal[15624] let C = [? __x1__]
  [15625] (16266/1) Call[15625] app __x0__ = (IsPromise promise)
Algo: GLOBAL.Promise.race [1368]
  [15626] Entry[15626]
  [15627] (16277)Call[15627] app iterable = (GetArgument argumentsList)
  [15628] (16281/2) Call[15628] app __x1__ = (GetPromiseResolve C)
  [15629] (16282/2) Normal[15629] let promiseResolve = __x1__
  [15630] (16287/4) Call[15630] app __x2__ = (Call promiseCapability.Reject undefined (new [promiseResolve.Value]))
  [15631] (16288/4) If[15631] (&& (is-completion __x2__) (! (= __x2__.Type ~normal~)))
  [15632] (16293/3) Normal[15632] promiseResolve
  [15633] (16294/4) Call[15633] app __x3__ = (GetIterator iterable)
  [15634] (16278/0) Normal[15634] let C = this
  [15635] (16283/3) If[15635] (is-completion promiseResolve)
  [15636] (16285/3) Normal[15636] promiseResolve = promiseResolve.Value
  [15637] (16291/4) Normal[15637] return promiseCapability.Promise
  [15638] (16279/1) Call[15638] app __x0__ = (NewPromiseCapability C)
  [15639] (16289/4) Normal[15639] return __x2__
  [15640] (16297/5) If[15640] (= iteratorRecord.Type ~normal~)
  [15641] (16298/5) Normal[15641] iteratorRecord = iteratorRecord.Value
  [15642] (16300/6) Call[15642] app __x4__ = (Call promiseCapability.Reject undefined (new [iteratorRecord.Value]))
  [15643] (16284/3) If[15643] (= promiseResolve.Type ~normal~)
  [15644] (16280/1) Normal[15644] let promiseCapability = [? __x0__]
  [15645] (16295/4) Normal[15645] let iteratorRecord = __x3__
  [15646] (16306/5) Normal[15646] iteratorRecord
  [15647] (16307/6) Call[15647] app __x5__ = (PerformPromiseRace iteratorRecord C promiseCapability promiseResolve)
  [15648] (16323/10) Normal[15648] return __x8__
  [15649] (16325/10) Normal[15649] return promiseCapability.Promise
  [15650] (16308/6) Normal[15650] let result = __x5__
  [15651] (16301/6) If[15651] (&& (is-completion __x4__) (! (= __x4__.Type ~normal~)))
  [15652] (16312/8) If[15652] (= iteratorRecord.Done false)
  [15653] (16314/8) Call[15653] app __x7__ = (IteratorClose iteratorRecord result)
  [15654] (16317/9) If[15654] (is-completion result)
  [15655] (16302/6) Normal[15655] return __x4__
  [15656] (16304/6) Normal[15656] return promiseCapability.Promise
  [15657] (16318/9) If[15657] (= result.Type ~normal~)
  [15658] (16319/9) Normal[15658] result = result.Value
  [15659] (16321/10) Call[15659] app __x8__ = (Call promiseCapability.Reject undefined (new [result.Value]))
  [15660] (16310/7) If[15660] __x6__
  [15661] (16329/10) Normal[15661] return result
  [15662] (16327/9) Normal[15662] result
  [15663] (16296/5) If[15663] (is-completion iteratorRecord)
  [15664] (16309/7) Call[15664] app __x6__ = (IsAbruptCompletion result)
  [15665] (16322/10) If[15665] (&& (is-completion __x8__) (! (= __x8__.Type ~normal~)))
  [15666] (16315/8) Normal[15666] result = __x7__
  [15667] Exit[15667]
Algo: GLOBAL.Promise.reject [1369]
  [15668] Entry[15668]
  [15669] (16331)Call[15669] app r = (GetArgument argumentsList)
  [15670] (16335/2) Call[15670] app __x1__ = (Call promiseCapability.Reject undefined (new [r]))
  [15671] (16336/2) Normal[15671] [? __x1__]
  [15672] (16332/0) Normal[15672] let C = this
  [15673] (16337/3) Normal[15673] return promiseCapability.Promise
  [15674] (16333/1) Call[15674] app __x0__ = (NewPromiseCapability C)
  [15675] Exit[15675]
  [15676] (16334/1) Normal[15676] let promiseCapability = [? __x0__]
Algo: GLOBAL.Promise.resolve [1370]
  [15677] Entry[15677]
  [15678] (16339)Call[15678] app x = (GetArgument argumentsList)
  [15679] (16344/2) Call[15679] app __x0__ = (PromiseResolve C x)
  [15680] (16345/2) Normal[15680] return [? __x0__]
  [15681] (16340/0) Normal[15681] let C = this
  [15682] Exit[15682]
  [15683] (16341/1) If[15683] (! (= (typeof C) Object))
  [15684] (16342/1) Normal[15684] throw TypeError
Algo: GLOBAL.PromiseRejectFunctions [1371]
  [15685] Entry[15685]
  [15686] (16347)Call[15686] app reason = (GetArgument argumentsList)
  [15687] (16351/4) If[15687] (= alreadyResolved.Value true)
  [15688] (16352/4) Normal[15688] return undefined
  [15689] (16354/5) Normal[15689] alreadyResolved.Value = true
  [15690] (16348/0) Normal[15690] let F = CONTEXT.Function
  [15691] (16356/6) Normal[15691] return __x0__
  [15692] Exit[15692]
  [15693] (16349/2) Normal[15693] let promise = F.Promise
  [15694] (16355/6) Call[15694] app __x0__ = (RejectPromise promise reason)
  [15695] (16350/3) Normal[15695] let alreadyResolved = F.AlreadyResolved
Algo: GLOBAL.PromiseResolveFunctions [1372]
  [15696] Entry[15696]
  [15697] (16358)Call[15697] app resolution = (GetArgument argumentsList)
  [15698] (16362/4) If[15698] (= alreadyResolved.Value true)
  [15699] (16363/4) Normal[15699] return undefined
  [15700] (16365/5) Normal[15700] alreadyResolved.Value = true
  [15701] (16369/7) Normal[15701] let selfResolutionError = (new OrdinaryObject("Prototype" -> INTRINSICS["%TypeError.prototype%"], "ErrorData" -> undefined))
  [15702] (16370/8) Call[15702] app __x1__ = (RejectPromise promise selfResolutionError)
  [15703] (16375/10) Call[15703] app __x2__ = (FulfillPromise promise resolution)
  [15704] (16376/10) Normal[15704] return __x2__
  [15705] (16359/0) Normal[15705] let F = CONTEXT.Function
  [15706] (16367/6) If[15706] (= __x0__ true)
  [15707] (16373/9) If[15707] (! (= (typeof resolution) Object))
  [15708] (16378/11) Call[15708] app __x3__ = (Get resolution "then")
  [15709] (16360/2) Normal[15709] let promise = F.Promise
  [15710] (16371/8) Normal[15710] return __x1__
  [15711] (16366/6) Call[15711] app __x0__ = (SameValue resolution promise)
  [15712] (16361/3) Normal[15712] let alreadyResolved = F.AlreadyResolved
  [15713] (16380/12) Call[15713] app __x4__ = (IsAbruptCompletion then)
  [15714] (16381/12) If[15714] __x4__
  [15715] (16388/15) If[15715] (= __x6__ false)
  [15716] (16390/16) Call[15716] app __x7__ = (FulfillPromise promise resolution)
  [15717] (16393/17) Call[15717] app __x8__ = (HostMakeJobCallback thenAction)
  [15718] (16391/16) Normal[15718] return __x7__
  [15719] (16383/13) Call[15719] app __x5__ = (RejectPromise promise then.Value)
  [15720] (16384/13) Normal[15720] return __x5__
  [15721] (16395/18) Call[15721] app __x9__ = (NewPromiseResolveThenableJob promise resolution thenJobCallback)
  [15722] (16396/18) Normal[15722] let job = __x9__
  [15723] (16394/17) Normal[15723] let thenJobCallback = __x8__
  [15724] (16386/14) Normal[15724] let thenAction = then.Value
  [15725] (16399/20) Normal[15725] return undefined
  [15726] Exit[15726]
  [15727] (16398/19) Normal[15727] __x10__
  [15728] (16379/11) Normal[15728] let then = __x3__
  [15729] (16387/15) Call[15729] app __x6__ = (IsCallable thenAction)
  [15730] (16397/19) Call[15730] app __x10__ = (HostEnqueuePromiseJob job.Job job.Realm)
Algo: GLOBAL.Promise[SYMBOL_species] [1373]
  [15731] Entry[15731]
  [15732] (16400/0) Normal[15732] return this
  [15733] Exit[15733]
Algo: GLOBAL.Proxy [1374]
  [15734] Entry[15734]
  [15735] (16402)Call[15735] app target = (GetArgument argumentsList)
  [15736] (16407/1) Call[15736] app __x0__ = (ProxyCreate target handler)
  [15737] (16408/1) Normal[15737] return [? __x0__]
  [15738] (16403)Call[15738] app handler = (GetArgument argumentsList)
  [15739] Exit[15739]
  [15740] (16404/0) If[15740] (= NewTarget undefined)
  [15741] (16405/0) Normal[15741] throw TypeError
Algo: GLOBAL.Proxy.revocable [1375]
  [15742] Entry[15742]
  [15743] (16410)Call[15743] app target = (GetArgument argumentsList)
  [15744] (16414/1) Normal[15744] let steps = ALGORITHM["GLOBAL.ProxyRevocationFunctions"]
  [15745] (16415/2) Normal[15745] let length = 0i
  [15746] (16419/5) Call[15746] app __x2__ = (OrdinaryObjectCreate INTRINSICS["%Object.prototype%"])
  [15747] (16420/5) Normal[15747] let result = [! __x2__]
  [15748] (16423/7) Call[15748] app __x4__ = (CreateDataPropertyOrThrow result "revoke" revoker)
  [15749] (16424/7) Normal[15749] [! __x4__]
  [15750] (16411)Call[15750] app handler = (GetArgument argumentsList)
  [15751] (16416/3) Call[15751] app __x1__ = (CreateBuiltinFunction steps length "" (new ["RevocableProxy"]))
  [15752] (16418/4) Normal[15752] revoker.RevocableProxy = p
  [15753] (16422/6) Normal[15753] [! __x3__]
  [15754] (16412/0) Call[15754] app __x0__ = (ProxyCreate target handler)
  [15755] (16421/6) Call[15755] app __x3__ = (CreateDataPropertyOrThrow result "proxy" p)
  [15756] (16417/3) Normal[15756] let revoker = [! __x1__]
  [15757] (16413/0) Normal[15757] let p = [? __x0__]
  [15758] (16425/8) Normal[15758] return result
  [15759] Exit[15759]
Algo: GLOBAL.ProxyRevocationFunctions [1376]
  [15760] Entry[15760]
  [15761] (16427/0) Normal[15761] let F = CONTEXT.Function
  [15762] (16432/3) Normal[15762] F.RevocableProxy = null
  [15763] (16433/5) Normal[15763] p.ProxyTarget = null
  [15764] (16428/1) Normal[15764] let p = F.RevocableProxy
  [15765] (16434/6) Normal[15765] p.ProxyHandler = null
  [15766] (16429/2) If[15766] (= p null)
  [15767] (16435/7) Normal[15767] return undefined
  [15768] (16430/2) Normal[15768] return undefined
  [15769] Exit[15769]
Algo: GLOBAL.RangeError [1377]
  [15770] Entry[15770]
  [15771] (16437)Call[15771] app message = (GetArgument argumentsList)
  [15772] (16438)Normal[15772] ??? "Need manual modeling"
  [15773] Exit[15773]
Algo: GLOBAL.ReferenceError [1378]
  [15774] Entry[15774]
  [15775] (16440)Call[15775] app message = (GetArgument argumentsList)
  [15776] (16441)Normal[15776] ??? "Need manual modeling"
  [15777] Exit[15777]
Algo: GLOBAL.Reflect.apply [1379]
  [15778] Entry[15778]
  [15779] (16443)Call[15779] app target = (GetArgument argumentsList)
  [15780] (16447/0) If[15780] (= __x0__ false)
  [15781] (16448/0) Normal[15781] throw TypeError
  [15782] (16450/1) Call[15782] app __x1__ = (CreateListFromArrayLike argumentsList)
  [15783] (16453/2) Normal[15783] __x2__
  [15784] (16454/3) Call[15784] app __x3__ = (Call target thisArgument args)
  [15785] (16444)Call[15785] app thisArgument = (GetArgument argumentsList)
  [15786] (16452/2) Call[15786] app __x2__ = (PrepareForTailCall)
  [15787] (16445)Call[15787] app argumentsList = (GetArgument argumentsList)
  [15788] (16455/3) Normal[15788] return [? __x3__]
  [15789] Exit[15789]
  [15790] (16451/1) Normal[15790] let args = [? __x1__]
  [15791] (16446/0) Call[15791] app __x0__ = (IsCallable target)
Algo: GLOBAL.Reflect.construct [1380]
  [15792] Entry[15792]
  [15793] (16457)Call[15793] app target = (GetArgument argumentsList)
  [15794] (16461/0) If[15794] (= __x0__ false)
  [15795] (16462/0) Normal[15795] throw TypeError
  [15796] (16464/1) If[15796] (= newTarget absent)
  [15797] (16468/2) If[15797] (= __x1__ false)
  [15798] (16469/2) Normal[15798] throw TypeError
  [15799] (16471/3) Call[15799] app __x2__ = (CreateListFromArrayLike argumentsList)
  [15800] (16473/4) Call[15800] app __x3__ = (Construct target args newTarget)
  [15801] (16474/4) Normal[15801] return [? __x3__]
  [15802] (16458)Call[15802] app argumentsList = (GetArgument argumentsList)
  [15803] (16467/2) Call[15803] app __x1__ = (IsConstructor newTarget)
  [15804] (16472/3) Normal[15804] let args = [? __x2__]
  [15805] (16459)Call[15805] app newTarget = (GetArgument argumentsList)
  [15806] (16465/1) Normal[15806] newTarget = target
  [15807] (16460/0) Call[15807] app __x0__ = (IsConstructor target)
  [15808] Exit[15808]
Algo: GLOBAL.Reflect.defineProperty [1381]
  [15809] Entry[15809]
  [15810] (16476)Call[15810] app target = (GetArgument argumentsList)
  [15811] (16480/0) Normal[15811] throw TypeError
  [15812] (16482/1) Call[15812] app __x0__ = (ToPropertyKey propertyKey)
  [15813] (16486/3) Call[15813] app __x2__ = (target.DefineOwnProperty target key desc)
  [15814] (16487/3) Normal[15814] return [? __x2__]
  [15815] (16477)Call[15815] app propertyKey = (GetArgument argumentsList)
  [15816] (16483/1) Normal[15816] let key = [? __x0__]
  [15817] (16485/2) Normal[15817] let desc = [? __x1__]
  [15818] (16478)Call[15818] app attributes = (GetArgument argumentsList)
  [15819] (16484/2) Call[15819] app __x1__ = (ToPropertyDescriptor attributes)
  [15820] (16479/0) If[15820] (! (= (typeof target) Object))
  [15821] Exit[15821]
Algo: GLOBAL.Reflect.deleteProperty [1382]
  [15822] Entry[15822]
  [15823] (16489)Call[15823] app target = (GetArgument argumentsList)
  [15824] (16494/1) Call[15824] app __x0__ = (ToPropertyKey propertyKey)
  [15825] (16495/1) Normal[15825] let key = [? __x0__]
  [15826] (16490)Call[15826] app propertyKey = (GetArgument argumentsList)
  [15827] (16496/2) Call[15827] app __x1__ = (target.Delete target key)
  [15828] (16491/0) If[15828] (! (= (typeof target) Object))
  [15829] (16497/2) Normal[15829] return [? __x1__]
  [15830] (16492/0) Normal[15830] throw TypeError
  [15831] Exit[15831]
Algo: GLOBAL.Reflect.get [1383]
  [15832] Entry[15832]
  [15833] (16499)Call[15833] app target = (GetArgument argumentsList)
  [15834] (16503/0) Normal[15834] throw TypeError
  [15835] (16505/1) Call[15835] app __x0__ = (ToPropertyKey propertyKey)
  [15836] (16510/4) Call[15836] app __x1__ = (target.Get target key receiver)
  [15837] (16511/4) Normal[15837] return [? __x1__]
  [15838] (16500)Call[15838] app propertyKey = (GetArgument argumentsList)
  [15839] (16506/1) Normal[15839] let key = [? __x0__]
  [15840] (16508/3) Normal[15840] receiver = target
  [15841] (16501)Call[15841] app receiver = (GetArgument argumentsList)
  [15842] (16507/2) If[15842] (= receiver absent)
  [15843] (16502/0) If[15843] (! (= (typeof target) Object))
  [15844] Exit[15844]
Algo: GLOBAL.Reflect.getOwnPropertyDescriptor [1384]
  [15845] Entry[15845]
  [15846] (16513)Call[15846] app target = (GetArgument argumentsList)
  [15847] (16518/1) Call[15847] app __x0__ = (ToPropertyKey propertyKey)
  [15848] (16519/1) Normal[15848] let key = [? __x0__]
  [15849] (16523/3) Normal[15849] return __x2__
  [15850] Exit[15850]
  [15851] (16514)Call[15851] app propertyKey = (GetArgument argumentsList)
  [15852] (16520/2) Call[15852] app __x1__ = (target.GetOwnProperty target key)
  [15853] (16522/3) Call[15853] app __x2__ = (FromPropertyDescriptor desc)
  [15854] (16515/0) If[15854] (! (= (typeof target) Object))
  [15855] (16521/2) Normal[15855] let desc = [? __x1__]
  [15856] (16516/0) Normal[15856] throw TypeError
Algo: GLOBAL.Reflect.getPrototypeOf [1385]
  [15857] Entry[15857]
  [15858] (16525)Call[15858] app target = (GetArgument argumentsList)
  [15859] (16530/1) Normal[15859] return [? __x0__]
  [15860] Exit[15860]
  [15861] (16526/0) If[15861] (! (= (typeof target) Object))
  [15862] (16527/0) Normal[15862] throw TypeError
  [15863] (16529/1) Call[15863] app __x0__ = (target.GetPrototypeOf target)
Algo: GLOBAL.Reflect.has [1386]
  [15864] Entry[15864]
  [15865] (16532)Call[15865] app target = (GetArgument argumentsList)
  [15866] (16537/1) Call[15866] app __x0__ = (ToPropertyKey propertyKey)
  [15867] (16538/1) Normal[15867] let key = [? __x0__]
  [15868] (16533)Call[15868] app propertyKey = (GetArgument argumentsList)
  [15869] (16539/2) Call[15869] app __x1__ = (target.HasProperty target key)
  [15870] (16534/0) If[15870] (! (= (typeof target) Object))
  [15871] (16540/2) Normal[15871] return [? __x1__]
  [15872] (16535/0) Normal[15872] throw TypeError
  [15873] Exit[15873]
Algo: GLOBAL.Reflect.isExtensible [1387]
  [15874] Entry[15874]
  [15875] (16542)Call[15875] app target = (GetArgument argumentsList)
  [15876] (16547/1) Normal[15876] return [? __x0__]
  [15877] Exit[15877]
  [15878] (16543/0) If[15878] (! (= (typeof target) Object))
  [15879] (16544/0) Normal[15879] throw TypeError
  [15880] (16546/1) Call[15880] app __x0__ = (target.IsExtensible target)
Algo: GLOBAL.Reflect.ownKeys [1388]
  [15881] Entry[15881]
  [15882] (16549)Call[15882] app target = (GetArgument argumentsList)
  [15883] (16554/1) Normal[15883] let keys = [? __x0__]
  [15884] (16555/2) Call[15884] app __x1__ = (CreateArrayFromList keys)
  [15885] (16550/0) If[15885] (! (= (typeof target) Object))
  [15886] (16556/2) Normal[15886] return __x1__
  [15887] (16551/0) Normal[15887] throw TypeError
  [15888] (16553/1) Call[15888] app __x0__ = (target.OwnPropertyKeys target)
  [15889] Exit[15889]
Algo: GLOBAL.Reflect.preventExtensions [1389]
  [15890] Entry[15890]
  [15891] (16558)Call[15891] app target = (GetArgument argumentsList)
  [15892] (16563/1) Normal[15892] return [? __x0__]
  [15893] Exit[15893]
  [15894] (16559/0) If[15894] (! (= (typeof target) Object))
  [15895] (16560/0) Normal[15895] throw TypeError
  [15896] (16562/1) Call[15896] app __x0__ = (target.PreventExtensions target)
Algo: GLOBAL.Reflect.set [1390]
  [15897] Entry[15897]
  [15898] (16565)Call[15898] app target = (GetArgument argumentsList)
  [15899] (16569/0) If[15899] (! (= (typeof target) Object))
  [15900] (16570/0) Normal[15900] throw TypeError
  [15901] (16572/1) Call[15901] app __x0__ = (ToPropertyKey propertyKey)
  [15902] (16575/3) Normal[15902] receiver = target
  [15903] (16577/4) Call[15903] app __x1__ = (target.Set target key V receiver)
  [15904] (16566)Call[15904] app propertyKey = (GetArgument argumentsList)
  [15905] (16574/2) If[15905] (= receiver absent)
  [15906] (16567)Call[15906] app V = (GetArgument argumentsList)
  [15907] (16578/4) Normal[15907] return [? __x1__]
  [15908] Exit[15908]
  [15909] (16573/1) Normal[15909] let key = [? __x0__]
  [15910] (16568)Call[15910] app receiver = (GetArgument argumentsList)
Algo: GLOBAL.Reflect.setPrototypeOf [1391]
  [15911] Entry[15911]
  [15912] (16580)Call[15912] app target = (GetArgument argumentsList)
  [15913] (16585/1) If[15913] (&& (! (= (typeof proto) Object)) (! (= proto null)))
  [15914] (16586/1) Normal[15914] throw TypeError
  [15915] (16588/2) Call[15915] app __x0__ = (target.SetPrototypeOf target proto)
  [15916] (16581)Call[15916] app proto = (GetArgument argumentsList)
  [15917] (16582/0) If[15917] (! (= (typeof target) Object))
  [15918] (16589/2) Normal[15918] return [? __x0__]
  [15919] (16583/0) Normal[15919] throw TypeError
  [15920] Exit[15920]
Algo: GLOBAL.RegExp [1392]
  [15921] Entry[15921]
  [15922] (16591)Call[15922] app pattern = (GetArgument argumentsList)
  [15923] (16595/1) If[15923] (= NewTarget undefined)
  [15924] (16597/2) Normal[15924] let newTarget = CONTEXT.Function
  [15925] (16607/1) Normal[15925] let newTarget = NewTarget
  [15926] (16602/5) Call[15926] app __x2__ = (SameValue newTarget patternConstructor)
  [15927] (16603/5) If[15927] (= __x2__ true)
  [15928] (16608/7) If[15928] (&& (= (typeof pattern) Object) (! (= pattern.RegExpMatcher absent)))
  [15929] (16610/8) Normal[15929] let P = pattern.OriginalSource
  [15930] (16614/7) If[15930] (= patternIsRegExp true)
  [15931] (16592)Call[15931] app flags = (GetArgument argumentsList)
  [15932] (16598/3) If[15932] (&& (= patternIsRegExp true) (= flags undefined))
  [15933] (16601/4) Normal[15933] let patternConstructor = [? __x1__]
  [15934] (16593/0) Call[15934] app __x0__ = (IsRegExp pattern)
  [15935] (16612/9) Normal[15935] let F = pattern.OriginalFlags
  [15936] (16626/19) Call[15936] app __x5__ = (RegExpAlloc newTarget)
  [15937] (16604/5) Normal[15937] return pattern
  [15938] (16600/4) Call[15938] app __x1__ = (Get pattern "constructor")
  [15939] (16594/0) Normal[15939] let patternIsRegExp = [? __x0__]
  [15940] (16613/9) Normal[15940] let F = flags
  [15941] (16611/9) If[15941] (= flags undefined)
  [15942] (16621/14) Normal[15942] let F = [? __x4__]
  [15943] (16622/13) Normal[15943] let F = flags
  [15944] (16616/12) Call[15944] app __x3__ = (Get pattern "source")
  [15945] (16617/12) Normal[15945] let P = [? __x3__]
  [15946] (16627/19) Normal[15946] let O = [? __x5__]
  [15947] (16628/20) Call[15947] app __x6__ = (RegExpInitialize O P F)
  [15948] (16618/13) If[15948] (= flags undefined)
  [15949] (16620/14) Call[15949] app __x4__ = (Get pattern "flags")
  [15950] (16625/18) Normal[15950] let F = flags
  [15951] (16629/20) Normal[15951] return [? __x6__]
  [15952] Exit[15952]
  [15953] (16624/17) Normal[15953] let P = pattern
Algo: GLOBAL.RegExp.prototype.dotAll [1393]
  [15954] Entry[15954]
  [15955] (16631/0) Normal[15955] let R = this
  [15956] (16637/3) Call[15956] app __x0__ = (SameValue R INTRINSICS["%RegExp.prototype%"])
  [15957] (16638/3) If[15957] (= __x0__ true)
  [15958] (16643/6) If[15958] (contains flags "s")
  [15959] (16644/6) Normal[15959] return true
  [15960] (16646/7) Normal[15960] return false
  [15961] (16632/1) If[15961] (! (= (typeof R) Object))
  [15962] (16639/3) Normal[15962] return undefined
  [15963] (16640/3) Normal[15963] throw TypeError
  [15964] (16642/5) Normal[15964] let flags = R.OriginalFlags
  [15965] (16633/1) Normal[15965] throw TypeError
  [15966] (16635/2) If[15966] (= R.OriginalFlags absent)
  [15967] Exit[15967]
Algo: GLOBAL.RegExp.prototype.exec [1394]
  [15968] Entry[15968]
  [15969] (16648)Call[15969] app string = (GetArgument argumentsList)
  [15970] (16652/2) Call[15970] app __x1__ = (ToString string)
  [15971] (16653/2) Normal[15971] let S = [? __x1__]
  [15972] (16649/0) Normal[15972] let R = this
  [15973] (16654/3) Call[15973] app __x2__ = (RegExpBuiltinExec R S)
  [15974] (16650/1) Call[15974] app __x0__ = (RequireInternalSlot R "RegExpMatcher")
  [15975] (16655/3) Normal[15975] return [? __x2__]
  [15976] (16651/1) Normal[15976] [? __x0__]
  [15977] Exit[15977]
Algo: GLOBAL.RegExp.prototype.flags [1395]
  [15978] Entry[15978]
  [15979] (16657/0) Normal[15979] let R = this
  [15980] (16662/3) Call[15980] app __x0__ = (Get R "global")
  [15981] (16663/3) Call[15981] app __x1__ = (ToBoolean [? __x0__])
  [15982] (16668/5) Call[15982] app __x2__ = (Get R "ignoreCase")
  [15983] (16669/5) Call[15983] app __x3__ = (ToBoolean [? __x2__])
  [15984] (16672/6) Normal[15984] let result = (+ result "i")
  [15985] (16674/7) Call[15985] app __x4__ = (Get R "multiline")
  [15986] (16658/1) If[15986] (! (= (typeof R) Object))
  [15987] (16664/3) Normal[15987] let global = [! __x1__]
  [15988] (16666/4) Normal[15988] let result = (+ result "g")
  [15989] (16671/6) If[15989] (= ignoreCase true)
  [15990] (16659/1) Normal[15990] throw TypeError
  [15991] (16661/2) Normal[15991] let result = ""
  [15992] (16670/5) Normal[15992] let ignoreCase = [! __x3__]
  [15993] (16665/4) If[15993] (= global true)
  [15994] (16677/8) If[15994] (= multiline true)
  [15995] (16678/8) Normal[15995] let result = (+ result "m")
  [15996] (16680/9) Call[15996] app __x6__ = (Get R "dotAll")
  [15997] (16675/7) Call[15997] app __x5__ = (ToBoolean [? __x4__])
  [15998] (16684/10) Normal[15998] let result = (+ result "s")
  [15999] (16686/11) Call[15999] app __x8__ = (Get R "unicode")
  [16000] (16687/11) Call[16000] app __x9__ = (ToBoolean [? __x8__])
  [16001] (16681/9) Call[16001] app __x7__ = (ToBoolean [? __x6__])
  [16002] (16690/12) Normal[16002] let result = (+ result "u")
  [16003] (16692/13) Call[16003] app __x10__ = (Get R "sticky")
  [16004] (16689/12) If[16004] (= unicode true)
  [16005] (16682/9) Normal[16005] let dotAll = [! __x7__]
  [16006] (16695/14) If[16006] (= sticky true)
  [16007] (16696/14) Normal[16007] let result = (+ result "y")
  [16008] (16698/15) Normal[16008] return result
  [16009] (16676/7) Normal[16009] let multiline = [! __x5__]
  [16010] (16694/13) Normal[16010] let sticky = [! __x11__]
  [16011] (16683/10) If[16011] (= dotAll true)
  [16012] (16688/11) Normal[16012] let unicode = [! __x9__]
  [16013] Exit[16013]
  [16014] (16693/13) Call[16014] app __x11__ = (ToBoolean [? __x10__])
Algo: GLOBAL.RegExp.prototype.global [1396]
  [16015] Entry[16015]
  [16016] (16700/0) Normal[16016] let R = this
  [16017] (16706/3) Call[16017] app __x0__ = (SameValue R INTRINSICS["%RegExp.prototype%"])
  [16018] (16707/3) If[16018] (= __x0__ true)
  [16019] (16712/6) If[16019] (contains flags "g")
  [16020] (16713/6) Normal[16020] return true
  [16021] (16715/7) Normal[16021] return false
  [16022] (16701/1) If[16022] (! (= (typeof R) Object))
  [16023] (16708/3) Normal[16023] return undefined
  [16024] (16709/3) Normal[16024] throw TypeError
  [16025] (16711/5) Normal[16025] let flags = R.OriginalFlags
  [16026] (16702/1) Normal[16026] throw TypeError
  [16027] (16704/2) If[16027] (= R.OriginalFlags absent)
  [16028] Exit[16028]
Algo: GLOBAL.RegExp.prototype.ignoreCase [1397]
  [16029] Entry[16029]
  [16030] (16717/0) Normal[16030] let R = this
  [16031] (16723/3) Call[16031] app __x0__ = (SameValue R INTRINSICS["%RegExp.prototype%"])
  [16032] (16724/3) If[16032] (= __x0__ true)
  [16033] (16729/6) If[16033] (contains flags "i")
  [16034] (16730/6) Normal[16034] return true
  [16035] (16732/7) Normal[16035] return false
  [16036] (16718/1) If[16036] (! (= (typeof R) Object))
  [16037] (16725/3) Normal[16037] return undefined
  [16038] (16726/3) Normal[16038] throw TypeError
  [16039] (16728/5) Normal[16039] let flags = R.OriginalFlags
  [16040] (16719/1) Normal[16040] throw TypeError
  [16041] (16721/2) If[16041] (= R.OriginalFlags absent)
  [16042] Exit[16042]
Algo: GLOBAL.RegExp.prototype.multiline [1398]
  [16043] Entry[16043]
  [16044] (16734/0) Normal[16044] let R = this
  [16045] (16740/3) Call[16045] app __x0__ = (SameValue R INTRINSICS["%RegExp.prototype%"])
  [16046] (16741/3) If[16046] (= __x0__ true)
  [16047] (16746/6) If[16047] (contains flags "m")
  [16048] (16747/6) Normal[16048] return true
  [16049] (16749/7) Normal[16049] return false
  [16050] (16735/1) If[16050] (! (= (typeof R) Object))
  [16051] (16742/3) Normal[16051] return undefined
  [16052] (16743/3) Normal[16052] throw TypeError
  [16053] (16745/5) Normal[16053] let flags = R.OriginalFlags
  [16054] (16736/1) Normal[16054] throw TypeError
  [16055] (16738/2) If[16055] (= R.OriginalFlags absent)
  [16056] Exit[16056]
Algo: GLOBAL.RegExp.prototype.source [1399]
  [16057] Entry[16057]
  [16058] (16751/0) Normal[16058] let R = this
  [16059] (16757/3) Call[16059] app __x0__ = (SameValue R INTRINSICS["%RegExp.prototype%"])
  [16060] (16758/3) If[16060] (= __x0__ true)
  [16061] (16763/6) Normal[16061] let src = R.OriginalSource
  [16062] (16764/7) Normal[16062] let flags = R.OriginalFlags
  [16063] (16752/1) If[16063] (! (= (typeof R) Object))
  [16064] (16759/3) Normal[16064] return "(?:)"
  [16065] (16760/3) Normal[16065] throw TypeError
  [16066] (16762/5) Normal[16066] assert (! (= R.OriginalFlags absent))
  [16067] (16766/8) Normal[16067] return __x1__
  [16068] Exit[16068]
  [16069] (16753/1) Normal[16069] throw TypeError
  [16070] (16755/2) If[16070] (= R.OriginalSource absent)
  [16071] (16765/8) Call[16071] app __x1__ = (EscapeRegExpPattern src flags)
Algo: GLOBAL.RegExp.prototype.sticky [1400]
  [16072] Entry[16072]
  [16073] (16768/0) Normal[16073] let R = this
  [16074] (16774/3) Call[16074] app __x0__ = (SameValue R INTRINSICS["%RegExp.prototype%"])
  [16075] (16775/3) If[16075] (= __x0__ true)
  [16076] (16780/6) If[16076] (contains flags "y")
  [16077] (16781/6) Normal[16077] return true
  [16078] (16783/7) Normal[16078] return false
  [16079] (16769/1) If[16079] (! (= (typeof R) Object))
  [16080] (16776/3) Normal[16080] return undefined
  [16081] (16777/3) Normal[16081] throw TypeError
  [16082] (16779/5) Normal[16082] let flags = R.OriginalFlags
  [16083] (16770/1) Normal[16083] throw TypeError
  [16084] (16772/2) If[16084] (= R.OriginalFlags absent)
  [16085] Exit[16085]
Algo: GLOBAL.RegExp.prototype.test [1401]
  [16086] Entry[16086]
  [16087] (16785)Call[16087] app S = (GetArgument argumentsList)
  [16088] (16790/2) Call[16088] app __x0__ = (ToString S)
  [16089] (16791/2) Normal[16089] let string = [? __x0__]
  [16090] (16795/4) Normal[16090] return true
  [16091] Exit[16091]
  [16092] (16786/0) Normal[16092] let R = this
  [16093] (16792/3) Call[16093] app __x1__ = (RegExpExec R string)
  [16094] (16794/4) If[16094] (! (= match null))
  [16095] (16796/4) Normal[16095] return false
  [16096] (16787/1) If[16096] (! (= (typeof R) Object))
  [16097] (16793/3) Normal[16097] let match = [? __x1__]
  [16098] (16788/1) Normal[16098] throw TypeError
Algo: GLOBAL.RegExp.prototype.toString [1402]
  [16099] Entry[16099]
  [16100] (16798/0) Normal[16100] let R = this
  [16101] (16803/2) Call[16101] app __x1__ = (ToString [? __x0__])
  [16102] (16804/2) Normal[16102] let pattern = [? __x1__]
  [16103] (16808/4) Normal[16103] let result = (+ (+ (+ "/" pattern) "/") flags)
  [16104] (16809/5) Normal[16104] return result
  [16105] (16799/1) If[16105] (! (= (typeof R) Object))
  [16106] (16805/3) Call[16106] app __x2__ = (Get R "flags")
  [16107] (16807/3) Normal[16107] let flags = [? __x3__]
  [16108] (16800/1) Normal[16108] throw TypeError
  [16109] (16802/2) Call[16109] app __x0__ = (Get R "source")
  [16110] (16806/3) Call[16110] app __x3__ = (ToString [? __x2__])
  [16111] Exit[16111]
Algo: GLOBAL.RegExp.prototype.unicode [1403]
  [16112] Entry[16112]
  [16113] (16811/0) Normal[16113] let R = this
  [16114] (16817/3) Call[16114] app __x0__ = (SameValue R INTRINSICS["%RegExp.prototype%"])
  [16115] (16818/3) If[16115] (= __x0__ true)
  [16116] (16823/6) If[16116] (contains flags "u")
  [16117] (16824/6) Normal[16117] return true
  [16118] (16826/7) Normal[16118] return false
  [16119] (16812/1) If[16119] (! (= (typeof R) Object))
  [16120] (16819/3) Normal[16120] return undefined
  [16121] (16820/3) Normal[16121] throw TypeError
  [16122] (16822/5) Normal[16122] let flags = R.OriginalFlags
  [16123] (16813/1) Normal[16123] throw TypeError
  [16124] (16815/2) If[16124] (= R.OriginalFlags absent)
  [16125] Exit[16125]
Algo: GLOBAL.RegExp.prototype[SYMBOL_matchAll] [1404]
  [16126] Entry[16126]
  [16127] (16828)Call[16127] app string = (GetArgument argumentsList)
  [16128] (16833/2) Call[16128] app __x0__ = (ToString string)
  [16129] (16834/2) Normal[16129] let S = [? __x0__]
  [16130] (16838/4) Call[16130] app __x3__ = (ToString [? __x2__])
  [16131] (16839/4) Normal[16131] let flags = [? __x3__]
  [16132] (16842/6) Call[16132] app __x5__ = (Get R "lastIndex")
  [16133] (16843/6) Call[16133] app __x6__ = (ToLength [? __x5__])
  [16134] (16848/8) Normal[16134] let global = true
  [16135] (16850/10) If[16135] (contains flags "u")
  [16136] (16829/0) Normal[16136] let R = this
  [16137] (16835/3) Call[16137] app __x1__ = (SpeciesConstructor R INTRINSICS["%RegExp%"])
  [16138] (16849/8) Normal[16138] let global = false
  [16139] (16837/4) Call[16139] app __x2__ = (Get R "flags")
  [16140] (16841/5) Normal[16140] let matcher = [? __x4__]
  [16141] (16830/1) If[16141] (! (= (typeof R) Object))
  [16142] (16845/7) Call[16142] app __x7__ = (Set matcher "lastIndex" lastIndex true)
  [16143] (16846/7) Normal[16143] [? __x7__]
  [16144] (16851/10) Normal[16144] let fullUnicode = true
  [16145] (16852/10) Normal[16145] let fullUnicode = false
  [16146] (16840/5) Call[16146] app __x4__ = (Construct C (new [R, flags]))
  [16147] (16836/3) Normal[16147] let C = [? __x1__]
  [16148] (16831/1) Normal[16148] throw TypeError
  [16149] (16847/8) If[16149] (contains flags "g")
  [16150] (16844/6) Normal[16150] let lastIndex = [? __x6__]
  [16151] (16853/12) Call[16151] app __x8__ = (CreateRegExpStringIterator matcher S global fullUnicode)
  [16152] (16854/12) Normal[16152] return [! __x8__]
  [16153] Exit[16153]
Algo: GLOBAL.RegExp.prototype[SYMBOL_match] [1405]
  [16154] Entry[16154]
  [16155] (16856)Call[16155] app string = (GetArgument argumentsList)
  [16156] (16861/2) Call[16156] app __x0__ = (ToString string)
  [16157] (16862/2) Normal[16157] let S = [? __x0__]
  [16158] (16866/4) If[16158] (= global false)
  [16159] (16868/5) Call[16159] app __x3__ = (RegExpExec rx S)
  [16160] (16871/7) Normal[16160] assert (= global true)
  [16161] (16872/8) Call[16161] app __x4__ = (Get rx "unicode")
  [16162] (16873/8) Call[16162] app __x5__ = (ToBoolean [? __x4__])
  [16163] (16857/0) Normal[16163] let rx = this
  [16164] (16863/3) Call[16164] app __x1__ = (Get rx "global")
  [16165] (16865/3) Normal[16165] let global = [! __x2__]
  [16166] (16858/1) If[16166] (! (= (typeof rx) Object))
  [16167] (16869/5) Normal[16167] return [? __x3__]
  [16168] Exit[16168]
  [16169] (16876/9) Normal[16169] [? __x6__]
  [16170] (16877/10) Call[16170] app __x7__ = (ArrayCreate 0i)
  [16171] (16864/3) Call[16171] app __x2__ = (ToBoolean [? __x1__])
  [16172] (16859/1) Normal[16172] throw TypeError
  [16173] (16874/8) Normal[16173] let fullUnicode = [! __x5__]
  [16174] (16905/23) Normal[16174] [? __x16__]
  [16175] (16907/24) Normal[16175] n = (+ n 1i)
  [16176] (16883/13) Normal[16176] let result = [? __x8__]
  [16177] (16884/14) If[16177] (= result null)
  [16178] (16900/21) Call[16178] app __x14__ = (ToLength [? __x13__])
  [16179] (16901/21) Normal[16179] let thisIndex = [? __x14__]
  [16180] (16886/15) If[16180] (== n 0i)
  [16181] (16891/18) Call[16181] app __x9__ = (Get result "0")
  [16182] (16878/10) Normal[16182] let A = [! __x7__]
  [16183] (16879/11) Normal[16183] let n = 0i
  [16184] (16892/18) Call[16184] app __x10__ = (ToString [? __x9__])
  [16185] (16880/12) Loop[16185] true
  [16186] (16895/19) Call[16186] app __x12__ = (CreateDataPropertyOrThrow A [! __x11__] matchStr)
  [16187] (16896/19) Normal[16187] [! __x12__]
  [16188] (16889/16) Normal[16188] return A
  [16189] LoopCont[16189]
  [16190] (16902/22) Call[16190] app __x15__ = (AdvanceStringIndex S thisIndex fullUnicode)
  [16191] (16904/23) Call[16191] app __x16__ = (Set rx "lastIndex" nextIndex true)
  [16192] (16875/9) Call[16192] app __x6__ = (Set rx "lastIndex" 0i true)
  [16193] (16894/19) Call[16193] app __x11__ = (ToString n)
  [16194] (16897/20) If[16194] (= matchStr "")
  [16195] (16882/13) Call[16195] app __x8__ = (RegExpExec rx S)
  [16196] (16887/15) Normal[16196] return null
  [16197] (16903/22) Normal[16197] let nextIndex = __x15__
  [16198] (16899/21) Call[16198] app __x13__ = (Get rx "lastIndex")
  [16199] (16893/18) Normal[16199] let matchStr = [? __x10__]
Algo: GLOBAL.RegExp.prototype[SYMBOL_replace] [1406]
  [16200] (16913/1) Normal[16200] throw TypeError
  [16201] (16915/2) Call[16201] app __x0__ = (ToString string)
  [16202] (17038/59) Normal[16202] return accumulatedResult
  [16203] (17040/60) Normal[16203] ??? "Return the string - concatenation of id:{accumulatedResult} and the substring of id:{S} from id:{nextSourcePosition} ."
  [16204] (16988/37) Normal[16204] let capN = [? __x24__]
  [16205] (16989/38) If[16205] (! (= capN undefined))
  [16206] (17027/57) Normal[16206] let __x34__ = ""
  [16207] (17028/57) Normal[16207] let __x35__ = nextSourcePosition
  [16208] Entry[16208]
  [16209] (16909)Call[16209] app string = (GetArgument argumentsList)
  [16210] (17009/46) Normal[16210] append S -> replacerArgs
  [16211] (17010/47) If[16211] (! (= namedCaptures undefined))
  [16212] (16919/4) Normal[16212] let functionalReplace = __x1__
  [16213] (16920/5) If[16213] (= functionalReplace false)
  [16214] (16974/30) Call[16214] app __x19__ = (Get result "0")
  [16215] (16975/30) Call[16215] app __x20__ = (ToString [? __x19__])
  [16216] (16959/24) Call[16216] app __x14__ = (Set rx "lastIndex" nextIndex true)
  [16217] (16960/24) Normal[16217] [? __x14__]
  [16218] (16937/12) Normal[16218] let done = false
  [16219] (16938/13) Loop[16219] (= done false)
  [16220] (16954/22) Call[16220] app __x11__ = (Get rx "lastIndex")
  [16221] (16955/22) Call[16221] app __x12__ = (ToLength [? __x11__])
  [16222] (16940/14) Call[16222] app __x8__ = (RegExpExec rx S)
  [16223] (16962/25) Normal[16223] let accumulatedResult = ""
  [16224] (16970/28) Call[16224] app __x17__ = (LengthOfArrayLike result)
  [16225] (16971/28) Normal[16225] let resultLength = [? __x17__]
  [16226] (16925/7) Call[16226] app __x3__ = (Get rx "global")
  [16227] (16926/7) Call[16227] app __x4__ = (ToBoolean [? __x3__])
  [16228] LoopCont[16228]
  [16229] (16966/27) Loop[16229] (< __x16__ __x15__.length)
  [16230] (16932/9) Normal[16230] let fullUnicode = [! __x6__]
  [16231] (16933/10) Call[16231] app __x7__ = (Set rx "lastIndex" 0i true)
  [16232] (16963/26) Normal[16232] let nextSourcePosition = 0i
  [16233] (16964/27) Normal[16233] let __x15__ = results
  [16234] (17015/50) Call[16234] app __x31__ = (ToString replValue)
  [16235] (17016/50) Normal[16235] let replacement = [? __x31__]
  [16236] (16976/30) Normal[16236] let matched = [? __x20__]
  [16237] (16998/43) If[16237] (= functionalReplace true)
  [16238] (17000/44) Normal[16238] let replacerArgs = (new [matched])
  [16239] (17018/52) If[16239] (! (= namedCaptures undefined))
  [16240] (16943/15) Normal[16240] done = true
  [16241] LoopCont[16241]
  [16242] (17033/57) Normal[16242] __x35__ = (+ __x35__ 1i)
  [16243] LoopCont[16243]
  [16244] (17006/45) Normal[16244] __x28__ = (+ __x28__ 1i)
  [16245] (17007/45) Normal[16245] append __x29__ -> replacerArgs
  [16246] (16979/32) Call[16246] app __x22__ = (ToIntegerOrInfinity [? __x21__])
  [16247] (16980/32) Normal[16247] let position = [? __x22__]
  [16248] (17011/48) Normal[16248] append namedCaptures -> replacerArgs
  [16249] (17013/49) Call[16249] app __x30__ = (Call replaceValue undefined replacerArgs)
  [16250] (16910)Call[16250] app replaceValue = (GetArgument argumentsList)
  [16251] (16995/41) Normal[16251] n = (+ n 1i)
  [16252] LoopCont[16252]
  [16253] (16916/2) Normal[16253] let S = [? __x0__]
  [16254] (16978/32) Call[16254] app __x21__ = (Get result "index")
  [16255] LoopCont[16255]
  [16256] (17029/57) Loop[16256] (< __x35__ position)
  [16257] (16991/39) Call[16257] app __x25__ = (ToString capN)
  [16258] (16994/40) Normal[16258] append capN -> captures
  [16259] (16934/10) Normal[16259] [? __x7__]
  [16260] (16949/20) Call[16260] app __x9__ = (Get result "0")
  [16261] (16950/20) Call[16261] app __x10__ = (ToString [? __x9__])
  [16262] (16942/15) If[16262] (= result null)
  [16263] (16945/17) Normal[16263] append result -> results
  [16264] (16956/22) Normal[16264] let thisIndex = [? __x12__]
  [16265] (17014/49) Normal[16265] let replValue = [? __x30__]
  [16266] (16983/35) Normal[16266] let captures = (new [])
  [16267] (16984/36) Loop[16267] (! (< nCaptures n))
  [16268] (17021/53) Normal[16268] namedCaptures = [? __x32__]
  [16269] (17023/54) Call[16269] app __x33__ = (GetSubstitution matched S position captures namedCaptures replaceValue)
  [16270] (16918/4) Call[16270] app __x1__ = (IsCallable replaceValue)
  [16271] (16972/29) Call[16271] app __x18__ = (max (- resultLength 1i) 0i)
  [16272] (17035/58) Normal[16272] nextSourcePosition = (+ position matchLength)
  [16273] (16997/42) Normal[16273] let namedCaptures = [? __x26__]
  [16274] (17020/53) Call[16274] app __x32__ = (ToObject namedCaptures)
  [16275] (16923/6) Normal[16275] replaceValue = [? __x2__]
  [16276] (16958/23) Normal[16276] let nextIndex = __x13__
  [16277] (17032/57) Normal[16277] __x34__ = (+ __x34__ __x36__)
  [16278] (16911/0) Normal[16278] let rx = this
  [16279] (16982/34) Normal[16279] let n = 1i
  [16280] (16928/8) If[16280] (= global true)
  [16281] (16930/9) Call[16281] app __x5__ = (Get rx "unicode")
  [16282] (16936/11) Normal[16282] let results = (new [])
  [16283] (16947/18) Normal[16283] done = true
  [16284] (16951/20) Normal[16284] let matchStr = [? __x10__]
  [16285] (16977/31) Normal[16285] let matchLength = matched.length
  [16286] (16941/14) Normal[16286] let result = [? __x8__]
  [16287] (16992/39) Normal[16287] capN = [? __x25__]
  [16288] (16922/6) Call[16288] app __x2__ = (ToString replaceValue)
  [16289] (16973/29) Normal[16289] let nCaptures = __x18__
  [16290] (16968/27) Normal[16290] let result = __x15__[__x16__]
  [16291] (17037/59) If[16291] (! (< nextSourcePosition lengthS))
  [16292] (17003/45) Loop[16292] (< __x28__ __x27__.length)
  [16293] Exit[16293]
  [16294] (17002/45) Normal[16294] let __x28__ = 0i
  [16295] (16996/42) Call[16295] app __x26__ = (Get result "groups")
  [16296] (16917/3) Normal[16296] let lengthS = S.length
  [16297] (16957/23) Call[16297] app __x13__ = (AdvanceStringIndex S thisIndex fullUnicode)
  [16298] (17024/54) Normal[16298] let replacement = [? __x33__]
  [16299] (17031/57) Call[16299] access __x36__ = (S __x35__)
  [16300] (17034/57) Normal[16300] accumulatedResult = (+ (+ accumulatedResult __x34__) replacement)
  [16301] (16986/37) Call[16301] app __x23__ = (ToString n)
  [16302] (16912/1) If[16302] (! (= (typeof rx) Object))
  [16303] (17001/45) Normal[16303] let __x27__ = captures
  [16304] (16952/21) If[16304] (= matchStr "")
  [16305] (16965/27) Normal[16305] let __x16__ = 0i
  [16306] (16981/33) Normal[16306] ??? "Set id:{position} to the result of clamping id:{position} between 0 and id:{lengthS} ."
  [16307] (16931/9) Call[16307] app __x6__ = (ToBoolean [? __x5__])
  [16308] (16969/27) Normal[16308] __x16__ = (+ __x16__ 1i)
  [16309] (16987/37) Call[16309] app __x24__ = (Get result [! __x23__])
  [16310] (16927/7) Normal[16310] let global = [! __x4__]
  [16311] (16946/18) If[16311] (= global false)
  [16312] (17025/55) If[16312] (! (< position nextSourcePosition))
  [16313] (17008/46) Normal[16313] append position -> replacerArgs
  [16314] (17005/45) Normal[16314] let __x29__ = __x27__[__x28__]
Algo: GLOBAL.RegExp.prototype[SYMBOL_search] [1407]
  [16315] Entry[16315]
  [16316] (17042)Call[16316] app string = (GetArgument argumentsList)
  [16317] (17047/2) Call[16317] app __x0__ = (ToString string)
  [16318] (17048/2) Normal[16318] let S = [? __x0__]
  [16319] (17052/4) If[16319] (= __x2__ false)
  [16320] (17054/5) Call[16320] app __x3__ = (Set rx "lastIndex" 0i true)
  [16321] (17057/6) Call[16321] app __x4__ = (RegExpExec rx S)
  [16322] (17071/11) Normal[16322] return [? __x8__]
  [16323] Exit[16323]
  [16324] (17058/6) Normal[16324] let result = [? __x4__]
  [16325] (17059/7) Call[16325] app __x5__ = (Get rx "lastIndex")
  [16326] (17065/9) Normal[16326] [? __x7__]
  [16327] (17067/10) If[16327] (= result null)
  [16328] (17043/0) Normal[16328] let rx = this
  [16329] (17049/3) Call[16329] app __x1__ = (Get rx "lastIndex")
  [16330] (17068/10) Normal[16330] return -1i
  [16331] (17070/11) Call[16331] app __x8__ = (Get result "index")
  [16332] (17051/4) Call[16332] app __x2__ = (SameValue previousLastIndex 0i)
  [16333] (17044/1) If[16333] (! (= (typeof rx) Object))
  [16334] (17061/8) Call[16334] app __x6__ = (SameValue currentLastIndex previousLastIndex)
  [16335] (17062/8) If[16335] (= __x6__ false)
  [16336] (17055/5) Normal[16336] [? __x3__]
  [16337] (17050/3) Normal[16337] let previousLastIndex = [? __x1__]
  [16338] (17045/1) Normal[16338] throw TypeError
  [16339] (17064/9) Call[16339] app __x7__ = (Set rx "lastIndex" previousLastIndex true)
  [16340] (17060/7) Normal[16340] let currentLastIndex = [? __x5__]
Algo: GLOBAL.RegExp.prototype[SYMBOL_split] [1408]
  [16341] (17077/1) Normal[16341] throw TypeError
  [16342] (17079/2) Call[16342] app __x0__ = (ToString string)
  [16343] (17169/42) Normal[16343] i = (+ i 1i)
  [16344] (17170/43) Normal[16344] lengthA = (+ lengthA 1i)
  [16345] (17152/34) If[16345] (== lengthA lim)
  [16346] (17153/34) Normal[16346] return A
  [16347] (17155/35) Normal[16347] p = e
  [16348] (17185/47) Normal[16348] [! __x31__]
  [16349] (17186/48) Normal[16349] return A
  [16350] Entry[16350]
  [16351] (17073)Call[16351] app string = (GetArgument argumentsList)
  [16352] LoopCont[16352]
  [16353] (17161/39) Loop[16353] (! (< numberOfCaptures i))
  [16354] (17083/4) Call[16354] app __x2__ = (Get rx "flags")
  [16355] (17084/4) Call[16355] app __x3__ = (ToString [? __x2__])
  [16356] (17138/29) Normal[16356] q = __x15__
  [16357] LoopCont[16357]
  [16358] (17121/23) Call[16358] app __x9__ = (Set splitter "lastIndex" q true)
  [16359] (17122/23) Normal[16359] [? __x9__]
  [16360] (17097/12) If[16360] (= limit undefined)
  [16361] (17098/12) Normal[16361] let lim = (- (** 2i 32i) 1i)
  [16362] (17100/13) Call[16362] app __x6__ = (ToUint32 limit)
  [16363] (17114/18) Normal[16363] [! __x8__]
  [16364] (17115/19) Normal[16364] return A
  [16365] (17102/13) If[16365] (= lim 0i)
  [16366] (17133/28) Call[16366] app __x14__ = (min e size)
  [16367] (17134/28) Normal[16367] e = __x14__
  [16368] (17087/5) Normal[16368] let unicodeMatching = true
  [16369] (17089/7) If[16369] (contains flags "y")
  [16370] (17093/9) Normal[16370] let splitter = [? __x4__]
  [16371] (17094/10) Call[16371] app __x5__ = (ArrayCreate 0i)
  [16372] (17125/25) If[16372] (= z null)
  [16373] (17127/25) Call[16373] app __x11__ = (AdvanceStringIndex S q unicodeMatching)
  [16374] (17130/27) Call[16374] app __x12__ = (Get splitter "lastIndex")
  [16375] (17177/46) Loop[16375] (< __x28__ size)
  [16376] (17179/46) Call[16376] access __x29__ = (S __x28__)
  [16377] (17182/46) Normal[16377] let T = __x27__
  [16378] (17140/31) Normal[16378] let __x16__ = ""
  [16379] (17141/31) Normal[16379] let __x17__ = p
  [16380] (17163/40) Call[16380] app __x23__ = (ToString i)
  [16381] (17164/40) Call[16381] app __x24__ = (Get z [! __x23__])
  [16382] (17103/13) Normal[16382] return A
  [16383] (17105/14) Normal[16383] let size = S.length
  [16384] (17145/31) Normal[16384] __x16__ = (+ __x16__ __x18__)
  [16385] (17146/31) Normal[16385] __x17__ = (+ __x17__ 1i)
  [16386] (17174/45) Normal[16386] q = p
  [16387] (17074)Call[16387] app limit = (GetArgument argumentsList)
  [16388] (17158/37) Call[16388] app __x22__ = (max (- numberOfCaptures 1i) 0i)
  [16389] (17159/37) Normal[16389] numberOfCaptures = __x22__
  [16390] (17080/2) Normal[16390] let S = [? __x0__]
  [16391] (17144/31) Call[16391] access __x18__ = (S __x17__)
  [16392] (17171/44) If[16392] (== lengthA lim)
  [16393] Exit[16393]
  [16394] (17095/10) Normal[16394] let A = [! __x5__]
  [16395] (17109/16) Normal[16395] let z = [? __x7__]
  [16396] (17110/17) If[16396] (! (= z null))
  [16397] (17117/20) Normal[16397] let p = 0i
  [16398] (17176/46) Normal[16398] let __x28__ = p
  [16399] (17148/32) Call[16399] app __x19__ = (ToString lengthA)
  [16400] (17149/32) Call[16400] app __x20__ = (CreateDataPropertyOrThrow A [! __x19__] T)
  [16401] LoopCont[16401]
  [16402] (17082/3) Normal[16402] let C = [? __x1__]
  [16403] (17135/29) If[16403] (== e p)
  [16404] (17181/46) Normal[16404] __x28__ = (+ __x28__ 1i)
  [16405] (17086/5) If[16405] (contains flags "u")
  [16406] (17088/5) Normal[16406] let unicodeMatching = false
  [16407] (17119/22) Loop[16407] (< q size)
  [16408] (17175/46) Normal[16408] let __x27__ = ""
  [16409] (17157/36) Normal[16409] let numberOfCaptures = [? __x21__]
  [16410] (17075/0) Normal[16410] let rx = this
  [16411] (17124/24) Normal[16411] let z = [? __x10__]
  [16412] (17147/31) Normal[16412] let T = __x16__
  [16413] (17090/7) Normal[16413] let newFlags = flags
  [16414] (17092/9) Call[16414] app __x4__ = (Construct C (new [rx, newFlags]))
  [16415] (17108/16) Call[16415] app __x7__ = (RegExpExec splitter S)
  [16416] (17111/17) Normal[16416] return A
  [16417] (17113/18) Call[16417] app __x8__ = (CreateDataPropertyOrThrow A "0" S)
  [16418] (17096/11) Normal[16418] let lengthA = 0i
  [16419] (17123/24) Call[16419] app __x10__ = (RegExpExec splitter S)
  [16420] (17142/31) Loop[16420] (< __x17__ q)
  [16421] (17101/13) Normal[16421] let lim = [? __x6__]
  [16422] (17156/36) Call[16422] app __x21__ = (LengthOfArrayLike z)
  [16423] (17085/4) Normal[16423] let flags = [? __x3__]
  [16424] (17137/29) Call[16424] app __x15__ = (AdvanceStringIndex S q unicodeMatching)
  [16425] (17131/27) Call[16425] app __x13__ = (ToLength [? __x12__])
  [16426] (17172/44) Normal[16426] return A
  [16427] (17166/41) Call[16427] app __x25__ = (ToString lengthA)
  [16428] (17167/41) Call[16428] app __x26__ = (CreateDataPropertyOrThrow A [! __x25__] nextCapture)
  [16429] (17160/38) Normal[16429] let i = 1i
  [16430] (17081/3) Call[16430] app __x1__ = (SpeciesConstructor rx INTRINSICS["%RegExp%"])
  [16431] (17118/21) Normal[16431] let q = p
  [16432] (17183/47) Call[16432] app __x30__ = (ToString lengthA)
  [16433] (17150/32) Normal[16433] [! __x20__]
  [16434] (17076/1) If[16434] (! (= (typeof rx) Object))
  [16435] (17165/40) Normal[16435] let nextCapture = [? __x24__]
  [16436] (17128/25) Normal[16436] q = __x11__
  [16437] LoopCont[16437]
  [16438] (17091/7) Normal[16438] let newFlags = (+ flags "y")
  [16439] (17180/46) Normal[16439] __x27__ = (+ __x27__ __x29__)
  [16440] (17132/27) Normal[16440] let e = [? __x13__]
  [16441] (17151/33) Normal[16441] lengthA = (+ lengthA 1i)
  [16442] (17106/15) If[16442] (= size 0i)
  [16443] (17184/47) Call[16443] app __x31__ = (CreateDataPropertyOrThrow A [! __x30__] T)
  [16444] (17168/41) Normal[16444] [! __x26__]
Algo: GLOBAL.RegExpStringIteratorPrototype.next [1409]
  [16445] Entry[16445]
  [16446] (17188/0) Call[16446] app __x0__ = (GeneratorResume this ~empty~ "%RegExpStringIteratorPrototype%")
  [16447] (17189/0) Normal[16447] return [? __x0__]
  [16448] Exit[16448]
Algo: GLOBAL.RegExp[SYMBOL_species] [1410]
  [16449] Entry[16449]
  [16450] (17190/0) Normal[16450] return this
  [16451] Exit[16451]
Algo: GLOBAL.Set [1411]
  [16452] Entry[16452]
  [16453] (17192)Call[16453] app iterable = (GetArgument argumentsList)
  [16454] (17197/1) Normal[16454] let set = [? __x0__]
  [16455] (17198/2) Normal[16455] set.SetData = (new [])
  [16456] (17203/4) Normal[16456] let adder = [? __x1__]
  [16457] (17204/5) Call[16457] app __x2__ = (IsCallable adder)
  [16458] (17208/6) Call[16458] app __x3__ = (GetIterator iterable)
  [16459] (17209/6) Normal[16459] let iteratorRecord = [? __x3__]
  [16460] (17193/0) If[16460] (= NewTarget undefined)
  [16461] (17199/3) If[16461] (|| (= iterable undefined) (= iterable null))
  [16462] (17202/4) Call[16462] app __x1__ = (Get set "add")
  [16463] (17206/5) Normal[16463] throw TypeError
  [16464] (17194/0) Normal[16464] throw TypeError
  [16465] (17196/1) Call[16465] app __x0__ = (OrdinaryCreateFromConstructor NewTarget "%Set.prototype%" (new ["SetData"]))
  [16466] (17212/8) Call[16466] app __x4__ = (IteratorStep iteratorRecord)
  [16467] (17213/8) Normal[16467] let next = [? __x4__]
  [16468] (17205/5) If[16468] (= __x2__ false)
  [16469] (17200/3) Normal[16469] return set
  [16470] (17214/9) If[16470] (= next false)
  [16471] (17210/7) Loop[16471] true
  [16472] Exit[16472]
  [16473] (17215/9) Normal[16473] return set
  [16474] (17217/10) Call[16474] app __x5__ = (IteratorValue next)
  [16475] (17220/11) Normal[16475] let status = __x6__
  [16476] (17221/12) Call[16476] app __x7__ = (IsAbruptCompletion status)
  [16477] (17222/12) If[16477] __x7__
  [16478] LoopCont[16478]
  [16479] (17225/12) Normal[16479] return [? __x8__]
  [16480] (17218/10) Normal[16480] let nextValue = [? __x5__]
  [16481] (17219/11) Call[16481] app __x6__ = (Call adder set (new [nextValue]))
  [16482] (17224/12) Call[16482] app __x8__ = (IteratorClose iteratorRecord status)
Algo: GLOBAL.Set.prototype.add [1412]
  [16483] Entry[16483]
  [16484] (17228)Call[16484] app value = (GetArgument argumentsList)
  [16485] (17232/2) Normal[16485] let entries = S.SetData
  [16486] (17233/3) Normal[16486] let __x1__ = entries
  [16487] (17238/3) Normal[16487] __x2__ = (+ __x2__ 1i)
  [16488] (17239/4) Normal[16488] let __x3__ = true
  [16489] (17243/4) Call[16489] app __x4__ = (SameValueZero e value)
  [16490] (17244/4) Normal[16490] __x3__ = (= __x4__ true)
  [16491] (17250/6) Normal[16491] value = 0i
  [16492] (17252/7) Normal[16492] append value -> entries
  [16493] (17229/0) Normal[16493] let S = this
  [16494] (17234/3) Normal[16494] let __x2__ = 0i
  [16495] (17253/8) Normal[16495] return S
  [16496] (17237/3) Normal[16496] let e = __x1__[__x2__]
  [16497] (17241/4) If[16497] __x3__
  [16498] (17246/4) If[16498] __x3__
  [16499] (17230/1) Call[16499] app __x0__ = (RequireInternalSlot S "SetData")
  [16500] (17247/5) Normal[16500] return S
  [16501] LoopCont[16501]
  [16502] Exit[16502]
  [16503] (17240/4) Normal[16503] __x3__ = (! (= e ~empty~))
  [16504] (17235/3) Loop[16504] (< __x2__ __x1__.length)
  [16505] (17231/1) Normal[16505] [? __x0__]
  [16506] (17249/6) If[16506] (= value -0.0)
Algo: GLOBAL.Set.prototype.clear [1413]
  [16507] Entry[16507]
  [16508] (17255/0) Normal[16508] let S = this
  [16509] (17259/3) Normal[16509] let __x1__ = entries
  [16510] (17260/3) Normal[16510] let __x2__ = 0i
  [16511] (17265/4) Normal[16511] ??? "Replace the element of id:{entries} whose value is id:{e} with an element whose value is const:{empty} ."
  [16512] LoopCont[16512]
  [16513] (17256/1) Call[16513] app __x0__ = (RequireInternalSlot S "SetData")
  [16514] (17261/3) Loop[16514] (< __x2__ __x1__.length)
  [16515] (17264/3) Normal[16515] __x2__ = (+ __x2__ 1i)
  [16516] (17257/1) Normal[16516] [? __x0__]
  [16517] (17266/5) Normal[16517] return undefined
  [16518] Exit[16518]
  [16519] (17263/3) Normal[16519] let e = __x1__[__x2__]
  [16520] (17258/2) Normal[16520] let entries = S.SetData
Algo: GLOBAL.Set.prototype.delete [1414]
  [16521] Entry[16521]
  [16522] (17268)Call[16522] app value = (GetArgument argumentsList)
  [16523] (17272/2) Normal[16523] let entries = S.SetData
  [16524] (17273/3) Normal[16524] let __x1__ = entries
  [16525] (17278/3) Normal[16525] __x2__ = (+ __x2__ 1i)
  [16526] (17279/4) Normal[16526] let __x3__ = true
  [16527] (17283/4) Call[16527] app __x4__ = (SameValueZero e value)
  [16528] (17284/4) Normal[16528] __x3__ = (= __x4__ true)
  [16529] (17291/7) Normal[16529] return false
  [16530] Exit[16530]
  [16531] (17269/0) Normal[16531] let S = this
  [16532] (17274/3) Normal[16532] let __x2__ = 0i
  [16533] (17277/3) Normal[16533] let e = __x1__[__x2__]
  [16534] (17281/4) If[16534] __x3__
  [16535] (17286/4) If[16535] __x3__
  [16536] (17270/1) Call[16536] app __x0__ = (RequireInternalSlot S "SetData")
  [16537] (17288/5) Normal[16537] ??? "Replace the element of id:{entries} whose value is id:{e} with an element whose value is const:{empty} ."
  [16538] (17289/6) Normal[16538] return true
  [16539] (17280/4) Normal[16539] __x3__ = (! (= e ~empty~))
  [16540] (17275/3) Loop[16540] (< __x2__ __x1__.length)
  [16541] (17271/1) Normal[16541] [? __x0__]
  [16542] LoopCont[16542]
Algo: GLOBAL.Set.prototype.entries [1415]
  [16543] Entry[16543]
  [16544] (17293/0) Normal[16544] let S = this
  [16545] (17294/1) Call[16545] app __x0__ = (CreateSetIterator S ~key+value~)
  [16546] (17295/1) Normal[16546] return [? __x0__]
  [16547] Exit[16547]
Algo: GLOBAL.Set.prototype.forEach [1416]
  [16548] Entry[16548]
  [16549] (17297)Call[16549] app callbackfn = (GetArgument argumentsList)
  [16550] (17301/1) Normal[16550] [? __x0__]
  [16551] (17302/2) Call[16551] app __x1__ = (IsCallable callbackfn)
  [16552] (17307/4) Normal[16552] let __x2__ = entries
  [16553] (17308/4) Normal[16553] let __x3__ = 0i
  [16554] (17312/4) Normal[16554] __x3__ = (+ __x3__ 1i)
  [16555] (17313/5) If[16555] (! (= e ~empty~))
  [16556] (17298)Call[16556] app thisArg = (GetArgument argumentsList)
  [16557] (17303/2) If[16557] (= __x1__ false)
  [16558] (17306/3) Normal[16558] let entries = S.SetData
  [16559] (17311/4) Normal[16559] let e = __x2__[__x3__]
  [16560] (17299/0) Normal[16560] let S = this
  [16561] (17316/6) Normal[16561] [? __x4__]
  [16562] LoopCont[16562]
  [16563] (17309/4) Loop[16563] (< __x3__ __x2__.length)
  [16564] (17318/7) Normal[16564] return undefined
  [16565] (17304/2) Normal[16565] throw TypeError
  [16566] (17300/1) Call[16566] app __x0__ = (RequireInternalSlot S "SetData")
  [16567] (17315/6) Call[16567] app __x4__ = (Call callbackfn thisArg (new [e, e, S]))
  [16568] Exit[16568]
Algo: GLOBAL.Set.prototype.has [1417]
  [16569] Entry[16569]
  [16570] (17320)Call[16570] app value = (GetArgument argumentsList)
  [16571] (17324/2) Normal[16571] let entries = S.SetData
  [16572] (17325/3) Normal[16572] let __x1__ = entries
  [16573] (17330/3) Normal[16573] __x2__ = (+ __x2__ 1i)
  [16574] (17331/4) Normal[16574] let __x3__ = true
  [16575] (17335/4) Call[16575] app __x4__ = (SameValueZero e value)
  [16576] (17336/4) Normal[16576] __x3__ = (= __x4__ true)
  [16577] (17321/0) Normal[16577] let S = this
  [16578] (17326/3) Normal[16578] let __x2__ = 0i
  [16579] (17329/3) Normal[16579] let e = __x1__[__x2__]
  [16580] (17333/4) If[16580] __x3__
  [16581] (17338/4) If[16581] __x3__
  [16582] (17322/1) Call[16582] app __x0__ = (RequireInternalSlot S "SetData")
  [16583] (17339/4) Normal[16583] return true
  [16584] LoopCont[16584]
  [16585] (17332/4) Normal[16585] __x3__ = (! (= e ~empty~))
  [16586] (17327/3) Loop[16586] (< __x2__ __x1__.length)
  [16587] (17323/1) Normal[16587] [? __x0__]
  [16588] (17341/5) Normal[16588] return false
  [16589] Exit[16589]
Algo: GLOBAL.Set.prototype.size [1418]
  [16590] Entry[16590]
  [16591] (17343/0) Normal[16591] let S = this
  [16592] (17347/3) Normal[16592] let count = 0i
  [16593] (17348/4) Normal[16593] let __x1__ = entries
  [16594] (17353/4) Normal[16594] __x2__ = (+ __x2__ 1i)
  [16595] (17354/5) If[16595] (! (= e ~empty~))
  [16596] (17357/6) Normal[16596] return count
  [16597] Exit[16597]
  [16598] (17344/1) Call[16598] app __x0__ = (RequireInternalSlot S "SetData")
  [16599] (17349/4) Normal[16599] let __x2__ = 0i
  [16600] (17352/4) Normal[16600] let e = __x1__[__x2__]
  [16601] LoopCont[16601]
  [16602] (17350/4) Loop[16602] (< __x2__ __x1__.length)
  [16603] (17345/1) Normal[16603] [? __x0__]
  [16604] (17355/5) Normal[16604] count = (+ count 1i)
  [16605] (17346/2) Normal[16605] let entries = S.SetData
Algo: GLOBAL.Set.prototype.values [1419]
  [16606] Entry[16606]
  [16607] (17359/0) Normal[16607] let S = this
  [16608] (17360/1) Call[16608] app __x0__ = (CreateSetIterator S ~value~)
  [16609] (17361/1) Normal[16609] return [? __x0__]
  [16610] Exit[16610]
Algo: GLOBAL.SetIteratorPrototype.next [1420]
  [16611] Entry[16611]
  [16612] (17363/0) Call[16612] app __x0__ = (GeneratorResume this ~empty~ "%SetIteratorPrototype%")
  [16613] (17364/0) Normal[16613] return [? __x0__]
  [16614] Exit[16614]
Algo: GLOBAL.Set[SYMBOL_species] [1421]
  [16615] Entry[16615]
  [16616] (17365/0) Normal[16616] return this
  [16617] Exit[16617]
Algo: GLOBAL.SharedArrayBuffer [1422]
  [16618] Entry[16618]
  [16619] (17367)Call[16619] app length = (GetArgument argumentsList)
  [16620] (17372/1) Normal[16620] let byteLength = [? __x0__]
  [16621] (17373/2) Call[16621] app __x1__ = (AllocateSharedArrayBuffer NewTarget byteLength)
  [16622] (17368/0) If[16622] (= NewTarget undefined)
  [16623] (17374/2) Normal[16623] return [? __x1__]
  [16624] (17369/0) Normal[16624] throw TypeError
  [16625] (17371/1) Call[16625] app __x0__ = (ToIndex length)
  [16626] Exit[16626]
Algo: GLOBAL.SharedArrayBuffer.prototype.byteLength [1423]
  [16627] Entry[16627]
  [16628] (17376/0) Normal[16628] let O = this
  [16629] (17380/2) If[16629] (= __x1__ false)
  [16630] (17381/2) Normal[16630] throw TypeError
  [16631] (17383/3) Normal[16631] let length = O.ArrayBufferByteLength
  [16632] (17377/1) Call[16632] app __x0__ = (RequireInternalSlot O "ArrayBufferData")
  [16633] (17378/1) Normal[16633] [? __x0__]
  [16634] (17384/4) Normal[16634] return length
  [16635] (17379/2) Call[16635] app __x1__ = (IsSharedArrayBuffer O)
  [16636] Exit[16636]
Algo: GLOBAL.SharedArrayBuffer.prototype.slice [1424]
  [16637] Entry[16637]
  [16638] (17386)Call[16638] app start = (GetArgument argumentsList)
  [16639] (17390/1) Normal[16639] [? __x0__]
  [16640] (17391/2) Call[16640] app __x1__ = (IsSharedArrayBuffer O)
  [16641] (17396/4) Call[16641] app __x2__ = (ToIntegerOrInfinity start)
  [16642] (17397/4) Normal[16642] let relativeStart = [? __x2__]
  [16643] (17400/5) If[16643] (< relativeStart 0i)
  [16644] (17402/6) Call[16644] app __x3__ = (max (+ len relativeStart) 0i)
  [16645] (17405/7) Call[16645] app __x4__ = (min relativeStart len)
  [16646] (17387)Call[16646] app end = (GetArgument argumentsList)
  [16647] (17392/2) If[16647] (= __x1__ false)
  [16648] (17395/3) Normal[16648] let len = O.ArrayBufferByteLength
  [16649] (17388/0) Normal[16649] let O = this
  [16650] (17393/2) Normal[16650] throw TypeError
  [16651] (17389/1) Call[16651] app __x0__ = (RequireInternalSlot O "ArrayBufferData")
  [16652] (17434/17) Normal[16652] throw TypeError
  [16653] (17436/18) If[16653] (< new.ArrayBufferByteLength newLen)
  [16654] (17413/9) Normal[16654] let final = 0i
  [16655] (17421/12) Call[16655] app __x8__ = (max (- final first) 0i)
  [16656] (17428/15) Normal[16656] [? __x11__]
  [16657] (17429/16) Call[16657] app __x12__ = (IsSharedArrayBuffer new)
  [16658] (17414/9) If[16658] (< relativeEnd 0i)
  [16659] (17416/10) Call[16659] app __x6__ = (max (+ len relativeEnd) 0i)
  [16660] (17419/11) Call[16660] app __x7__ = (min relativeEnd len)
  [16661] (17408/8) Normal[16661] let relativeEnd = len
  [16662] (17412/9) If[16662] (= relativeEnd -Infinity)
  [16663] (17440/20) Normal[16663] let toBuf = new.ArrayBufferData
  [16664] (17441/21) Call[16664] app __x13__ = (CopyDataBlockBytes toBuf 0i fromBuf first newLen)
  [16665] (17420/11) Normal[16665] let final = __x7__
  [16666] (17410/9) Call[16666] app __x5__ = (ToIntegerOrInfinity end)
  [16667] (17411/9) Normal[16667] let relativeEnd = [? __x5__]
  [16668] (17424/13) Normal[16668] let ctor = [? __x9__]
  [16669] (17425/14) Call[16669] app __x10__ = (Construct ctor (new [newLen]))
  [16670] (17430/16) If[16670] (= __x12__ false)
  [16671] (17399/5) Normal[16671] let first = 0i
  [16672] (17407/8) If[16672] (= end undefined)
  [16673] (17433/17) If[16673] (= new.ArrayBufferData O.ArrayBufferData)
  [16674] (17439/19) Normal[16674] let fromBuf = O.ArrayBufferData
  [16675] (17406/7) Normal[16675] let first = __x4__
  [16676] (17423/13) Call[16676] app __x9__ = (SpeciesConstructor O INTRINSICS["%SharedArrayBuffer%"])
  [16677] (17426/14) Normal[16677] let new = [? __x10__]
  [16678] (17437/18) Normal[16678] throw TypeError
  [16679] (17417/10) Normal[16679] let final = __x6__
  [16680] (17398/5) If[16680] (= relativeStart -Infinity)
  [16681] (17443/22) Normal[16681] return new
  [16682] Exit[16682]
  [16683] (17431/16) Normal[16683] throw TypeError
  [16684] (17427/15) Call[16684] app __x11__ = (RequireInternalSlot new "ArrayBufferData")
  [16685] (17442/21) Normal[16685] __x13__
  [16686] (17403/6) Normal[16686] let first = __x3__
  [16687] (17422/12) Normal[16687] let newLen = __x8__
Algo: GLOBAL.SharedArrayBuffer[SYMBOL_species] [1425]
  [16688] Entry[16688]
  [16689] (17444/0) Normal[16689] return this
  [16690] Exit[16690]
Algo: GLOBAL.String [1426]
  [16691] Entry[16691]
  [16692] (17446)Call[16692] app value = (GetArgument argumentsList)
  [16693] (17452/2) Call[16693] app __x0__ = (SymbolDescriptiveString value)
  [16694] (17453/2) Normal[16694] return __x0__
  [16695] (17458/4) Normal[16695] return s
  [16696] (17460/5) Call[16696] app __x2__ = (GetPrototypeFromConstructor NewTarget "%String.prototype%")
  [16697] (17447/0) If[16697] (= value absent)
  [16698] (17455/3) Call[16698] app __x1__ = (ToString value)
  [16699] (17457/4) If[16699] (= NewTarget undefined)
  [16700] (17462/5) Normal[16700] return [! __x3__]
  [16701] Exit[16701]
  [16702] (17448/0) Normal[16702] let s = ""
  [16703] (17450/2) If[16703] (&& (= NewTarget undefined) (= (typeof value) Symbol))
  [16704] (17461/5) Call[16704] app __x3__ = (StringCreate s [? __x2__])
  [16705] (17456/3) Normal[16705] let s = [? __x1__]
Algo: GLOBAL.String.fromCharCode [1427]
  [16706] Entry[16706]
  [16707] (17464)Normal[16707] let codeUnits = argumentsList
  [16708] (17468/2) Normal[16708] let __x1__ = 0i
  [16709] (17469/2) Loop[16709] (< __x1__ __x0__.length)
  [16710] (17474/3) Normal[16710] let nextCU = [? __x2__]
  [16711] (17475/4) Normal[16711] append nextCU -> elements
  [16712] (17465/0) Normal[16712] let length = codeUnits.length
  [16713] (17471/2) Normal[16713] let next = __x0__[__x1__]
  [16714] (17476/5) Normal[16714] ??? "Return the String value whose code units are the elements in the List id:{elements} . If id:{codeUnits} is empty , the empty String is returned ."
  [16715] (17473/3) Call[16715] app __x2__ = (ToUint16 next)
  [16716] Exit[16716]
  [16717] (17466/1) Normal[16717] let elements = (new [])
  [16718] LoopCont[16718]
  [16719] (17472/2) Normal[16719] __x1__ = (+ __x1__ 1i)
  [16720] (17467/2) Normal[16720] let __x0__ = codeUnits
Algo: GLOBAL.String.fromCodePoint [1428]
  [16721] Entry[16721]
  [16722] (17478)Normal[16722] let codePoints = argumentsList
  [16723] (17482/1) Loop[16723] (< __x1__ __x0__.length)
  [16724] (17484/1) Normal[16724] let next = __x0__[__x1__]
  [16725] (17497/7) Normal[16725] return result
  [16726] (17488/3) Call[16726] app __x3__ = (IsIntegralNumber nextCP)
  [16727] (17489/3) If[16727] (= [! __x3__] false)
  [16728] (17493/4) Normal[16728] throw RangeError
  [16729] (17495/5) Call[16729] app __x4__ = (UTF16EncodeCodePoint nextCP)
  [16730] (17479/0) Normal[16730] let result = ""
  [16731] (17485/1) Normal[16731] __x1__ = (+ __x1__ 1i)
  [16732] (17487/2) Normal[16732] let nextCP = [? __x2__]
  [16733] (17492/4) If[16733] (|| (< nextCP 0i) (< 1114111i nextCP))
  [16734] (17480/1) Normal[16734] let __x0__ = codePoints
  [16735] LoopCont[16735]
  [16736] (17490/3) Normal[16736] throw RangeError
  [16737] (17486/2) Call[16737] app __x2__ = (ToNumber next)
  [16738] (17481/1) Normal[16738] let __x1__ = 0i
  [16739] Exit[16739]
  [16740] (17496/5) Normal[16740] result = (+ result [! __x4__])
Algo: GLOBAL.String.prototype.charAt [1429]
  [16741] Entry[16741]
  [16742] (17499)Call[16742] app pos = (GetArgument argumentsList)
  [16743] (17503/1) Normal[16743] let S = [? __x1__]
  [16744] (17504/2) Call[16744] app __x2__ = (ToIntegerOrInfinity pos)
  [16745] (17508/4) Normal[16745] return ""
  [16746] (17510/5) Normal[16746] return S[position]
  [16747] (17500/0) Call[16747] app __x0__ = (RequireObjectCoercible this)
  [16748] (17505/2) Normal[16748] let position = [? __x2__]
  [16749] (17507/4) If[16749] (|| (< position 0i) (! (< position size)))
  [16750] (17501/0) Normal[16750] let O = [? __x0__]
  [16751] (17506/3) Normal[16751] let size = S.length
  [16752] (17502/1) Call[16752] app __x1__ = (ToString O)
  [16753] Exit[16753]
Algo: GLOBAL.String.prototype.charCodeAt [1430]
  [16754] Entry[16754]
  [16755] (17512)Call[16755] app pos = (GetArgument argumentsList)
  [16756] (17516/1) Normal[16756] let S = [? __x1__]
  [16757] (17517/2) Call[16757] app __x2__ = (ToIntegerOrInfinity pos)
  [16758] (17521/4) Normal[16758] return NaN
  [16759] (17523/5) Normal[16759] ??? "Return the Number value for the numeric value of the code unit at index id:{position} within the String id:{S} ."
  [16760] (17513/0) Call[16760] app __x0__ = (RequireObjectCoercible this)
  [16761] (17518/2) Normal[16761] let position = [? __x2__]
  [16762] (17520/4) If[16762] (|| (< position 0i) (! (< position size)))
  [16763] (17514/0) Normal[16763] let O = [? __x0__]
  [16764] (17519/3) Normal[16764] let size = S.length
  [16765] (17515/1) Call[16765] app __x1__ = (ToString O)
  [16766] Exit[16766]
Algo: GLOBAL.String.prototype.codePointAt [1431]
  [16767] Entry[16767]
  [16768] (17525)Call[16768] app pos = (GetArgument argumentsList)
  [16769] (17529/1) Normal[16769] let S = [? __x1__]
  [16770] (17530/2) Call[16770] app __x2__ = (ToIntegerOrInfinity pos)
  [16771] (17534/4) Normal[16771] return undefined
  [16772] (17536/5) Call[16772] app __x3__ = (CodePointAt S position)
  [16773] (17526/0) Call[16773] app __x0__ = (RequireObjectCoercible this)
  [16774] (17531/2) Normal[16774] let position = [? __x2__]
  [16775] (17533/4) If[16775] (|| (< position 0i) (! (< position size)))
  [16776] (17538/6) Normal[16776] return cp.CodePoint
  [16777] Exit[16777]
  [16778] (17527/0) Normal[16778] let O = [? __x0__]
  [16779] (17537/5) Normal[16779] let cp = [! __x3__]
  [16780] (17532/3) Normal[16780] let size = S.length
  [16781] (17528/1) Call[16781] app __x1__ = (ToString O)
Algo: GLOBAL.String.prototype.concat [1432]
  [16782] Entry[16782]
  [16783] (17540)Normal[16783] let args = argumentsList
  [16784] (17544/1) Normal[16784] let S = [? __x1__]
  [16785] (17545/2) Normal[16785] let R = S
  [16786] (17550/3) Normal[16786] let next = __x2__[__x3__]
  [16787] (17551/3) Normal[16787] __x3__ = (+ __x3__ 1i)
  [16788] (17554/5) Normal[16788] R = (+ R nextString)
  [16789] LoopCont[16789]
  [16790] (17541/0) Call[16790] app __x0__ = (RequireObjectCoercible this)
  [16791] (17546/3) Normal[16791] let __x2__ = args
  [16792] (17548/3) Loop[16792] (< __x3__ __x2__.length)
  [16793] (17555/6) Normal[16793] return R
  [16794] (17553/4) Normal[16794] let nextString = [? __x4__]
  [16795] (17542/0) Normal[16795] let O = [? __x0__]
  [16796] (17552/4) Call[16796] app __x4__ = (ToString next)
  [16797] (17547/3) Normal[16797] let __x3__ = 0i
  [16798] (17543/1) Call[16798] app __x1__ = (ToString O)
  [16799] Exit[16799]
Algo: GLOBAL.String.prototype.endsWith [1433]
  [16800] Entry[16800]
  [16801] (17557)Call[16801] app searchString = (GetArgument argumentsList)
  [16802] (17561/1) Call[16802] app __x1__ = (ToString O)
  [16803] (17562/1) Normal[16803] let S = [? __x1__]
  [16804] (17566/3) Normal[16804] throw TypeError
  [16805] (17568/4) Call[16805] app __x3__ = (ToString searchString)
  [16806] (17571/6) If[16806] (= endPosition undefined)
  [16807] (17572/6) Normal[16807] let pos = len
  [16808] (17574/7) Call[16808] app __x4__ = (ToIntegerOrInfinity endPosition)
  [16809] (17558)Call[16809] app endPosition = (GetArgument argumentsList)
  [16810] (17563/2) Call[16810] app __x2__ = (IsRegExp searchString)
  [16811] (17565/3) If[16811] (= isRegExp true)
  [16812] (17570/5) Normal[16812] let len = S.length
  [16813] (17559/0) Call[16813] app __x0__ = (RequireObjectCoercible this)
  [16814] (17569/4) Normal[16814] let searchStr = [? __x3__]
  [16815] (17564/2) Normal[16815] let isRegExp = [? __x2__]
  [16816] (17560/0) Normal[16816] let O = [? __x0__]
  [16817] (17576/7) Normal[16817] ??? "Let id:{end} be the result of clamping id:{pos} between 0 and id:{len} ."
  [16818] (17577/8) Normal[16818] let searchLength = searchStr.length
  [16819] (17583/11) Normal[16819] return false
  [16820] (17585/12) Normal[16820] let __x5__ = ""
  [16821] (17586/12) Normal[16821] let __x6__ = start
  [16822] (17578/9) If[16822] (== searchLength 0i)
  [16823] (17579/9) Normal[16823] return true
  [16824] (17581/10) Normal[16824] let start = (- end searchLength)
  [16825] (17590/12) Normal[16825] __x5__ = (+ __x5__ __x7__)
  [16826] (17591/12) Normal[16826] __x6__ = (+ __x6__ 1i)
  [16827] (17589/12) Call[16827] access __x7__ = (S __x6__)
  [16828] (17593/13) Call[16828] app __x8__ = (SameValueNonNumeric substring searchStr)
  [16829] (17594/13) Normal[16829] return [! __x8__]
  [16830] (17575/7) Normal[16830] let pos = [? __x4__]
  [16831] (17592/12) Normal[16831] let substring = __x5__
  [16832] Exit[16832]
  [16833] (17582/11) If[16833] (< start 0i)
  [16834] (17587/12) Loop[16834] (< __x6__ end)
  [16835] LoopCont[16835]
Algo: GLOBAL.String.prototype.includes [1434]
  [16836] Entry[16836]
  [16837] (17596)Call[16837] app searchString = (GetArgument argumentsList)
  [16838] (17600/1) Call[16838] app __x1__ = (ToString O)
  [16839] (17601/1) Normal[16839] let S = [? __x1__]
  [16840] (17605/3) Normal[16840] throw TypeError
  [16841] (17607/4) Call[16841] app __x3__ = (ToString searchString)
  [16842] (17610/5) Normal[16842] let pos = [? __x4__]
  [16843] (17611/7) Normal[16843] let len = S.length
  [16844] (17616/10) Normal[16844] return true
  [16845] (17618/11) Normal[16845] return false
  [16846] (17597)Call[16846] app position = (GetArgument argumentsList)
  [16847] (17602/2) Call[16847] app __x2__ = (IsRegExp searchString)
  [16848] Exit[16848]
  [16849] (17604/3) If[16849] (= isRegExp true)
  [16850] (17609/5) Call[16850] app __x4__ = (ToIntegerOrInfinity position)
  [16851] (17598/0) Call[16851] app __x0__ = (RequireObjectCoercible this)
  [16852] (17613/9) Call[16852] app __x5__ = (StringIndexOf S searchStr start)
  [16853] (17614/9) Normal[16853] let index = [! __x5__]
  [16854] (17608/4) Normal[16854] let searchStr = [? __x3__]
  [16855] (17603/2) Normal[16855] let isRegExp = [? __x2__]
  [16856] (17599/0) Normal[16856] let O = [? __x0__]
  [16857] (17615/10) If[16857] (! (= index -1i))
  [16858] (17612/8) Normal[16858] ??? "Let id:{start} be the result of clamping id:{pos} between 0 and id:{len} ."
Algo: GLOBAL.String.prototype.indexOf [1435]
  [16859] Entry[16859]
  [16860] (17620)Call[16860] app searchString = (GetArgument argumentsList)
  [16861] (17624/1) Call[16861] app __x1__ = (ToString O)
  [16862] (17625/1) Normal[16862] let S = [? __x1__]
  [16863] (17629/3) Normal[16863] let pos = [? __x3__]
  [16864] (17630/5) Normal[16864] let len = S.length
  [16865] (17633/7) Normal[16865] return [! __x4__]
  [16866] Exit[16866]
  [16867] (17621)Call[16867] app position = (GetArgument argumentsList)
  [16868] (17626/2) Call[16868] app __x2__ = (ToString searchString)
  [16869] (17628/3) Call[16869] app __x3__ = (ToIntegerOrInfinity position)
  [16870] (17632/7) Call[16870] app __x4__ = (StringIndexOf S searchStr start)
  [16871] (17622/0) Call[16871] app __x0__ = (RequireObjectCoercible this)
  [16872] (17631/6) Normal[16872] ??? "Let id:{start} be the result of clamping id:{pos} between 0 and id:{len} ."
  [16873] (17627/2) Normal[16873] let searchStr = [? __x2__]
  [16874] (17623/0) Normal[16874] let O = [? __x0__]
Algo: GLOBAL.String.prototype.lastIndexOf [1436]
  [16875] Entry[16875]
  [16876] (17635)Call[16876] app searchString = (GetArgument argumentsList)
  [16877] (17639/1) Call[16877] app __x1__ = (ToString O)
  [16878] (17640/1) Normal[16878] let S = [? __x1__]
  [16879] (17644/3) Normal[16879] let numPos = [? __x3__]
  [16880] (17645/5) If[16880] (= numPos NaN)
  [16881] (17649/6) Normal[16881] let pos = [! __x4__]
  [16882] (17650/6) Normal[16882] let len = S.length
  [16883] (17636)Call[16883] app position = (GetArgument argumentsList)
  [16884] (17641/2) Call[16884] app __x2__ = (ToString searchString)
  [16885] (17643/3) Call[16885] app __x3__ = (ToNumber position)
  [16886] (17648/6) Call[16886] app __x4__ = (ToIntegerOrInfinity numPos)
  [16887] (17637/0) Call[16887] app __x0__ = (RequireObjectCoercible this)
  [16888] (17652/8) Normal[16888] let searchLen = searchStr.length
  [16889] (17653/9) Normal[16889] ??? "Let id:{k} be the largest possible non - negative integer not larger than id:{start} such that id:{k} + id:{searchLen} ≤ id:{len} , and for all non - negative integers id:{j} such that id:{j} < id:{searchLen} , the code unit at index id:{k} + id:{j} within id:{S} is the same as the code unit at index id:{j} within id:{searchStr} ; but if there is no such integer , let id:{k} be - 1 ."
  [16890] (17646/5) Normal[16890] let pos = Infinity
  [16891] (17642/2) Normal[16891] let searchStr = [? __x2__]
  [16892] (17638/0) Normal[16892] let O = [? __x0__]
  [16893] (17654/10) Normal[16893] return k
  [16894] (17651/7) Normal[16894] ??? "Let id:{start} be the result of clamping id:{pos} between 0 and id:{len} ."
  [16895] Exit[16895]
Algo: GLOBAL.String.prototype.localeCompare [1437]
  [16896] Entry[16896]
  [16897] (17656)Call[16897] app that = (GetArgument argumentsList)
  [16898] (17660/0) Normal[16898] let O = [? __x0__]
  [16899] (17661/1) Call[16899] app __x1__ = (ToString O)
  [16900] (17657)Call[16900] app reserved1 = (GetArgument argumentsList)
  [16901] (17662/1) Normal[16901] let S = [? __x1__]
  [16902] (17664/2) Normal[16902] let That = [? __x2__]
  [16903] Exit[16903]
  [16904] (17658)Call[16904] app reserved2 = (GetArgument argumentsList)
  [16905] (17663/2) Call[16905] app __x2__ = (ToString that)
  [16906] (17659/0) Call[16906] app __x0__ = (RequireObjectCoercible this)
Algo: GLOBAL.String.prototype.match [1438]
  [16907] Entry[16907]
  [16908] (17666)Call[16908] app regexp = (GetArgument argumentsList)
  [16909] (17671/2) Call[16909] app __x1__ = (GetMethod regexp SYMBOL_match)
  [16910] (17672/2) Normal[16910] let matcher = [? __x1__]
  [16911] (17679/5) Call[16911] app __x3__ = (ToString O)
  [16912] (17680/5) Normal[16912] let S = [? __x3__]
  [16913] (17683/7) Call[16913] app __x5__ = (Invoke rx SYMBOL_match (new [S]))
  [16914] (17684/7) Normal[16914] return [? __x5__]
  [16915] (17667/0) Call[16915] app __x0__ = (RequireObjectCoercible this)
  [16916] (17673/3) If[16916] (! (= matcher undefined))
  [16917] (17676/4) Normal[16917] return [? __x2__]
  [16918] (17682/6) Normal[16918] let rx = [? __x4__]
  [16919] (17668/0) Normal[16919] let O = [? __x0__]
  [16920] (17681/6) Call[16920] app __x4__ = (RegExpCreate regexp undefined)
  [16921] (17675/4) Call[16921] app __x2__ = (Call matcher regexp (new [O]))
  [16922] (17669/1) If[16922] (! (|| (= regexp undefined) (= regexp null)))
  [16923] Exit[16923]
Algo: GLOBAL.String.prototype.matchAll [1439]
  [16924] Entry[16924]
  [16925] (17686)Call[16925] app regexp = (GetArgument argumentsList)
  [16926] (17691/2) Call[16926] app __x1__ = (IsRegExp regexp)
  [16927] (17692/2) Normal[16927] let isRegExp = [? __x1__]
  [16928] (17697/5) Call[16928] app __x3__ = (RequireObjectCoercible flags)
  [16929] (17698/5) Normal[16929] [? __x3__]
  [16930] (17701/6) Normal[16930] throw TypeError
  [16931] (17704/7) Call[16931] app __x5__ = (GetMethod regexp SYMBOL_matchAll)
  [16932] (17712/10) Call[16932] app __x7__ = (ToString O)
  [16933] (17713/10) Normal[16933] let S = [? __x7__]
  [16934] (17687/0) Call[16934] app __x0__ = (RequireObjectCoercible this)
  [16935] (17693/3) If[16935] (= isRegExp true)
  [16936] (17714/11) Call[16936] app __x8__ = (RegExpCreate regexp "g")
  [16937] (17696/4) Normal[16937] let flags = [? __x2__]
  [16938] (17700/6) If[16938] (! (contains [? __x4__] "g"))
  [16939] (17688/0) Normal[16939] let O = [? __x0__]
  [16940] (17706/8) If[16940] (! (= matcher undefined))
  [16941] (17708/9) Call[16941] app __x6__ = (Call matcher regexp (new [O]))
  [16942] (17715/11) Normal[16942] let rx = [? __x8__]
  [16943] (17699/6) Call[16943] app __x4__ = (ToString flags)
  [16944] (17695/4) Call[16944] app __x2__ = (Get regexp "flags")
  [16945] (17689/1) If[16945] (! (|| (= regexp undefined) (= regexp null)))
  [16946] (17709/9) Normal[16946] return [? __x6__]
  [16947] (17705/7) Normal[16947] let matcher = [? __x5__]
  [16948] (17716/12) Call[16948] app __x9__ = (Invoke rx SYMBOL_matchAll (new [S]))
  [16949] (17717/12) Normal[16949] return [? __x9__]
  [16950] Exit[16950]
Algo: GLOBAL.String.prototype.normalize [1440]
  [16951] Entry[16951]
  [16952] (17719)Call[16952] app form = (GetArgument argumentsList)
  [16953] (17723/1) Normal[16953] let S = [? __x1__]
  [16954] (17724/2) If[16954] (= form undefined)
  [16955] (17729/4) If[16955] (! (|| (|| (|| (= f "NFC") (= f "NFD")) (= f "NFKC")) (= f "NFKD")))
  [16956] (17730/4) Normal[16956] throw RangeError
  [16957] (17732/5) Normal[16957] ??? "Let id:{ns} be the String value that is the result of normalizing id:{S} into the normalization form named by id:{f} as specified in < a href = \" https : / / unicode . org / reports / tr15 / \" > https : / / unicode . org / reports / tr15 / < / a > ."
  [16958] (17720/0) Call[16958] app __x0__ = (RequireObjectCoercible this)
  [16959] (17725/2) Normal[16959] let f = "NFC"
  [16960] (17727/3) Call[16960] app __x2__ = (ToString form)
  [16961] (17728/3) Normal[16961] let f = [? __x2__]
  [16962] (17733/6) Normal[16962] return ns
  [16963] Exit[16963]
  [16964] (17721/0) Normal[16964] let O = [? __x0__]
  [16965] (17722/1) Call[16965] app __x1__ = (ToString O)
Algo: GLOBAL.String.prototype.padEnd [1441]
  [16966] Entry[16966]
  [16967] (17735)Call[16967] app maxLength = (GetArgument argumentsList)
  [16968] (17739/1) Call[16968] app __x1__ = (StringPad O maxLength fillString ~end~)
  [16969] (17740/1) Normal[16969] return [? __x1__]
  [16970] (17736)Call[16970] app fillString = (GetArgument argumentsList)
  [16971] Exit[16971]
  [16972] (17737/0) Call[16972] app __x0__ = (RequireObjectCoercible this)
  [16973] (17738/0) Normal[16973] let O = [? __x0__]
Algo: GLOBAL.String.prototype.padStart [1442]
  [16974] Entry[16974]
  [16975] (17742)Call[16975] app maxLength = (GetArgument argumentsList)
  [16976] (17746/1) Call[16976] app __x1__ = (StringPad O maxLength fillString ~start~)
  [16977] (17747/1) Normal[16977] return [? __x1__]
  [16978] (17743)Call[16978] app fillString = (GetArgument argumentsList)
  [16979] Exit[16979]
  [16980] (17744/0) Call[16980] app __x0__ = (RequireObjectCoercible this)
  [16981] (17745/0) Normal[16981] let O = [? __x0__]
Algo: GLOBAL.String.prototype.repeat [1443]
  [16982] Entry[16982]
  [16983] (17749)Call[16983] app count = (GetArgument argumentsList)
  [16984] (17753/1) Normal[16984] let S = [? __x1__]
  [16985] (17754/2) Call[16985] app __x2__ = (ToIntegerOrInfinity count)
  [16986] (17759/4) If[16986] (= n 0i)
  [16987] (17760/4) Normal[16987] return ""
  [16988] (17762/5) Normal[16988] ??? "Return the String value that is made from id:{n} copies of id:{S} appended together ."
  [16989] (17750/0) Call[16989] app __x0__ = (RequireObjectCoercible this)
  [16990] (17755/2) Normal[16990] let n = [? __x2__]
  [16991] (17757/3) Normal[16991] throw RangeError
  [16992] (17751/0) Normal[16992] let O = [? __x0__]
  [16993] Exit[16993]
  [16994] (17756/3) If[16994] (|| (< n 0i) (= n Infinity))
  [16995] (17752/1) Call[16995] app __x1__ = (ToString O)
Algo: GLOBAL.String.prototype.replace [1444]
  [16996] Entry[16996]
  [16997] (17764)Call[16997] app searchValue = (GetArgument argumentsList)
  [16998] (17768/1) If[16998] (! (|| (= searchValue undefined) (= searchValue null)))
  [16999] (17770/2) Call[16999] app __x1__ = (GetMethod searchValue SYMBOL_replace)
  [17000] (17778/5) Call[17000] app __x3__ = (ToString O)
  [17001] (17775/4) Normal[17001] return [? __x2__]
  [17002] (17781/6) Normal[17002] let searchString = [? __x4__]
  [17003] (17782/7) Call[17003] app __x5__ = (IsCallable replaceValue)
  [17004] (17765)Call[17004] app replaceValue = (GetArgument argumentsList)
  [17005] (17771/2) Normal[17005] let replacer = [? __x1__]
  [17006] (17774/4) Call[17006] app __x2__ = (Call replacer searchValue (new [O, replaceValue]))
  [17007] (17766/0) Call[17007] app __x0__ = (RequireObjectCoercible this)
  [17008] (17779/5) Normal[17008] let string = [? __x3__]
  [17009] (17780/6) Call[17009] app __x4__ = (ToString searchValue)
  [17010] (17786/9) Call[17010] app __x6__ = (ToString replaceValue)
  [17011] (17787/9) Normal[17011] replaceValue = [? __x6__]
  [17012] (17772/3) If[17012] (! (= replacer undefined))
  [17013] (17767/0) Normal[17013] let O = [? __x0__]
  [17014] (17783/7) Normal[17014] let functionalReplace = __x5__
  [17015] (17793/12) Normal[17015] return string
  [17016] (17795/13) Normal[17016] let __x8__ = ""
  [17017] (17809/17) Normal[17017] assert (= (typeof replaceValue) String)
  [17018] (17810/18) Normal[17018] let captures = (new [])
  [17019] (17796/13) Normal[17019] let __x9__ = 0i
  [17020] (17789/10) Normal[17020] let searchLength = searchString.length
  [17021] (17790/11) Call[17021] app __x7__ = (StringIndexOf string searchString 0i)
  [17022] (17800/13) Normal[17022] __x8__ = (+ __x8__ __x10__)
  [17023] (17801/13) Normal[17023] __x9__ = (+ __x9__ 1i)
  [17024] (17791/11) Normal[17024] let position = [! __x7__]
  [17025] (17803/14) If[17025] (= functionalReplace true)
  [17026] (17805/15) Call[17026] app __x11__ = (Call replaceValue undefined (new [searchString, position, string]))
  [17027] (17799/13) Call[17027] access __x10__ = (string __x9__)
  [17028] (17811/19) Call[17028] app __x13__ = (GetSubstitution searchString string position captures undefined replaceValue)
  [17029] (17813/20) Normal[17029] ??? "Return the string - concatenation of id:{preserved} , id:{replacement} , and the substring of id:{string} from id:{position} + id:{searchLength} ."
  [17030] Exit[17030]
  [17031] (17784/8) If[17031] (= functionalReplace false)
  [17032] (17802/13) Normal[17032] let preserved = __x8__
  [17033] (17806/15) Call[17033] app __x12__ = (ToString [? __x11__])
  [17034] (17792/12) If[17034] (= position -1i)
  [17035] (17797/13) Loop[17035] (< __x9__ position)
  [17036] (17812/19) Normal[17036] let replacement = [! __x13__]
  [17037] (17807/15) Normal[17037] let replacement = [? __x12__]
  [17038] LoopCont[17038]
Algo: GLOBAL.String.prototype.replaceAll [1445]
  [17039] (17819/1) If[17039] (! (|| (= searchValue undefined) (= searchValue null)))
  [17040] (17821/2) Call[17040] app __x1__ = (IsRegExp searchValue)
  [17041] (17842/10) Call[17041] app __x7__ = (ToString O)
  [17042] (17891/33) Normal[17042] endOfLastMatch = (+ p searchLength)
  [17043] LoopCont[17043]
  [17044] (17816)Call[17044] app replaceValue = (GetArgument argumentsList)
  [17045] (17817/0) Call[17045] app __x0__ = (RequireObjectCoercible this)
  [17046] (17868/24) Loop[17046] (< __x15__ __x14__.length)
  [17047] (17818/0) Normal[17047] let O = [? __x0__]
  [17048] (17895/36) Normal[17048] return result
  [17049] Exit[17049]
  [17050] Entry[17050]
  [17051] (17815)Call[17051] app searchValue = (GetArgument argumentsList)
  [17052] (17826/4) Normal[17052] let flags = [? __x2__]
  [17053] (17827/5) Call[17053] app __x3__ = (RequireObjectCoercible flags)
  [17054] (17880/26) If[17054] (= functionalReplace true)
  [17055] (17882/27) Call[17055] app __x19__ = (Call replaceValue undefined (new [searchString, p, string]))
  [17056] (17886/29) Normal[17056] assert (= (typeof replaceValue) String)
  [17057] (17865/23) Normal[17057] let result = ""
  [17058] (17866/24) Normal[17058] let __x14__ = matchPositions
  [17059] (17845/11) Normal[17059] let searchString = [? __x8__]
  [17060] (17846/12) Call[17060] app __x9__ = (IsCallable replaceValue)
  [17061] (17861/20) Normal[17061] append position -> matchPositions
  [17062] (17862/21) Call[17062] app __x13__ = (StringIndexOf string searchString (+ position advanceBy))
  [17063] (17847/12) Normal[17063] let functionalReplace = __x9__
  [17064] (17877/25) Normal[17064] __x16__ = (+ __x16__ __x18__)
  [17065] (17878/25) Normal[17065] __x17__ = (+ __x17__ 1i)
  [17066] (17830/6) If[17066] (! (contains [? __x4__] "g"))
  [17067] (17831/6) Normal[17067] throw TypeError
  [17068] (17834/7) Call[17068] app __x5__ = (GetMethod searchValue SYMBOL_replace)
  [17069] (17839/9) Normal[17069] return [? __x6__]
  [17070] (17870/24) Normal[17070] let p = __x14__[__x15__]
  [17071] (17871/24) Normal[17071] __x15__ = (+ __x15__ 1i)
  [17072] (17883/27) Call[17072] app __x20__ = (ToString [? __x19__])
  [17073] (17851/14) Normal[17073] replaceValue = [? __x10__]
  [17074] (17853/15) Normal[17074] let searchLength = searchString.length
  [17075] (17887/30) Normal[17075] let captures = (new [])
  [17076] (17888/31) Call[17076] app __x21__ = (GetSubstitution searchString string p captures undefined replaceValue)
  [17077] (17822/2) Normal[17077] let isRegExp = [? __x1__]
  [17078] (17843/10) Normal[17078] let string = [? __x7__]
  [17079] (17856/17) Normal[17079] let matchPositions = (new [])
  [17080] (17857/18) Call[17080] app __x12__ = (StringIndexOf string searchString 0i)
  [17081] (17850/14) Call[17081] app __x10__ = (ToString replaceValue)
  [17082] (17863/21) Normal[17082] position = [! __x13__]
  [17083] (17825/4) Call[17083] app __x2__ = (Get searchValue "flags")
  [17084] LoopCont[17084]
  [17085] (17829/6) Call[17085] app __x4__ = (ToString flags)
  [17086] (17864/22) Normal[17086] let endOfLastMatch = 0i
  [17087] (17892/34) If[17087] (< endOfLastMatch string.length)
  [17088] (17890/32) Normal[17088] result = (+ (+ result preserved) replacement)
  [17089] (17835/7) Normal[17089] let replacer = [? __x5__]
  [17090] (17836/8) If[17090] (! (= replacer undefined))
  [17091] (17855/16) Normal[17091] let advanceBy = __x11__
  [17092] (17858/18) Normal[17092] let position = [! __x12__]
  [17093] (17844/11) Call[17093] app __x8__ = (ToString searchValue)
  [17094] (17867/24) Normal[17094] let __x15__ = 0i
  [17095] (17884/27) Normal[17095] let replacement = [? __x20__]
  [17096] (17848/13) If[17096] (= functionalReplace false)
  [17097] (17828/5) Normal[17097] [? __x3__]
  [17098] (17874/25) Loop[17098] (< __x17__ p)
  [17099] (17873/25) Normal[17099] let __x17__ = endOfLastMatch
  [17100] (17823/3) If[17100] (= isRegExp true)
  [17101] LoopCont[17101]
  [17102] (17859/19) Loop[17102] (! (= position -1i))
  [17103] (17872/25) Normal[17103] let __x16__ = ""
  [17104] (17889/31) Normal[17104] let replacement = [! __x21__]
  [17105] (17838/9) Call[17105] app __x6__ = (Call replacer searchValue (new [O, replaceValue]))
  [17106] (17876/25) Call[17106] access __x18__ = (string __x17__)
  [17107] (17879/25) Normal[17107] let preserved = __x16__
  [17108] (17893/35) Normal[17108] ??? "Set id:{result} to the string - concatenation of id:{result} and the substring of id:{string} from id:{endOfLastMatch} ."
  [17109] (17854/16) Call[17109] app __x11__ = (max 1i searchLength)
Algo: GLOBAL.String.prototype.search [1446]
  [17110] Entry[17110]
  [17111] (17897)Call[17111] app regexp = (GetArgument argumentsList)
  [17112] (17902/2) Call[17112] app __x1__ = (GetMethod regexp SYMBOL_search)
  [17113] (17903/2) Normal[17113] let searcher = [? __x1__]
  [17114] (17910/5) Call[17114] app __x3__ = (ToString O)
  [17115] (17911/5) Normal[17115] let string = [? __x3__]
  [17116] (17914/7) Call[17116] app __x5__ = (Invoke rx SYMBOL_search (new [string]))
  [17117] (17915/7) Normal[17117] return [? __x5__]
  [17118] (17898/0) Call[17118] app __x0__ = (RequireObjectCoercible this)
  [17119] (17904/3) If[17119] (! (= searcher undefined))
  [17120] (17907/4) Normal[17120] return [? __x2__]
  [17121] (17913/6) Normal[17121] let rx = [? __x4__]
  [17122] (17899/0) Normal[17122] let O = [? __x0__]
  [17123] (17912/6) Call[17123] app __x4__ = (RegExpCreate regexp undefined)
  [17124] (17906/4) Call[17124] app __x2__ = (Call searcher regexp (new [O]))
  [17125] (17900/1) If[17125] (! (|| (= regexp undefined) (= regexp null)))
  [17126] Exit[17126]
Algo: GLOBAL.String.prototype.slice [1447]
  [17127] Entry[17127]
  [17128] (17917)Call[17128] app start = (GetArgument argumentsList)
  [17129] (17921/1) Call[17129] app __x1__ = (ToString O)
  [17130] (17922/1) Normal[17130] let S = [? __x1__]
  [17131] (17926/4) If[17131] (= intStart -Infinity)
  [17132] (17927/4) Normal[17132] let from = 0i
  [17133] (17928/4) If[17133] (< intStart 0i)
  [17134] (17931/5) Normal[17134] let from = __x3__
  [17135] (17935/7) If[17135] (= end undefined)
  [17136] (17918)Call[17136] app end = (GetArgument argumentsList)
  [17137] (17923/2) Normal[17137] let len = S.length
  [17138] (17925/3) Normal[17138] let intStart = [? __x2__]
  [17139] (17930/5) Call[17139] app __x3__ = (max (+ len intStart) 0i)
  [17140] (17919/0) Call[17140] app __x0__ = (RequireObjectCoercible this)
  [17141] (17933/6) Call[17141] app __x4__ = (min intStart len)
  [17142] (17924/3) Call[17142] app __x2__ = (ToIntegerOrInfinity start)
  [17143] (17936/7) Normal[17143] let intEnd = len
  [17144] (17940/8) If[17144] (= intEnd -Infinity)
  [17145] (17920/0) Normal[17145] let O = [? __x0__]
  [17146] (17934/6) Normal[17146] let from = __x4__
  [17147] (17944/9) Call[17147] app __x6__ = (max (+ len intEnd) 0i)
  [17148] (17945/9) Normal[17148] let to = __x6__
  [17149] (17959/12) Normal[17149] return __x8__
  [17150] Exit[17150]
  [17151] (17949/11) If[17151] (! (< from to))
  [17152] (17939/8) Normal[17152] let intEnd = [? __x5__]
  [17153] (17950/11) Normal[17153] return ""
  [17154] (17952/12) Normal[17154] let __x8__ = ""
  [17155] (17941/8) Normal[17155] let to = 0i
  [17156] (17942/8) If[17156] (< intEnd 0i)
  [17157] (17956/12) Call[17157] access __x10__ = (S __x9__)
  [17158] (17957/12) Normal[17158] __x8__ = (+ __x8__ __x10__)
  [17159] (17938/8) Call[17159] app __x5__ = (ToIntegerOrInfinity end)
  [17160] (17954/12) Loop[17160] (< __x9__ to)
  [17161] (17958/12) Normal[17161] __x9__ = (+ __x9__ 1i)
  [17162] (17948/10) Normal[17162] let to = __x7__
  [17163] LoopCont[17163]
  [17164] (17953/12) Normal[17164] let __x9__ = from
  [17165] (17947/10) Call[17165] app __x7__ = (min intEnd len)
Algo: GLOBAL.String.prototype.split [1448]
  [17166] (17965/1) If[17166] (! (|| (= separator undefined) (= separator null)))
  [17167] (17967/2) Call[17167] app __x1__ = (GetMethod separator SYMBOL_split)
  [17168] (17975/5) Call[17168] app __x3__ = (ToString O)
  [17169] (18040/34) Normal[17169] __x16__ = (+ __x16__ 1i)
  [17170] LoopCont[17170]
  [17171] (17962)Call[17171] app limit = (GetArgument argumentsList)
  [17172] (17963/0) Call[17172] app __x0__ = (RequireObjectCoercible this)
  [17173] (18036/34) Loop[17173] (< __x16__ s)
  [17174] (17964/0) Normal[17174] let O = [? __x0__]
  [17175] (18043/35) Call[17175] app __x19__ = (CreateDataPropertyOrThrow A [! __x18__] T)
  [17176] (18044/35) Normal[17176] [! __x19__]
  [17177] Entry[17177]
  [17178] (17961)Call[17178] app separator = (GetArgument argumentsList)
  [17179] (17972/4) Normal[17179] return [? __x2__]
  [17180] (18030/31) Normal[17180] return A
  [17181] (18032/32) Normal[17181] p = e
  [17182] (18015/26) Normal[17182] q = (+ q 1i)
  [17183] LoopCont[17183]
  [17184] (17990/11) If[17184] (= separator undefined)
  [17185] (17992/12) Call[17185] app __x7__ = (CreateDataPropertyOrThrow A "0" S)
  [17186] (17996/14) Normal[17186] let s = S.length
  [17187] (18010/22) Call[17187] app __x9__ = (SplitMatch S q R)
  [17188] (18011/22) Normal[17188] let e = __x9__
  [17189] (17993/12) Normal[17189] [! __x7__]
  [17190] (18026/29) Call[17190] app __x14__ = (CreateDataPropertyOrThrow A [! __x13__] T)
  [17191] (18027/29) Normal[17191] [! __x14__]
  [17192] (17978/6) Normal[17192] let A = [! __x4__]
  [17193] (17979/7) Normal[17193] let lengthA = 0i
  [17194] (17985/9) Call[17194] app __x6__ = (ToString separator)
  [17195] (17986/9) Normal[17195] let R = [? __x6__]
  [17196] (18021/28) Call[17196] access __x12__ = (S __x11__)
  [17197] (18022/28) Normal[17197] __x10__ = (+ __x10__ __x12__)
  [17198] (18033/33) Normal[17198] q = p
  [17199] (17997/15) If[17199] (== s 0i)
  [17200] (17999/16) If[17200] (! (= R ""))
  [17201] (18006/19) Normal[17201] let p = 0i
  [17202] (18035/34) Normal[17202] let __x16__ = p
  [17203] (17968/2) Normal[17203] let splitter = [? __x1__]
  [17204] (18034/34) Normal[17204] let __x15__ = ""
  [17205] (18045/36) Normal[17205] return A
  [17206] (17987/10) If[17206] (== lim 0i)
  [17207] (18004/18) Normal[17207] return A
  [17208] (18012/23) If[17208] (= e ~not-matched~)
  [17209] (17971/4) Call[17209] app __x2__ = (Call splitter separator (new [O, limit]))
  [17210] (18028/30) Normal[17210] lengthA = (+ lengthA 1i)
  [17211] (17977/6) Call[17211] app __x4__ = (ArrayCreate 0i)
  [17212] (18014/23) If[17212] (== e p)
  [17213] (18017/28) Normal[17213] let __x10__ = ""
  [17214] (18019/28) Loop[17214] (< __x11__ q)
  [17215] (18024/28) Normal[17215] let T = __x10__
  [17216] (18039/34) Normal[17216] __x15__ = (+ __x15__ __x17__)
  [17217] (17981/8) Normal[17217] let lim = (- (** 2i 32i) 1i)
  [17218] (18002/17) Normal[17218] [! __x8__]
  [17219] (18007/20) Normal[17219] let q = p
  [17220] (17988/10) Normal[17220] return A
  [17221] (18018/28) Normal[17221] let __x11__ = p
  [17222] (18008/21) Loop[17222] (! (== q s))
  [17223] (17994/13) Normal[17223] return A
  [17224] Exit[17224]
  [17225] (17976/5) Normal[17225] let S = [? __x3__]
  [17226] (18029/31) If[17226] (== lengthA lim)
  [17227] LoopCont[17227]
  [17228] (17969/3) If[17228] (! (= splitter undefined))
  [17229] (18013/23) Normal[17229] q = (+ q 1i)
  [17230] (18023/28) Normal[17230] __x11__ = (+ __x11__ 1i)
  [17231] (18038/34) Call[17231] access __x17__ = (S __x16__)
  [17232] (17983/9) Call[17232] app __x5__ = (ToUint32 limit)
  [17233] (17984/9) Normal[17233] let lim = [? __x5__]
  [17234] (18025/29) Call[17234] app __x13__ = (ToString lengthA)
  [17235] (18041/34) Normal[17235] let T = __x15__
  [17236] (18042/35) Call[17236] app __x18__ = (ToString lengthA)
  [17237] (17980/8) If[17237] (= limit undefined)
  [17238] (18001/17) Call[17238] app __x8__ = (CreateDataPropertyOrThrow A "0" S)
Algo: GLOBAL.String.prototype.startsWith [1449]
  [17239] Entry[17239]
  [17240] (18047)Call[17240] app searchString = (GetArgument argumentsList)
  [17241] (18051/1) Call[17241] app __x1__ = (ToString O)
  [17242] (18052/1) Normal[17242] let S = [? __x1__]
  [17243] (18056/3) Normal[17243] throw TypeError
  [17244] (18058/4) Call[17244] app __x3__ = (ToString searchString)
  [17245] (18061/6) If[17245] (= position undefined)
  [17246] (18062/6) Normal[17246] let pos = 0i
  [17247] (18064/7) Call[17247] app __x4__ = (ToIntegerOrInfinity position)
  [17248] (18048)Call[17248] app position = (GetArgument argumentsList)
  [17249] (18053/2) Call[17249] app __x2__ = (IsRegExp searchString)
  [17250] (18055/3) If[17250] (= isRegExp true)
  [17251] (18060/5) Normal[17251] let len = S.length
  [17252] (18049/0) Call[17252] app __x0__ = (RequireObjectCoercible this)
  [17253] (18059/4) Normal[17253] let searchStr = [? __x3__]
  [17254] (18054/2) Normal[17254] let isRegExp = [? __x2__]
  [17255] (18050/0) Normal[17255] let O = [? __x0__]
  [17256] (18066/7) Normal[17256] ??? "Let id:{start} be the result of clamping id:{pos} between 0 and id:{len} ."
  [17257] (18067/8) Normal[17257] let searchLength = searchStr.length
  [17258] (18073/11) Normal[17258] return false
  [17259] (18075/12) Normal[17259] let __x5__ = ""
  [17260] (18076/12) Normal[17260] let __x6__ = start
  [17261] (18068/9) If[17261] (== searchLength 0i)
  [17262] (18069/9) Normal[17262] return true
  [17263] (18071/10) Normal[17263] let end = (+ start searchLength)
  [17264] (18080/12) Normal[17264] __x5__ = (+ __x5__ __x7__)
  [17265] (18081/12) Normal[17265] __x6__ = (+ __x6__ 1i)
  [17266] (18079/12) Call[17266] access __x7__ = (S __x6__)
  [17267] (18083/13) Call[17267] app __x8__ = (SameValueNonNumeric substring searchStr)
  [17268] (18084/13) Normal[17268] return [! __x8__]
  [17269] (18065/7) Normal[17269] let pos = [? __x4__]
  [17270] (18082/12) Normal[17270] let substring = __x5__
  [17271] Exit[17271]
  [17272] (18072/11) If[17272] (< len end)
  [17273] (18077/12) Loop[17273] (< __x6__ end)
  [17274] LoopCont[17274]
Algo: GLOBAL.String.prototype.substring [1450]
  [17275] Entry[17275]
  [17276] (18086)Call[17276] app start = (GetArgument argumentsList)
  [17277] (18090/1) Call[17277] app __x1__ = (ToString O)
  [17278] (18091/1) Normal[17278] let S = [? __x1__]
  [17279] (18095/4) If[17279] (= end undefined)
  [17280] (18096/4) Normal[17280] let intEnd = len
  [17281] (18098/5) Call[17281] app __x3__ = (ToIntegerOrInfinity end)
  [17282] (18100/5) Normal[17282] ??? "Let id:{finalStart} be the result of clamping id:{intStart} between 0 and id:{len} ."
  [17283] (18101/6) Normal[17283] ??? "Let id:{finalEnd} be the result of clamping id:{intEnd} between 0 and id:{len} ."
  [17284] (18106/9) Normal[17284] let __x6__ = ""
  [17285] (18107/9) Normal[17285] let __x7__ = from
  [17286] (18087)Call[17286] app end = (GetArgument argumentsList)
  [17287] (18092/2) Normal[17287] let len = S.length
  [17288] (18108/9) Loop[17288] (< __x7__ to)
  [17289] (18094/3) Normal[17289] let intStart = [? __x2__]
  [17290] (18099/5) Normal[17290] let intEnd = [? __x3__]
  [17291] (18088/0) Call[17291] app __x0__ = (RequireObjectCoercible this)
  [17292] (18103/7) Normal[17292] let from = __x4__
  [17293] (18104/8) Call[17293] app __x5__ = (max finalStart finalEnd)
  [17294] (18093/3) Call[17294] app __x2__ = (ToIntegerOrInfinity start)
  [17295] (18089/0) Normal[17295] let O = [? __x0__]
  [17296] (18105/8) Normal[17296] let to = __x5__
  [17297] (18102/7) Call[17297] app __x4__ = (min finalStart finalEnd)
  [17298] (18111/9) Normal[17298] __x6__ = (+ __x6__ __x8__)
  [17299] (18112/9) Normal[17299] __x7__ = (+ __x7__ 1i)
  [17300] LoopCont[17300]
  [17301] (18110/9) Call[17301] access __x8__ = (S __x7__)
  [17302] (18113/9) Normal[17302] return __x6__
  [17303] Exit[17303]
Algo: GLOBAL.String.prototype.toLocaleLowerCase [1451]
  [17304] Entry[17304]
  [17305] (18115)Call[17305] app reserved1 = (GetArgument argumentsList)
  [17306] (18116)Call[17306] app reserved2 = (GetArgument argumentsList)
  [17307] (18117/0) Normal[17307] ??? "Not Supported"
  [17308] Exit[17308]
Algo: GLOBAL.String.prototype.toLocaleUpperCase [1452]
  [17309] Entry[17309]
  [17310] (18119)Call[17310] app reserved1 = (GetArgument argumentsList)
  [17311] (18120)Call[17311] app reserved2 = (GetArgument argumentsList)
  [17312] (18121/0) Normal[17312] ??? "Not Supported"
  [17313] Exit[17313]
Algo: GLOBAL.String.prototype.toLowerCase [1453]
  [17314] Entry[17314]
  [17315] (18123/0) Call[17315] app __x0__ = (RequireObjectCoercible this)
  [17316] (18127/2) Call[17316] app __x2__ = (StringToCodePoints S)
  [17317] (18128/2) Normal[17317] let sText = [! __x2__]
  [17318] (18132/5) Normal[17318] return L
  [17319] Exit[17319]
  [17320] (18124/0) Normal[17320] let O = [? __x0__]
  [17321] (18129/3) Normal[17321] ??? "Let id:{lowerText} be the result of toLowercase ( id:{sText} ) , according to the Unicode Default Case Conversion algorithm ."
  [17322] (18131/4) Normal[17322] let L = [! __x3__]
  [17323] (18125/1) Call[17323] app __x1__ = (ToString O)
  [17324] (18130/4) Call[17324] app __x3__ = (CodePointsToString lowerText)
  [17325] (18126/1) Normal[17325] let S = [? __x1__]
Algo: GLOBAL.String.prototype.toString [1454]
  [17326] Entry[17326]
  [17327] (18134/0) Call[17327] app __x0__ = (thisStringValue this)
  [17328] (18135/0) Normal[17328] return [? __x0__]
  [17329] Exit[17329]
Algo: GLOBAL.String.prototype.toUpperCase [1455]
  [17330] Entry[17330]
  [17331] (18137/0) Normal[17331] ??? "Not supported"
  [17332] Exit[17332]
Algo: GLOBAL.String.prototype.trim [1456]
  [17333] Entry[17333]
  [17334] (18139/0) Normal[17334] let S = this
  [17335] (18140/1) Call[17335] app __x0__ = (TrimString S ~start+end~)
  [17336] (18141/1) Normal[17336] return [? __x0__]
  [17337] Exit[17337]
Algo: GLOBAL.String.prototype.trimEnd [1457]
  [17338] Entry[17338]
  [17339] (18143/0) Normal[17339] let S = this
  [17340] (18144/1) Call[17340] app __x0__ = (TrimString S ~end~)
  [17341] (18145/1) Normal[17341] return [? __x0__]
  [17342] Exit[17342]
Algo: GLOBAL.String.prototype.trimStart [1458]
  [17343] Entry[17343]
  [17344] (18147/0) Normal[17344] let S = this
  [17345] (18148/1) Call[17345] app __x0__ = (TrimString S ~start~)
  [17346] (18149/1) Normal[17346] return [? __x0__]
  [17347] Exit[17347]
Algo: GLOBAL.String.prototype.valueOf [1459]
  [17348] Entry[17348]
  [17349] (18151/0) Call[17349] app __x0__ = (thisStringValue this)
  [17350] (18152/0) Normal[17350] return [? __x0__]
  [17351] Exit[17351]
Algo: GLOBAL.String.prototype[SYMBOL_iterator] [1461]
  [17373] Entry[17373]
  [17374] (18154/0) Call[17374] app __x0__ = (RequireObjectCoercible this)
  [17375] (18158/2) Arrow[17375] clo __x2__ = ()[s] => {
  let position = 0i
  let len = s.length
  while (< position len) {
    app __x3__ = (CodePointAt s position)
    let cp = [! __x3__]
    let nextIndex = (+ position cp.CodeUnitCount)
    let __x4__ = ""
    let __x5__ = position
    while (< __x5__ nextIndex) {
      access __x6__ = (s __x5__)
      __x4__ = (+ __x4__ __x6__)
      __x5__ = (+ __x5__ 1i)
    }
    let resultString = __x4__
    position = nextIndex
    app __x7__ = (Yield resultString)
    [? __x7__]
  }
  return undefined
} [fid: 1460]
  [17376] (18179/2) Normal[17376] let closure = __x2__
  [17377] (18155/0) Normal[17377] let O = [? __x0__]
  [17378] (18180/12) Call[17378] app __x8__ = (CreateIteratorFromClosure closure "%StringIteratorPrototype%" INTRINSICS["%StringIteratorPrototype%"])
  [17379] (18156/1) Call[17379] app __x1__ = (ToString O)
  [17380] (18181/12) Normal[17380] return [! __x8__]
  [17381] (18157/1) Normal[17381] let s = [? __x1__]
  [17382] Exit[17382]
Algo: GLOBAL.String.prototype[SYMBOL_iterator]:2 [1460]
  [17352] Entry[17352]
  [17353] (18160/3) Normal[17353] let position = 0i
  [17354] (18165/6) Normal[17354] let cp = [! __x3__]
  [17355] (18166/7) Normal[17355] let nextIndex = (+ position cp.CodeUnitCount)
  [17356] (18171/8) Call[17356] access __x6__ = (s __x5__)
  [17357] (18172/8) Normal[17357] __x4__ = (+ __x4__ __x6__)
  [17358] (18174/8) Normal[17358] let resultString = __x4__
  [17359] (18175/9) Normal[17359] position = nextIndex
  [17360] (18161/4) Normal[17360] let len = s.length
  [17361] (18167/8) Normal[17361] let __x4__ = ""
  [17362] (18169/8) Loop[17362] (< __x5__ nextIndex)
  [17363] LoopCont[17363]
  [17364] (18162/5) Loop[17364] (< position len)
  [17365] (18177/10) Normal[17365] [? __x7__]
  [17366] LoopCont[17366]
  [17367] (18173/8) Normal[17367] __x5__ = (+ __x5__ 1i)
  [17368] (18168/8) Normal[17368] let __x5__ = position
  [17369] (18164/6) Call[17369] app __x3__ = (CodePointAt s position)
  [17370] (18178/11) Normal[17370] return undefined
  [17371] (18176/10) Call[17371] app __x7__ = (Yield resultString)
  [17372] Exit[17372]
Algo: GLOBAL.String.raw [1462]
  [17383] Entry[17383]
  [17384] (18183)Call[17384] app template = (GetArgument argumentsList)
  [17385] (18187/1) Normal[17385] let cooked = [? __x0__]
  [17386] (18188/2) Call[17386] app __x1__ = (Get cooked "raw")
  [17387] (18192/3) Normal[17387] let literalSegments = [? __x3__]
  [17388] (18193/4) If[17388] (! (< 0i literalSegments))
  [17389] (18197/6) Normal[17389] let nextIndex = 0i
  [17390] (18198/7) Loop[17390] true
  [17391] (18184)Normal[17391] let substitutions = argumentsList
  [17392] (18189/2) Call[17392] app __x2__ = (ToObject [? __x1__])
  [17393] (18191/3) Call[17393] app __x3__ = (LengthOfArrayLike raw)
  [17394] (18185/0) Normal[17394] let numberOfSubstitutions = substitutions.length
  [17395] (18194/4) Normal[17395] return ""
  [17396] (18196/5) Normal[17396] let stringElements = (new [])
  [17397] (18202/9) Call[17397] app __x5__ = (Get raw nextKey)
  [17398] (18203/9) Call[17398] app __x6__ = (ToString [? __x5__])
  [17399] (18190/2) Normal[17399] let raw = [? __x2__]
  [17400] (18186/1) Call[17400] app __x0__ = (ToObject template)
  [17401] (18200/8) Call[17401] app __x4__ = (ToString nextIndex)
  [17402] Exit[17402]
  [17403] (18227/17) Normal[17403] nextIndex = (+ nextIndex 1i)
  [17404] LoopCont[17404]
  [17405] (18209/10) Normal[17405] let __x9__ = __x7__[__x8__]
  [17406] (18210/10) Normal[17406] __x8__ = (+ __x8__ 1i)
  [17407] (18222/16) Loop[17407] (< __x12__ __x11__.length)
  [17408] (18224/16) Normal[17408] let __x13__ = __x11__[__x12__]
  [17409] (18211/10) Normal[17409] append __x9__ -> stringElements
  [17410] (18204/9) Normal[17410] let nextSeg = [? __x6__]
  [17411] (18205/10) Normal[17411] let __x7__ = nextSeg
  [17412] (18213/12) Normal[17412] ??? "Return the String value whose code units are the elements in the List id:{stringElements} . If id:{stringElements} has no elements , the empty String is returned ."
  [17413] (18215/13) If[17413] (< nextIndex numberOfSubstitutions)
  [17414] (18206/10) Normal[17414] let __x8__ = 0i
  [17415] (18218/15) Call[17415] app __x10__ = (ToString next)
  [17416] (18219/15) Normal[17416] let nextSub = [? __x10__]
  [17417] (18212/11) If[17417] (== (+ nextIndex 1i) literalSegments)
  [17418] (18225/16) Normal[17418] __x12__ = (+ __x12__ 1i)
  [17419] LoopCont[17419]
  [17420] (18201/8) Normal[17420] let nextKey = [! __x4__]
  [17421] (18217/13) Normal[17421] let next = ""
  [17422] (18220/16) Normal[17422] let __x11__ = nextSub
  [17423] (18207/10) Loop[17423] (< __x8__ __x7__.length)
  [17424] LoopCont[17424]
  [17425] (18226/16) Normal[17425] append __x13__ -> stringElements
  [17426] (18221/16) Normal[17426] let __x12__ = 0i
  [17427] (18216/13) Normal[17427] let next = substitutions[nextIndex]
Algo: GLOBAL.StringIteratorPrototype.next [1463]
  [17428] Entry[17428]
  [17429] (18229/0) Call[17429] app __x0__ = (GeneratorResume this ~empty~ "%StringIteratorPrototype%")
  [17430] (18230/0) Normal[17430] return [? __x0__]
  [17431] Exit[17431]
Algo: GLOBAL.Symbol [1464]
  [17432] Entry[17432]
  [17433] (18232)Call[17433] app description = (GetArgument argumentsList)
  [17434] (18237/1) Normal[17434] let descString = undefined
  [17435] (18241/3) Normal[17435] return (new 'descString)
  [17436] (18233/0) If[17436] (! (= NewTarget undefined))
  [17437] (18239/2) Call[17437] app __x0__ = (ToString description)
  [17438] (18240/2) Normal[17438] let descString = [? __x0__]
  [17439] (18234/0) Normal[17439] throw TypeError
  [17440] (18236/1) If[17440] (= description undefined)
  [17441] Exit[17441]
Algo: GLOBAL.Symbol.for [1465]
  [17442] Entry[17442]
  [17443] (18243)Call[17443] app key = (GetArgument argumentsList)
  [17444] (18247/1) Normal[17444] let __x2__ = 0i
  [17445] (18248/1) Loop[17445] (< __x2__ __x1__.length)
  [17446] (18253/2) If[17446] (= __x3__ true)
  [17447] (18254/2) Normal[17447] return e.Symbol
  [17448] LoopCont[17448]
  [17449] (18257/5) Normal[17449] append (new Record("Key" -> stringKey, "Symbol" -> newSymbol)) -> SYMBOL_REGISTRY
  [17450] (18258/6) Normal[17450] return newSymbol
  [17451] (18244/0) Call[17451] app __x0__ = (ToString key)
  [17452] (18250/1) Normal[17452] let e = __x1__[__x2__]
  [17453] (18256/4) Normal[17453] ??? "Let id:{newSymbol} be a new unique Symbol value whose [ [ Description ] ] value is id:{stringKey} ."
  [17454] (18252/2) Call[17454] app __x3__ = (SameValue e.Key stringKey)
  [17455] (18245/0) Normal[17455] let stringKey = [? __x0__]
  [17456] (18251/1) Normal[17456] __x2__ = (+ __x2__ 1i)
  [17457] (18246/1) Normal[17457] let __x1__ = SYMBOL_REGISTRY
  [17458] Exit[17458]
Algo: GLOBAL.Symbol.keyFor [1466]
  [17459] Entry[17459]
  [17460] (18260)Call[17460] app sym = (GetArgument argumentsList)
  [17461] (18265/1) Normal[17461] let __x1__ = 0i
  [17462] (18266/1) Loop[17462] (< __x1__ __x0__.length)
  [17463] (18271/2) If[17463] (= __x2__ true)
  [17464] (18272/2) Normal[17464] return e.Key
  [17465] LoopCont[17465]
  [17466] (18261/0) If[17466] (! (= (typeof sym) Symbol))
  [17467] (18268/1) Normal[17467] let e = __x0__[__x1__]
  [17468] (18274/4) Normal[17468] return undefined
  [17469] (18270/2) Call[17469] app __x2__ = (SameValue e.Symbol sym)
  [17470] Exit[17470]
  [17471] (18262/0) Normal[17471] throw TypeError
  [17472] (18264/1) Normal[17472] let __x0__ = SYMBOL_REGISTRY
  [17473] (18269/1) Normal[17473] __x1__ = (+ __x1__ 1i)
Algo: GLOBAL.Symbol.prototype.description [1467]
  [17474] Entry[17474]
  [17475] (18276/0) Normal[17475] let s = this
  [17476] (18277/1) Call[17476] app __x0__ = (thisSymbolValue s)
  [17477] (18278/1) Normal[17477] let sym = [? __x0__]
  [17478] (18279/2) Normal[17478] return sym.Description
  [17479] Exit[17479]
Algo: GLOBAL.Symbol.prototype.toString [1468]
  [17480] Entry[17480]
  [17481] (18281/0) Call[17481] app __x0__ = (thisSymbolValue this)
  [17482] (18282/0) Normal[17482] let sym = [? __x0__]
  [17483] (18283/1) Call[17483] app __x1__ = (SymbolDescriptiveString sym)
  [17484] (18284/1) Normal[17484] return __x1__
  [17485] Exit[17485]
Algo: GLOBAL.Symbol.prototype.valueOf [1469]
  [17486] Entry[17486]
  [17487] (18286/0) Call[17487] app __x0__ = (thisSymbolValue this)
  [17488] (18287/0) Normal[17488] return [? __x0__]
  [17489] Exit[17489]
Algo: GLOBAL.Symbol.prototype[SYMBOL_toPrimitive] [1470]
  [17490] Entry[17490]
  [17491] (18289)Call[17491] app hint = (GetArgument argumentsList)
  [17492] (18290/0) Call[17492] app __x0__ = (thisSymbolValue this)
  [17493] (18291/0) Normal[17493] return [? __x0__]
  [17494] Exit[17494]
Algo: GLOBAL.SyntaxError [1471]
  [17495] Entry[17495]
  [17496] (18293)Call[17496] app message = (GetArgument argumentsList)
  [17497] (18294)Normal[17497] ??? "Need manual modeling"
  [17498] Exit[17498]
Algo: GLOBAL.ThenFinallyFunctions [1473]
  [17502] Entry[17502]
  [17503] (18296)Call[17503] app value = (GetArgument argumentsList)
  [17504] (18300/2) Normal[17504] assert (= __x0__ true)
  [17505] (18301/3) Call[17505] app __x1__ = (Call onFinally undefined)
  [17506] (18305/5) Normal[17506] assert (= __x2__ true)
  [17507] (18306/6) Call[17507] app __x3__ = (PromiseResolve C result)
  [17508] (18310/7) Normal[17508] let valueThunk = (new OrdinaryObject("Call" -> closure))
  [17509] (18311/8) Call[17509] app __x4__ = (Invoke promise "then" (new [valueThunk]))
  [17510] (18297/0) Normal[17510] let F = CONTEXT.Function
  [17511] (18302/3) Normal[17511] let result = [? __x1__]
  [17512] (18304/5) Call[17512] app __x2__ = (IsConstructor C)
  [17513] (18308/7) Arrow[17513] clo closure = (this, V, argumentsList)[value] => return value [fid: 1472]
  [17514] (18298/1) Normal[17514] let onFinally = F.OnFinally
  [17515] (18307/6) Normal[17515] let promise = [? __x3__]
  [17516] (18303/4) Normal[17516] let C = F.Constructor
  [17517] (18299/2) Call[17517] app __x0__ = (IsCallable onFinally)
  [17518] (18312/8) Normal[17518] return [? __x4__]
  [17519] Exit[17519]
Algo: GLOBAL.ThenFinallyFunctions:7 [1472]
  [17499] Entry[17499]
  [17500] (18309)Normal[17500] return value
  [17501] Exit[17501]
Algo: GLOBAL.ThrowTypeError [1474]
  [17520] Entry[17520]
  [17521] (18313/0) Normal[17521] throw TypeError
  [17522] Exit[17522]
Algo: GLOBAL.TypeError [1475]
  [17523] Entry[17523]
  [17524] (18315)Call[17524] app message = (GetArgument argumentsList)
  [17525] (18316)Normal[17525] ??? "Need manual modeling"
  [17526] Exit[17526]
Algo: GLOBAL.TypedArray [1476]
  [17527] Entry[17527]
  [17528] (18317/0) Normal[17528] throw TypeError
  [17529] Exit[17529]
Algo: GLOBAL.TypedArray.from [1477]
  [17530] Entry[17530]
  [17531] (18319)Call[17531] app source = (GetArgument argumentsList)
  [17532] (18323/1) Call[17532] app __x0__ = (IsConstructor C)
  [17533] (18324/1) If[17533] (= __x0__ false)
  [17534] (18320)Call[17534] app mapfn = (GetArgument argumentsList)
  [17535] (18325/1) Normal[17535] throw TypeError
  [17536] (18327/2) If[17536] (= mapfn undefined)
  [17537] (18321)Call[17537] app thisArg = (GetArgument argumentsList)
  [17538] (18328/2) Normal[17538] let mapping = false
  [17539] (18330/4) Call[17539] app __x1__ = (IsCallable mapfn)
  [17540] (18322/0) Normal[17540] let C = this
  [17541] (18331/4) If[17541] (= __x1__ false)
  [17542] (18381/35) Normal[17542] return targetObj
  [17543] Exit[17543]
  [17544] (18366/26) Normal[17544] let k = 0i
  [17545] (18367/27) Loop[17545] (< k len)
  [17546] (18347/13) Call[17546] app __x5__ = (ToString k)
  [17547] (18348/13) Normal[17547] let Pk = [! __x5__]
  [17548] (18361/23) Normal[17548] let arrayLike = [! __x8__]
  [17549] (18362/24) Call[17549] app __x9__ = (LengthOfArrayLike arrayLike)
  [17550] (18349/14) Normal[17550] let kValue = (pop values 0i)
  [17551] (18378/33) Call[17551] app __x14__ = (Set targetObj Pk mappedValue true)
  [17552] (18379/33) Normal[17552] [? __x14__]
  [17553] (18335/6) Call[17553] app __x2__ = (GetMethod source SYMBOL_iterator)
  [17554] (18336/6) Normal[17554] let usingIterator = [? __x2__]
  [17555] (18342/10) Call[17555] app __x4__ = (TypedArrayCreate C (new [len]))
  [17556] (18343/10) Normal[17556] let targetObj = [? __x4__]
  [17557] (18371/29) Call[17557] app __x12__ = (Get arrayLike Pk)
  [17558] (18372/29) Normal[17558] let kValue = [? __x12__]
  [17559] (18353/16) Normal[17559] let mappedValue = [? __x6__]
  [17560] (18355/18) Call[17560] app __x7__ = (Set targetObj Pk mappedValue true)
  [17561] (18344/11) Normal[17561] let k = 0i
  [17562] (18357/19) Normal[17562] k = (+ k 1i)
  [17563] LoopCont[17563]
  [17564] (18352/16) Call[17564] app __x6__ = (Call mapfn thisArg (new [kValue, k]))
  [17565] (18363/24) Normal[17565] let len = [? __x9__]
  [17566] (18380/34) Normal[17566] k = (+ k 1i)
  [17567] (18334/5) Normal[17567] let mapping = true
  [17568] (18365/25) Normal[17568] let targetObj = [? __x10__]
  [17569] (18370/28) Normal[17569] let Pk = [! __x11__]
  [17570] (18339/8) Call[17570] app __x3__ = (IterableToList source usingIterator)
  [17571] (18340/8) Normal[17571] let values = [? __x3__]
  [17572] (18356/18) Normal[17572] [? __x7__]
  [17573] (18345/12) Loop[17573] (< k len)
  [17574] (18369/28) Call[17574] app __x11__ = (ToString k)
  [17575] (18350/15) If[17575] (= mapping true)
  [17576] (18354/15) Normal[17576] let mappedValue = kValue
  [17577] (18332/4) Normal[17577] throw TypeError
  [17578] LoopCont[17578]
  [17579] (18375/31) Call[17579] app __x13__ = (Call mapfn thisArg (new [kValue, k]))
  [17580] (18376/31) Normal[17580] let mappedValue = [? __x13__]
  [17581] (18364/25) Call[17581] app __x10__ = (TypedArrayCreate C (new [len]))
  [17582] (18358/21) Normal[17582] return targetObj
  [17583] (18360/23) Call[17583] app __x8__ = (ToObject source)
  [17584] (18373/30) If[17584] (= mapping true)
  [17585] (18377/30) Normal[17585] let mappedValue = kValue
  [17586] (18341/9) Normal[17586] let len = values.length
  [17587] (18337/7) If[17587] (! (= usingIterator undefined))
Algo: GLOBAL.TypedArray.of [1478]
  [17588] Entry[17588]
  [17589] (18383)Normal[17589] let items = argumentsList
  [17590] (18387/2) If[17590] (= __x0__ false)
  [17591] (18388/2) Normal[17591] throw TypeError
  [17592] (18390/3) Call[17592] app __x1__ = (TypedArrayCreate C (new [len]))
  [17593] (18393/5) Loop[17593] (< k len)
  [17594] (18395/6) Normal[17594] let kValue = items[k]
  [17595] (18401/10) Normal[17595] return newObj
  [17596] (18398/8) Call[17596] app __x3__ = (Set newObj Pk kValue true)
  [17597] (18399/8) Normal[17597] [? __x3__]
  [17598] (18384/0) Normal[17598] let len = items.length
  [17599] (18392/4) Normal[17599] let k = 0i
  [17600] (18397/7) Normal[17600] let Pk = [! __x2__]
  [17601] (18385/1) Normal[17601] let C = this
  [17602] LoopCont[17602]
  [17603] (18396/7) Call[17603] app __x2__ = (ToString k)
  [17604] (18391/3) Normal[17604] let newObj = [? __x1__]
  [17605] (18386/2) Call[17605] app __x0__ = (IsConstructor C)
  [17606] Exit[17606]
  [17607] (18400/9) Normal[17607] k = (+ k 1i)
Algo: GLOBAL.TypedArray.prototype.buffer [1479]
  [17608] Entry[17608]
  [17609] (18403/0) Normal[17609] let O = this
  [17610] (18407/3) Normal[17610] let buffer = O.ViewedArrayBuffer
  [17611] (18408/4) Normal[17611] return buffer
  [17612] (18404/1) Call[17612] app __x0__ = (RequireInternalSlot O "TypedArrayName")
  [17613] Exit[17613]
  [17614] (18405/1) Normal[17614] [? __x0__]
  [17615] (18406/2) Normal[17615] assert (! (= O.ViewedArrayBuffer absent))
Algo: GLOBAL.TypedArray.prototype.byteLength [1480]
  [17616] Entry[17616]
  [17617] (18410/0) Normal[17617] let O = this
  [17618] (18414/3) Normal[17618] let buffer = O.ViewedArrayBuffer
  [17619] (18415/4) Call[17619] app __x1__ = (IsDetachedBuffer buffer)
  [17620] (18420/6) Normal[17620] return size
  [17621] Exit[17621]
  [17622] (18411/1) Call[17622] app __x0__ = (RequireInternalSlot O "TypedArrayName")
  [17623] (18416/4) If[17623] (= __x1__ true)
  [17624] (18419/5) Normal[17624] let size = O.ByteLength
  [17625] (18412/1) Normal[17625] [? __x0__]
  [17626] (18417/4) Normal[17626] return 0i
  [17627] (18413/2) Normal[17627] assert (! (= O.ViewedArrayBuffer absent))
Algo: GLOBAL.TypedArray.prototype.byteOffset [1481]
  [17628] Entry[17628]
  [17629] (18422/0) Normal[17629] let O = this
  [17630] (18426/3) Normal[17630] let buffer = O.ViewedArrayBuffer
  [17631] (18427/4) Call[17631] app __x1__ = (IsDetachedBuffer buffer)
  [17632] (18432/6) Normal[17632] return offset
  [17633] Exit[17633]
  [17634] (18423/1) Call[17634] app __x0__ = (RequireInternalSlot O "TypedArrayName")
  [17635] (18428/4) If[17635] (= __x1__ true)
  [17636] (18431/5) Normal[17636] let offset = O.ByteOffset
  [17637] (18424/1) Normal[17637] [? __x0__]
  [17638] (18429/4) Normal[17638] return 0i
  [17639] (18425/2) Normal[17639] assert (! (= O.ViewedArrayBuffer absent))
Algo: GLOBAL.TypedArray.prototype.copyWithin [1482]
  [17640] Entry[17640]
  [17641] (18434)Call[17641] app target = (GetArgument argumentsList)
  [17642] (18438/1) Call[17642] app __x0__ = (ValidateTypedArray O)
  [17643] (18439/1) Normal[17643] [? __x0__]
  [17644] (18435)Call[17644] app start = (GetArgument argumentsList)
  [17645] (18436)Call[17645] app end = (GetArgument argumentsList)
  [17646] (18437/0) Normal[17646] let O = this
  [17647] (18443/4) If[17647] (= relativeTarget -Infinity)
  [17648] (18444/4) Normal[17648] let to = 0i
  [17649] (18445/4) If[17649] (< relativeTarget 0i)
  [17650] (18500/33) Call[17650] app __x12__ = (GetValueFromBuffer buffer fromByteIndex ~Uint8~ true ~Unordered~)
  [17651] (18501/33) Normal[17651] let value = __x12__
  [17652] (18483/19) If[17652] (= __x11__ true)
  [17653] (18484/19) Normal[17653] throw TypeError
  [17654] (18486/20) Normal[17654] let typedArrayName = O.TypedArrayName
  [17655] (18461/10) Call[17655] app __x6__ = (min relativeStart len)
  [17656] (18462/10) Normal[17656] let from = __x6__
  [17657] (18477/15) Call[17657] app __x10__ = (min (- final from) (- len to))
  [17658] (18478/15) Normal[17658] let count = __x10__
  [17659] (18463/11) If[17659] (= end undefined)
  [17660] (18495/28) Normal[17660] fromByteIndex = (- (+ fromByteIndex countBytes) 1i)
  [17661] (18496/29) Normal[17661] toByteIndex = (- (+ toByteIndex countBytes) 1i)
  [17662] (18448/5) Normal[17662] let to = __x2__
  [17663] (18452/7) Call[17663] app __x4__ = (ToIntegerOrInfinity start)
  [17664] (18455/8) Normal[17664] let from = 0i
  [17665] (18488/22) Normal[17665] let byteOffset = O.ByteOffset
  [17666] (18489/23) Normal[17666] let toByteIndex = (+ (* to elementSize) byteOffset)
  [17667] (18502/34) Call[17667] app __x13__ = (SetValueInBuffer buffer toByteIndex ~Uint8~ value true ~Unordered~)
  [17668] (18467/12) Normal[17668] let relativeEnd = [? __x7__]
  [17669] (18468/12) If[17669] (= relativeEnd -Infinity)
  [17670] (18505/36) Normal[17670] toByteIndex = (+ toByteIndex direction)
  [17671] (18506/37) Normal[17671] countBytes = (- countBytes 1i)
  [17672] (18440/2) Normal[17672] let len = O.ArrayLength
  [17673] (18504/35) Normal[17673] fromByteIndex = (+ fromByteIndex direction)
  [17674] (18456/8) If[17674] (< relativeStart 0i)
  [17675] (18458/9) Call[17675] app __x5__ = (max (+ len relativeStart) 0i)
  [17676] (18472/13) Call[17676] app __x8__ = (max (+ len relativeEnd) 0i)
  [17677] (18473/13) Normal[17677] let final = __x8__
  [17678] (18466/12) Call[17678] app __x7__ = (ToIntegerOrInfinity end)
  [17679] (18479/16) If[17679] (< 0i count)
  [17680] (18442/3) Normal[17680] let relativeTarget = [? __x1__]
  [17681] (18498/32) Loop[17681] (< 0i countBytes)
  [17682] (18447/5) Call[17682] app __x2__ = (max (+ len relativeTarget) 0i)
  [17683] (18482/19) Call[17683] app __x11__ = (IsDetachedBuffer buffer)
  [17684] (18487/21) Normal[17684] ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for id:{typedArrayName} ."
  [17685] (18508/38) Normal[17685] return O
  [17686] Exit[17686]
  [17687] (18453/7) Normal[17687] let relativeStart = [? __x4__]
  [17688] (18470/12) If[17688] (< relativeEnd 0i)
  [17689] (18475/14) Call[17689] app __x9__ = (min relativeEnd len)
  [17690] (18459/9) Normal[17690] let from = __x5__
  [17691] (18503/34) Normal[17691] __x13__
  [17692] (18464/11) Normal[17692] let relativeEnd = len
  [17693] (18450/6) Call[17693] app __x3__ = (min relativeTarget len)
  [17694] (18497/26) Normal[17694] let direction = 1i
  [17695] (18491/25) Normal[17695] let countBytes = (* count elementSize)
  [17696] (18492/26) If[17696] (&& (< fromByteIndex toByteIndex) (< toByteIndex (+ fromByteIndex countBytes)))
  [17697] (18441/3) Call[17697] app __x1__ = (ToIntegerOrInfinity target)
  [17698] (18481/18) Normal[17698] let buffer = O.ViewedArrayBuffer
  [17699] (18476/14) Normal[17699] let final = __x9__
  [17700] (18490/24) Normal[17700] let fromByteIndex = (+ (* from elementSize) byteOffset)
  [17701] LoopCont[17701]
  [17702] (18454/8) If[17702] (= relativeStart -Infinity)
  [17703] (18494/27) Normal[17703] let direction = -1i
  [17704] (18451/6) Normal[17704] let to = __x3__
  [17705] (18469/12) Normal[17705] let final = 0i
Algo: GLOBAL.TypedArray.prototype.entries [1483]
  [17706] Entry[17706]
  [17707] (18510/0) Normal[17707] let O = this
  [17708] (18514/2) Normal[17708] return __x1__
  [17709] Exit[17709]
  [17710] (18511/1) Call[17710] app __x0__ = (ValidateTypedArray O)
  [17711] (18512/1) Normal[17711] [? __x0__]
  [17712] (18513/2) Call[17712] app __x1__ = (CreateArrayIterator O ~key+value~)
Algo: GLOBAL.TypedArray.prototype.every [1484]
  [17713] Entry[17713]
  [17714] (18516)Call[17714] app callbackfn = (GetArgument argumentsList)
  [17715] (18520/1) Normal[17715] [? __x0__]
  [17716] (18521/2) Normal[17716] let len = O.ArrayLength
  [17717] (18526/4) Normal[17717] let k = 0i
  [17718] (18527/5) Loop[17718] (< k len)
  [17719] (18531/7) Call[17719] app __x3__ = (Get O Pk)
  [17720] (18532/7) Normal[17720] let kValue = [! __x3__]
  [17721] (18537/9) Normal[17721] return false
  [17722] (18539/10) Normal[17722] k = (+ k 1i)
  [17723] (18517)Call[17723] app thisArg = (GetArgument argumentsList)
  [17724] (18522/3) Call[17724] app __x1__ = (IsCallable callbackfn)
  [17725] LoopCont[17725]
  [17726] (18524/3) Normal[17726] throw TypeError
  [17727] (18530/6) Normal[17727] let Pk = [! __x2__]
  [17728] (18518/0) Normal[17728] let O = this
  [17729] (18534/8) Call[17729] app __x5__ = (ToBoolean [? __x4__])
  [17730] (18535/8) Normal[17730] let testResult = [! __x5__]
  [17731] (18529/6) Call[17731] app __x2__ = (ToString k)
  [17732] (18523/3) If[17732] (= __x1__ false)
  [17733] (18519/1) Call[17733] app __x0__ = (ValidateTypedArray O)
  [17734] (18536/9) If[17734] (= testResult false)
  [17735] (18533/8) Call[17735] app __x4__ = (Call callbackfn thisArg (new [kValue, k, O]))
  [17736] (18540/11) Normal[17736] return true
  [17737] Exit[17737]
Algo: GLOBAL.TypedArray.prototype.fill [1485]
  [17738] Entry[17738]
  [17739] (18542)Call[17739] app value = (GetArgument argumentsList)
  [17740] (18546/1) Call[17740] app __x0__ = (ValidateTypedArray O)
  [17741] (18547/1) Normal[17741] [? __x0__]
  [17742] (18552/3) Normal[17742] value = [? __x1__]
  [17743] (18556/5) Call[17743] app __x3__ = (ToIntegerOrInfinity start)
  [17744] (18557/5) Normal[17744] let relativeStart = [? __x3__]
  [17745] (18558/6) If[17745] (= relativeStart -Infinity)
  [17746] (18543)Call[17746] app start = (GetArgument argumentsList)
  [17747] (18548/2) Normal[17747] let len = O.ArrayLength
  [17748] (18551/3) Call[17748] app __x1__ = (ToBigInt value)
  [17749] (18544)Call[17749] app end = (GetArgument argumentsList)
  [17750] (18555/4) Normal[17750] value = [? __x2__]
  [17751] (18562/7) Call[17751] app __x4__ = (max (+ len relativeStart) 0i)
  [17752] (18563/7) Normal[17752] let k = __x4__
  [17753] (18549/3) If[17753] (= O.ContentType ~BigInt~)
  [17754] (18554/4) Call[17754] app __x2__ = (ToNumber value)
  [17755] (18545/0) Normal[17755] let O = this
  [17756] (18559/6) Normal[17756] let k = 0i
  [17757] (18560/6) If[17757] (< relativeStart 0i)
  [17758] LoopCont[17758]
  [17759] (18585/14) Loop[17759] (< k final)
  [17760] (18570/10) Call[17760] app __x6__ = (ToIntegerOrInfinity end)
  [17761] (18571/10) Normal[17761] let relativeEnd = [? __x6__]
  [17762] (18587/15) Call[17762] app __x10__ = (ToString k)
  [17763] (18588/15) Normal[17763] let Pk = [! __x10__]
  [17764] (18572/10) If[17764] (= relativeEnd -Infinity)
  [17765] (18565/8) Call[17765] app __x5__ = (min relativeStart len)
  [17766] (18566/8) Normal[17766] let k = __x5__
  [17767] (18576/11) Call[17767] app __x7__ = (max (+ len relativeEnd) 0i)
  [17768] (18577/11) Normal[17768] let final = __x7__
  [17769] (18567/9) If[17769] (= end undefined)
  [17770] (18581/13) Call[17770] app __x9__ = (IsDetachedBuffer O.ViewedArrayBuffer)
  [17771] (18582/13) If[17771] (= __x9__ true)
  [17772] (18574/10) If[17772] (< relativeEnd 0i)
  [17773] (18579/12) Call[17773] app __x8__ = (min relativeEnd len)
  [17774] (18589/16) Call[17774] app __x11__ = (Set O Pk value true)
  [17775] (18591/17) Normal[17775] k = (+ k 1i)
  [17776] (18580/12) Normal[17776] let final = __x8__
  [17777] (18583/13) Normal[17777] throw TypeError
  [17778] (18568/9) Normal[17778] let relativeEnd = len
  [17779] (18573/10) Normal[17779] let final = 0i
  [17780] (18590/16) Normal[17780] [! __x11__]
  [17781] (18592/18) Normal[17781] return O
  [17782] Exit[17782]
Algo: GLOBAL.TypedArray.prototype.filter [1486]
  [17783] Entry[17783]
  [17784] (18594)Call[17784] app callbackfn = (GetArgument argumentsList)
  [17785] (18598/1) Normal[17785] [? __x0__]
  [17786] (18599/2) Normal[17786] let len = O.ArrayLength
  [17787] (18604/4) Normal[17787] let kept = (new [])
  [17788] (18605/5) Normal[17788] let k = 0i
  [17789] (18609/8) Call[17789] app __x2__ = (ToString k)
  [17790] (18610/8) Normal[17790] let Pk = [! __x2__]
  [17791] (18595)Call[17791] app thisArg = (GetArgument argumentsList)
  [17792] (18600/3) Call[17792] app __x1__ = (IsCallable callbackfn)
  [17793] (18602/3) Normal[17793] throw TypeError
  [17794] (18607/7) Loop[17794] (< k len)
  [17795] (18622/15) Call[17795] app __x6__ = (TypedArraySpeciesCreate O (new [captured]))
  [17796] (18596/0) Normal[17796] let O = this
  [17797] (18606/6) Normal[17797] let captured = 0i
  [17798] (18613/10) Call[17798] app __x4__ = (Call callbackfn thisArg (new [kValue, k, O]))
  [17799] (18614/10) Call[17799] app __x5__ = (ToBoolean [? __x4__])
  [17800] (18601/3) If[17800] (= __x1__ false)
  [17801] (18597/1) Call[17801] app __x0__ = (ValidateTypedArray O)
  [17802] (18611/9) Call[17802] app __x3__ = (Get O Pk)
  [17803] (18621/14) Normal[17803] k = (+ k 1i)
  [17804] LoopCont[17804]
  [17805] (18634/19) Normal[17805] n = (+ n 1i)
  [17806] LoopCont[17806]
  [17807] (18615/10) Normal[17807] let selected = [! __x5__]
  [17808] (18616/11) If[17808] (= selected true)
  [17809] (18625/17) Normal[17809] let __x7__ = kept
  [17810] (18626/17) Normal[17810] let __x8__ = 0i
  [17811] (18618/12) Normal[17811] append kValue -> kept
  [17812] (18630/17) Normal[17812] __x8__ = (+ __x8__ 1i)
  [17813] (18631/18) Call[17813] app __x9__ = (ToString n)
  [17814] (18624/16) Normal[17814] let n = 0i
  [17815] (18627/17) Loop[17815] (< __x8__ __x7__.length)
  [17816] (18612/9) Normal[17816] let kValue = [! __x3__]
  [17817] (18629/17) Normal[17817] let e = __x7__[__x8__]
  [17818] (18632/18) Call[17818] app __x10__ = (Set A [! __x9__] e true)
  [17819] (18619/13) Normal[17819] captured = (+ captured 1i)
  [17820] (18623/15) Normal[17820] let A = [? __x6__]
  [17821] (18635/20) Normal[17821] return A
  [17822] Exit[17822]
  [17823] (18633/18) Normal[17823] [! __x10__]
Algo: GLOBAL.TypedArray.prototype.find [1487]
  [17824] Entry[17824]
  [17825] (18637)Call[17825] app predicate = (GetArgument argumentsList)
  [17826] (18641/1) Normal[17826] [? __x0__]
  [17827] (18642/2) Normal[17827] let len = O.ArrayLength
  [17828] (18647/4) Normal[17828] let k = 0i
  [17829] (18648/5) Loop[17829] (< k len)
  [17830] (18652/7) Call[17830] app __x3__ = (Get O Pk)
  [17831] (18653/7) Normal[17831] let kValue = [! __x3__]
  [17832] (18658/9) Normal[17832] return kValue
  [17833] (18660/10) Normal[17833] k = (+ k 1i)
  [17834] (18638)Call[17834] app thisArg = (GetArgument argumentsList)
  [17835] (18643/3) Call[17835] app __x1__ = (IsCallable predicate)
  [17836] LoopCont[17836]
  [17837] (18645/3) Normal[17837] throw TypeError
  [17838] (18651/6) Normal[17838] let Pk = [! __x2__]
  [17839] (18639/0) Normal[17839] let O = this
  [17840] (18655/8) Call[17840] app __x5__ = (ToBoolean [? __x4__])
  [17841] (18656/8) Normal[17841] let testResult = [! __x5__]
  [17842] (18650/6) Call[17842] app __x2__ = (ToString k)
  [17843] (18644/3) If[17843] (= __x1__ false)
  [17844] (18640/1) Call[17844] app __x0__ = (ValidateTypedArray O)
  [17845] (18657/9) If[17845] (= testResult true)
  [17846] (18654/8) Call[17846] app __x4__ = (Call predicate thisArg (new [kValue, k, O]))
  [17847] (18661/11) Normal[17847] return undefined
  [17848] Exit[17848]
Algo: GLOBAL.TypedArray.prototype.findIndex [1488]
  [17849] Entry[17849]
  [17850] (18663)Call[17850] app predicate = (GetArgument argumentsList)
  [17851] (18667/1) Normal[17851] [? __x0__]
  [17852] (18668/2) Normal[17852] let len = O.ArrayLength
  [17853] (18673/4) Normal[17853] let k = 0i
  [17854] (18674/5) Loop[17854] (< k len)
  [17855] (18678/7) Call[17855] app __x3__ = (Get O Pk)
  [17856] (18679/7) Normal[17856] let kValue = [! __x3__]
  [17857] (18684/9) Normal[17857] return k
  [17858] (18686/10) Normal[17858] k = (+ k 1i)
  [17859] (18664)Call[17859] app thisArg = (GetArgument argumentsList)
  [17860] (18669/3) Call[17860] app __x1__ = (IsCallable predicate)
  [17861] LoopCont[17861]
  [17862] (18671/3) Normal[17862] throw TypeError
  [17863] (18677/6) Normal[17863] let Pk = [! __x2__]
  [17864] (18665/0) Normal[17864] let O = this
  [17865] (18681/8) Call[17865] app __x5__ = (ToBoolean [? __x4__])
  [17866] (18682/8) Normal[17866] let testResult = [! __x5__]
  [17867] (18676/6) Call[17867] app __x2__ = (ToString k)
  [17868] (18670/3) If[17868] (= __x1__ false)
  [17869] (18666/1) Call[17869] app __x0__ = (ValidateTypedArray O)
  [17870] (18683/9) If[17870] (= testResult true)
  [17871] (18680/8) Call[17871] app __x4__ = (Call predicate thisArg (new [kValue, k, O]))
  [17872] (18687/11) Normal[17872] return -1i
  [17873] Exit[17873]
Algo: GLOBAL.TypedArray.prototype.forEach [1489]
  [17874] Entry[17874]
  [17875] (18689)Call[17875] app callbackfn = (GetArgument argumentsList)
  [17876] (18693/1) Normal[17876] [? __x0__]
  [17877] (18694/2) Normal[17877] let len = O.ArrayLength
  [17878] (18699/4) Normal[17878] let k = 0i
  [17879] (18700/5) Loop[17879] (< k len)
  [17880] (18704/7) Call[17880] app __x3__ = (Get O Pk)
  [17881] (18705/7) Normal[17881] let kValue = [! __x3__]
  [17882] (18709/10) Normal[17882] return undefined
  [17883] Exit[17883]
  [17884] (18690)Call[17884] app thisArg = (GetArgument argumentsList)
  [17885] (18695/3) Call[17885] app __x1__ = (IsCallable callbackfn)
  [17886] (18697/3) Normal[17886] throw TypeError
  [17887] (18703/6) Normal[17887] let Pk = [! __x2__]
  [17888] (18691/0) Normal[17888] let O = this
  [17889] (18707/8) Normal[17889] [? __x4__]
  [17890] (18708/9) Normal[17890] k = (+ k 1i)
  [17891] (18702/6) Call[17891] app __x2__ = (ToString k)
  [17892] (18696/3) If[17892] (= __x1__ false)
  [17893] (18692/1) Call[17893] app __x0__ = (ValidateTypedArray O)
  [17894] LoopCont[17894]
  [17895] (18706/8) Call[17895] app __x4__ = (Call callbackfn thisArg (new [kValue, k, O]))
Algo: GLOBAL.TypedArray.prototype.includes [1490]
  [17896] Entry[17896]
  [17897] (18711)Call[17897] app searchElement = (GetArgument argumentsList)
  [17898] (18715/1) Normal[17898] [? __x0__]
  [17899] (18716/2) Normal[17899] let len = O.ArrayLength
  [17900] (18721/4) Normal[17900] let n = [? __x1__]
  [17901] (18722/6) If[17901] (= n Infinity)
  [17902] (18725/7) Normal[17902] n = 0i
  [17903] (18727/8) If[17903] (! (< n 0i))
  [17904] (18712)Call[17904] app fromIndex = (GetArgument argumentsList)
  [17905] (18717/3) If[17905] (= len 0i)
  [17906] (18720/4) Call[17906] app __x1__ = (ToIntegerOrInfinity fromIndex)
  [17907] (18724/6) If[17907] (= n -Infinity)
  [17908] (18713/0) Normal[17908] let O = this
  [17909] (18730/11) Normal[17909] let k = (+ len n)
  [17910] (18731/12) If[17910] (< k 0i)
  [17911] (18723/6) Normal[17911] return false
  [17912] (18718/3) Normal[17912] return false
  [17913] (18714/1) Call[17913] app __x0__ = (ValidateTypedArray O)
  [17914] (18732/12) Normal[17914] k = 0i
  [17915] (18734/13) Loop[17915] (< k len)
  [17916] (18728/9) Normal[17916] let k = n
  [17917] (18739/15) Call[17917] app __x4__ = (SameValueZero searchElement elementK)
  [17918] (18740/15) If[17918] (= __x4__ true)
  [17919] (18741/15) Normal[17919] return true
  [17920] (18743/16) Normal[17920] k = (+ k 1i)
  [17921] (18736/14) Call[17921] app __x2__ = (ToString k)
  [17922] (18744/17) Normal[17922] return false
  [17923] Exit[17923]
  [17924] LoopCont[17924]
  [17925] (18737/14) Call[17925] app __x3__ = (Get O [! __x2__])
  [17926] (18738/14) Normal[17926] let elementK = [! __x3__]
Algo: GLOBAL.TypedArray.prototype.indexOf [1491]
  [17927] Entry[17927]
  [17928] (18746)Call[17928] app searchElement = (GetArgument argumentsList)
  [17929] (18750/1) Normal[17929] [? __x0__]
  [17930] (18751/2) Normal[17930] let len = O.ArrayLength
  [17931] (18756/4) Normal[17931] let n = [? __x1__]
  [17932] (18757/6) If[17932] (= n Infinity)
  [17933] (18760/7) Normal[17933] n = 0i
  [17934] (18762/8) If[17934] (! (< n 0i))
  [17935] (18747)Call[17935] app fromIndex = (GetArgument argumentsList)
  [17936] (18752/3) If[17936] (= len 0i)
  [17937] (18755/4) Call[17937] app __x1__ = (ToIntegerOrInfinity fromIndex)
  [17938] (18759/6) If[17938] (= n -Infinity)
  [17939] (18748/0) Normal[17939] let O = this
  [17940] (18758/6) Normal[17940] return -1i
  [17941] (18753/3) Normal[17941] return -1i
  [17942] (18749/1) Call[17942] app __x0__ = (ValidateTypedArray O)
  [17943] (18766/12) If[17943] (< k 0i)
  [17944] (18767/12) Normal[17944] k = 0i
  [17945] (18769/13) Loop[17945] (< k len)
  [17946] (18763/9) Normal[17946] let k = n
  [17947] (18765/11) Normal[17947] let k = (+ len n)
  [17948] (18774/15) If[17948] (= kPresent true)
  [17949] (18776/16) Call[17949] app __x4__ = (ToString k)
  [17950] (18785/19) Normal[17950] k = (+ k 1i)
  [17951] (18777/16) Call[17951] app __x5__ = (Get O [! __x4__])
  [17952] (18771/14) Call[17952] app __x2__ = (ToString k)
  [17953] (18786/20) Normal[17953] return -1i
  [17954] (18780/17) Normal[17954] let same = __x6__
  [17955] (18781/18) If[17955] (= same true)
  [17956] (18779/17) Call[17956] app __x6__ = (StrictEqualityComparison searchElement elementK)
  [17957] (18772/14) Call[17957] app __x3__ = (HasProperty O [! __x2__])
  [17958] LoopCont[17958]
  [17959] Exit[17959]
  [17960] (18773/14) Normal[17960] let kPresent = [! __x3__]
  [17961] (18778/16) Normal[17961] let elementK = [! __x5__]
  [17962] (18782/18) Normal[17962] return k
Algo: GLOBAL.TypedArray.prototype.join [1492]
  [17963] Entry[17963]
  [17964] (18788)Call[17964] app separator = (GetArgument argumentsList)
  [17965] (18792/2) Normal[17965] let len = O.ArrayLength
  [17966] (18793/3) If[17966] (= separator undefined)
  [17967] (18798/5) Normal[17967] let R = ""
  [17968] (18799/6) Normal[17968] let k = 0i
  [17969] (18803/8) Normal[17969] R = (+ R sep)
  [17970] (18805/9) Call[17970] app __x2__ = (ToString k)
  [17971] (18811/11) Call[17971] app __x4__ = (ToString element)
  [17972] (18812/11) Normal[17972] let next = [! __x4__]
  [17973] (18789/0) Normal[17973] let O = this
  [17974] (18794/3) Normal[17974] let sep = ","
  [17975] (18796/4) Call[17975] app __x1__ = (ToString separator)
  [17976] (18813/11) Normal[17976] R = (+ R next)
  [17977] (18797/4) Normal[17977] let sep = [? __x1__]
  [17978] (18802/8) If[17978] (< 0i k)
  [17979] (18790/1) Call[17979] app __x0__ = (ValidateTypedArray O)
  [17980] (18807/9) Normal[17980] let element = [! __x3__]
  [17981] (18808/10) If[17981] (= element undefined)
  [17982] (18814/12) Normal[17982] k = (+ k 1i)
  [17983] (18800/7) Loop[17983] (< k len)
  [17984] (18815/13) Normal[17984] return R
  [17985] (18791/1) Normal[17985] [? __x0__]
  [17986] (18809/10) Normal[17986] let next = ""
  [17987] (18806/9) Call[17987] app __x3__ = (Get O [! __x2__])
  [17988] LoopCont[17988]
  [17989] Exit[17989]
Algo: GLOBAL.TypedArray.prototype.keys [1493]
  [17990] Entry[17990]
  [17991] (18817/0) Normal[17991] let O = this
  [17992] (18821/2) Normal[17992] return __x1__
  [17993] Exit[17993]
  [17994] (18818/1) Call[17994] app __x0__ = (ValidateTypedArray O)
  [17995] (18819/1) Normal[17995] [? __x0__]
  [17996] (18820/2) Call[17996] app __x1__ = (CreateArrayIterator O ~key~)
Algo: GLOBAL.TypedArray.prototype.lastIndexOf [1494]
  [17997] Entry[17997]
  [17998] (18823)Call[17998] app searchElement = (GetArgument argumentsList)
  [17999] (18827/1) Normal[17999] [? __x0__]
  [18000] (18828/2) Normal[18000] let len = O.ArrayLength
  [18001] (18834/4) Call[18001] app __x1__ = (ToIntegerOrInfinity fromIndex)
  [18002] (18835/4) Normal[18002] let n = [? __x1__]
  [18003] (18838/5) Normal[18003] return -1i
  [18004] (18840/6) If[18004] (! (< n 0i))
  [18005] (18824)Call[18005] app fromIndex = (GetArgument argumentsList)
  [18006] (18829/3) If[18006] (= len 0i)
  [18007] (18832/4) If[18007] (! (= fromIndex absent))
  [18008] (18836/4) Normal[18008] let n = (- len 1i)
  [18009] (18837/5) If[18009] (= n -Infinity)
  [18010] (18825/0) Normal[18010] let O = this
  [18011] (18830/3) Normal[18011] return -1i
  [18012] (18826/1) Call[18012] app __x0__ = (ValidateTypedArray O)
  [18013] (18844/6) Normal[18013] let k = (+ len n)
  [18014] (18845/10) Loop[18014] (! (< k 0i))
  [18015] (18842/7) Call[18015] app __x2__ = (min n (- len 1i))
  [18016] (18852/13) Call[18016] app __x5__ = (ToString k)
  [18017] (18853/13) Call[18017] app __x6__ = (Get O [! __x5__])
  [18018] (18854/13) Normal[18018] let elementK = [! __x6__]
  [18019] (18847/11) Call[18019] app __x3__ = (ToString k)
  [18020] (18848/11) Call[18020] app __x4__ = (HasProperty O [! __x3__])
  [18021] (18857/15) If[18021] (= same true)
  [18022] (18858/15) Normal[18022] return k
  [18023] (18861/16) Normal[18023] k = (- k 1i)
  [18024] (18856/14) Normal[18024] let same = __x7__
  [18025] (18849/11) Normal[18025] let kPresent = [! __x4__]
  [18026] (18862/17) Normal[18026] return -1i
  [18027] Exit[18027]
  [18028] LoopCont[18028]
  [18029] (18843/7) Normal[18029] let k = __x2__
  [18030] (18850/12) If[18030] (= kPresent true)
  [18031] (18855/14) Call[18031] app __x7__ = (StrictEqualityComparison searchElement elementK)
Algo: GLOBAL.TypedArray.prototype.length [1495]
  [18032] Entry[18032]
  [18033] (18864/0) Normal[18033] let O = this
  [18034] (18868/4) Call[18034] app __x1__ = (IsDetachedBuffer buffer)
  [18035] (18869/4) If[18035] (= __x1__ true)
  [18036] (18865/1) Call[18036] app __x0__ = (RequireInternalSlot O "TypedArrayName")
  [18037] (18870/4) Normal[18037] return 0i
  [18038] (18872/5) Normal[18038] let length = O.ArrayLength
  [18039] (18873/6) Normal[18039] return length
  [18040] Exit[18040]
  [18041] (18866/1) Normal[18041] [? __x0__]
  [18042] (18867/3) Normal[18042] let buffer = O.ViewedArrayBuffer
Algo: GLOBAL.TypedArray.prototype.map [1496]
  [18043] Entry[18043]
  [18044] (18875)Call[18044] app callbackfn = (GetArgument argumentsList)
  [18045] (18879/1) Normal[18045] [? __x0__]
  [18046] (18880/2) Normal[18046] let len = O.ArrayLength
  [18047] (18885/4) Call[18047] app __x2__ = (TypedArraySpeciesCreate O (new [len]))
  [18048] (18886/4) Normal[18048] let A = [? __x2__]
  [18049] (18899/12) Normal[18049] return A
  [18050] Exit[18050]
  [18051] (18890/7) Call[18051] app __x3__ = (ToString k)
  [18052] (18891/7) Normal[18052] let Pk = [! __x3__]
  [18053] (18896/10) Call[18053] app __x6__ = (Set A Pk mappedValue true)
  [18054] (18897/10) Normal[18054] [? __x6__]
  [18055] (18876)Call[18055] app thisArg = (GetArgument argumentsList)
  [18056] (18881/3) Call[18056] app __x1__ = (IsCallable callbackfn)
  [18057] (18898/11) Normal[18057] k = (+ k 1i)
  [18058] (18883/3) Normal[18058] throw TypeError
  [18059] (18888/6) Loop[18059] (< k len)
  [18060] (18877/0) Normal[18060] let O = this
  [18061] (18893/8) Normal[18061] let kValue = [! __x4__]
  [18062] (18894/9) Call[18062] app __x5__ = (Call callbackfn thisArg (new [kValue, k, O]))
  [18063] LoopCont[18063]
  [18064] (18887/5) Normal[18064] let k = 0i
  [18065] (18882/3) If[18065] (= __x1__ false)
  [18066] (18878/1) Call[18066] app __x0__ = (ValidateTypedArray O)
  [18067] (18895/9) Normal[18067] let mappedValue = [? __x5__]
  [18068] (18892/8) Call[18068] app __x4__ = (Get O Pk)
Algo: GLOBAL.TypedArray.prototype.reduce [1497]
  [18069] Entry[18069]
  [18070] (18901)Call[18070] app callbackfn = (GetArgument argumentsList)
  [18071] (18905/1) Normal[18071] [? __x0__]
  [18072] (18906/2) Normal[18072] let len = O.ArrayLength
  [18073] (18911/4) If[18073] (&& (== len 0i) (= initialValue absent))
  [18074] (18912/4) Normal[18074] throw TypeError
  [18075] (18914/5) Normal[18075] let k = 0i
  [18076] (18916/7) If[18076] (! (= initialValue absent))
  [18077] (18917/8) Normal[18077] accumulator = initialValue
  [18078] (18919/10) Call[18078] app __x2__ = (ToString k)
  [18079] (18902)Call[18079] app initialValue = (GetArgument argumentsList)
  [18080] (18907/3) Call[18080] app __x1__ = (IsCallable callbackfn)
  [18081] (18909/3) Normal[18081] throw TypeError
  [18082] (18915/6) Normal[18082] let accumulator = undefined
  [18083] (18903/0) Normal[18083] let O = this
  [18084] (18920/10) Normal[18084] let Pk = [! __x2__]
  [18085] (18921/11) Call[18085] app __x3__ = (Get O Pk)
  [18086] (18908/3) If[18086] (= __x1__ false)
  [18087] (18904/1) Call[18087] app __x0__ = (ValidateTypedArray O)
  [18088] (18922/11) Normal[18088] accumulator = [! __x3__]
  [18089] (18924/13) Loop[18089] (< k len)
  [18090] (18928/15) Call[18090] app __x5__ = (Get O Pk)
  [18091] (18929/15) Normal[18091] let kValue = [! __x5__]
  [18092] (18930/16) Call[18092] app __x6__ = (Call callbackfn undefined (new [accumulator, kValue, k, O]))
  [18093] (18923/12) Normal[18093] k = (+ k 1i)
  [18094] LoopCont[18094]
  [18095] (18932/17) Normal[18095] k = (+ k 1i)
  [18096] (18926/14) Call[18096] app __x4__ = (ToString k)
  [18097] (18933/18) Normal[18097] return accumulator
  [18098] (18927/14) Normal[18098] let Pk = [! __x4__]
  [18099] (18931/16) Normal[18099] accumulator = [? __x6__]
  [18100] Exit[18100]
Algo: GLOBAL.TypedArray.prototype.reduceRight [1498]
  [18101] Entry[18101]
  [18102] (18935)Call[18102] app callbackfn = (GetArgument argumentsList)
  [18103] (18939/1) Normal[18103] [? __x0__]
  [18104] (18940/2) Normal[18104] let len = O.ArrayLength
  [18105] (18945/4) If[18105] (&& (= len 0i) (= initialValue absent))
  [18106] (18946/4) Normal[18106] throw TypeError
  [18107] (18948/5) Normal[18107] let k = (- len 1i)
  [18108] (18950/7) If[18108] (! (= initialValue absent))
  [18109] (18951/8) Normal[18109] accumulator = initialValue
  [18110] (18953/10) Call[18110] app __x2__ = (ToString k)
  [18111] (18936)Call[18111] app initialValue = (GetArgument argumentsList)
  [18112] (18941/3) Call[18112] app __x1__ = (IsCallable callbackfn)
  [18113] (18943/3) Normal[18113] throw TypeError
  [18114] (18949/6) Normal[18114] let accumulator = undefined
  [18115] (18937/0) Normal[18115] let O = this
  [18116] (18954/10) Normal[18116] let Pk = [! __x2__]
  [18117] (18955/11) Call[18117] app __x3__ = (Get O Pk)
  [18118] (18942/3) If[18118] (= __x1__ false)
  [18119] (18938/1) Call[18119] app __x0__ = (ValidateTypedArray O)
  [18120] (18956/11) Normal[18120] accumulator = [! __x3__]
  [18121] (18958/13) Loop[18121] (! (< k 0i))
  [18122] (18962/15) Call[18122] app __x5__ = (Get O Pk)
  [18123] (18963/15) Normal[18123] let kValue = [! __x5__]
  [18124] (18964/16) Call[18124] app __x6__ = (Call callbackfn undefined (new [accumulator, kValue, k, O]))
  [18125] (18957/12) Normal[18125] k = (- k 1i)
  [18126] LoopCont[18126]
  [18127] (18966/17) Normal[18127] k = (- k 1i)
  [18128] (18960/14) Call[18128] app __x4__ = (ToString k)
  [18129] (18967/18) Normal[18129] return accumulator
  [18130] (18961/14) Normal[18130] let Pk = [! __x4__]
  [18131] (18965/16) Normal[18131] accumulator = [? __x6__]
  [18132] Exit[18132]
Algo: GLOBAL.TypedArray.prototype.reverse [1499]
  [18133] Entry[18133]
  [18134] (18969/0) Normal[18134] let O = this
  [18135] (18973/3) Call[18135] app __x1__ = (floor (/ len 2i))
  [18136] (18974/3) Normal[18136] let middle = __x1__
  [18137] (18979/7) Call[18137] app __x2__ = (ToString upper)
  [18138] (18980/7) Normal[18138] let upperP = [! __x2__]
  [18139] (18992/14) Normal[18139] return O
  [18140] Exit[18140]
  [18141] (18983/9) Call[18141] app __x4__ = (Get O lowerP)
  [18142] (18984/9) Normal[18142] let lowerValue = [! __x4__]
  [18143] (18989/12) Call[18143] app __x7__ = (Set O upperP lowerValue true)
  [18144] (18990/12) Normal[18144] [! __x7__]
  [18145] (18970/1) Call[18145] app __x0__ = (ValidateTypedArray O)
  [18146] (18975/4) Normal[18146] let lower = 0i
  [18147] (18991/13) Normal[18147] lower = (+ lower 1i)
  [18148] (18978/6) Normal[18148] let upper = (- (- len lower) 1i)
  [18149] (18982/8) Normal[18149] let lowerP = [! __x3__]
  [18150] (18971/1) Normal[18150] [? __x0__]
  [18151] (18986/10) Normal[18151] let upperValue = [! __x5__]
  [18152] (18987/11) Call[18152] app __x6__ = (Set O lowerP upperValue true)
  [18153] LoopCont[18153]
  [18154] (18981/8) Call[18154] app __x3__ = (ToString lower)
  [18155] (18976/5) Loop[18155] (! (== lower middle))
  [18156] (18972/2) Normal[18156] let len = O.ArrayLength
  [18157] (18988/11) Normal[18157] [! __x6__]
  [18158] (18985/10) Call[18158] app __x5__ = (Get O upperP)
Algo: GLOBAL.TypedArray.prototype.set [1500]
  [18159] Entry[18159]
  [18160] (18994)Call[18160] app source = (GetArgument argumentsList)
  [18161] (18998/1) Normal[18161] [? __x0__]
  [18162] (18999/2) Normal[18162] assert (! (= target.ViewedArrayBuffer absent))
  [18163] (19003/4) Normal[18163] throw RangeError
  [18164] (19005/5) Normal[18164] ??? "If id:{source} is an Object that has a [ [ TypedArrayName ] ] internal slot , then in:{} out:{}"
  [18165] (18995)Call[18165] app offset = (GetArgument argumentsList)
  [18166] (19000/3) Call[18166] app __x1__ = (ToIntegerOrInfinity offset)
  [18167] (19002/4) If[18167] (< targetOffset 0i)
  [18168] (19007/9) Normal[18168] return undefined
  [18169] Exit[18169]
  [18170] (18996/0) Normal[18170] let target = this
  [18171] (19006/7) Normal[18171] ??? "Else , in:{} out:{}"
  [18172] (19001/3) Normal[18172] let targetOffset = [? __x1__]
  [18173] (18997/1) Call[18173] app __x0__ = (RequireInternalSlot target "TypedArrayName")
Algo: GLOBAL.TypedArray.prototype.slice [1501]
  [18174] Entry[18174]
  [18175] (19009)Call[18175] app start = (GetArgument argumentsList)
  [18176] (19013/1) Normal[18176] [? __x0__]
  [18177] (19014/2) Normal[18177] let len = O.ArrayLength
  [18178] (19083/40) Normal[18178] targetByteIndex = (+ targetByteIndex 1i)
  [18179] LoopCont[18179]
  [18180] (19010)Call[18180] app end = (GetArgument argumentsList)
  [18181] (19011/0) Normal[18181] let O = this
  [18182] (19076/36) Loop[18182] (< targetByteIndex limit)
  [18183] (19012/1) Call[18183] app __x0__ = (ValidateTypedArray O)
  [18184] (19018/4) Normal[18184] let k = 0i
  [18185] (19026/7) If[18185] (= end undefined)
  [18186] (19073/33) Normal[18186] let targetByteIndex = A.ByteOffset
  [18187] (19074/34) Normal[18187] let srcByteIndex = (+ (* k elementSize) srcByteOffset)
  [18188] (19059/22) Call[18188] app __x10__ = (ToString k)
  [18189] (19060/22) Normal[18189] let Pk = [! __x10__]
  [18190] (19036/9) Normal[18190] let final = __x5__
  [18191] (19040/11) Call[18191] app __x7__ = (max (- final k) 0i)
  [18192] (19052/17) Normal[18192] let targetName = A.TypedArrayName
  [18193] (19053/18) Normal[18193] ??? "Let id:{targetType} be the Element Type value in link:{table-the-typedarray-constructors} for id:{targetName} ."
  [18194] (19038/10) Call[18194] app __x6__ = (min relativeEnd len)
  [18195] (19039/10) Normal[18195] let final = __x6__
  [18196] (19069/28) Normal[18196] let srcBuffer = O.ViewedArrayBuffer
  [18197] (19070/29) Normal[18197] let targetBuffer = A.ViewedArrayBuffer
  [18198] (19024/6) Call[18198] app __x3__ = (min relativeStart len)
  [18199] (19025/6) Normal[18199] let k = __x3__
  [18200] (19031/8) If[18200] (= relativeEnd -Infinity)
  [18201] (19032/8) Normal[18201] let final = 0i
  [18202] (19033/8) If[18202] (< relativeEnd 0i)
  [18203] (19063/24) Call[18203] app __x12__ = (ToString n)
  [18204] (19064/24) Call[18204] app __x13__ = (Set A [! __x12__] kValue true)
  [18205] (19075/35) Normal[18205] let limit = (* (+ targetByteIndex count) elementSize)
  [18206] (19042/12) Call[18206] app __x8__ = (TypedArraySpeciesCreate O (new [count]))
  [18207] (19043/12) Normal[18207] let A = [? __x8__]
  [18208] (19079/37) Normal[18208] let value = __x14__
  [18209] (19080/38) Call[18209] app __x15__ = (SetValueInBuffer targetBuffer targetByteIndex ~Uint8~ value true ~Unordered~)
  [18210] (19015/3) Call[18210] app __x1__ = (ToIntegerOrInfinity start)
  [18211] (19078/37) Call[18211] app __x14__ = (GetValueFromBuffer srcBuffer srcByteIndex ~Uint8~ true ~Unordered~)
  [18212] (19047/14) If[18212] (= __x9__ true)
  [18213] (19048/14) Normal[18213] throw TypeError
  [18214] (19050/15) Normal[18214] let srcName = O.TypedArrayName
  [18215] (19041/11) Normal[18215] let count = __x7__
  [18216] (19054/19) If[18216] (! (= srcType targetType))
  [18217] (19017/4) If[18217] (= relativeStart -Infinity)
  [18218] (19019/4) If[18218] (< relativeStart 0i)
  [18219] (19071/30) Normal[18219] ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for Element Type id:{srcType} ."
  [18220] (19022/5) Normal[18220] let k = __x2__
  [18221] (19057/21) Loop[18221] (< k final)
  [18222] (19085/41) Normal[18222] return A
  [18223] (19062/23) Normal[18223] let kValue = [! __x11__]
  [18224] (19082/39) Normal[18224] srcByteIndex = (+ srcByteIndex 1i)
  [18225] (19027/7) Normal[18225] let relativeEnd = len
  [18226] (19046/14) Call[18226] app __x9__ = (IsDetachedBuffer O.ViewedArrayBuffer)
  [18227] (19035/9) Call[18227] app __x5__ = (max (+ len relativeEnd) 0i)
  [18228] (19061/23) Call[18228] app __x11__ = (Get O Pk)
  [18229] (19021/5) Call[18229] app __x2__ = (max (+ len relativeStart) 0i)
  [18230] (19072/32) Normal[18230] let srcByteOffset = O.ByteOffset
  [18231] (19066/25) Normal[18231] k = (+ k 1i)
  [18232] (19067/26) Normal[18232] n = (+ n 1i)
  [18233] (19016/3) Normal[18233] let relativeStart = [? __x1__]
  [18234] (19056/20) Normal[18234] let n = 0i
  [18235] (19051/16) Normal[18235] ??? "Let id:{srcType} be the Element Type value in link:{table-the-typedarray-constructors} for id:{srcName} ."
  [18236] (19065/24) Normal[18236] [! __x13__]
  [18237] (19081/38) Normal[18237] __x15__
  [18238] (19029/8) Call[18238] app __x4__ = (ToIntegerOrInfinity end)
  [18239] (19030/8) Normal[18239] let relativeEnd = [? __x4__]
  [18240] LoopCont[18240]
  [18241] Exit[18241]
  [18242] (19044/13) If[18242] (< 0i count)
Algo: GLOBAL.TypedArray.prototype.some [1502]
  [18243] Entry[18243]
  [18244] (19087)Call[18244] app callbackfn = (GetArgument argumentsList)
  [18245] (19091/1) Normal[18245] [? __x0__]
  [18246] (19092/2) Normal[18246] let len = O.ArrayLength
  [18247] (19097/4) Normal[18247] let k = 0i
  [18248] (19098/5) Loop[18248] (< k len)
  [18249] (19102/7) Call[18249] app __x3__ = (Get O Pk)
  [18250] (19103/7) Normal[18250] let kValue = [! __x3__]
  [18251] (19108/9) Normal[18251] return true
  [18252] (19110/10) Normal[18252] k = (+ k 1i)
  [18253] (19088)Call[18253] app thisArg = (GetArgument argumentsList)
  [18254] (19093/3) Call[18254] app __x1__ = (IsCallable callbackfn)
  [18255] LoopCont[18255]
  [18256] (19095/3) Normal[18256] throw TypeError
  [18257] (19101/6) Normal[18257] let Pk = [! __x2__]
  [18258] (19089/0) Normal[18258] let O = this
  [18259] (19105/8) Call[18259] app __x5__ = (ToBoolean [? __x4__])
  [18260] (19106/8) Normal[18260] let testResult = [! __x5__]
  [18261] (19100/6) Call[18261] app __x2__ = (ToString k)
  [18262] (19094/3) If[18262] (= __x1__ false)
  [18263] (19090/1) Call[18263] app __x0__ = (ValidateTypedArray O)
  [18264] (19107/9) If[18264] (= testResult true)
  [18265] (19104/8) Call[18265] app __x4__ = (Call callbackfn thisArg (new [kValue, k, O]))
  [18266] (19111/11) Normal[18266] return false
  [18267] Exit[18267]
Algo: GLOBAL.TypedArray.prototype.sort [1503]
  [18268] Entry[18268]
  [18269] (19113)Call[18269] app comparefn = (GetArgument argumentsList)
  [18270] (19118/0) Call[18270] app __x1__ = (IsCallable comparefn)
  [18271] (19119/0) Normal[18271] __x0__ = (= __x1__ false)
  [18272] (19125/2) Call[18272] app __x2__ = (ValidateTypedArray obj)
  [18273] (19126/2) Normal[18273] let buffer = [? __x2__]
  [18274] (19114/0) Normal[18274] let __x0__ = true
  [18275] (19121/0) If[18275] __x0__
  [18276] (19124/1) Normal[18276] let obj = this
  [18277] (19115/0) Normal[18277] __x0__ = (! (= comparefn undefined))
  [18278] (19127/3) Normal[18278] let len = obj.ArrayLength
  [18279] Exit[18279]
  [18280] (19122/0) Normal[18280] throw TypeError
  [18281] (19116/0) If[18281] __x0__
Algo: GLOBAL.TypedArray.prototype.subarray [1504]
  [18282] Entry[18282]
  [18283] (19129)Call[18283] app begin = (GetArgument argumentsList)
  [18284] (19133/1) Normal[18284] [? __x0__]
  [18285] (19134/2) Normal[18285] assert (! (= O.ViewedArrayBuffer absent))
  [18286] (19138/5) Normal[18286] let relativeBegin = [? __x1__]
  [18287] (19139/6) If[18287] (= relativeBegin -Infinity)
  [18288] (19143/7) Call[18288] app __x2__ = (max (+ srcLength relativeBegin) 0i)
  [18289] (19144/7) Normal[18289] let beginIndex = __x2__
  [18290] (19130)Call[18290] app end = (GetArgument argumentsList)
  [18291] (19135/3) Normal[18291] let buffer = O.ViewedArrayBuffer
  [18292] (19137/5) Call[18292] app __x1__ = (ToIntegerOrInfinity begin)
  [18293] (19141/6) If[18293] (< relativeBegin 0i)
  [18294] (19146/8) Call[18294] app __x3__ = (min relativeBegin srcLength)
  [18295] (19131/0) Normal[18295] let O = this
  [18296] (19140/6) Normal[18296] let beginIndex = 0i
  [18297] (19148/9) If[18297] (= end undefined)
  [18298] (19136/4) Normal[18298] let srcLength = O.ArrayLength
  [18299] (19149/9) Normal[18299] let relativeEnd = srcLength
  [18300] (19151/10) Call[18300] app __x4__ = (ToIntegerOrInfinity end)
  [18301] (19132/1) Call[18301] app __x0__ = (RequireInternalSlot O "TypedArrayName")
  [18302] (19155/10) If[18302] (< relativeEnd 0i)
  [18303] (19157/11) Call[18303] app __x5__ = (max (+ srcLength relativeEnd) 0i)
  [18304] (19160/12) Call[18304] app __x6__ = (min relativeEnd srcLength)
  [18305] (19170/19) Normal[18305] return [? __x8__]
  [18306] Exit[18306]
  [18307] (19158/11) Normal[18307] let endIndex = __x5__
  [18308] (19152/10) Normal[18308] let relativeEnd = [? __x4__]
  [18309] (19162/13) Call[18309] app __x7__ = (max (- endIndex beginIndex) 0i)
  [18310] (19163/13) Normal[18310] let newLength = __x7__
  [18311] (19161/12) Normal[18311] let endIndex = __x6__
  [18312] (19153/10) If[18312] (= relativeEnd -Infinity)
  [18313] (19166/16) Normal[18313] let srcByteOffset = O.ByteOffset
  [18314] (19167/17) Normal[18314] let beginByteOffset = (* (+ srcByteOffset beginIndex) elementSize)
  [18315] (19147/8) Normal[18315] let beginIndex = __x3__
  [18316] (19165/15) Normal[18316] ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for id:{constructorName} ."
  [18317] (19168/18) Normal[18317] let argumentsList = (new [buffer, beginByteOffset, newLength])
  [18318] (19154/10) Normal[18318] let endIndex = 0i
  [18319] (19169/19) Call[18319] app __x8__ = (TypedArraySpeciesCreate O argumentsList)
  [18320] (19164/14) Normal[18320] let constructorName = O.TypedArrayName
Algo: GLOBAL.TypedArray.prototype.values [1505]
  [18321] Entry[18321]
  [18322] (19172/0) Normal[18322] let O = this
  [18323] (19176/2) Normal[18323] return __x1__
  [18324] Exit[18324]
  [18325] (19173/1) Call[18325] app __x0__ = (ValidateTypedArray O)
  [18326] (19174/1) Normal[18326] [? __x0__]
  [18327] (19175/2) Call[18327] app __x1__ = (CreateArrayIterator O ~value~)
Algo: GLOBAL.TypedArray.prototype[SYMBOL_toStringTag] [1506]
  [18328] Entry[18328]
  [18329] (19178/0) Normal[18329] let O = this
  [18330] (19183/2) Normal[18330] return undefined
  [18331] (19185/3) Normal[18331] let name = O.TypedArrayName
  [18332] (19179/1) If[18332] (! (= (typeof O) Object))
  [18333] (19186/4) Normal[18333] assert (= (typeof name) String)
  [18334] (19180/1) Normal[18334] return undefined
  [18335] (19182/2) If[18335] (= O.TypedArrayName absent)
  [18336] (19187/5) Normal[18336] return name
  [18337] Exit[18337]
Algo: GLOBAL.TypedArray[SYMBOL_species] [1507]
  [18338] Entry[18338]
  [18339] (19188/0) Normal[18339] return this
  [18340] Exit[18340]
Algo: GLOBAL.URIError [1508]
  [18341] Entry[18341]
  [18342] (19190)Call[18342] app message = (GetArgument argumentsList)
  [18343] (19191)Normal[18343] ??? "Need manual modeling"
  [18344] Exit[18344]
Algo: GLOBAL.WeakMap [1509]
  [18345] Entry[18345]
  [18346] (19193)Call[18346] app iterable = (GetArgument argumentsList)
  [18347] (19198/1) Normal[18347] let map = [? __x0__]
  [18348] (19199/2) Normal[18348] map.WeakMapData = (new [])
  [18349] (19204/4) Normal[18349] let adder = [? __x1__]
  [18350] (19205/5) Call[18350] app __x2__ = (AddEntriesFromIterable map iterable adder)
  [18351] (19194/0) If[18351] (= NewTarget undefined)
  [18352] (19200/3) If[18352] (|| (= iterable undefined) (= iterable null))
  [18353] (19203/4) Call[18353] app __x1__ = (Get map "set")
  [18354] (19195/0) Normal[18354] throw TypeError
  [18355] (19197/1) Call[18355] app __x0__ = (OrdinaryCreateFromConstructor NewTarget "%WeakMap.prototype%" (new ["WeakMapData"]))
  [18356] (19206/5) Normal[18356] return [? __x2__]
  [18357] Exit[18357]
  [18358] (19201/3) Normal[18358] return map
Algo: GLOBAL.WeakMap.prototype.delete [1510]
  [18359] Entry[18359]
  [18360] (19208)Call[18360] app key = (GetArgument argumentsList)
  [18361] (19212/2) Normal[18361] let entries = M.WeakMapData
  [18362] (19213/3) If[18362] (! (= (typeof key) Object))
  [18363] (19218/4) Loop[18363] (< __x2__ __x1__.length)
  [18364] (19220/4) Normal[18364] let p = __x1__[__x2__]
  [18365] (19235/9) Normal[18365] return false
  [18366] (19223/5) Normal[18366] __x3__ = (! (= p.Key ~empty~))
  [18367] (19224/5) If[18367] __x3__
  [18368] (19232/7) Normal[18368] p.Value = ~empty~
  [18369] (19233/8) Normal[18369] return true
  [18370] (19209/0) Normal[18370] let M = this
  [18371] (19214/3) Normal[18371] return false
  [18372] (19216/4) Normal[18372] let __x1__ = entries
  [18373] LoopCont[18373]
  [18374] (19217/4) Normal[18374] let __x2__ = 0i
  [18375] (19222/5) Normal[18375] let __x3__ = true
  [18376] (19210/1) Call[18376] app __x0__ = (RequireInternalSlot M "WeakMapData")
  [18377] (19227/5) Normal[18377] __x3__ = (= __x4__ true)
  [18378] (19229/5) If[18378] __x3__
  [18379] (19221/4) Normal[18379] __x2__ = (+ __x2__ 1i)
  [18380] (19211/1) Normal[18380] [? __x0__]
  [18381] (19231/6) Normal[18381] p.Key = ~empty~
  [18382] (19226/5) Call[18382] app __x4__ = (SameValue p.Key key)
  [18383] Exit[18383]
Algo: GLOBAL.WeakMap.prototype.get [1511]
  [18384] Entry[18384]
  [18385] (19237)Call[18385] app key = (GetArgument argumentsList)
  [18386] (19241/2) Normal[18386] let entries = M.WeakMapData
  [18387] (19242/3) If[18387] (! (= (typeof key) Object))
  [18388] (19247/4) Loop[18388] (< __x2__ __x1__.length)
  [18389] (19249/4) Normal[18389] let p = __x1__[__x2__]
  [18390] (19261/6) Normal[18390] return undefined
  [18391] (19252/5) Normal[18391] __x3__ = (! (= p.Key ~empty~))
  [18392] (19253/5) If[18392] __x3__
  [18393] LoopCont[18393]
  [18394] (19238/0) Normal[18394] let M = this
  [18395] (19243/3) Normal[18395] return undefined
  [18396] (19245/4) Normal[18396] let __x1__ = entries
  [18397] Exit[18397]
  [18398] (19246/4) Normal[18398] let __x2__ = 0i
  [18399] (19251/5) Normal[18399] let __x3__ = true
  [18400] (19239/1) Call[18400] app __x0__ = (RequireInternalSlot M "WeakMapData")
  [18401] (19256/5) Normal[18401] __x3__ = (= __x4__ true)
  [18402] (19258/5) If[18402] __x3__
  [18403] (19250/4) Normal[18403] __x2__ = (+ __x2__ 1i)
  [18404] (19240/1) Normal[18404] [? __x0__]
  [18405] (19259/5) Normal[18405] return p.Value
  [18406] (19255/5) Call[18406] app __x4__ = (SameValue p.Key key)
Algo: GLOBAL.WeakMap.prototype.has [1512]
  [18407] Entry[18407]
  [18408] (19263)Call[18408] app key = (GetArgument argumentsList)
  [18409] (19267/2) Normal[18409] let entries = M.WeakMapData
  [18410] (19268/3) If[18410] (! (= (typeof key) Object))
  [18411] (19273/4) Loop[18411] (< __x2__ __x1__.length)
  [18412] (19275/4) Normal[18412] let p = __x1__[__x2__]
  [18413] (19287/6) Normal[18413] return false
  [18414] (19278/5) Normal[18414] __x3__ = (! (= p.Key ~empty~))
  [18415] (19279/5) If[18415] __x3__
  [18416] LoopCont[18416]
  [18417] (19264/0) Normal[18417] let M = this
  [18418] (19269/3) Normal[18418] return false
  [18419] (19271/4) Normal[18419] let __x1__ = entries
  [18420] Exit[18420]
  [18421] (19272/4) Normal[18421] let __x2__ = 0i
  [18422] (19277/5) Normal[18422] let __x3__ = true
  [18423] (19265/1) Call[18423] app __x0__ = (RequireInternalSlot M "WeakMapData")
  [18424] (19282/5) Normal[18424] __x3__ = (= __x4__ true)
  [18425] (19284/5) If[18425] __x3__
  [18426] (19276/4) Normal[18426] __x2__ = (+ __x2__ 1i)
  [18427] (19266/1) Normal[18427] [? __x0__]
  [18428] (19285/5) Normal[18428] return true
  [18429] (19281/5) Call[18429] app __x4__ = (SameValue p.Key key)
Algo: GLOBAL.WeakMap.prototype.set [1513]
  [18430] Entry[18430]
  [18431] (19289)Call[18431] app key = (GetArgument argumentsList)
  [18432] (19293/1) Normal[18432] [? __x0__]
  [18433] (19294/2) Normal[18433] let entries = M.WeakMapData
  [18434] (19299/4) Normal[18434] let __x2__ = 0i
  [18435] (19300/4) Loop[18435] (< __x2__ __x1__.length)
  [18436] (19304/5) Normal[18436] let __x3__ = true
  [18437] (19305/5) Normal[18437] __x3__ = (! (= p.Key ~empty~))
  [18438] (19313/6) Normal[18438] p.Value = value
  [18439] (19314/7) Normal[18439] return M
  [18440] (19290)Call[18440] app value = (GetArgument argumentsList)
  [18441] (19295/3) If[18441] (! (= (typeof key) Object))
  [18442] LoopCont[18442]
  [18443] (19298/4) Normal[18443] let __x1__ = entries
  [18444] (19303/4) Normal[18444] __x2__ = (+ __x2__ 1i)
  [18445] (19291/0) Normal[18445] let M = this
  [18446] (19308/5) Call[18446] app __x4__ = (SameValue p.Key key)
  [18447] (19309/5) Normal[18447] __x3__ = (= __x4__ true)
  [18448] (19302/4) Normal[18448] let p = __x1__[__x2__]
  [18449] (19296/3) Normal[18449] throw TypeError
  [18450] (19292/1) Call[18450] app __x0__ = (RequireInternalSlot M "WeakMapData")
  [18451] (19311/5) If[18451] __x3__
  [18452] (19306/5) If[18452] __x3__
  [18453] (19316/8) Normal[18453] let p = (new Record("Key" -> key, "Value" -> value))
  [18454] (19317/9) Normal[18454] append p -> entries
  [18455] (19318/10) Normal[18455] return M
  [18456] Exit[18456]
Algo: GLOBAL.WeakRef [1514]
  [18457] Entry[18457]
  [18458] (19320)Call[18458] app target = (GetArgument argumentsList)
  [18459] (19325/1) Normal[18459] throw TypeError
  [18460] (19327/2) Call[18460] app __x0__ = (OrdinaryCreateFromConstructor NewTarget "%WeakRef.prototype%" (new ["WeakRefTarget"]))
  [18461] (19331/4) Normal[18461] weakRef.WeakRefTarget = target
  [18462] (19332/5) Normal[18462] return weakRef
  [18463] (19321/0) If[18463] (= NewTarget undefined)
  [18464] (19328/2) Normal[18464] let weakRef = [? __x0__]
  [18465] (19330/3) Normal[18465] [! __x1__]
  [18466] (19322/0) Normal[18466] throw TypeError
  [18467] (19324/1) If[18467] (! (= (typeof target) Object))
  [18468] (19329/3) Call[18468] app __x1__ = (AddToKeptObjects target)
  [18469] Exit[18469]
Algo: GLOBAL.WeakRef.prototype.deref [1515]
  [18470] Entry[18470]
  [18471] (19334/0) Normal[18471] let weakRef = this
  [18472] (19338/2) Normal[18472] return [! __x1__]
  [18473] Exit[18473]
  [18474] (19335/1) Call[18474] app __x0__ = (RequireInternalSlot weakRef "WeakRefTarget")
  [18475] (19336/1) Normal[18475] [? __x0__]
  [18476] (19337/2) Call[18476] app __x1__ = (WeakRefDeref weakRef)
Algo: GLOBAL.WeakSet [1516]
  [18477] Entry[18477]
  [18478] (19340)Call[18478] app iterable = (GetArgument argumentsList)
  [18479] (19345/1) Normal[18479] let set = [? __x0__]
  [18480] (19346/2) Normal[18480] set.WeakSetData = (new [])
  [18481] (19351/4) Normal[18481] let adder = [? __x1__]
  [18482] (19352/5) Call[18482] app __x2__ = (IsCallable adder)
  [18483] (19356/6) Call[18483] app __x3__ = (GetIterator iterable)
  [18484] (19357/6) Normal[18484] let iteratorRecord = [? __x3__]
  [18485] (19341/0) If[18485] (= NewTarget undefined)
  [18486] (19347/3) If[18486] (|| (= iterable undefined) (= iterable null))
  [18487] (19350/4) Call[18487] app __x1__ = (Get set "add")
  [18488] (19354/5) Normal[18488] throw TypeError
  [18489] (19342/0) Normal[18489] throw TypeError
  [18490] (19344/1) Call[18490] app __x0__ = (OrdinaryCreateFromConstructor NewTarget "%WeakSet.prototype%" (new ["WeakSetData"]))
  [18491] (19360/8) Call[18491] app __x4__ = (IteratorStep iteratorRecord)
  [18492] (19361/8) Normal[18492] let next = [? __x4__]
  [18493] (19353/5) If[18493] (= __x2__ false)
  [18494] (19348/3) Normal[18494] return set
  [18495] (19362/9) If[18495] (= next false)
  [18496] (19358/7) Loop[18496] true
  [18497] Exit[18497]
  [18498] (19363/9) Normal[18498] return set
  [18499] (19365/10) Call[18499] app __x5__ = (IteratorValue next)
  [18500] (19368/11) Normal[18500] let status = __x6__
  [18501] (19369/12) Call[18501] app __x7__ = (IsAbruptCompletion status)
  [18502] (19370/12) If[18502] __x7__
  [18503] LoopCont[18503]
  [18504] (19373/12) Normal[18504] return [? __x8__]
  [18505] (19366/10) Normal[18505] let nextValue = [? __x5__]
  [18506] (19367/11) Call[18506] app __x6__ = (Call adder set (new [nextValue]))
  [18507] (19372/12) Call[18507] app __x8__ = (IteratorClose iteratorRecord status)
Algo: GLOBAL.WeakSet.prototype.add [1517]
  [18508] Entry[18508]
  [18509] (19376)Call[18509] app value = (GetArgument argumentsList)
  [18510] (19380/2) If[18510] (! (= (typeof value) Object))
  [18511] (19381/2) Normal[18511] throw TypeError
  [18512] (19383/3) Normal[18512] let entries = S.WeakSetData
  [18513] (19386/4) Loop[18513] (< __x2__ __x1__.length)
  [18514] (19388/4) Normal[18514] let e = __x1__[__x2__]
  [18515] (19400/7) Normal[18515] append value -> entries
  [18516] (19391/5) Normal[18516] __x3__ = (! (= e ~empty~))
  [18517] (19392/5) If[18517] __x3__
  [18518] LoopCont[18518]
  [18519] (19377/0) Normal[18519] let S = this
  [18520] (19401/8) Normal[18520] return S
  [18521] (19385/4) Normal[18521] let __x2__ = 0i
  [18522] (19390/5) Normal[18522] let __x3__ = true
  [18523] (19378/1) Call[18523] app __x0__ = (RequireInternalSlot S "WeakSetData")
  [18524] (19395/5) Normal[18524] __x3__ = (= __x4__ true)
  [18525] (19397/5) If[18525] __x3__
  [18526] Exit[18526]
  [18527] (19389/4) Normal[18527] __x2__ = (+ __x2__ 1i)
  [18528] (19384/4) Normal[18528] let __x1__ = entries
  [18529] (19379/1) Normal[18529] [? __x0__]
  [18530] (19398/6) Normal[18530] return S
  [18531] (19394/5) Call[18531] app __x4__ = (SameValue e value)
Algo: GLOBAL.WeakSet.prototype.delete [1518]
  [18532] Entry[18532]
  [18533] (19403)Call[18533] app value = (GetArgument argumentsList)
  [18534] (19407/2) If[18534] (! (= (typeof value) Object))
  [18535] (19408/2) Normal[18535] return false
  [18536] (19410/3) Normal[18536] let entries = S.WeakSetData
  [18537] (19413/4) Loop[18537] (< __x2__ __x1__.length)
  [18538] (19415/4) Normal[18538] let e = __x1__[__x2__]
  [18539] (19429/8) Normal[18539] return false
  [18540] (19418/5) Normal[18540] __x3__ = (! (= e ~empty~))
  [18541] (19419/5) If[18541] __x3__
  [18542] (19427/7) Normal[18542] return true
  [18543] LoopCont[18543]
  [18544] (19404/0) Normal[18544] let S = this
  [18545] (19412/4) Normal[18545] let __x2__ = 0i
  [18546] (19417/5) Normal[18546] let __x3__ = true
  [18547] (19405/1) Call[18547] app __x0__ = (RequireInternalSlot S "WeakSetData")
  [18548] (19422/5) Normal[18548] __x3__ = (= __x4__ true)
  [18549] (19424/5) If[18549] __x3__
  [18550] Exit[18550]
  [18551] (19416/4) Normal[18551] __x2__ = (+ __x2__ 1i)
  [18552] (19411/4) Normal[18552] let __x1__ = entries
  [18553] (19406/1) Normal[18553] [? __x0__]
  [18554] (19426/6) Normal[18554] ??? "Replace the element of id:{entries} whose value is id:{e} with an element whose value is const:{empty} ."
  [18555] (19421/5) Call[18555] app __x4__ = (SameValue e value)
Algo: GLOBAL.WeakSet.prototype.has [1519]
  [18556] Entry[18556]
  [18557] (19431)Call[18557] app value = (GetArgument argumentsList)
  [18558] (19435/2) Normal[18558] let entries = S.WeakSetData
  [18559] (19436/3) If[18559] (! (= (typeof value) Object))
  [18560] (19441/4) Loop[18560] (< __x2__ __x1__.length)
  [18561] (19443/4) Normal[18561] let e = __x1__[__x2__]
  [18562] (19455/6) Normal[18562] return false
  [18563] (19446/5) Normal[18563] __x3__ = (! (= e ~empty~))
  [18564] (19447/5) If[18564] __x3__
  [18565] LoopCont[18565]
  [18566] (19432/0) Normal[18566] let S = this
  [18567] (19437/3) Normal[18567] return false
  [18568] (19439/4) Normal[18568] let __x1__ = entries
  [18569] Exit[18569]
  [18570] (19440/4) Normal[18570] let __x2__ = 0i
  [18571] (19445/5) Normal[18571] let __x3__ = true
  [18572] (19433/1) Call[18572] app __x0__ = (RequireInternalSlot S "WeakSetData")
  [18573] (19450/5) Normal[18573] __x3__ = (= __x4__ true)
  [18574] (19452/5) If[18574] __x3__
  [18575] (19444/4) Normal[18575] __x2__ = (+ __x2__ 1i)
  [18576] (19434/1) Normal[18576] [? __x0__]
  [18577] (19453/5) Normal[18577] return true
  [18578] (19449/5) Call[18578] app __x4__ = (SameValue e value)
Algo: GLOBAL.__ABS__ [1520]
  [18579] Entry[18579]
  [18580] (19456)Normal[18580] return undefined
  [18581] Exit[18581]
Algo: GLOBAL.decodeURI [1521]
  [18582] Entry[18582]
  [18583] (19458)Call[18583] app encodedURI = (GetArgument argumentsList)
  [18584] (19462/2) Call[18584] app __x1__ = (Decode uriString reservedURISet)
  [18585] (19463/2) Normal[18585] return [? __x1__]
  [18586] (19459/0) Call[18586] app __x0__ = (ToString encodedURI)
  [18587] Exit[18587]
  [18588] (19460/0) Normal[18588] let uriString = [? __x0__]
  [18589] (19461/1) Normal[18589] ??? "Let id:{reservedURISet} be a String containing one instance of each code unit valid in nt:{uriReserved} plus value:{\"#\"} ."
Algo: GLOBAL.decodeURIComponent [1522]
  [18590] Entry[18590]
  [18591] (19465)Call[18591] app encodedURIComponent = (GetArgument argumentsList)
  [18592] (19469/2) Call[18592] app __x1__ = (Decode componentString reservedURIComponentSet)
  [18593] (19470/2) Normal[18593] return [? __x1__]
  [18594] (19466/0) Call[18594] app __x0__ = (ToString encodedURIComponent)
  [18595] Exit[18595]
  [18596] (19467/0) Normal[18596] let componentString = [? __x0__]
  [18597] (19468/1) Normal[18597] let reservedURIComponentSet = ""
Algo: GLOBAL.encodeURI [1523]
  [18598] Entry[18598]
  [18599] (19472)Call[18599] app uri = (GetArgument argumentsList)
  [18600] (19476/2) Call[18600] app __x1__ = (Encode uriString unescapedURISet)
  [18601] (19477/2) Normal[18601] return [? __x1__]
  [18602] (19473/0) Call[18602] app __x0__ = (ToString uri)
  [18603] Exit[18603]
  [18604] (19474/0) Normal[18604] let uriString = [? __x0__]
  [18605] (19475/1) Normal[18605] ??? "Let id:{unescapedURISet} be a String containing one instance of each code unit valid in nt:{uriReserved} and nt:{uriUnescaped} plus value:{\"#\"} ."
Algo: GLOBAL.encodeURIComponent [1524]
  [18606] Entry[18606]
  [18607] (19479)Call[18607] app uriComponent = (GetArgument argumentsList)
  [18608] (19483/2) Call[18608] app __x1__ = (Encode componentString unescapedURIComponentSet)
  [18609] (19484/2) Normal[18609] return [? __x1__]
  [18610] (19480/0) Call[18610] app __x0__ = (ToString uriComponent)
  [18611] Exit[18611]
  [18612] (19481/0) Normal[18612] let componentString = [? __x0__]
  [18613] (19482/1) Normal[18613] ??? "Let id:{unescapedURIComponentSet} be a String containing one instance of each code unit valid in nt:{uriUnescaped} ."
Algo: GLOBAL.eval [1525]
  [18614] Entry[18614]
  [18615] (19486)Call[18615] app x = (GetArgument argumentsList)
  [18616] (19490/3) Normal[18616] return [? __x0__]
  [18617] Exit[18617]
  [18618] (19487/1) Normal[18618] let callerContext = EXECUTION_STACK[(- EXECUTION_STACK.length 2i)]
  [18619] (19488/2) Normal[18619] let callerRealm = callerContext.Realm
  [18620] (19489/3) Call[18620] app __x0__ = (PerformEval x callerRealm false false)
Algo: GLOBAL.isFinite [1526]
  [18621] Entry[18621]
  [18622] (19492)Call[18622] app number = (GetArgument argumentsList)
  [18623] (19496/1) Normal[18623] return false
  [18624] Exit[18624]
  [18625] (19493/0) Call[18625] app __x0__ = (ToNumber number)
  [18626] (19497/1) Normal[18626] return true
  [18627] (19494/0) Normal[18627] let num = [? __x0__]
  [18628] (19495/1) If[18628] (|| (|| (= num NaN) (= num Infinity)) (= num -Infinity))
Algo: GLOBAL.isNaN [1527]
  [18629] Entry[18629]
  [18630] (19499)Call[18630] app number = (GetArgument argumentsList)
  [18631] (19503/1) Normal[18631] return true
  [18632] Exit[18632]
  [18633] (19500/0) Call[18633] app __x0__ = (ToNumber number)
  [18634] (19504/1) Normal[18634] return false
  [18635] (19501/0) Normal[18635] let num = [? __x0__]
  [18636] (19502/1) If[18636] (= num NaN)
Algo: GLOBAL.parseFloat [1528]
  [18637] Entry[18637]
  [18638] (19506)Call[18638] app string = (GetArgument argumentsList)
  [18639] (19510/1) Normal[18639] let trimmedString = [! __x1__]
  [18640] (19511/2) Normal[18640] ??? "If neither id:{trimmedString} nor any prefix of id:{trimmedString} satisfies the syntax of a nt:{StrDecimalLiteral} ( see link:{sec-tonumber-applied-to-the-string-type} ) , return value:{NaN} ."
  [18641] (19515/5) If[18641] (== mathFloat 0i)
  [18642] (19517/6) Normal[18642] ??? "If the first code unit of id:{trimmedString} is the code unit 0x002D ( HYPHEN - MINUS ) , return value:{-0} sub:{𝔽} ."
  [18643] (19520/8) Normal[18643] return mathFloat
  [18644] (19507/0) Call[18644] app __x0__ = (ToString string)
  [18645] (19512/3) Normal[18645] ??? "Let id:{numberString} be the longest prefix of id:{trimmedString} , which might be id:{trimmedString} itself , that satisfies the syntax of a nt:{StrDecimalLiteral} ."
  [18646] (19514/4) Normal[18646] let mathFloat = __x2__
  [18647] Exit[18647]
  [18648] (19508/0) Normal[18648] let inputString = [? __x0__]
  [18649] (19518/7) Normal[18649] return 0i
  [18650] (19513/4) Call[18650] access __x2__ = (numberString "MV")
  [18651] (19509/1) Call[18651] app __x1__ = (TrimString inputString ~start~)
Algo: GLOBAL.parseInt [1529]
  [18652] Entry[18652]
  [18653] (19522)Call[18653] app string = (GetArgument argumentsList)
  [18654] (19526/1) Call[18654] app __x1__ = (TrimString inputString ~start~)
  [18655] (19527/1) Normal[18655] let S = [! __x1__]
  [18656] (19531/5) Call[18656] app __x2__ = (ToInt32 radix)
  [18657] (19532/5) Normal[18657] let R = [? __x2__]
  [18658] (19536/8) If[18658] (|| (< R 2i) (< 36i R))
  [18659] (19537/8) Normal[18659] return NaN
  [18660] (19539/9) If[18660] (! (== R 16i))
  [18661] (19523)Call[18661] app radix = (GetArgument argumentsList)
  [18662] (19528/2) Normal[18662] let sign = 1i
  [18663] (19530/4) Normal[18663] ??? "If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002B ( PLUS SIGN ) or the code unit 0x002D ( HYPHEN - MINUS ) , remove the first code unit from id:{S} ."
  [18664] (19534/7) If[18664] (! (== R 0i))
  [18665] (19542/7) Normal[18665] R = 10i
  [18666] (19524/0) Call[18666] app __x0__ = (ToString string)
  [18667] (19533/6) Normal[18667] let stripPrefix = true
  [18668] (19529/3) Normal[18668] ??? "If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002D ( HYPHEN - MINUS ) , set id:{sign} to - 1 ."
  [18669] (19543/12) If[18669] (= stripPrefix true)
  [18670] (19525/0) Normal[18670] let inputString = [? __x0__]
  [18671] (19549/17) Loop[18671] (< __x4__ end)
  [18672] (19551/17) Call[18672] access __x5__ = (S __x4__)
  [18673] (19554/17) Normal[18673] let Z = __x3__
  [18674] (19566/23) Normal[18674] return (* sign mathInt)
  [18675] Exit[18675]
  [18676] (19552/17) Normal[18676] __x3__ = (+ __x3__ __x5__)
  [18677] (19544/13) Normal[18677] ??? "If the length of id:{S} is at least 2 and the first two code units of id:{S} are either value:{\"0x\"} or value:{\"0X\"} , then in:{} out:{}"
  [18678] (19546/16) Normal[18678] ??? "If id:{S} contains a code unit that is not a radix - id:{R} digit , let id:{end} be the index within id:{S} of the first such code unit ; otherwise , let id:{end} be the length of id:{S} ."
  [18679] (19555/18) If[18679] (= Z.length 0i)
  [18680] LoopCont[18680]
  [18681] (19547/17) Normal[18681] let __x3__ = ""
  [18682] (19559/20) If[18682] (== mathInt 0i)
  [18683] (19561/21) If[18683] (== sign -1i)
  [18684] (19540/9) Normal[18684] stripPrefix = false
  [18685] (19558/19) Normal[18685] ??? "Let id:{mathInt} be the integer value that is represented by id:{Z} in radix - id:{R} notation , using the letters < b > A < / b > - < b > Z < / b > and < b > a < / b > - < b > z < / b > for digits with values 10 through 35 . ( However , if id:{R} is 10 and id:{Z} contains more than 20 significant digits , every significant digit after the 20th may be replaced by a 0 digit , at the option of the implementation ; and if id:{R} is not 2 , 4 , 8 , 10 , 16 , or 32 , then id:{mathInt} may be an implementation - approximated value representing the integer value that is represented by id:{Z} in radix - id:{R} notation . )"
  [18686] (19562/21) Normal[18686] return -0.0
  [18687] (19564/22) Normal[18687] return 0i
  [18688] (19548/17) Normal[18688] let __x4__ = 0i
  [18689] (19553/17) Normal[18689] __x4__ = (+ __x4__ 1i)
  [18690] (19556/18) Normal[18690] return NaN
Algo: GeneratorBody[0,0].EvaluateBody [1530]
  [18691] Entry[18691]
  [18692] (19568)Normal[18692] let GeneratorBody = this
  [18693] (19569/0) Call[18693] access __x0__ = (GeneratorBody "EvaluateGeneratorBody" functionObject argumentsList)
  [18694] (19570/0) Normal[18694] return [? __x0__]
  [18695] Exit[18695]
Algo: GeneratorBody[0,0].EvaluateGeneratorBody [1531]
  [18696] Entry[18696]
  [18697] (19572)Normal[18697] let GeneratorBody = this
  [18698] (19576/1) Normal[18698] let G = [? __x1__]
  [18699] (19577/2) Normal[18699] G.GeneratorBrand = ~empty~
  [18700] (19573/0) Call[18700] app __x0__ = (FunctionDeclarationInstantiation functionObject argumentsList)
  [18701] (19578/3) Call[18701] app __x2__ = (GeneratorStart G FunctionBody)
  [18702] (19580/4) Normal[18702] return (comp[~return~] G => ~empty~)
  [18703] Exit[18703]
  [18704] (19574/0) Normal[18704] [? __x0__]
  [18705] (19579/3) Normal[18705] __x2__
  [18706] (19575/1) Call[18706] app __x1__ = (OrdinaryCreateFromConstructor functionObject "%GeneratorFunction.prototype.prototype%" (new ["GeneratorState", "GeneratorContext", "GeneratorBrand"]))
Algo: GeneratorDeclaration[0,0].BoundNames [1532]
  [18707] Entry[18707]
  [18708] (19582)Normal[18708] let GeneratorDeclaration = this
  [18709] (19583/0) Call[18709] access __x0__ = (BindingIdentifier "BoundNames")
  [18710] (19584/0) Normal[18710] return __x0__
  [18711] Exit[18711]
Algo: GeneratorDeclaration[0,0].Contains [1533]
  [18712] Entry[18712]
  [18713] (19586)Normal[18713] let GeneratorDeclaration = this
  [18714] (19587/0) Normal[18714] return false
  [18715] Exit[18715]
Algo: GeneratorDeclaration[0,0].EarlyErrors [1534]
  [18716] Entry[18716]
  [18717] (19589)Normal[18717] let GeneratorDeclaration = this
  [18718] (19594/1) If[18718] (|| (= __x0__ "eval") (= __x0__ "arguments"))
  [18719] (19595/1) Normal[18719] throw SyntaxError
  [18720] (19598/2) Normal[18720] let __x1__ = true
  [18721] (19601/2) If[18721] __x1__
  [18722] (19603/2) Call[18722] access __x3__ = (FormalParameters "IsSimpleParameterList")
  [18723] (19606/2) If[18723] __x1__
  [18724] (19607/2) Normal[18724] throw SyntaxError
  [18725] (19609/3) Call[18725] access __x4__ = (FormalParameters "BoundNames")
  [18726] (19590/0) Normal[18726] ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  [18727] (19600/2) Normal[18727] __x1__ = (= __x2__ true)
  [18728] (19591/1) If[18728] (&& (! (= BindingIdentifier absent)) true)
  [18729] (19604/2) Normal[18729] __x1__ = (= __x3__ false)
  [18730] (19612/3) Normal[18730] let __x7__ = __x5__
  [18731] (19613/3) Normal[18731] let __x8__ = 0i
  [18732] (19599/2) Call[18732] access __x2__ = (GeneratorBody "FunctionBodyContainsUseStrict")
  [18733] (19593/1) Call[18733] access __x0__ = (BindingIdentifier "StringValue")
  [18734] (19610/3) Call[18734] access __x5__ = (GeneratorBody "LexicallyDeclaredNames")
  [18735] (19640/7) Normal[18735] throw SyntaxError
  [18736] (19642/8) Call[18736] access __x15__ = (GeneratorBody "Contains" "SuperCall")
  [18737] (19619/3) Loop[18737] (< __x9__ __x7__.length)
  [18738] (19620/3) If[18738] (= __x6__[__x8__] __x7__[__x9__])
  [18739] LoopCont[18739]
  [18740] (19634/6) Call[18740] access __x13__ = (GeneratorBody "Contains" "SuperProperty")
  [18741] (19635/6) If[18741] (= __x13__ true)
  [18742] (19621/3) Normal[18742] __x10__ = true
  [18743] LoopCont[18743]
  [18744] (19614/3) Normal[18744] let __x9__ = 0i
  [18745] (19615/3) Normal[18745] let __x10__ = false
  [18746] (19623/3) If[18746] __x10__
  [18747] (19624/3) Normal[18747] throw SyntaxError
  [18748] (19626/4) Call[18748] access __x11__ = (FormalParameters "Contains" "YieldExpression")
  [18749] (19616/3) Loop[18749] (< __x8__ __x6__.length)
  [18750] (19628/4) Normal[18750] throw SyntaxError
  [18751] (19630/5) Call[18751] access __x12__ = (FormalParameters "Contains" "SuperProperty")
  [18752] (19636/6) Normal[18752] throw SyntaxError
  [18753] (19638/7) Call[18753] access __x14__ = (FormalParameters "Contains" "SuperCall")
  [18754] (19639/7) If[18754] (= __x14__ true)
  [18755] (19644/8) Normal[18755] throw SyntaxError
  [18756] Exit[18756]
  [18757] (19611/3) Normal[18757] let __x6__ = __x4__
  [18758] (19627/4) If[18758] (= __x11__ true)
  [18759] (19631/5) If[18759] (= __x12__ true)
  [18760] (19618/3) Normal[18760] __x9__ = 0i
  [18761] (19643/8) If[18761] (= __x15__ true)
  [18762] (19632/5) Normal[18762] throw SyntaxError
Algo: GeneratorDeclaration[0,0].InstantiateFunctionObject [1535]
  [18763] Entry[18763]
  [18764] (19647)Normal[18764] let GeneratorDeclaration = this
  [18765] (19648/0) Call[18765] access __x0__ = (GeneratorDeclaration "InstantiateGeneratorFunctionObject" scope)
  [18766] (19649/0) Normal[18766] return [? __x0__]
  [18767] Exit[18767]
Algo: GeneratorDeclaration[0,0].InstantiateGeneratorFunctionObject [1536]
  [18768] Entry[18768]
  [18769] (19651)Normal[18769] let GeneratorDeclaration = this
  [18770] (19655/2) Call[18770] app __x1__ = (OrdinaryFunctionCreate INTRINSICS["%GeneratorFunction.prototype%"] sourceText FormalParameters GeneratorBody ~non-lexical-this~ scope)
  [18771] (19656/2) Normal[18771] let F = __x1__
  [18772] (19660/4) Normal[18772] let prototype = [! __x3__]
  [18773] (19661/5) Call[18773] app __x4__ = (DefinePropertyOrThrow F "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [18774] (19652/0) Call[18774] access __x0__ = (BindingIdentifier "StringValue")
  [18775] (19657/3) Call[18775] app __x2__ = (SetFunctionName F name)
  [18776] (19659/4) Call[18776] app __x3__ = (OrdinaryObjectCreate INTRINSICS["%GeneratorFunction.prototype.prototype%"])
  [18777] (19663/6) Normal[18777] return F
  [18778] Exit[18778]
  [18779] (19653/0) Normal[18779] let name = __x0__
  [18780] (19662/5) Normal[18780] __x4__
  [18781] (19658/3) Normal[18781] __x2__
  [18782] (19654/1) Normal[18782] let sourceText = (get-syntax GeneratorDeclaration)
Algo: GeneratorDeclaration[0,0].IsConstantDeclaration [1537]
  [18783] Entry[18783]
  [18784] (19665)Normal[18784] let GeneratorDeclaration = this
  [18785] (19666/0) Normal[18785] return false
  [18786] Exit[18786]
Algo: GeneratorDeclaration[1,0].BoundNames [1538]
  [18787] Entry[18787]
  [18788] (19668)Normal[18788] let GeneratorDeclaration = this
  [18789] (19669/0) Normal[18789] return (new ["*default*"])
  [18790] Exit[18790]
Algo: GeneratorDeclaration[1,0].Contains [1539]
  [18791] Entry[18791]
  [18792] (19671)Normal[18792] let GeneratorDeclaration = this
  [18793] (19672/0) Normal[18793] return false
  [18794] Exit[18794]
Algo: GeneratorDeclaration[1,0].EarlyErrors [1540]
  [18795] Entry[18795]
  [18796] (19674)Normal[18796] let GeneratorDeclaration = this
  [18797] (19679/1) If[18797] (|| (= __x0__ "eval") (= __x0__ "arguments"))
  [18798] (19680/1) Normal[18798] throw SyntaxError
  [18799] (19683/2) Normal[18799] let __x1__ = true
  [18800] (19686/2) If[18800] __x1__
  [18801] (19688/2) Call[18801] access __x3__ = (FormalParameters "IsSimpleParameterList")
  [18802] (19691/2) If[18802] __x1__
  [18803] (19692/2) Normal[18803] throw SyntaxError
  [18804] (19694/3) Call[18804] access __x4__ = (FormalParameters "BoundNames")
  [18805] (19675/0) Normal[18805] ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  [18806] (19685/2) Normal[18806] __x1__ = (= __x2__ true)
  [18807] (19676/1) If[18807] (&& (! (= BindingIdentifier absent)) true)
  [18808] (19689/2) Normal[18808] __x1__ = (= __x3__ false)
  [18809] (19697/3) Normal[18809] let __x7__ = __x5__
  [18810] (19698/3) Normal[18810] let __x8__ = 0i
  [18811] (19684/2) Call[18811] access __x2__ = (GeneratorBody "FunctionBodyContainsUseStrict")
  [18812] (19678/1) Call[18812] access __x0__ = (BindingIdentifier "StringValue")
  [18813] (19695/3) Call[18813] access __x5__ = (GeneratorBody "LexicallyDeclaredNames")
  [18814] (19725/7) Normal[18814] throw SyntaxError
  [18815] (19727/8) Call[18815] access __x15__ = (GeneratorBody "Contains" "SuperCall")
  [18816] (19704/3) Loop[18816] (< __x9__ __x7__.length)
  [18817] (19705/3) If[18817] (= __x6__[__x8__] __x7__[__x9__])
  [18818] LoopCont[18818]
  [18819] (19719/6) Call[18819] access __x13__ = (GeneratorBody "Contains" "SuperProperty")
  [18820] (19720/6) If[18820] (= __x13__ true)
  [18821] (19706/3) Normal[18821] __x10__ = true
  [18822] LoopCont[18822]
  [18823] (19699/3) Normal[18823] let __x9__ = 0i
  [18824] (19700/3) Normal[18824] let __x10__ = false
  [18825] (19708/3) If[18825] __x10__
  [18826] (19709/3) Normal[18826] throw SyntaxError
  [18827] (19711/4) Call[18827] access __x11__ = (FormalParameters "Contains" "YieldExpression")
  [18828] (19701/3) Loop[18828] (< __x8__ __x6__.length)
  [18829] (19713/4) Normal[18829] throw SyntaxError
  [18830] (19715/5) Call[18830] access __x12__ = (FormalParameters "Contains" "SuperProperty")
  [18831] (19721/6) Normal[18831] throw SyntaxError
  [18832] (19723/7) Call[18832] access __x14__ = (FormalParameters "Contains" "SuperCall")
  [18833] (19724/7) If[18833] (= __x14__ true)
  [18834] (19729/8) Normal[18834] throw SyntaxError
  [18835] Exit[18835]
  [18836] (19696/3) Normal[18836] let __x6__ = __x4__
  [18837] (19712/4) If[18837] (= __x11__ true)
  [18838] (19716/5) If[18838] (= __x12__ true)
  [18839] (19703/3) Normal[18839] __x9__ = 0i
  [18840] (19728/8) If[18840] (= __x15__ true)
  [18841] (19717/5) Normal[18841] throw SyntaxError
Algo: GeneratorDeclaration[1,0].InstantiateFunctionObject [1541]
  [18842] Entry[18842]
  [18843] (19732)Normal[18843] let GeneratorDeclaration = this
  [18844] (19733/0) Call[18844] access __x0__ = (GeneratorDeclaration "InstantiateGeneratorFunctionObject" scope)
  [18845] (19734/0) Normal[18845] return [? __x0__]
  [18846] Exit[18846]
Algo: GeneratorDeclaration[1,0].InstantiateGeneratorFunctionObject [1542]
  [18847] Entry[18847]
  [18848] (19736)Normal[18848] let GeneratorDeclaration = this
  [18849] (19740/2) Call[18849] app __x1__ = (SetFunctionName F "default")
  [18850] (19741/2) Normal[18850] __x1__
  [18851] (19745/4) Normal[18851] __x3__
  [18852] (19746/5) Normal[18852] return F
  [18853] (19737/0) Normal[18853] let sourceText = (get-syntax GeneratorDeclaration)
  [18854] (19742/3) Call[18854] app __x2__ = (OrdinaryObjectCreate INTRINSICS["%GeneratorFunction.prototype.prototype%"])
  [18855] (19744/4) Call[18855] app __x3__ = (DefinePropertyOrThrow F "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [18856] (19738/1) Call[18856] app __x0__ = (OrdinaryFunctionCreate INTRINSICS["%GeneratorFunction.prototype%"] sourceText FormalParameters GeneratorBody ~non-lexical-this~ scope)
  [18857] (19743/3) Normal[18857] let prototype = [! __x2__]
  [18858] (19739/1) Normal[18858] let F = __x0__
  [18859] Exit[18859]
Algo: GeneratorDeclaration[1,0].IsConstantDeclaration [1543]
  [18860] Entry[18860]
  [18861] (19748)Normal[18861] let GeneratorDeclaration = this
  [18862] (19749/0) Normal[18862] return false
  [18863] Exit[18863]
Algo: GeneratorExpression[0,0].Contains [1544]
  [18864] Entry[18864]
  [18865] (19751)Normal[18865] let GeneratorExpression = this
  [18866] (19752/0) Normal[18866] return false
  [18867] Exit[18867]
Algo: GeneratorExpression[0,0].EarlyErrors [1545]
  [18868] Entry[18868]
  [18869] (19754)Normal[18869] let GeneratorExpression = this
  [18870] (19759/1) If[18870] (|| (= __x0__ "eval") (= __x0__ "arguments"))
  [18871] (19760/1) Normal[18871] throw SyntaxError
  [18872] (19763/2) Normal[18872] let __x1__ = true
  [18873] (19766/2) If[18873] __x1__
  [18874] (19768/2) Call[18874] access __x3__ = (FormalParameters "IsSimpleParameterList")
  [18875] (19771/2) If[18875] __x1__
  [18876] (19772/2) Normal[18876] throw SyntaxError
  [18877] (19774/3) Call[18877] access __x4__ = (FormalParameters "BoundNames")
  [18878] (19755/0) Normal[18878] ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  [18879] (19765/2) Normal[18879] __x1__ = (= __x2__ true)
  [18880] (19756/1) If[18880] (&& (! (= BindingIdentifier absent)) true)
  [18881] (19769/2) Normal[18881] __x1__ = (= __x3__ false)
  [18882] (19777/3) Normal[18882] let __x7__ = __x5__
  [18883] (19778/3) Normal[18883] let __x8__ = 0i
  [18884] (19764/2) Call[18884] access __x2__ = (GeneratorBody "FunctionBodyContainsUseStrict")
  [18885] (19758/1) Call[18885] access __x0__ = (BindingIdentifier "StringValue")
  [18886] (19775/3) Call[18886] access __x5__ = (GeneratorBody "LexicallyDeclaredNames")
  [18887] (19805/7) Normal[18887] throw SyntaxError
  [18888] (19807/8) Call[18888] access __x15__ = (GeneratorBody "Contains" "SuperCall")
  [18889] (19784/3) Loop[18889] (< __x9__ __x7__.length)
  [18890] (19785/3) If[18890] (= __x6__[__x8__] __x7__[__x9__])
  [18891] LoopCont[18891]
  [18892] (19799/6) Call[18892] access __x13__ = (GeneratorBody "Contains" "SuperProperty")
  [18893] (19800/6) If[18893] (= __x13__ true)
  [18894] (19786/3) Normal[18894] __x10__ = true
  [18895] LoopCont[18895]
  [18896] (19779/3) Normal[18896] let __x9__ = 0i
  [18897] (19780/3) Normal[18897] let __x10__ = false
  [18898] (19788/3) If[18898] __x10__
  [18899] (19789/3) Normal[18899] throw SyntaxError
  [18900] (19791/4) Call[18900] access __x11__ = (FormalParameters "Contains" "YieldExpression")
  [18901] (19781/3) Loop[18901] (< __x8__ __x6__.length)
  [18902] (19793/4) Normal[18902] throw SyntaxError
  [18903] (19795/5) Call[18903] access __x12__ = (FormalParameters "Contains" "SuperProperty")
  [18904] (19801/6) Normal[18904] throw SyntaxError
  [18905] (19803/7) Call[18905] access __x14__ = (FormalParameters "Contains" "SuperCall")
  [18906] (19804/7) If[18906] (= __x14__ true)
  [18907] (19809/8) Normal[18907] throw SyntaxError
  [18908] Exit[18908]
  [18909] (19776/3) Normal[18909] let __x6__ = __x4__
  [18910] (19792/4) If[18910] (= __x11__ true)
  [18911] (19796/5) If[18911] (= __x12__ true)
  [18912] (19783/3) Normal[18912] __x9__ = 0i
  [18913] (19808/8) If[18913] (= __x15__ true)
  [18914] (19797/5) Normal[18914] throw SyntaxError
Algo: GeneratorExpression[0,0].Evaluation [1546]
  [18915] Entry[18915]
  [18916] (19812)Normal[18916] let GeneratorExpression = this
  [18917] (19813/0) Call[18917] access __x0__ = (GeneratorExpression "InstantiateGeneratorFunctionExpression")
  [18918] (19814/0) Normal[18918] return __x0__
  [18919] Exit[18919]
Algo: GeneratorExpression[0,0].HasName [1547]
  [18920] Entry[18920]
  [18921] (19816)Normal[18921] let GeneratorExpression = this
  [18922] (19817/0) Normal[18922] return false
  [18923] Exit[18923]
Algo: GeneratorExpression[0,0].InstantiateGeneratorFunctionExpression [1548]
  [18924] Entry[18924]
  [18925] (19819)Normal[18925] let GeneratorExpression = this
  [18926] (19824/1) Normal[18926] let scope = __x0__
  [18927] (19825/2) Normal[18927] let sourceText = (get-syntax GeneratorExpression)
  [18928] (19829/4) Normal[18928] __x2__
  [18929] (19830/5) Call[18929] app __x3__ = (OrdinaryObjectCreate INTRINSICS["%GeneratorFunction.prototype.prototype%"])
  [18930] (19833/6) Normal[18930] __x4__
  [18931] (19834/7) Normal[18931] return closure
  [18932] (19820/0) If[18932] (= name absent)
  [18933] (19826/3) Call[18933] app __x1__ = (OrdinaryFunctionCreate INTRINSICS["%GeneratorFunction.prototype%"] sourceText FormalParameters GeneratorBody ~non-lexical-this~ scope)
  [18934] (19828/4) Call[18934] app __x2__ = (SetFunctionName closure name)
  [18935] (19832/6) Call[18935] app __x4__ = (DefinePropertyOrThrow closure "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [18936] (19821/0) Normal[18936] name = ""
  [18937] (19823/1) Call[18937] access __x0__ = (CONTEXT "LexicalEnvironment")
  [18938] (19831/5) Normal[18938] let prototype = [! __x3__]
  [18939] (19827/3) Normal[18939] let closure = __x1__
  [18940] Exit[18940]
Algo: GeneratorExpression[0,0].IsFunctionDefinition [1549]
  [18941] Entry[18941]
  [18942] (19836)Normal[18942] let GeneratorExpression = this
  [18943] (19837/0) Normal[18943] return true
  [18944] Exit[18944]
Algo: GeneratorExpression[0,0].NamedEvaluation [1550]
  [18945] Entry[18945]
  [18946] (19839)Normal[18946] let GeneratorExpression = this
  [18947] (19840/0) Call[18947] access __x0__ = (GeneratorExpression "InstantiateGeneratorFunctionExpression" name)
  [18948] (19841/0) Normal[18948] return __x0__
  [18949] Exit[18949]
Algo: GeneratorExpression[0,1].Contains [1551]
  [18950] Entry[18950]
  [18951] (19843)Normal[18951] let GeneratorExpression = this
  [18952] (19844/0) Normal[18952] return false
  [18953] Exit[18953]
Algo: GeneratorExpression[0,1].EarlyErrors [1552]
  [18954] Entry[18954]
  [18955] (19846)Normal[18955] let GeneratorExpression = this
  [18956] (19851/1) If[18956] (|| (= __x0__ "eval") (= __x0__ "arguments"))
  [18957] (19852/1) Normal[18957] throw SyntaxError
  [18958] (19855/2) Normal[18958] let __x1__ = true
  [18959] (19858/2) If[18959] __x1__
  [18960] (19860/2) Call[18960] access __x3__ = (FormalParameters "IsSimpleParameterList")
  [18961] (19863/2) If[18961] __x1__
  [18962] (19864/2) Normal[18962] throw SyntaxError
  [18963] (19866/3) Call[18963] access __x4__ = (FormalParameters "BoundNames")
  [18964] (19847/0) Normal[18964] ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  [18965] (19857/2) Normal[18965] __x1__ = (= __x2__ true)
  [18966] (19848/1) If[18966] (&& (! (= BindingIdentifier absent)) true)
  [18967] (19861/2) Normal[18967] __x1__ = (= __x3__ false)
  [18968] (19869/3) Normal[18968] let __x7__ = __x5__
  [18969] (19870/3) Normal[18969] let __x8__ = 0i
  [18970] (19856/2) Call[18970] access __x2__ = (GeneratorBody "FunctionBodyContainsUseStrict")
  [18971] (19850/1) Call[18971] access __x0__ = (BindingIdentifier "StringValue")
  [18972] (19867/3) Call[18972] access __x5__ = (GeneratorBody "LexicallyDeclaredNames")
  [18973] (19897/7) Normal[18973] throw SyntaxError
  [18974] (19899/8) Call[18974] access __x15__ = (GeneratorBody "Contains" "SuperCall")
  [18975] (19876/3) Loop[18975] (< __x9__ __x7__.length)
  [18976] (19877/3) If[18976] (= __x6__[__x8__] __x7__[__x9__])
  [18977] LoopCont[18977]
  [18978] (19891/6) Call[18978] access __x13__ = (GeneratorBody "Contains" "SuperProperty")
  [18979] (19892/6) If[18979] (= __x13__ true)
  [18980] (19878/3) Normal[18980] __x10__ = true
  [18981] LoopCont[18981]
  [18982] (19871/3) Normal[18982] let __x9__ = 0i
  [18983] (19872/3) Normal[18983] let __x10__ = false
  [18984] (19880/3) If[18984] __x10__
  [18985] (19881/3) Normal[18985] throw SyntaxError
  [18986] (19883/4) Call[18986] access __x11__ = (FormalParameters "Contains" "YieldExpression")
  [18987] (19873/3) Loop[18987] (< __x8__ __x6__.length)
  [18988] (19885/4) Normal[18988] throw SyntaxError
  [18989] (19887/5) Call[18989] access __x12__ = (FormalParameters "Contains" "SuperProperty")
  [18990] (19893/6) Normal[18990] throw SyntaxError
  [18991] (19895/7) Call[18991] access __x14__ = (FormalParameters "Contains" "SuperCall")
  [18992] (19896/7) If[18992] (= __x14__ true)
  [18993] (19901/8) Normal[18993] throw SyntaxError
  [18994] Exit[18994]
  [18995] (19868/3) Normal[18995] let __x6__ = __x4__
  [18996] (19884/4) If[18996] (= __x11__ true)
  [18997] (19888/5) If[18997] (= __x12__ true)
  [18998] (19875/3) Normal[18998] __x9__ = 0i
  [18999] (19900/8) If[18999] (= __x15__ true)
  [19000] (19889/5) Normal[19000] throw SyntaxError
Algo: GeneratorExpression[0,1].Evaluation [1553]
  [19001] Entry[19001]
  [19002] (19904)Normal[19002] let GeneratorExpression = this
  [19003] (19905/0) Call[19003] access __x0__ = (GeneratorExpression "InstantiateGeneratorFunctionExpression")
  [19004] (19906/0) Normal[19004] return __x0__
  [19005] Exit[19005]
Algo: GeneratorExpression[0,1].HasName [1554]
  [19006] Entry[19006]
  [19007] (19908)Normal[19007] let GeneratorExpression = this
  [19008] (19909/0) Normal[19008] return true
  [19009] Exit[19009]
Algo: GeneratorExpression[0,1].InstantiateGeneratorFunctionExpression [1555]
  [19010] Entry[19010]
  [19011] (19911)Normal[19011] let GeneratorExpression = this
  [19012] (19915/2) Normal[19012] let scope = CONTEXT.LexicalEnvironment
  [19013] (19916/3) Call[19013] app __x1__ = (NewDeclarativeEnvironment scope)
  [19014] (19920/5) Normal[19014] let sourceText = (get-syntax GeneratorExpression)
  [19015] (19921/6) Call[19015] app __x3__ = (OrdinaryFunctionCreate INTRINSICS["%GeneratorFunction.prototype%"] sourceText FormalParameters GeneratorBody ~non-lexical-this~ funcEnv)
  [19016] (19924/7) Normal[19016] __x4__
  [19017] (19925/8) Call[19017] app __x5__ = (OrdinaryObjectCreate INTRINSICS["%GeneratorFunction.prototype.prototype%"])
  [19018] (19930/10) Normal[19018] __x7__
  [19019] (19931/11) Normal[19019] return closure
  [19020] (19912/0) Normal[19020] assert (= name absent)
  [19021] (19917/3) Normal[19021] let funcEnv = __x1__
  [19022] Exit[19022]
  [19023] (19919/4) Normal[19023] __x2__
  [19024] (19923/7) Call[19024] app __x4__ = (SetFunctionName closure name)
  [19025] (19913/1) Call[19025] access __x0__ = (BindingIdentifier "StringValue")
  [19026] (19927/9) Call[19026] app __x6__ = (DefinePropertyOrThrow closure "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [19027] (19928/9) Normal[19027] __x6__
  [19028] (19922/6) Normal[19028] let closure = __x3__
  [19029] (19918/4) Call[19029] app __x2__ = (funcEnv.CreateImmutableBinding funcEnv name false)
  [19030] (19914/1) Normal[19030] name = __x0__
  [19031] (19929/10) Call[19031] app __x7__ = (funcEnv.InitializeBinding funcEnv name closure)
  [19032] (19926/8) Normal[19032] let prototype = [! __x5__]
Algo: GeneratorExpression[0,1].IsFunctionDefinition [1556]
  [19033] Entry[19033]
  [19034] (19933)Normal[19034] let GeneratorExpression = this
  [19035] (19934/0) Normal[19035] return true
  [19036] Exit[19036]
Algo: GeneratorMethod[0,0].ComputedPropertyContains [1557]
  [19037] Entry[19037]
  [19038] (19936)Normal[19038] let GeneratorMethod = this
  [19039] (19937/0) Call[19039] access __x0__ = (PropertyName "ComputedPropertyContains" symbol)
  [19040] (19938/0) Normal[19040] return __x0__
  [19041] Exit[19041]
Algo: GeneratorMethod[0,0].EarlyErrors [1558]
  [19042] Entry[19042]
  [19043] (19940)Normal[19043] let GeneratorMethod = this
  [19044] (19945/1) Call[19044] access __x1__ = (UniqueFormalParameters "Contains" "YieldExpression")
  [19045] (19946/1) If[19045] (= __x1__ true)
  [19046] (19951/2) Normal[19046] __x2__ = (= __x3__ true)
  [19047] (19952/2) If[19047] __x2__
  [19048] (19957/2) If[19048] __x2__
  [19049] (19958/2) Normal[19049] throw SyntaxError
  [19050] (19960/3) Call[19050] access __x5__ = (UniqueFormalParameters "BoundNames")
  [19051] (19941/0) Call[19051] access __x0__ = (GeneratorMethod "HasDirectSuper")
  [19052] (19947/1) Normal[19052] throw SyntaxError
  [19053] (19949/2) Normal[19053] let __x2__ = true
  [19054] (19950/2) Call[19054] access __x3__ = (GeneratorBody "FunctionBodyContainsUseStrict")
  [19055] (19955/2) Normal[19055] __x2__ = (= __x4__ false)
  [19056] (19942/0) If[19056] (= __x0__ true)
  [19057] (19961/3) Call[19057] access __x6__ = (GeneratorBody "LexicallyDeclaredNames")
  [19058] (19962/3) Normal[19058] let __x7__ = __x5__
  [19059] (19954/2) Call[19059] access __x4__ = (UniqueFormalParameters "IsSimpleParameterList")
  [19060] (19943/0) Normal[19060] throw SyntaxError
  [19061] (19963/3) Normal[19061] let __x8__ = __x6__
  [19062] (19969/3) Normal[19062] __x10__ = 0i
  [19063] (19970/3) Loop[19063] (< __x10__ __x8__.length)
  [19064] (19971/3) If[19064] (= __x7__[__x9__] __x8__[__x10__])
  [19065] LoopCont[19065]
  [19066] (19964/3) Normal[19066] let __x9__ = 0i
  [19067] (19965/3) Normal[19067] let __x10__ = 0i
  [19068] (19967/3) Loop[19068] (< __x9__ __x7__.length)
  [19069] LoopCont[19069]
  [19070] (19966/3) Normal[19070] let __x11__ = false
  [19071] (19972/3) Normal[19071] __x11__ = true
  [19072] (19975/3) Normal[19072] throw SyntaxError
  [19073] Exit[19073]
  [19074] (19974/3) If[19074] __x11__
Algo: GeneratorMethod[0,0].HasDirectSuper [1559]
  [19075] Entry[19075]
  [19076] (19978)Normal[19076] let GeneratorMethod = this
  [19077] (19983/1) Call[19077] access __x1__ = (GeneratorBody "Contains" "SuperCall")
  [19078] (19984/1) Normal[19078] return __x1__
  [19079] (19979/0) Call[19079] access __x0__ = (UniqueFormalParameters "Contains" "SuperCall")
  [19080] Exit[19080]
  [19081] (19980/0) If[19081] (= __x0__ true)
  [19082] (19981/0) Normal[19082] return true
Algo: GeneratorMethod[0,0].MethodDefinitionEvaluation [1560]
  [19083] Entry[19083]
  [19084] (19986)Normal[19084] let GeneratorMethod = this
  [19085] (19990/2) Normal[19085] let scope = CONTEXT.LexicalEnvironment
  [19086] (19991/3) Normal[19086] let sourceText = (get-syntax GeneratorMethod)
  [19087] (19995/5) Normal[19087] __x2__
  [19088] (19996/6) Call[19088] app __x3__ = (SetFunctionName closure propKey)
  [19089] (19999/7) Normal[19089] let prototype = [! __x4__]
  [19090] (20000/8) Call[19090] app __x5__ = (DefinePropertyOrThrow closure "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [19091] (19987/0) Call[19091] access __x0__ = (PropertyName "Evaluation")
  [19092] (19992/4) Call[19092] app __x1__ = (OrdinaryFunctionCreate INTRINSICS["%GeneratorFunction.prototype%"] sourceText UniqueFormalParameters GeneratorBody ~non-lexical-this~ scope)
  [19093] (19994/5) Call[19093] app __x2__ = (MakeMethod closure object)
  [19094] (19998/7) Call[19094] app __x4__ = (OrdinaryObjectCreate INTRINSICS["%GeneratorFunction.prototype.prototype%"])
  [19095] (19988/0) Normal[19095] let propKey = __x0__
  [19096] (20002/9) Normal[19096] let desc = (new PropertyDescriptor("Value" -> closure, "Writable" -> true, "Enumerable" -> enumerable, "Configurable" -> true))
  [19097] (20003/10) Call[19097] app __x6__ = (DefinePropertyOrThrow object propKey desc)
  [19098] (19997/6) Normal[19098] __x3__
  [19099] (19993/4) Normal[19099] let closure = __x1__
  [19100] (19989/1) Normal[19100] [? propKey]
  [19101] (20004/10) Normal[19101] return [? __x6__]
  [19102] (20001/8) Normal[19102] __x5__
  [19103] Exit[19103]
Algo: GeneratorMethod[0,0].PropName [1561]
  [19104] Entry[19104]
  [19105] (20006)Normal[19105] let GeneratorMethod = this
  [19106] (20007/0) Call[19106] access __x0__ = (PropertyName "PropName")
  [19107] (20008/0) Normal[19107] return __x0__
  [19108] Exit[19108]
Algo: GeneratorMethod[0,0].PropertyDefinitionEvaluation [1562]
  [19109] Entry[19109]
  [19110] (20010)Normal[19110] let GeneratorMethod = this
  [19111] (20011/0) Call[19111] access __x0__ = (GeneratorMethod "MethodDefinitionEvaluation" object enumerable)
  [19112] (20012/0) Normal[19112] return [? __x0__]
  [19113] Exit[19113]
Algo: GeneratorResume [1564]
  [19120] Entry[19120]
  [19121] (20014/0) Call[19121] app __x0__ = (GeneratorValidate generator generatorBrand)
  [19122] (20019/1) Normal[19122] return __x1__
  [19123] (20021/2) Normal[19123] assert (|| (= state ~suspendedStart~) (= state ~suspendedYield~))
  [19124] (20025/6) Normal[19124] generator.GeneratorState = ~executing~
  [19125] (20026/7) Normal[19125] append genContext -> EXECUTION_STACK
  [19126] (20029/8) Arrow[19126] withcont __x3__ (result) = {
  if (= genContext.ReturnCont absent) genContext.ReturnCont = (new []) else {}
  append __x3__ -> genContext.ReturnCont
  app _ = (genContext.ResumeCont __x2__)
} [fid: 1563]
  [19127] (20036/10) Normal[19127] return result
  [19128] (20015/0) Normal[19128] let state = [? __x0__]
  [19129] (20022/3) Normal[19129] let genContext = generator.GeneratorContext
  [19130] (20024/5) Normal[19130] CONTEXT = null
  [19131] (20028/8) Call[19131] app __x2__ = (NormalCompletion value)
  [19132] (20016/1) If[19132] (= state ~completed~)
  [19133] (20027/7) Normal[19133] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [19134] (20023/4) Normal[19134] let methodContext = CONTEXT
  [19135] (20018/1) Call[19135] app __x1__ = (CreateIterResultObject undefined true)
  [19136] Exit[19136]
Algo: GeneratorResume:8 [1563]
  [19114] Entry[19114]
  [19115] (20031/8) If[19115] (= genContext.ReturnCont absent)
  [19116] (20032/8) Normal[19116] genContext.ReturnCont = (new [])
  [19117] (20034/8) Normal[19117] append __x3__ -> genContext.ReturnCont
  [19118] (20035/8) Call[19118] app _ = (genContext.ResumeCont __x2__)
  [19119] Exit[19119]
Algo: GeneratorResumeAbrupt [1566]
  [19143] Entry[19143]
  [19144] (20038/0) Call[19144] app __x0__ = (GeneratorValidate generator generatorBrand)
  [19145] (20043/4) Normal[19145] state = ~completed~
  [19146] (20045/5) If[19146] (= state ~completed~)
  [19147] (20052/8) Normal[19147] return abruptCompletion
  [19148] (20054/9) Normal[19148] assert (= state ~suspendedYield~)
  [19149] (20057/12) Normal[19149] CONTEXT = null
  [19150] (20058/13) Normal[19150] generator.GeneratorState = ~executing~
  [19151] (20039/0) Normal[19151] let state = [? __x0__]
  [19152] (20047/6) If[19152] (= abruptCompletion.Type ~return~)
  [19153] (20050/7) Normal[19153] return __x1__
  [19154] (20056/11) Normal[19154] let methodContext = CONTEXT
  [19155] (20040/1) If[19155] (= state ~suspendedStart~)
  [19156] (20060/14) Normal[19156] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [19157] (20061/15) Arrow[19157] withcont __x2__ (result) = {
  if (= genContext.ReturnCont absent) genContext.ReturnCont = (new []) else {}
  append __x2__ -> genContext.ReturnCont
  app _ = (genContext.ResumeCont abruptCompletion)
} [fid: 1565]
  [19158] (20055/10) Normal[19158] let genContext = generator.GeneratorContext
  [19159] (20049/7) Call[19159] app __x1__ = (CreateIterResultObject abruptCompletion.Value true)
  [19160] (20042/2) Normal[19160] generator.GeneratorState = ~completed~
  [19161] (20068/17) Normal[19161] return result
  [19162] (20059/14) Normal[19162] append genContext -> EXECUTION_STACK
  [19163] Exit[19163]
Algo: GeneratorResumeAbrupt:15 [1565]
  [19137] Entry[19137]
  [19138] (20063/15) If[19138] (= genContext.ReturnCont absent)
  [19139] (20064/15) Normal[19139] genContext.ReturnCont = (new [])
  [19140] (20066/15) Normal[19140] append __x2__ -> genContext.ReturnCont
  [19141] (20067/15) Call[19141] app _ = (genContext.ResumeCont abruptCompletion)
  [19142] Exit[19142]
Algo: GeneratorStart [1568]
  [19184] Entry[19184]
  [19185] (20070/0) Normal[19185] assert (= generator.GeneratorState undefined)
  [19186] (20097/3) Normal[19186] genContext.ResumeCont = __x0__
  [19187] (20098/19) Normal[19187] generator.GeneratorContext = genContext
  [19188] (20071/1) Normal[19188] let genContext = CONTEXT
  [19189] (20099/20) Normal[19189] generator.GeneratorState = ~suspendedStart~
  [19190] (20072/2) Normal[19190] genContext.Generator = generator
  [19191] (20100/21) Normal[19191] return undefined
  [19192] (20073/3) Arrow[19192] cont __x0__ = () [=>] {
  if (= (typeof generatorBody) "AST") {
    access __x1__ = (generatorBody "Evaluation")
    let result = __x1__
  } else {
    app __x2__ = (generatorBody)
    let result = __x2__
  }
  RET_CONT = (pop genContext.ReturnCont 0i)
  if (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] genContext) (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) else {}
  CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  generator.GeneratorState = ~completed~
  if (= result.Type ~normal~) let resultValue = undefined else if (= result.Type ~return~) let resultValue = result.Value else {
    assert (= result.Type ~throw~)
    app _ = (RET_CONT result)
  }
  app __x3__ = (CreateIterResultObject resultValue true)
  app _ = (RET_CONT __x3__)
} [fid: 1567]
  [19193] Exit[19193]
Algo: GeneratorStart:3 [1567]
  [19164] Entry[19164]
  [19165] (20075/4) If[19165] (= (typeof generatorBody) "AST")
  [19166] (20081/8) Normal[19166] let result = __x2__
  [19167] (20082/9) Normal[19167] RET_CONT = (pop genContext.ReturnCont 0i)
  [19168] (20087/11) Normal[19168] generator.GeneratorState = ~completed~
  [19169] (20088/13) If[19169] (= result.Type ~normal~)
  [19170] (20091/14) Normal[19170] let resultValue = result.Value
  [19171] (20095/18) Call[19171] app __x3__ = (CreateIterResultObject resultValue true)
  [19172] (20077/5) Call[19172] access __x1__ = (generatorBody "Evaluation")
  [19173] (20080/8) Call[19173] app __x2__ = (generatorBody)
  [19174] (20083/10) If[19174] (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] genContext)
  [19175] (20086/10) Normal[19175] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [19176] (20090/13) If[19176] (= result.Type ~return~)
  [19177] (20093/16) Normal[19177] assert (= result.Type ~throw~)
  [19178] (20078/5) Normal[19178] let result = __x1__
  [19179] (20096/18) Call[19179] app _ = (RET_CONT __x3__)
  [19180] (20089/13) Normal[19180] let resultValue = undefined
  [19181] (20084/10) Normal[19181] (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i))
  [19182] Exit[19182]
  [19183] (20094/17) Call[19183] app _ = (RET_CONT result)
Algo: GeneratorValidate [1569]
  [19194] Entry[19194]
  [19195] (20102/0) Call[19195] app __x0__ = (RequireInternalSlot generator "GeneratorState")
  [19196] (20106/2) If[19196] (! (= generator.GeneratorBrand generatorBrand))
  [19197] (20107/2) Normal[19197] throw TypeError
  [19198] (20109/4) Normal[19198] let state = generator.GeneratorState
  [19199] (20113/6) Normal[19199] return state
  [19200] Exit[19200]
  [19201] (20103/0) Normal[19201] [? __x0__]
  [19202] (20111/5) Normal[19202] throw TypeError
  [19203] (20104/1) Call[19203] app __x1__ = (RequireInternalSlot generator "GeneratorBrand")
  [19204] (20110/5) If[19204] (= state ~executing~)
  [19205] (20105/1) Normal[19205] [? __x1__]
Algo: GeneratorYield [1571]
  [19209] Entry[19209]
  [19210] (20115/1) Normal[19210] let genContext = CONTEXT
  [19211] (20119/5) Normal[19211] generator.GeneratorState = ~suspendedYield~
  [19212] (20120/6) If[19212] (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] genContext)
  [19213] (20126/7) Normal[19213] genContext.ResumeCont = __x1__
  [19214] (20127/11) Call[19214] app _ = ((pop genContext.ReturnCont 0i) iterNextObj)
  [19215] (20116/3) Normal[19215] let generator = genContext.Generator
  [19216] (20121/6) Normal[19216] (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i))
  [19217] (20123/6) Normal[19217] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [19218] (20124/7) Arrow[19218] cont __x1__ = (resumptionValue) [=>] return resumptionValue [fid: 1570]
  [19219] (20117/4) Call[19219] app __x0__ = (GetGeneratorKind)
  [19220] (20118/4) Normal[19220] assert (= __x0__ ~sync~)
  [19221] Exit[19221]
Algo: GeneratorYield:7 [1570]
  [19206] Entry[19206]
  [19207] (20125/8) Normal[19207] return resumptionValue
  [19208] Exit[19208]
Algo: Get [1572]
  [19222] Entry[19222]
  [19223] (20129/0) Normal[19223] assert (= (typeof O) Object)
  [19224] (20133/2) Normal[19224] return [? __x1__]
  [19225] Exit[19225]
  [19226] (20130/1) Call[19226] app __x0__ = (IsPropertyKey P)
  [19227] (20131/1) Normal[19227] assert (= __x0__ true)
  [19228] (20132/2) Call[19228] app __x1__ = (O.Get O P O)
Algo: GetActiveScriptOrModule [1573]
  [19229] Entry[19229]
  [19230] (20135/0) If[19230] (= EXECUTION_STACK.length 0i)
  [19231] (20140/1) Loop[19231] (&& (= ec null) (< 0i idx))
  [19232] (20142/1) Normal[19232] idx = (- idx 1i)
  [19233] (20147/2) If[19233] (= ec null)
  [19234] LoopCont[19234]
  [19235] (20136/0) Normal[19235] return null
  [19236] (20138/1) Normal[19236] let ec = null
  [19237] (20143/1) Normal[19237] ec = EXECUTION_STACK[idx]
  [19238] (20145/1) Normal[19238] ec = null
  [19239] (20149/2) Normal[19239] return ec.ScriptOrModule
  [19240] Exit[19240]
  [19241] (20148/2) Normal[19241] return null
  [19242] (20144/1) If[19242] (= ec.ScriptOrModule absent)
  [19243] (20139/1) Normal[19243] let idx = EXECUTION_STACK.length
Algo: GetExportedNames [1574]
  [19244] Entry[19244]
  [19245] (20151/0) If[19245] (= exportStarSet absent)
  [19246] (20157/5) Normal[19246] append module -> exportStarSet
  [19247] (20158/6) Normal[19247] let exportedNames = (new [])
  [19248] (20163/7) Normal[19248] let e = __x0__[__x1__]
  [19249] (20164/7) Normal[19249] __x1__ = (+ __x1__ 1i)
  [19250] (20166/10) Normal[19250] let __x2__ = module.IndirectExportEntries
  [19251] (20167/10) Normal[19251] let __x3__ = 0i
  [19252] (20152/0) Normal[19252] exportStarSet = (new [])
  [19253] (20154/2) If[19253] (contains exportStarSet module)
  [19254] (20159/7) Normal[19254] let __x0__ = module.LocalExportEntries
  [19255] (20161/7) Loop[19255] (< __x1__ __x0__.length)
  [19256] (20165/9) Normal[19256] append e.ExportName -> exportedNames
  [19257] LoopCont[19257]
  [19258] (20171/10) Normal[19258] __x3__ = (+ __x3__ 1i)
  [19259] (20172/12) Normal[19259] append e.ExportName -> exportedNames
  [19260] (20160/7) Normal[19260] let __x1__ = 0i
  [19261] (20155/4) Normal[19261] return (new [])
  [19262] (20168/10) Loop[19262] (< __x3__ __x2__.length)
  [19263] (20177/13) Normal[19263] let e = __x4__[__x5__]
  [19264] (20178/13) Normal[19264] __x5__ = (+ __x5__ 1i)
  [19265] (20191/18) If[19265] (! (contains exportedNames n))
  [19266] (20192/19) Normal[19266] append n -> exportedNames
  [19267] LoopCont[19267]
  [19268] (20179/14) Call[19268] app __x6__ = (HostResolveImportedModule module e.ModuleRequest)
  [19269] LoopCont[19269]
  [19270] (20182/15) Normal[19270] let starNames = [? __x7__]
  [19271] (20183/16) Normal[19271] let __x8__ = starNames
  [19272] (20173/13) Normal[19272] let __x4__ = module.StarExportEntries
  [19273] (20174/13) Normal[19273] let __x5__ = 0i
  [19274] (20187/16) Normal[19274] let n = __x8__[__x9__]
  [19275] (20188/16) Normal[19275] __x9__ = (+ __x9__ 1i)
  [19276] (20181/15) Call[19276] app __x7__ = (requestedModule.GetExportedNames requestedModule exportStarSet)
  [19277] (20195/20) Normal[19277] return exportedNames
  [19278] Exit[19278]
  [19279] (20170/10) Normal[19279] let e = __x2__[__x3__]
  [19280] (20185/16) Loop[19280] (< __x9__ __x8__.length)
  [19281] LoopCont[19281]
  [19282] (20189/17) Call[19282] app __x10__ = (SameValue n "default")
  [19283] (20175/13) Loop[19283] (< __x5__ __x4__.length)
  [19284] (20180/14) Normal[19284] let requestedModule = [? __x6__]
  [19285] (20190/17) If[19285] (= __x10__ false)
  [19286] (20184/16) Normal[19286] let __x9__ = 0i
Algo: GetFunctionRealm [1575]
  [19287] Entry[19287]
  [19288] (20197/0) Call[19288] app __x0__ = (IsCallable obj)
  [19289] (20202/3) If[19289] (is-instance-of obj BoundFunctionExoticObject)
  [19290] (20204/4) Normal[19290] let target = obj.BoundTargetFunction
  [19291] (20208/6) If[19291] (is-instance-of obj ProxyExoticObject)
  [19292] (20210/7) If[19292] (= obj.ProxyHandler null)
  [19293] (20211/7) Normal[19293] throw TypeError
  [19294] (20213/8) Normal[19294] let proxyTarget = obj.ProxyTarget
  [19295] (20215/9) Normal[19295] return [? __x2__]
  [19296] (20217/10) Normal[19296] return REALM
  [19297] (20198/0) Normal[19297] assert (= [! __x0__] true)
  [19298] (20205/5) Call[19298] app __x1__ = (GetFunctionRealm target)
  [19299] (20214/9) Call[19299] app __x2__ = (GetFunctionRealm proxyTarget)
  [19300] (20199/1) If[19300] (! (= obj.Realm absent))
  [19301] (20206/5) Normal[19301] return [? __x1__]
  [19302] (20200/2) Normal[19302] return obj.Realm
  [19303] Exit[19303]
Algo: GetGeneratorKind [1576]
  [19304] Entry[19304]
  [19305] (20219/0) Normal[19305] let genContext = CONTEXT
  [19306] (20224/3) If[19306] (! (= generator.AsyncGeneratorState absent))
  [19307] (20225/3) Normal[19307] return ~async~
  [19308] (20226/3) Normal[19308] return ~sync~
  [19309] (20220/1) If[19309] (= genContext.Generator absent)
  [19310] Exit[19310]
  [19311] (20221/1) Normal[19311] return ~non-generator~
  [19312] (20223/2) Normal[19312] let generator = genContext.Generator
Algo: GetGlobalObject [1577]
  [19313] Entry[19313]
  [19314] (20228/0) Normal[19314] let currentRealm = REALM
  [19315] (20229/1) Normal[19315] return currentRealm.GlobalObject
  [19316] Exit[19316]
Algo: GetIdentifierReference [1578]
  [19317] Entry[19317]
  [19318] (20231/0) If[19318] (= env null)
  [19319] (20236/3) If[19319] (= exists true)
  [19320] (20237/4) Normal[19320] return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~))
  [19321] (20239/6) Normal[19321] let outer = env.OuterEnv
  [19322] (20232/1) Normal[19322] return (new ReferenceRecord("Base" -> ~unresolvable~, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~))
  [19323] (20234/2) Call[19323] app __x0__ = (env.HasBinding env name)
  [19324] Exit[19324]
  [19325] (20241/7) Normal[19325] return [? __x1__]
  [19326] (20240/7) Call[19326] app __x1__ = (GetIdentifierReference outer name strict)
  [19327] (20235/2) Normal[19327] let exists = [? __x0__]
Algo: GetIterator [1579]
  [19328] Entry[19328]
  [19329] (20243/0) If[19329] (= hint absent)
  [19330] (20248/3) If[19330] (= hint ~async~)
  [19331] (20250/4) Call[19331] app __x0__ = (GetMethod obj SYMBOL_asyncIterator)
  [19332] (20262/6) Call[19332] app __x4__ = (GetMethod obj SYMBOL_iterator)
  [19333] (20255/6) Normal[19333] let syncMethod = [? __x1__]
  [19334] (20256/7) Call[19334] app __x2__ = (GetIterator obj ~sync~ syncMethod)
  [19335] (20273/14) Normal[19335] return iteratorRecord
  [19336] Exit[19336]
  [19337] (20259/8) Normal[19337] return [! __x3__]
  [19338] (20265/10) Call[19338] app __x5__ = (Call method obj)
  [19339] (20268/11) Normal[19339] throw TypeError
  [19340] (20270/12) Call[19340] app __x6__ = (GetV iterator "next")
  [19341] (20244/0) Normal[19341] hint = ~sync~
  [19342] (20246/1) Normal[19342] assert (|| (= hint ~sync~) (= hint ~async~))
  [19343] (20251/4) Normal[19343] method = [? __x0__]
  [19344] (20271/12) Normal[19344] let nextMethod = [? __x6__]
  [19345] (20254/6) Call[19345] app __x1__ = (GetMethod obj SYMBOL_iterator)
  [19346] (20258/8) Call[19346] app __x3__ = (CreateAsyncFromSyncIterator syncIteratorRecord)
  [19347] (20266/10) Normal[19347] let iterator = [? __x5__]
  [19348] (20272/13) Normal[19348] let iteratorRecord = (new Record("Iterator" -> iterator, "NextMethod" -> nextMethod, "Done" -> false))
  [19349] (20257/7) Normal[19349] let syncIteratorRecord = [? __x2__]
  [19350] (20252/5) If[19350] (= method undefined)
  [19351] (20247/2) If[19351] (= method absent)
  [19352] (20267/11) If[19352] (! (= (typeof iterator) Object))
  [19353] (20263/6) Normal[19353] method = [? __x4__]
Algo: GetMethod [1580]
  [19354] Entry[19354]
  [19355] (20275/0) Call[19355] app __x0__ = (IsPropertyKey P)
  [19356] (20279/2) If[19356] (|| (= func undefined) (= func null))
  [19357] (20280/2) Normal[19357] return undefined
  [19358] (20282/3) Call[19358] app __x2__ = (IsCallable func)
  [19359] (20286/4) Normal[19359] return func
  [19360] Exit[19360]
  [19361] (20276/0) Normal[19361] assert (= __x0__ true)
  [19362] (20284/3) Normal[19362] throw TypeError
  [19363] (20277/1) Call[19363] app __x1__ = (GetV V P)
  [19364] (20283/3) If[19364] (= __x2__ false)
  [19365] (20278/1) Normal[19365] let func = [? __x1__]
Algo: GetModifySetValueInBuffer [1581]
  [19366] Entry[19366]
  [19367] (20288/0) Call[19367] app __x0__ = (IsDetachedBuffer arrayBuffer)
  [19368] (20292/5) If[19368] (= isLittleEndian absent)
  [19369] (20293/5) Normal[19369] isLittleEndian = AGENT.LittleEndian
  [19370] (20295/6) Call[19370] app __x1__ = (NumericToRawBytes type value isLittleEndian)
  [19371] (20298/7) If[19371] (= __x2__ true)
  [19372] (20300/8) Normal[19372] let execution = AGENT.CandidateExecution
  [19373] (20307/16) Normal[19373] ??? "Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are the sequence of id:{elementSize} bytes starting with id:{block} [ id:{byteIndex} ] ."
  [19374] (20303/12) Normal[19374] let rmwEvent = (new ReadModifyWriteSharedMemory("Order" -> ~SeqCst~, "NoTear" -> true, "Block" -> block, "ByteIndex" -> byteIndex, "ElementSize" -> elementSize, "Payload" -> rawBytes, "ModifyOp" -> op))
  [19375] (20304/13) Normal[19375] append rmwEvent -> eventList
  [19376] (20310/18) Normal[19376] ??? "Store the individual bytes of id:{rawBytesModified} into id:{block} , starting at id:{block} [ id:{byteIndex} ] ."
  [19377] (20311/19) Call[19377] app __x4__ = (RawBytesToNumeric type rawBytesRead isLittleEndian)
  [19378] (20289/0) Normal[19378] assert (= __x0__ false)
  [19379] (20312/19) Normal[19379] return __x4__
  [19380] (20297/7) Call[19380] app __x2__ = (IsSharedArrayBuffer arrayBuffer)
  [19381] (20302/10) Normal[19381] ??? "Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are nondeterministically chosen byte values ."
  [19382] (20290/3) Normal[19382] let block = arrayBuffer.ArrayBufferData
  [19383] (20308/17) Call[19383] app __x3__ = (op rawBytesRead rawBytes)
  [19384] Exit[19384]
  [19385] (20301/9) Normal[19385] ??? "Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) ."
  [19386] (20296/6) Normal[19386] let rawBytes = __x1__
  [19387] (20291/4) Normal[19387] ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for Element Type id:{type} ."
  [19388] (20309/17) Normal[19388] let rawBytesModified = __x3__
  [19389] (20305/14) Normal[19389] append (new ChosenValueRecord("Event" -> rmwEvent, "ChosenValue" -> rawBytesRead)) -> execution.ChosenValues
Algo: GetModuleNamespace [1582]
  [19390] Entry[19390]
  [19391] (20314/2) Normal[19391] let namespace = module.Namespace
  [19392] (20319/5) Normal[19392] let unambiguousNames = (new [])
  [19393] (20320/6) Normal[19393] let __x1__ = exportedNames
  [19394] (20325/6) Normal[19394] __x2__ = (+ __x2__ 1i)
  [19395] (20326/7) Call[19395] app __x3__ = (module.ResolveExport module name)
  [19396] (20329/8) Normal[19396] append name -> unambiguousNames
  [19397] LoopCont[19397]
  [19398] (20315/3) If[19398] (= namespace undefined)
  [19399] (20321/6) Normal[19399] let __x2__ = 0i
  [19400] (20324/6) Normal[19400] let name = __x1__[__x2__]
  [19401] (20328/8) If[19401] (is-instance-of resolution ResolvedBindingRecord)
  [19402] (20317/4) Call[19402] app __x0__ = (module.GetExportedNames module)
  [19403] (20334/10) Normal[19403] return namespace
  [19404] (20332/9) Normal[19404] namespace = __x4__
  [19405] (20327/7) Normal[19405] let resolution = [? __x3__]
  [19406] (20322/6) Loop[19406] (< __x2__ __x1__.length)
  [19407] (20318/4) Normal[19407] let exportedNames = [? __x0__]
  [19408] Exit[19408]
  [19409] (20331/9) Call[19409] app __x4__ = (ModuleNamespaceCreate module unambiguousNames)
Algo: GetNewTarget [1583]
  [19410] Entry[19410]
  [19411] (20336/0) Call[19411] app __x0__ = (GetThisEnvironment)
  [19412] (20337/0) Normal[19412] let envRec = __x0__
  [19413] (20338/1) Normal[19413] assert (! (= envRec.NewTarget absent))
  [19414] (20339/2) Normal[19414] return envRec.NewTarget
  [19415] Exit[19415]
Algo: GetOwnPropertyKeys [1584]
  [19416] Entry[19416]
  [19417] (20341/0) Call[19417] app __x0__ = (ToObject O)
  [19418] (20345/2) Normal[19418] let nameList = (new [])
  [19419] (20346/3) Normal[19419] let __x2__ = keys
  [19420] (20351/3) Normal[19420] __x3__ = (+ __x3__ 1i)
  [19421] (20352/4) If[19421] (|| (&& (= (typeof nextKey) Symbol) (= type ~symbol~)) (&& (= (typeof nextKey) String) (= type ~string~)))
  [19422] (20355/6) Call[19422] app __x4__ = (CreateArrayFromList nameList)
  [19423] (20356/6) Normal[19423] return __x4__
  [19424] (20342/0) Normal[19424] let obj = [? __x0__]
  [19425] (20347/3) Normal[19425] let __x3__ = 0i
  [19426] (20350/3) Normal[19426] let nextKey = __x2__[__x3__]
  [19427] LoopCont[19427]
  [19428] (20348/3) Loop[19428] (< __x3__ __x2__.length)
  [19429] (20343/1) Call[19429] app __x1__ = (obj.OwnPropertyKeys obj)
  [19430] (20353/4) Normal[19430] append nextKey -> nameList
  [19431] (20344/1) Normal[19431] let keys = [? __x1__]
  [19432] Exit[19432]
Algo: GetPromiseResolve [1585]
  [19433] Entry[19433]
  [19434] (20358/0) Call[19434] app __x0__ = (IsConstructor promiseConstructor)
  [19435] (20362/2) Call[19435] app __x2__ = (IsCallable promiseResolve)
  [19436] (20363/2) If[19436] (= __x2__ false)
  [19437] (20359/0) Normal[19437] assert (= __x0__ true)
  [19438] (20364/2) Normal[19438] throw TypeError
  [19439] (20366/3) Normal[19439] return promiseResolve
  [19440] (20360/1) Call[19440] app __x1__ = (Get promiseConstructor "resolve")
  [19441] (20361/1) Normal[19441] let promiseResolve = [? __x1__]
  [19442] Exit[19442]
Algo: GetPrototypeFromConstructor [1586]
  [19443] Entry[19443]
  [19444] (20368/1) Call[19444] app __x0__ = (IsCallable constructor)
  [19445] (20372/3) If[19445] (! (= (typeof proto) Object))
  [19446] (20374/4) Call[19446] app __x2__ = (GetFunctionRealm constructor)
  [19447] (20378/6) Normal[19447] return proto
  [19448] (20369/1) Normal[19448] assert (= __x0__ true)
  [19449] (20375/4) Normal[19449] let realm = [? __x2__]
  [19450] Exit[19450]
  [19451] (20370/2) Call[19451] app __x1__ = (Get constructor "prototype")
  [19452] (20376/5) Normal[19452] proto = INTRINSICS[intrinsicDefaultProto]
  [19453] (20371/2) Normal[19453] let proto = [? __x1__]
Algo: GetSubstitution [1587]
  [19454] Entry[19454]
  [19455] (20380/0) Normal[19455] assert (= (typeof matched) String)
  [19456] (20384/4) Normal[19456] assert (! (< stringLength position))
  [19457] (20385/6) Normal[19457] assert (= (typeof replacement) String)
  [19458] (20389/10) Normal[19458] return result
  [19459] Exit[19459]
  [19460] (20381/1) Normal[19460] let matchLength = matched.length
  [19461] (20386/7) Normal[19461] let tailPos = (+ position matchLength)
  [19462] (20388/9) Normal[19462] ??? "Let id:{result} be the String value derived from id:{replacement} by copying code unit elements from id:{replacement} to id:{result} while performing replacements as specified in link:{table-replacement-text-symbol-substitutions} . These code:{$} replacements are done left - to - right , and , once such a replacement is performed , the new replacement text is not subject to further replacements ."
  [19463] (20382/2) Normal[19463] assert (= (typeof str) String)
  [19464] (20387/8) Normal[19464] let m = captures.length
  [19465] (20383/3) Normal[19465] let stringLength = str.length
Algo: GetSuperConstructor [1588]
  [19466] Entry[19466]
  [19467] (20391/0) Call[19467] app __x0__ = (GetThisEnvironment)
  [19468] (20395/3) Normal[19468] assert (is-instance-of activeFunction ECMAScriptFunctionObject)
  [19469] (20396/4) Call[19469] app __x1__ = (activeFunction.GetPrototypeOf activeFunction)
  [19470] (20392/0) Normal[19470] let envRec = __x0__
  [19471] (20397/4) Normal[19471] let superConstructor = [! __x1__]
  [19472] (20393/1) Normal[19472] assert (is-instance-of envRec FunctionEnvironmentRecord)
  [19473] (20398/5) Normal[19473] return superConstructor
  [19474] (20394/2) Normal[19474] let activeFunction = envRec.FunctionObject
  [19475] Exit[19475]
Algo: GetTemplateObject [1589]
  [19476] Entry[19476]
  [19477] (20400/0) Normal[19477] let realm = REALM
  [19478] (20404/2) Loop[19478] (< __x1__ __x0__.length)
  [19479] (20406/2) Normal[19479] let e = __x0__[__x1__]
  [19480] (20409/5) Call[19480] access __x2__ = (templateLiteral "TemplateStrings" true)
  [19481] (20410/5) Normal[19481] let rawStrings = __x2__
  [19482] (20413/7) Normal[19482] let count = cookedStrings.length
  [19483] (20414/8) Normal[19483] assert (! (< (- (** 2i 32i) 1i) count))
  [19484] (20401/1) Normal[19484] let templateRegistry = realm.TemplateMap
  [19485] (20407/2) Normal[19485] __x1__ = (+ __x1__ 1i)
  [19486] LoopCont[19486]
  [19487] (20412/6) Normal[19487] let cookedStrings = __x3__
  [19488] (20402/2) Normal[19488] let __x0__ = templateRegistry
  [19489] (20411/6) Call[19489] access __x3__ = (templateLiteral "TemplateStrings" false)
  [19490] (20417/10) Call[19490] app __x5__ = (ArrayCreate count)
  [19491] (20418/10) Normal[19491] let rawObj = [! __x5__]
  [19492] (20408/3) Normal[19492] ??? "If id:{e} . [ [ Site ] ] is the same Parse Node as id:{templateLiteral} , then in:{} out:{}"
  [19493] (20403/2) Normal[19493] let __x1__ = 0i
  [19494] (20415/9) Call[19494] app __x4__ = (ArrayCreate count)
  [19495] (20424/14) Normal[19495] let cookedValue = cookedStrings[index]
  [19496] (20425/15) Call[19496] app __x7__ = (DefinePropertyOrThrow template prop (new PropertyDescriptor("Value" -> cookedValue, "Writable" -> false, "Enumerable" -> true, "Configurable" -> false)))
  [19497] (20436/21) Normal[19497] [! __x11__]
  [19498] (20437/22) Normal[19498] append (new Record("Site" -> templateLiteral, "Array" -> template)) -> templateRegistry
  [19499] (20426/15) Normal[19499] [! __x7__]
  [19500] (20419/11) Normal[19500] let index = 0i
  [19501] (20420/12) Loop[19501] (< index count)
  [19502] (20429/17) Normal[19502] [! __x8__]
  [19503] (20430/18) Normal[19503] index = (+ index 1i)
  [19504] (20422/13) Call[19504] app __x6__ = (ToString index)
  [19505] (20431/19) Call[19505] app __x9__ = (SetIntegrityLevel rawObj ~frozen~)
  [19506] (20432/19) Normal[19506] [! __x9__]
  [19507] (20433/20) Call[19507] app __x10__ = (DefinePropertyOrThrow template "raw" (new PropertyDescriptor("Value" -> rawObj, "Writable" -> false, "Enumerable" -> false, "Configurable" -> false)))
  [19508] (20428/17) Call[19508] app __x8__ = (DefinePropertyOrThrow rawObj prop (new PropertyDescriptor("Value" -> rawValue, "Writable" -> false, "Enumerable" -> true, "Configurable" -> false)))
  [19509] (20438/23) Normal[19509] return template
  [19510] (20416/9) Normal[19510] let template = [! __x4__]
  [19511] (20434/20) Normal[19511] [! __x10__]
  [19512] (20423/13) Normal[19512] let prop = [! __x6__]
  [19513] (20427/16) Normal[19513] let rawValue = rawStrings[index]
  [19514] Exit[19514]
  [19515] (20435/21) Call[19515] app __x11__ = (SetIntegrityLevel template ~frozen~)
  [19516] LoopCont[19516]
Algo: GetThisEnvironment [1590]
  [19517] Entry[19517]
  [19518] (20440/0) Normal[19518] let env = CONTEXT.LexicalEnvironment
  [19519] (20445/3) If[19519] (= exists true)
  [19520] (20446/3) Normal[19520] return env
  [19521] (20448/4) Normal[19521] let outer = env.OuterEnv
  [19522] LoopCont[19522]
  [19523] (20441/1) Loop[19523] true
  [19524] (20450/6) Normal[19524] env = outer
  [19525] (20443/2) Call[19525] app __x0__ = (env.HasThisBinding env)
  [19526] Exit[19526]
  [19527] (20449/5) Normal[19527] assert (! (= outer null))
  [19528] (20444/2) Normal[19528] let exists = __x0__
Algo: GetThisValue [1591]
  [19529] Entry[19529]
  [19530] (20452/0) Call[19530] app __x0__ = (IsPropertyReference V)
  [19531] (20456/1) Normal[19531] return V.ThisValue
  [19532] Exit[19532]
  [19533] (20453/0) Normal[19533] assert (= __x0__ true)
  [19534] (20457/1) Normal[19534] return V.Base
  [19535] (20454/1) Call[19535] app __x1__ = (IsSuperReference V)
  [19536] (20455/1) If[19536] (= __x1__ true)
Algo: GetV [1592]
  [19537] Entry[19537]
  [19538] (20459/0) Call[19538] app __x0__ = (IsPropertyKey P)
  [19539] (20463/2) Call[19539] app __x2__ = (O.Get O P V)
  [19540] (20464/2) Normal[19540] return [? __x2__]
  [19541] (20460/0) Normal[19541] assert (= __x0__ true)
  [19542] Exit[19542]
  [19543] (20461/1) Call[19543] app __x1__ = (ToObject V)
  [19544] (20462/1) Normal[19544] let O = [? __x1__]
Algo: GetValue [1593]
  [19545] Entry[19545]
  [19546] (20466/0) Normal[19546] [? V]
  [19547] (20471/2) If[19547] (= __x0__ true)
  [19548] (20472/2) Normal[19548] throw ReferenceError
  [19549] (20474/3) Call[19549] app __x1__ = (IsPropertyReference V)
  [19550] (20478/4) Normal[19550] let baseObj = [! __x2__]
  [19551] (20479/5) Call[19551] app __x3__ = (GetThisValue V)
  [19552] (20483/7) Normal[19552] let base = V.Base
  [19553] (20484/8) Normal[19553] assert (is-instance-of base EnvironmentRecord)
  [19554] (20467/1) If[19554] (! (is-instance-of V ReferenceRecord))
  [19555] (20477/4) Call[19555] app __x2__ = (ToObject V.Base)
  [19556] (20481/5) Normal[19556] return [? __x4__]
  [19557] Exit[19557]
  [19558] (20468/1) Normal[19558] return V
  [19559] (20470/2) Call[19559] app __x0__ = (IsUnresolvableReference V)
  [19560] (20486/9) Normal[19560] return [? __x5__]
  [19561] (20480/5) Call[19561] app __x4__ = (baseObj.Get baseObj V.ReferencedName __x3__)
  [19562] (20475/3) If[19562] (= __x1__ true)
  [19563] (20485/9) Call[19563] app __x5__ = (base.GetBindingValue base V.ReferencedName V.Strict)
Algo: GetValueFromBuffer [1594]
  [19564] Entry[19564]
  [19565] (20488/0) Call[19565] app __x0__ = (IsDetachedBuffer arrayBuffer)
  [19566] (20492/4) Normal[19566] ??? "If IsSharedArrayBuffer ( id:{arrayBuffer} ) is value:{true} , then in:{} out:{}"
  [19567] (20493/13) Normal[19567] ??? "Else , let id:{rawValue} be a List whose elements are bytes from id:{block} at indices id:{byteIndex} ( inclusive ) through id:{byteIndex} + id:{elementSize} ( exclusive ) ."
  [19568] (20498/16) Call[19568] app __x1__ = (RawBytesToNumeric type rawValue isLittleEndian)
  [19569] (20499/16) Normal[19569] return __x1__
  [19570] (20489/0) Normal[19570] assert (= __x0__ false)
  [19571] (20494/14) Normal[19571] assert (= rawValue.length elementSize)
  [19572] (20496/15) Normal[19572] isLittleEndian = AGENT.LittleEndian
  [19573] (20490/2) Normal[19573] let block = arrayBuffer.ArrayBufferData
  [19574] (20495/15) If[19574] (= isLittleEndian absent)
  [19575] (20491/3) Normal[19575] ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for Element Type id:{type} ."
  [19576] Exit[19576]
Algo: GetViewValue [1595]
  [19577] Entry[19577]
  [19578] (20501/0) Call[19578] app __x0__ = (RequireInternalSlot view "DataView")
  [19579] (20505/2) Normal[19579] let getIndex = [? __x1__]
  [19580] (20506/3) Call[19580] app __x2__ = (ToBoolean isLittleEndian)
  [19581] (20510/5) If[19581] (= __x3__ true)
  [19582] (20511/5) Normal[19582] throw TypeError
  [19583] (20513/6) Normal[19583] let viewOffset = view.ByteOffset
  [19584] (20515/8) Normal[19584] ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for Element Type id:{type} ."
  [19585] (20516/9) If[19585] (< viewSize (+ getIndex elementSize))
  [19586] (20502/0) Normal[19586] [? __x0__]
  [19587] (20507/3) Normal[19587] isLittleEndian = [! __x2__]
  [19588] (20509/5) Call[19588] app __x3__ = (IsDetachedBuffer buffer)
  [19589] (20514/7) Normal[19589] let viewSize = view.ByteLength
  [19590] (20503/1) Normal[19590] assert (! (= view.ViewedArrayBuffer absent))
  [19591] (20519/10) Normal[19591] let bufferIndex = (+ getIndex viewOffset)
  [19592] (20520/11) Call[19592] app __x4__ = (GetValueFromBuffer buffer bufferIndex type false ~Unordered~ isLittleEndian)
  [19593] (20508/4) Normal[19593] let buffer = view.ViewedArrayBuffer
  [19594] (20504/2) Call[19594] app __x1__ = (ToIndex requestIndex)
  [19595] (20521/11) Normal[19595] return __x4__
  [19596] (20517/9) Normal[19596] throw RangeError
  [19597] Exit[19597]
Algo: GetWaiterList [1596]
  [19598] Entry[19598]
  [19599] (20523/0) Normal[19599] assert (is-instance-of block SharedDataBlock)
  [19600] (20524/3) Normal[19600] ??? "Return the WaiterList that is referenced by the pair ( id:{block} , id:{i} ) ."
  [19601] Exit[19601]
Algo: GlobalDeclarationInstantiation [1597]
  [19602] (20655/47) Call[19602] app __x37__ = (env.CreateGlobalVarBinding env vn false)
  [19603] (20656/47) Normal[19603] [? __x37__]
  [19604] (20607/29) Normal[19604] throw TypeError
  [19605] (20609/30) If[19605] (! (contains declaredVarNames vn))
  [19606] (20644/43) Normal[19606] let fn = __x32__[0i]
  [19607] (20645/44) Call[19607] access __x33__ = (f "InstantiateFunctionObject" env)
  [19608] Entry[19608]
  [19609] (20526/0) Normal[19609] assert (is-instance-of env GlobalEnvironmentRecord)
  [19610] (20630/38) If[19610] (= __x27__ true)
  [19611] (20632/39) Call[19611] app __x28__ = (env.CreateImmutableBinding env dn true)
  [19612] (20635/41) Call[19612] app __x29__ = (env.CreateMutableBinding env dn false)
  [19613] (20657/48) Normal[19613] return ~empty~
  [19614] Exit[19614]
  [19615] (20530/2) Normal[19615] let varNames = __x1__
  [19616] (20531/3) Normal[19616] let __x2__ = lexNames
  [19617] (20536/3) Normal[19617] __x3__ = (+ __x3__ 1i)
  [19618] (20537/4) Call[19618] app __x4__ = (env.HasVarDeclaration env name)
  [19619] (20591/24) Normal[19619] let d = __x15__[__x16__]
  [19620] (20592/24) Normal[19620] __x16__ = (+ __x16__ 1i)
  [19621] (20573/17) Call[19621] access __x13__ = (d "BoundNames")
  [19622] (20574/17) Normal[19622] let fn = __x13__[0i]
  [19623] (20552/8) Loop[19623] (< __x8__ __x7__.length)
  [19624] (20554/8) Normal[19624] let name = __x7__[__x8__]
  [19625] (20560/10) Call[19625] access __x10__ = (script "VarScopedDeclarations")
  [19626] (20566/13) Loop[19626] (< 0i __x12__)
  [19627] (20568/13) Normal[19627] __x12__ = (- __x12__ 1i)
  [19628] (20586/23) Normal[19628] let declaredVarNames = (new [])
  [19629] (20555/8) Normal[19629] __x8__ = (+ __x8__ 1i)
  [19630] (20587/24) Normal[19630] let __x15__ = varDeclarations
  [19631] (20541/5) Call[19631] app __x5__ = (env.HasLexicalDeclaration env name)
  [19632] (20542/5) If[19632] (= __x5__ true)
  [19633] (20653/46) Normal[19633] let vn = __x35__[__x36__]
  [19634] (20654/46) Normal[19634] __x36__ = (+ __x36__ 1i)
  [19635] (20548/7) Normal[19635] throw SyntaxError
  [19636] LoopCont[19636]
  [19637] (20578/19) Normal[19637] let fnDefinable = [? __x14__]
  [19638] (20579/20) If[19638] (= fnDefinable false)
  [19639] LoopCont[19639]
  [19640] (20625/37) Loop[19640] (< __x26__ __x25__.length)
  [19641] (20593/25) If[19641] (|| (|| (is-instance-of d VariableDeclaration) (is-instance-of d ForBinding)) (is-instance-of d BindingIdentifier))
  [19642] (20618/35) Loop[19642] (< __x23__ __x22__.length)
  [19643] (20620/35) Normal[19643] let d = __x22__[__x23__]
  [19644] (20637/42) Normal[19644] let __x30__ = functionsToInitialize
  [19645] (20558/9) Normal[19645] throw SyntaxError
  [19646] LoopCont[19646]
  [19647] LoopCont[19647]
  [19648] (20639/42) Loop[19648] (< __x31__ __x30__.length)
  [19649] (20627/37) Normal[19649] let dn = __x25__[__x26__]
  [19650] LoopCont[19650]
  [19651] (20597/26) Normal[19651] let __x19__ = 0i
  [19652] (20598/26) Loop[19652] (< __x19__ __x18__.length)
  [19653] (20633/39) Normal[19653] [? __x28__]
  [19654] (20527/1) Call[19654] access __x0__ = (script "LexicallyDeclaredNames")
  [19655] (20614/34) Call[19655] access __x21__ = (script "LexicallyScopedDeclarations")
  [19656] (20615/34) Normal[19656] let lexDeclarations = __x21__
  [19657] (20532/3) Normal[19657] let __x3__ = 0i
  [19658] (20596/26) Normal[19658] let __x18__ = __x17__
  [19659] (20628/37) Normal[19659] __x26__ = (+ __x26__ 1i)
  [19660] (20646/44) Normal[19660] let fo = __x33__
  [19661] (20610/31) Normal[19661] append vn -> declaredVarNames
  [19662] LoopCont[19662]
  [19663] (20533/3) Loop[19663] (< __x3__ __x2__.length)
  [19664] (20562/11) Normal[19664] let functionsToInitialize = (new [])
  [19665] (20563/12) Normal[19665] let declaredFunctionNames = (new [])
  [19666] (20557/9) If[19666] (= __x9__ true)
  [19667] (20569/13) Normal[19667] let d = __x11__[__x12__]
  [19668] (20636/41) Normal[19668] [? __x29__]
  [19669] (20602/27) If[19669] (! (contains declaredFunctionNames vn))
  [19670] (20604/28) Call[19670] app __x20__ = (env.CanDeclareGlobalVar env vn)
  [19671] (20641/42) Normal[19671] let f = __x30__[__x31__]
  [19672] (20649/46) Normal[19672] let __x35__ = declaredVarNames
  [19673] (20535/3) Normal[19673] let name = __x2__[__x3__]
  [19674] (20588/24) Normal[19674] let __x16__ = 0i
  [19675] (20651/46) Loop[19675] (< __x36__ __x35__.length)
  [19676] (20617/35) Normal[19676] let __x23__ = 0i
  [19677] (20638/42) Normal[19677] let __x31__ = 0i
  [19678] (20539/4) Normal[19678] throw SyntaxError
  [19679] (20572/15) Normal[19679] assert (|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration))
  [19680] LoopCont[19680]
  [19681] (20589/24) Loop[19681] (< __x16__ __x15__.length)
  [19682] (20648/45) Normal[19682] [? __x34__]
  [19683] (20528/1) Normal[19683] let lexNames = __x0__
  [19684] (20577/19) Call[19684] app __x14__ = (env.CanDeclareGlobalFunction env fn)
  [19685] (20601/26) Normal[19685] __x19__ = (+ __x19__ 1i)
  [19686] (20545/6) Call[19686] app __x6__ = (env.HasRestrictedGlobalProperty env name)
  [19687] (20546/6) Normal[19687] let hasRestrictedGlobal = [? __x6__]
  [19688] (20561/10) Normal[19688] let varDeclarations = __x10__
  [19689] (20564/13) Normal[19689] let __x11__ = varDeclarations
  [19690] (20550/8) Normal[19690] let __x7__ = varNames
  [19691] (20551/8) Normal[19691] let __x8__ = 0i
  [19692] (20575/18) If[19692] (! (contains declaredFunctionNames fn))
  [19693] LoopCont[19693]
  [19694] (20595/26) Call[19694] access __x17__ = (d "BoundNames")
  [19695] (20556/9) Call[19695] app __x9__ = (env.HasLexicalDeclaration env name)
  [19696] (20538/4) If[19696] (= __x4__ true)
  [19697] (20582/21) Normal[19697] append fn -> declaredFunctionNames
  [19698] (20583/22) Normal[19698] prepend d -> functionsToInitialize
  [19699] (20629/38) Call[19699] access __x27__ = (d "IsConstantDeclaration")
  [19700] LoopCont[19700]
  [19701] (20622/37) Call[19701] access __x24__ = (d "BoundNames")
  [19702] (20623/37) Normal[19702] let __x25__ = __x24__
  [19703] (20616/35) Normal[19703] let __x22__ = lexDeclarations
  [19704] (20570/14) If[19704] (! (|| (|| (is-instance-of d VariableDeclaration) (is-instance-of d ForBinding)) (is-instance-of d BindingIdentifier)))
  [19705] (20642/42) Normal[19705] __x31__ = (+ __x31__ 1i)
  [19706] (20647/45) Call[19706] app __x34__ = (env.CreateGlobalFunctionBinding env fn fo false)
  [19707] (20605/28) Normal[19707] let vnDefinable = [? __x20__]
  [19708] (20650/46) Normal[19708] let __x36__ = 0i
  [19709] (20529/2) Call[19709] access __x1__ = (script "VarDeclaredNames")
  [19710] (20621/35) Normal[19710] __x23__ = (+ __x23__ 1i)
  [19711] (20565/13) Normal[19711] let __x12__ = __x11__.length
  [19712] (20580/20) Normal[19712] throw TypeError
  [19713] (20600/26) Normal[19713] let vn = __x18__[__x19__]
  [19714] (20547/7) If[19714] (= hasRestrictedGlobal true)
  [19715] (20606/29) If[19715] (= vnDefinable false)
  [19716] (20543/5) Normal[19716] throw SyntaxError
  [19717] (20643/43) Call[19717] access __x32__ = (f "BoundNames")
  [19718] (20624/37) Normal[19718] let __x26__ = 0i
Algo: GlobalEnvironmentRecord.CanDeclareGlobalFunction [1598]
  [19719] Entry[19719]
  [19720] (20659/0) Normal[19720] let ObjRec = envRec.ObjectRecord
  [19721] (20663/3) If[19721] (= existingProp undefined)
  [19722] (20665/3) Call[19722] app __x1__ = (IsExtensible globalObject)
  [19723] (20668/4) If[19723] (= existingProp.Configurable true)
  [19724] (20671/5) Normal[19724] ??? "If IsDataDescriptor ( id:{existingProp} ) is value:{true} and id:{existingProp} has attribute values { [ [ Writable ] ] : value:{true} , [ [ Enumerable ] ] : value:{true} } , return value:{true} ."
  [19725] (20672/6) Normal[19725] return false
  [19726] (20660/1) Normal[19726] let globalObject = ObjRec.BindingObject
  [19727] (20666/3) Normal[19727] return [? __x1__]
  [19728] (20669/4) Normal[19728] return true
  [19729] (20661/2) Call[19729] app __x0__ = (globalObject.GetOwnProperty globalObject N)
  [19730] (20662/2) Normal[19730] let existingProp = [? __x0__]
  [19731] Exit[19731]
Algo: GlobalEnvironmentRecord.CanDeclareGlobalVar [1599]
  [19732] Entry[19732]
  [19733] (20674/0) Normal[19733] let ObjRec = envRec.ObjectRecord
  [19734] (20678/3) If[19734] (= hasProperty true)
  [19735] (20679/3) Normal[19735] return true
  [19736] (20681/4) Call[19736] app __x1__ = (IsExtensible globalObject)
  [19737] (20675/1) Normal[19737] let globalObject = ObjRec.BindingObject
  [19738] (20676/2) Call[19738] app __x0__ = (HasOwnProperty globalObject N)
  [19739] (20682/4) Normal[19739] return [? __x1__]
  [19740] (20677/2) Normal[19740] let hasProperty = [? __x0__]
  [19741] Exit[19741]
Algo: GlobalEnvironmentRecord.CreateGlobalFunctionBinding [1600]
  [19742] Entry[19742]
  [19743] (20684/0) Normal[19743] let ObjRec = envRec.ObjectRecord
  [19744] (20688/3) If[19744] (|| (= existingProp undefined) (= existingProp.Configurable true))
  [19745] (20689/4) Normal[19745] let desc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> D))
  [19746] (20690/3) Normal[19746] let desc = (new PropertyDescriptor("Value" -> V))
  [19747] (20693/8) Call[19747] app __x2__ = (Set globalObject N V false)
  [19748] (20694/8) Normal[19748] [? __x2__]
  [19749] (20697/11) Normal[19749] append N -> varDeclaredNames
  [19750] (20699/12) Normal[19750] return ~empty~
  [19751] (20685/1) Normal[19751] let globalObject = ObjRec.BindingObject
  [19752] (20691/7) Call[19752] app __x1__ = (DefinePropertyOrThrow globalObject N desc)
  [19753] (20692/7) Normal[19753] [? __x1__]
  [19754] (20696/10) If[19754] (! (contains varDeclaredNames N))
  [19755] (20686/2) Call[19755] app __x0__ = (globalObject.GetOwnProperty globalObject N)
  [19756] (20695/9) Normal[19756] let varDeclaredNames = envRec.VarNames
  [19757] (20687/2) Normal[19757] let existingProp = [? __x0__]
  [19758] Exit[19758]
Algo: GlobalEnvironmentRecord.CreateGlobalVarBinding [1601]
  [19759] Entry[19759]
  [19760] (20701/0) Normal[19760] let ObjRec = envRec.ObjectRecord
  [19761] (20705/3) Call[19761] app __x1__ = (IsExtensible globalObject)
  [19762] (20706/3) Normal[19762] let extensible = [? __x1__]
  [19763] (20711/6) Call[19763] app __x3__ = (ObjRec.InitializeBinding ObjRec N undefined)
  [19764] (20712/6) Normal[19764] [? __x3__]
  [19765] (20716/9) Normal[19765] append N -> varDeclaredNames
  [19766] (20718/10) Normal[19766] return ~empty~
  [19767] (20702/1) Normal[19767] let globalObject = ObjRec.BindingObject
  [19768] (20707/4) If[19768] (&& (= hasProperty false) (= extensible true))
  [19769] (20710/5) Normal[19769] [? __x2__]
  [19770] (20715/8) If[19770] (! (contains varDeclaredNames N))
  [19771] (20703/2) Call[19771] app __x0__ = (HasOwnProperty globalObject N)
  [19772] (20714/7) Normal[19772] let varDeclaredNames = envRec.VarNames
  [19773] (20709/5) Call[19773] app __x2__ = (ObjRec.CreateMutableBinding ObjRec N D)
  [19774] (20704/2) Normal[19774] let hasProperty = [? __x0__]
  [19775] Exit[19775]
Algo: GlobalEnvironmentRecord.CreateImmutableBinding [1602]
  [19776] Entry[19776]
  [19777] (20720/0) Normal[19777] let DclRec = envRec.DeclarativeRecord
  [19778] (20725/2) Call[19778] app __x1__ = (DclRec.CreateImmutableBinding DclRec N S)
  [19779] (20726/2) Normal[19779] return __x1__
  [19780] (20721/1) Call[19780] app __x0__ = (DclRec.HasBinding DclRec N)
  [19781] Exit[19781]
  [19782] (20722/1) If[19782] (= __x0__ true)
  [19783] (20723/1) Normal[19783] throw TypeError
Algo: GlobalEnvironmentRecord.CreateMutableBinding [1603]
  [19784] Entry[19784]
  [19785] (20728/0) Normal[19785] let DclRec = envRec.DeclarativeRecord
  [19786] (20733/2) Call[19786] app __x1__ = (DclRec.CreateMutableBinding DclRec N D)
  [19787] (20734/2) Normal[19787] return __x1__
  [19788] (20729/1) Call[19788] app __x0__ = (DclRec.HasBinding DclRec N)
  [19789] Exit[19789]
  [19790] (20730/1) If[19790] (= __x0__ true)
  [19791] (20731/1) Normal[19791] throw TypeError
Algo: GlobalEnvironmentRecord.DeleteBinding [1604]
  [19792] Entry[19792]
  [19793] (20736/0) Normal[19793] let DclRec = envRec.DeclarativeRecord
  [19794] (20741/2) Normal[19794] return __x1__
  [19795] (20743/3) Normal[19795] let ObjRec = envRec.ObjectRecord
  [19796] (20747/6) If[19796] (= existingProp true)
  [19797] (20749/7) Call[19797] app __x3__ = (ObjRec.DeleteBinding ObjRec N)
  [19798] (20763/12) Normal[19798] return true
  [19799] (20753/9) Normal[19799] let varNames = envRec.VarNames
  [19800] (20754/10) Normal[19800] let i = 0i
  [19801] (20758/10) Normal[19801] (pop varNames i)
  [19802] (20761/11) Normal[19802] return status
  [19803] (20737/1) Call[19803] app __x0__ = (DclRec.HasBinding DclRec N)
  [19804] (20744/4) Normal[19804] let globalObject = ObjRec.BindingObject
  [19805] (20746/5) Normal[19805] let existingProp = [? __x2__]
  [19806] (20751/8) If[19806] (= status true)
  [19807] (20738/1) If[19807] (= __x0__ true)
  [19808] (20756/10) Normal[19808] i = (+ i 1i)
  [19809] LoopCont[19809]
  [19810] Exit[19810]
  [19811] (20750/7) Normal[19811] let status = [? __x3__]
  [19812] (20745/5) Call[19812] app __x2__ = (HasOwnProperty globalObject N)
  [19813] (20740/2) Call[19813] app __x1__ = (DclRec.DeleteBinding DclRec N)
  [19814] (20755/10) Loop[19814] (&& (< i varNames.length) (! (= varNames[i] N)))
  [19815] (20757/10) If[19815] (< i varNames.length)
Algo: GlobalEnvironmentRecord.GetBindingValue [1605]
  [19816] Entry[19816]
  [19817] (20765/0) Normal[19817] let DclRec = envRec.DeclarativeRecord
  [19818] (20770/2) Normal[19818] return __x1__
  [19819] (20772/3) Normal[19819] let ObjRec = envRec.ObjectRecord
  [19820] (20766/1) Call[19820] app __x0__ = (DclRec.HasBinding DclRec N)
  [19821] (20773/4) Call[19821] app __x2__ = (ObjRec.GetBindingValue ObjRec N S)
  [19822] (20767/1) If[19822] (= __x0__ true)
  [19823] (20774/4) Normal[19823] return [? __x2__]
  [19824] (20769/2) Call[19824] app __x1__ = (DclRec.GetBindingValue DclRec N S)
  [19825] Exit[19825]
Algo: GlobalEnvironmentRecord.GetThisBinding [1606]
  [19826] Entry[19826]
  [19827] (20775/0) Normal[19827] return envRec.GlobalThisValue
  [19828] Exit[19828]
Algo: GlobalEnvironmentRecord.HasBinding [1607]
  [19829] Entry[19829]
  [19830] (20777/0) Normal[19830] let DclRec = envRec.DeclarativeRecord
  [19831] (20782/2) Normal[19831] let ObjRec = envRec.ObjectRecord
  [19832] (20783/3) Call[19832] app __x1__ = (ObjRec.HasBinding ObjRec N)
  [19833] (20778/1) Call[19833] app __x0__ = (DclRec.HasBinding DclRec N)
  [19834] (20784/3) Normal[19834] return [? __x1__]
  [19835] (20779/1) If[19835] (= __x0__ true)
  [19836] Exit[19836]
  [19837] (20780/1) Normal[19837] return true
Algo: GlobalEnvironmentRecord.HasLexicalDeclaration [1608]
  [19838] Entry[19838]
  [19839] (20786/0) Normal[19839] let DclRec = envRec.DeclarativeRecord
  [19840] (20787/1) Call[19840] app __x0__ = (DclRec.HasBinding DclRec N)
  [19841] (20788/1) Normal[19841] return __x0__
  [19842] Exit[19842]
Algo: GlobalEnvironmentRecord.HasRestrictedGlobalProperty [1609]
  [19843] Entry[19843]
  [19844] (20790/0) Normal[19844] let ObjRec = envRec.ObjectRecord
  [19845] (20794/3) If[19845] (= existingProp undefined)
  [19846] (20795/3) Normal[19846] return false
  [19847] (20797/4) If[19847] (= existingProp.Configurable true)
  [19848] (20791/1) Normal[19848] let globalObject = ObjRec.BindingObject
  [19849] (20800/5) Normal[19849] return true
  [19850] Exit[19850]
  [19851] (20792/2) Call[19851] app __x0__ = (globalObject.GetOwnProperty globalObject N)
  [19852] (20798/4) Normal[19852] return false
  [19853] (20793/2) Normal[19853] let existingProp = [? __x0__]
Algo: GlobalEnvironmentRecord.HasSuperBinding [1610]
  [19854] Entry[19854]
  [19855] (20801/0) Normal[19855] return false
  [19856] Exit[19856]
Algo: GlobalEnvironmentRecord.HasThisBinding [1611]
  [19857] Entry[19857]
  [19858] (20802/0) Normal[19858] return true
  [19859] Exit[19859]
Algo: GlobalEnvironmentRecord.HasVarDeclaration [1612]
  [19860] Entry[19860]
  [19861] (20804/0) Normal[19861] let varDeclaredNames = envRec.VarNames
  [19862] (20805/1) If[19862] (contains varDeclaredNames N)
  [19863] (20806/1) Normal[19863] return true
  [19864] (20808/2) Normal[19864] return false
  [19865] Exit[19865]
Algo: GlobalEnvironmentRecord.InitializeBinding [1613]
  [19866] Entry[19866]
  [19867] (20810/0) Normal[19867] let DclRec = envRec.DeclarativeRecord
  [19868] (20815/2) Normal[19868] return __x1__
  [19869] (20817/4) Normal[19869] let ObjRec = envRec.ObjectRecord
  [19870] (20811/1) Call[19870] app __x0__ = (DclRec.HasBinding DclRec N)
  [19871] (20818/5) Call[19871] app __x2__ = (ObjRec.InitializeBinding ObjRec N V)
  [19872] (20812/1) If[19872] (= __x0__ true)
  [19873] (20819/5) Normal[19873] return [? __x2__]
  [19874] (20814/2) Call[19874] app __x1__ = (DclRec.InitializeBinding DclRec N V)
  [19875] Exit[19875]
Algo: GlobalEnvironmentRecord.SetMutableBinding [1614]
  [19876] Entry[19876]
  [19877] (20821/0) Normal[19877] let DclRec = envRec.DeclarativeRecord
  [19878] (20826/2) Normal[19878] return __x1__
  [19879] (20828/3) Normal[19879] let ObjRec = envRec.ObjectRecord
  [19880] (20822/1) Call[19880] app __x0__ = (DclRec.HasBinding DclRec N)
  [19881] (20829/4) Call[19881] app __x2__ = (ObjRec.SetMutableBinding ObjRec N V S)
  [19882] (20823/1) If[19882] (= __x0__ true)
  [19883] (20830/4) Normal[19883] return [? __x2__]
  [19884] (20825/2) Call[19884] app __x1__ = (DclRec.SetMutableBinding DclRec N V S)
  [19885] Exit[19885]
Algo: GlobalEnvironmentRecord.WithBaseObject [1615]
  [19886] Entry[19886]
  [19887] (20831/0) Normal[19887] return undefined
  [19888] Exit[19888]
Algo: HasOwnProperty [1616]
  [19889] Entry[19889]
  [19890] (20833/0) Normal[19890] assert (= (typeof O) Object)
  [19891] (20837/2) Normal[19891] let desc = [? __x1__]
  [19892] (20838/3) If[19892] (= desc undefined)
  [19893] (20834/1) Call[19893] app __x0__ = (IsPropertyKey P)
  [19894] (20839/3) Normal[19894] return false
  [19895] (20841/4) Normal[19895] return true
  [19896] (20835/1) Normal[19896] assert (= __x0__ true)
  [19897] (20836/2) Call[19897] app __x1__ = (O.GetOwnProperty O P)
  [19898] Exit[19898]
Algo: HasProperty [1617]
  [19899] Entry[19899]
  [19900] (20843/0) Normal[19900] assert (= (typeof O) Object)
  [19901] (20847/2) Normal[19901] return [? __x1__]
  [19902] Exit[19902]
  [19903] (20844/1) Call[19903] app __x0__ = (IsPropertyKey P)
  [19904] (20845/1) Normal[19904] assert (= __x0__ true)
  [19905] (20846/2) Call[19905] app __x1__ = (O.HasProperty O P)
Algo: HoistableDeclaration[0,0].DeclarationPart [1618]
  [19906] Entry[19906]
  [19907] (20849)Normal[19907] let HoistableDeclaration = this
  [19908] (20850/0) Normal[19908] return FunctionDeclaration
  [19909] Exit[19909]
Algo: HoistableDeclaration[0,0].Evaluation [1619]
  [19910] Entry[19910]
  [19911] (20852)Normal[19911] let HoistableDeclaration = this
  [19912] (20853/0) Call[19912] access __x0__ = (FunctionDeclaration "Evaluation")
  [19913] (20854/0) Normal[19913] return __x0__
  [19914] Exit[19914]
Algo: HoistableDeclaration[1,0].DeclarationPart [1620]
  [19915] Entry[19915]
  [19916] (20856)Normal[19916] let HoistableDeclaration = this
  [19917] (20857/0) Normal[19917] return GeneratorDeclaration
  [19918] Exit[19918]
Algo: HoistableDeclaration[1,0].Evaluation [1621]
  [19919] Entry[19919]
  [19920] (20859)Normal[19920] let HoistableDeclaration = this
  [19921] (20860/0) Normal[19921] return ~empty~
  [19922] Exit[19922]
Algo: HoistableDeclaration[2,0].DeclarationPart [1622]
  [19923] Entry[19923]
  [19924] (20862)Normal[19924] let HoistableDeclaration = this
  [19925] (20863/0) Normal[19925] return AsyncFunctionDeclaration
  [19926] Exit[19926]
Algo: HoistableDeclaration[2,0].Evaluation [1623]
  [19927] Entry[19927]
  [19928] (20865)Normal[19928] let HoistableDeclaration = this
  [19929] (20866/0) Normal[19929] return ~empty~
  [19930] Exit[19930]
Algo: HoistableDeclaration[3,0].DeclarationPart [1624]
  [19931] Entry[19931]
  [19932] (20868)Normal[19932] let HoistableDeclaration = this
  [19933] (20869/0) Normal[19933] return AsyncGeneratorDeclaration
  [19934] Exit[19934]
Algo: HoistableDeclaration[3,0].Evaluation [1625]
  [19935] Entry[19935]
  [19936] (20871)Normal[19936] let HoistableDeclaration = this
  [19937] (20872/0) Normal[19937] return ~empty~
  [19938] Exit[19938]
Algo: HostCallJobCallback [1626]
  [19939] Entry[19939]
  [19940] (20874/0) Call[19940] app __x0__ = (IsCallable jobCallback.Callback)
  [19941] (20875/0) Normal[19941] assert (= __x0__ true)
  [19942] (20876/1) Call[19942] app __x1__ = (Call jobCallback.Callback V argumentsList)
  [19943] (20877/1) Normal[19943] return [? __x1__]
  [19944] Exit[19944]
Algo: HostEnqueuePromiseJob [1627]
  [19945] Entry[19945]
  [19946] (20879)Normal[19946] let callerContext = CONTEXT
  [19947] (20883)Normal[19947] return ~empty~
  [19948] Exit[19948]
  [19949] (20880)Normal[19949] let callerScriptOrModule = callerContext.ScriptOrModule
  [19950] (20881)Normal[19950] let pending = (new PendingJob("Job" -> job, "Realm" -> realm, "ScriptOrModule" -> callerScriptOrModule, "HostDefined" -> undefined))
  [19951] (20882)Normal[19951] append pending -> JOB_QUEUE
Algo: HostEnsureCanCompileStrings [1628]
  [19952] Entry[19952]
  [19953] (20884)Normal[19953] return ~empty~
  [19954] Exit[19954]
Algo: HostEventSet [1629]
  [19955] Entry[19955]
  [19956] (20886/0) Normal[19956] let events = (new [])
  [19957] (20890/1) Loop[19957] (< __x2__ __x1__.length)
  [19958] (20892/1) Normal[19958] let E = __x1__[__x2__]
  [19959] (20898/3) Normal[19959] return events
  [19960] (20896/2) Normal[19960] append E -> events
  [19961] LoopCont[19961]
  [19962] (20887/1) Call[19962] app __x0__ = (EventSet execution)
  [19963] (20893/1) Normal[19963] __x2__ = (+ __x2__ 1i)
  [19964] (20895/2) If[19964] (! (contains __x3__ E))
  [19965] (20888/1) Normal[19965] let __x1__ = __x0__
  [19966] Exit[19966]
  [19967] (20894/2) Call[19967] app __x3__ = (SharedDataBlockEventSet execution)
  [19968] (20889/1) Normal[19968] let __x2__ = 0i
Algo: HostFinalizeImportMeta [1630]
  [19969] Entry[19969]
  [19970] (20899)Normal[19970] return ~empty~
  [19971] Exit[19971]
Algo: HostGetImportMetaProperties [1631]
  [19972] Entry[19972]
  [19973] (20900)Normal[19973] return (new [])
  [19974] Exit[19974]
Algo: HostImportModuleDynamically [1632]
  [19975] Entry[19975]
  [19976] (20901)Normal[19976] return undefined
  [19977] Exit[19977]
Algo: HostMakeJobCallback [1633]
  [19978] Entry[19978]
  [19979] (20903/0) Call[19979] app __x0__ = (IsCallable callback)
  [19980] (20904/0) Normal[19980] assert (= __x0__ true)
  [19981] (20905/1) Normal[19981] return (new JobCallbackRecord("Callback" -> callback, "HostDefined" -> ~empty~))
  [19982] Exit[19982]
Algo: HostPromiseRejectionTracker [1634]
  [19983] Entry[19983]
  [19984] (20906)Normal[19984] return ~empty~
  [19985] Exit[19985]
Algo: HourFromTime [1635]
  [19986] Entry[19986]
  [19987] (20908/0) Call[19987] app __x0__ = (floor (/ t 3600000.0))
  [19988] (20909/0) Normal[19988] return (%% __x0__ HoursPerDay)
  [19989] Exit[19989]
Algo: HoursPerDay [1636]
  [19990] Entry[19990]
  [19991] (20910/0) Normal[19991] return 24i
  [19992] Exit[19992]
Algo: IdentifierName[0,0].StringValue [1637]
  [19993] Entry[19993]
  [19994] (20912)Normal[19994] let IdentifierName = this
  [19995] (20916/2) Normal[19995] return [! __x0__]
  [19996] Exit[19996]
  [19997] (20913/0) Normal[19997] let idText = (get-syntax IdentifierName)
  [19998] (20914/1) Normal[19998] ??? "Let id:{idTextUnescaped} be the result of replacing any occurrences of code:{\\\\} nt:{UnicodeEscapeSequence} in id:{idText} with the code point represented by the nt:{UnicodeEscapeSequence} ."
  [19999] (20915/2) Call[19999] app __x0__ = (CodePointsToString idTextUnescaped)
Algo: IdentifierName[1,0].StringValue [1638]
  [20000] Entry[20000]
  [20001] (20918/0) Normal[20001] let idText = (get-syntax IdentifierName)
  [20002] (20919/1) Normal[20002] ??? "Let id:{idTextUnescaped} be the result of replacing any occurrences of code:{\\\\} nt:{UnicodeEscapeSequence} in id:{idText} with the code point represented by the nt:{UnicodeEscapeSequence} ."
  [20003] (20920/2) Call[20003] app __x0__ = (CodePointsToString idTextUnescaped)
  [20004] (20921/2) Normal[20004] return [! __x0__]
  [20005] Exit[20005]
Algo: IdentifierPart[2,0].EarlyErrors [1639]
  [20006] Entry[20006]
  [20007] (20923)Normal[20007] let IdentifierPart = this
  [20008] (20924/0) Normal[20008] ??? "It is a Syntax Error if the SV of nt:{UnicodeEscapeSequence} is none of value:{\"$\"} , value:{\"_\"} , ! UTF16EncodeCodePoint ( < ZWNJ > ) , ! UTF16EncodeCodePoint ( < ZWJ > ) , or ! UTF16EncodeCodePoint ( id:{cp} ) for some Unicode code point id:{cp} that would be matched by the nt:{UnicodeIDContinue} lexical grammar production ."
  [20009] Exit[20009]
Algo: IdentifierReference[0,0].AssignmentTargetType [1640]
  [20010] Entry[20010]
  [20011] (20926)Normal[20011] let IdentifierReference = this
  [20012] (20931/0) Call[20012] access __x1__ = (Identifier "StringValue")
  [20013] (20932/0) Normal[20013] __x0__ = (|| (= __x1__ "eval") (= __x1__ "arguments"))
  [20014] (20927/0) Normal[20014] let __x0__ = true
  [20015] (20934/0) If[20015] __x0__
  [20016] (20937/1) Normal[20016] return ~simple~
  [20017] Exit[20017]
  [20018] (20928/0) Normal[20018] __x0__ = true
  [20019] (20935/0) Normal[20019] return ~invalid~
  [20020] (20929/0) If[20020] __x0__
Algo: IdentifierReference[0,0].EarlyErrors [1641]
  [20021] Entry[20021]
  [20022] (20939)Normal[20022] let IdentifierReference = this
  [20023] (20940/0) Normal[20023] ??? "It is a Syntax Error if this production has a sub:{[ Yield ]} parameter and StringValue of nt:{Identifier} is value:{\"yield\"} ."
  [20024] (20941/1) Normal[20024] ??? "It is a Syntax Error if this production has an sub:{[ Await ]} parameter and StringValue of nt:{Identifier} is value:{\"await\"} ."
  [20025] Exit[20025]
Algo: IdentifierReference[0,0].Evaluation [1642]
  [20026] Entry[20026]
  [20027] (20943)Normal[20027] let IdentifierReference = this
  [20028] (20944/0) Call[20028] access __x0__ = (Identifier "StringValue")
  [20029] (20945/0) Call[20029] app __x1__ = (ResolveBinding __x0__)
  [20030] (20946/0) Normal[20030] return [? __x1__]
  [20031] Exit[20031]
Algo: IdentifierReference[1,0].AssignmentTargetType [1643]
  [20032] Entry[20032]
  [20033] (20948)Normal[20033] let IdentifierReference = this
  [20034] (20949/0) Normal[20034] return ~simple~
  [20035] Exit[20035]
Algo: IdentifierReference[1,0].EarlyErrors [1644]
  [20036] Entry[20036]
  [20037] (20951)Normal[20037] let IdentifierReference = this
  [20038] (20952/0) If[20038] true
  [20039] (20953/0) Normal[20039] throw SyntaxError
  [20040] Exit[20040]
Algo: IdentifierReference[1,0].Evaluation [1645]
  [20041] Entry[20041]
  [20042] (20956)Normal[20042] let IdentifierReference = this
  [20043] (20957/0) Call[20043] app __x0__ = (ResolveBinding "yield")
  [20044] (20958/0) Normal[20044] return [? __x0__]
  [20045] Exit[20045]
Algo: IdentifierReference[1,0].StringValue [1646]
  [20046] Entry[20046]
  [20047] (20960)Normal[20047] let IdentifierReference = this
  [20048] (20961/0) Normal[20048] return "yield"
  [20049] Exit[20049]
Algo: IdentifierReference[2,0].AssignmentTargetType [1647]
  [20050] Entry[20050]
  [20051] (20963)Normal[20051] let IdentifierReference = this
  [20052] (20964/0) Normal[20052] return ~simple~
  [20053] Exit[20053]
Algo: IdentifierReference[2,0].EarlyErrors [1648]
  [20054] Entry[20054]
  [20055] (20966)Normal[20055] let IdentifierReference = this
  [20056] (20971/0) If[20056] __x0__
  [20057] (20972/0) Normal[20057] throw SyntaxError
  [20058] Exit[20058]
  [20059] (20967/0) Normal[20059] let __x0__ = false
  [20060] (20968/0) If[20060] (= absent (parse-syntax this "Module"))
  [20061] (20969/0) Normal[20061] __x0__ = true
Algo: IdentifierReference[2,0].Evaluation [1649]
  [20062] Entry[20062]
  [20063] (20975)Normal[20063] let IdentifierReference = this
  [20064] (20976/0) Call[20064] app __x0__ = (ResolveBinding "await")
  [20065] (20977/0) Normal[20065] return [? __x0__]
  [20066] Exit[20066]
Algo: IdentifierReference[2,0].StringValue [1650]
  [20067] Entry[20067]
  [20068] (20979)Normal[20068] let IdentifierReference = this
  [20069] (20980/0) Normal[20069] return "await"
  [20070] Exit[20070]
Algo: IdentifierStart[3,0].EarlyErrors [1651]
  [20071] Entry[20071]
  [20072] (20982)Normal[20072] let IdentifierStart = this
  [20073] (20983/0) Normal[20073] ??? "It is a Syntax Error if the SV of nt:{UnicodeEscapeSequence} is none of value:{\"$\"} , or value:{\"_\"} , or ! UTF16EncodeCodePoint ( id:{cp} ) for some Unicode code point id:{cp} matched by the nt:{UnicodeIDStart} lexical grammar production ."
  [20074] Exit[20074]
Algo: Identifier[0,0].EarlyErrors [1652]
  [20075] Entry[20075]
  [20076] (20985)Normal[20076] let Identifier = this
  [20077] (20989/1) If[20077] (= absent (parse-syntax this "Module"))
  [20078] (20990/1) Normal[20078] __x1__ = true
  [20079] (20992/1) Normal[20079] __x0__ = __x1__
  [20080] (20996/1) Normal[20080] __x0__ = (= __x2__ "await")
  [20081] (20998/1) If[20081] __x0__
  [20082] (20986/0) Normal[20082] ??? "It is a Syntax Error if this phrase is contained in strict mode code and the StringValue of nt:{IdentifierName} is : value:{\"implements\"} , value:{\"interface\"} , value:{\"let\"} , value:{\"package\"} , value:{\"private\"} , value:{\"protected\"} , value:{\"public\"} , value:{\"static\"} , or value:{\"yield\"} ."
  [20083] (20995/1) Call[20083] access __x2__ = (IdentifierName "StringValue")
  [20084] (21001/2) Normal[20084] ??? "It is a Syntax Error if StringValue of nt:{IdentifierName} is the same String value as the StringValue of any nt:{ReservedWord} except for code:{yield} or code:{await} ."
  [20085] Exit[20085]
  [20086] (20987/1) Normal[20086] let __x0__ = true
  [20087] (20999/1) Normal[20087] throw SyntaxError
  [20088] (20993/1) If[20088] __x0__
  [20089] (20988/1) Normal[20089] let __x1__ = false
Algo: Identifier[0,0].StringValue [1653]
  [20090] Entry[20090]
  [20091] (21003)Normal[20091] let Identifier = this
  [20092] (21004/0) Call[20092] access __x0__ = (IdentifierName "StringValue")
  [20093] (21005/0) Normal[20093] return __x0__
  [20094] Exit[20094]
Algo: IfStatement[0,0].ContainsDuplicateLabels [1654]
  [20095] Entry[20095]
  [20096] (21007)Normal[20096] let IfStatement = this
  [20097] (21011/1) Normal[20097] return true
  [20098] (21013/2) Call[20098] access __x1__ = (Statement1 "ContainsDuplicateLabels" labelSet)
  [20099] (21008/0) Call[20099] access __x0__ = (Statement0 "ContainsDuplicateLabels" labelSet)
  [20100] (21014/2) Normal[20100] return __x1__
  [20101] (21009/0) Normal[20101] let hasDuplicate = __x0__
  [20102] Exit[20102]
  [20103] (21010/1) If[20103] (= hasDuplicate true)
Algo: IfStatement[0,0].ContainsUndefinedBreakTarget [1655]
  [20104] Entry[20104]
  [20105] (21016)Normal[20105] let IfStatement = this
  [20106] (21020/1) Normal[20106] return true
  [20107] (21022/2) Call[20107] access __x1__ = (Statement1 "ContainsUndefinedBreakTarget" labelSet)
  [20108] (21017/0) Call[20108] access __x0__ = (Statement0 "ContainsUndefinedBreakTarget" labelSet)
  [20109] (21023/2) Normal[20109] return __x1__
  [20110] (21018/0) Normal[20110] let hasUndefinedLabels = __x0__
  [20111] Exit[20111]
  [20112] (21019/1) If[20112] (= hasUndefinedLabels true)
Algo: IfStatement[0,0].ContainsUndefinedContinueTarget [1656]
  [20113] Entry[20113]
  [20114] (21025)Normal[20114] let IfStatement = this
  [20115] (21029/1) Normal[20115] return true
  [20116] (21031/2) Call[20116] access __x1__ = (Statement1 "ContainsUndefinedContinueTarget" iterationSet (new []))
  [20117] (21026/0) Call[20117] access __x0__ = (Statement0 "ContainsUndefinedContinueTarget" iterationSet (new []))
  [20118] (21032/2) Normal[20118] return __x1__
  [20119] (21027/0) Normal[20119] let hasUndefinedLabels = __x0__
  [20120] Exit[20120]
  [20121] (21028/1) If[20121] (= hasUndefinedLabels true)
Algo: IfStatement[0,0].EarlyErrors [1657]
  [20122] Entry[20122]
  [20123] (21034)Normal[20123] let IfStatement = this
  [20124] (21035/0) Call[20124] app __x0__ = (IsLabelledFunction Statement)
  [20125] (21036/0) If[20125] (= __x0__ true)
  [20126] (21037/0) Normal[20126] throw SyntaxError
  [20127] Exit[20127]
Algo: IfStatement[0,0].Evaluation [1658]
  [20128] Entry[20128]
  [20129] (21040)Normal[20129] let IfStatement = this
  [20130] (21044/1) Call[20130] app __x2__ = (ToBoolean [? __x1__])
  [20131] (21045/1) Normal[20131] let exprValue = [! __x2__]
  [20132] (21051/5) Call[20132] access __x4__ = (Statement1 "Evaluation")
  [20133] (21052/5) Normal[20133] let stmtCompletion = __x4__
  [20134] (21041/0) Call[20134] access __x0__ = (Expression "Evaluation")
  [20135] (21046/2) If[20135] (= exprValue true)
  [20136] (21049/3) Normal[20136] let stmtCompletion = __x3__
  [20137] (21053/6) Call[20137] app __x5__ = (UpdateEmpty stmtCompletion undefined)
  [20138] (21054/6) Normal[20138] return __x5__
  [20139] Exit[20139]
  [20140] (21042/0) Normal[20140] let exprRef = __x0__
  [20141] (21048/3) Call[20141] access __x3__ = (Statement0 "Evaluation")
  [20142] (21043/1) Call[20142] app __x1__ = (GetValue exprRef)
Algo: IfStatement[0,0].HasCallInTailPosition [1659]
  [20143] Entry[20143]
  [20144] (21056)Normal[20144] let IfStatement = this
  [20145] (21060/1) Normal[20145] return true
  [20146] (21062/2) Call[20146] access __x1__ = (Statement1 "HasCallInTailPosition" call)
  [20147] (21057/0) Call[20147] access __x0__ = (Statement0 "HasCallInTailPosition" call)
  [20148] (21063/2) Normal[20148] return __x1__
  [20149] (21058/0) Normal[20149] let has = __x0__
  [20150] Exit[20150]
  [20151] (21059/1) If[20151] (= has true)
Algo: IfStatement[0,0].VarDeclaredNames [1660]
  [20152] Entry[20152]
  [20153] (21065)Normal[20153] let IfStatement = this
  [20154] (21069/1) Normal[20154] let __x2__ = __x1__
  [20155] (21070/1) Normal[20155] let __x3__ = 0i
  [20156] (21075/1) Normal[20156] append __x4__ -> names
  [20157] LoopCont[20157]
  [20158] (21066/0) Call[20158] access __x0__ = (Statement0 "VarDeclaredNames")
  [20159] (21071/1) Loop[20159] (< __x3__ __x2__.length)
  [20160] (21074/1) Normal[20160] __x3__ = (+ __x3__ 1i)
  [20161] (21067/0) Normal[20161] let names = __x0__
  [20162] (21076/2) Normal[20162] return names
  [20163] Exit[20163]
  [20164] (21073/1) Normal[20164] let __x4__ = __x2__[__x3__]
  [20165] (21068/1) Call[20165] access __x1__ = (Statement1 "VarDeclaredNames")
Algo: IfStatement[0,0].VarScopedDeclarations [1661]
  [20166] Entry[20166]
  [20167] (21078)Normal[20167] let IfStatement = this
  [20168] (21082/1) Normal[20168] let __x2__ = __x1__
  [20169] (21083/1) Normal[20169] let __x3__ = 0i
  [20170] (21088/1) Normal[20170] append __x4__ -> declarations
  [20171] LoopCont[20171]
  [20172] (21079/0) Call[20172] access __x0__ = (Statement0 "VarScopedDeclarations")
  [20173] (21084/1) Loop[20173] (< __x3__ __x2__.length)
  [20174] (21087/1) Normal[20174] __x3__ = (+ __x3__ 1i)
  [20175] (21080/0) Normal[20175] let declarations = __x0__
  [20176] (21089/2) Normal[20176] return declarations
  [20177] Exit[20177]
  [20178] (21086/1) Normal[20178] let __x4__ = __x2__[__x3__]
  [20179] (21081/1) Call[20179] access __x1__ = (Statement1 "VarScopedDeclarations")
Algo: IfStatement[1,0].ContainsDuplicateLabels [1662]
  [20180] Entry[20180]
  [20181] (21091)Normal[20181] let IfStatement = this
  [20182] (21092/0) Call[20182] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [20183] (21093/0) Normal[20183] return __x0__
  [20184] Exit[20184]
Algo: IfStatement[1,0].ContainsUndefinedBreakTarget [1663]
  [20185] Entry[20185]
  [20186] (21095)Normal[20186] let IfStatement = this
  [20187] (21096/0) Call[20187] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [20188] (21097/0) Normal[20188] return __x0__
  [20189] Exit[20189]
Algo: IfStatement[1,0].ContainsUndefinedContinueTarget [1664]
  [20190] Entry[20190]
  [20191] (21099)Normal[20191] let IfStatement = this
  [20192] (21100/0) Call[20192] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [20193] (21101/0) Normal[20193] return __x0__
  [20194] Exit[20194]
Algo: IfStatement[1,0].EarlyErrors [1665]
  [20195] Entry[20195]
  [20196] (21103)Normal[20196] let IfStatement = this
  [20197] (21104/0) Call[20197] app __x0__ = (IsLabelledFunction Statement)
  [20198] (21105/0) If[20198] (= __x0__ true)
  [20199] (21106/0) Normal[20199] throw SyntaxError
  [20200] Exit[20200]
Algo: IfStatement[1,0].Evaluation [1666]
  [20201] Entry[20201]
  [20202] (21109)Normal[20202] let IfStatement = this
  [20203] (21113/1) Call[20203] app __x2__ = (ToBoolean [? __x1__])
  [20204] (21114/1) Normal[20204] let exprValue = [! __x2__]
  [20205] (21119/5) Normal[20205] let stmtCompletion = __x3__
  [20206] (21120/6) Call[20206] app __x4__ = (UpdateEmpty stmtCompletion undefined)
  [20207] (21110/0) Call[20207] access __x0__ = (Expression "Evaluation")
  [20208] (21115/2) If[20208] (= exprValue false)
  [20209] (21118/5) Call[20209] access __x3__ = (Statement "Evaluation")
  [20210] (21111/0) Normal[20210] let exprRef = __x0__
  [20211] (21121/6) Normal[20211] return __x4__
  [20212] Exit[20212]
  [20213] (21116/3) Normal[20213] return undefined
  [20214] (21112/1) Call[20214] app __x1__ = (GetValue exprRef)
Algo: IfStatement[1,0].HasCallInTailPosition [1667]
  [20215] Entry[20215]
  [20216] (21123)Normal[20216] let IfStatement = this
  [20217] (21124/0) Call[20217] access __x0__ = (Statement "HasCallInTailPosition" call)
  [20218] (21125/0) Normal[20218] return __x0__
  [20219] Exit[20219]
Algo: IfStatement[1,0].VarDeclaredNames [1668]
  [20220] Entry[20220]
  [20221] (21127)Normal[20221] let IfStatement = this
  [20222] (21128/0) Call[20222] access __x0__ = (Statement "VarDeclaredNames")
  [20223] (21129/0) Normal[20223] return __x0__
  [20224] Exit[20224]
Algo: IfStatement[1,0].VarScopedDeclarations [1669]
  [20225] Entry[20225]
  [20226] (21131)Normal[20226] let IfStatement = this
  [20227] (21132/0) Call[20227] access __x0__ = (Statement "VarScopedDeclarations")
  [20228] (21133/0) Normal[20228] return __x0__
  [20229] Exit[20229]
Algo: ImmutablePrototypeExoticObject.SetPrototypeOf [1670]
  [20230] Entry[20230]
  [20231] (21135/0) Call[20231] app __x0__ = (SetImmutablePrototype O V)
  [20232] (21136/0) Normal[20232] return [? __x0__]
  [20233] Exit[20233]
Algo: ImportCall[0,0].Evaluation [1671]
  [20234] Entry[20234]
  [20235] (21138)Normal[20235] let ImportCall = this
  [20236] (21142/1) Normal[20236] let argRef = __x1__
  [20237] (21143/2) Call[20237] app __x2__ = (GetValue argRef)
  [20238] (21147/4) Call[20238] app __x4__ = (ToString specifier)
  [20239] (21148/4) Normal[20239] let specifierString = __x4__
  [20240] (21151/5) Normal[20240] specifierString = specifierString.Value
  [20241] (21159/5) Normal[20241] specifierString
  [20242] (21160/6) Call[20242] app __x6__ = (HostImportModuleDynamically referencingScriptOrModule specifierString promiseCapability)
  [20243] (21161/6) Normal[20243] [! __x6__]
  [20244] (21139/0) Call[20244] app __x0__ = (GetActiveScriptOrModule)
  [20245] (21144/2) Normal[20245] let specifier = [? __x2__]
  [20246] (21162/7) Normal[20246] return promiseCapability.Promise
  [20247] (21146/3) Normal[20247] let promiseCapability = [! __x3__]
  [20248] (21150/5) If[20248] (= specifierString.Type ~normal~)
  [20249] (21153/6) Call[20249] app __x5__ = (Call promiseCapability.Reject undefined (new [specifierString.Value]))
  [20250] (21140/0) Normal[20250] let referencingScriptOrModule = [! __x0__]
  [20251] (21155/6) Normal[20251] return __x5__
  [20252] (21157/6) Normal[20252] return promiseCapability.Promise
  [20253] Exit[20253]
  [20254] (21149/5) If[20254] (is-completion specifierString)
  [20255] (21145/3) Call[20255] app __x3__ = (NewPromiseCapability INTRINSICS["%Promise%"])
  [20256] (21141/1) Call[20256] access __x1__ = (AssignmentExpression "Evaluation")
  [20257] (21154/6) If[20257] (&& (is-completion __x5__) (! (= __x5__.Type ~normal~)))
Algo: ImportClause[3,0].BoundNames [1672]
  [20258] Entry[20258]
  [20259] (21164)Normal[20259] let ImportClause = this
  [20260] (21168/1) Normal[20260] let __x2__ = __x1__
  [20261] (21169/1) Normal[20261] let __x3__ = 0i
  [20262] (21174/1) Normal[20262] append __x4__ -> names
  [20263] LoopCont[20263]
  [20264] (21165/0) Call[20264] access __x0__ = (ImportedDefaultBinding "BoundNames")
  [20265] (21170/1) Loop[20265] (< __x3__ __x2__.length)
  [20266] (21173/1) Normal[20266] __x3__ = (+ __x3__ 1i)
  [20267] (21166/0) Normal[20267] let names = __x0__
  [20268] (21175/2) Normal[20268] return names
  [20269] Exit[20269]
  [20270] (21172/1) Normal[20270] let __x4__ = __x2__[__x3__]
  [20271] (21167/1) Call[20271] access __x1__ = (NameSpaceImport "BoundNames")
Algo: ImportClause[3,0].ImportEntriesForModule [1673]
  [20272] Entry[20272]
  [20273] (21177)Normal[20273] let ImportClause = this
  [20274] (21181/1) Normal[20274] let __x2__ = __x1__
  [20275] (21182/1) Normal[20275] let __x3__ = 0i
  [20276] (21187/1) Normal[20276] append __x4__ -> entries
  [20277] LoopCont[20277]
  [20278] (21178/0) Call[20278] access __x0__ = (ImportedDefaultBinding "ImportEntriesForModule" module)
  [20279] (21183/1) Loop[20279] (< __x3__ __x2__.length)
  [20280] (21186/1) Normal[20280] __x3__ = (+ __x3__ 1i)
  [20281] (21179/0) Normal[20281] let entries = __x0__
  [20282] (21188/2) Normal[20282] return entries
  [20283] Exit[20283]
  [20284] (21185/1) Normal[20284] let __x4__ = __x2__[__x3__]
  [20285] (21180/1) Call[20285] access __x1__ = (NameSpaceImport "ImportEntriesForModule" module)
Algo: ImportClause[4,0].BoundNames [1674]
  [20286] Entry[20286]
  [20287] (21190)Normal[20287] let ImportClause = this
  [20288] (21194/1) Normal[20288] let __x2__ = __x1__
  [20289] (21195/1) Normal[20289] let __x3__ = 0i
  [20290] (21200/1) Normal[20290] append __x4__ -> names
  [20291] LoopCont[20291]
  [20292] (21191/0) Call[20292] access __x0__ = (ImportedDefaultBinding "BoundNames")
  [20293] (21196/1) Loop[20293] (< __x3__ __x2__.length)
  [20294] (21199/1) Normal[20294] __x3__ = (+ __x3__ 1i)
  [20295] (21192/0) Normal[20295] let names = __x0__
  [20296] (21201/2) Normal[20296] return names
  [20297] Exit[20297]
  [20298] (21198/1) Normal[20298] let __x4__ = __x2__[__x3__]
  [20299] (21193/1) Call[20299] access __x1__ = (NamedImports "BoundNames")
Algo: ImportClause[4,0].ImportEntriesForModule [1675]
  [20300] Entry[20300]
  [20301] (21203)Normal[20301] let ImportClause = this
  [20302] (21207/1) Normal[20302] let __x2__ = __x1__
  [20303] (21208/1) Normal[20303] let __x3__ = 0i
  [20304] (21213/1) Normal[20304] append __x4__ -> entries
  [20305] LoopCont[20305]
  [20306] (21204/0) Call[20306] access __x0__ = (ImportedDefaultBinding "ImportEntriesForModule" module)
  [20307] (21209/1) Loop[20307] (< __x3__ __x2__.length)
  [20308] (21212/1) Normal[20308] __x3__ = (+ __x3__ 1i)
  [20309] (21205/0) Normal[20309] let entries = __x0__
  [20310] (21214/2) Normal[20310] return entries
  [20311] Exit[20311]
  [20312] (21211/1) Normal[20312] let __x4__ = __x2__[__x3__]
  [20313] (21206/1) Call[20313] access __x1__ = (NamedImports "ImportEntriesForModule" module)
Algo: ImportDeclaration[0,0].BoundNames [1676]
  [20314] Entry[20314]
  [20315] (21216)Normal[20315] let ImportDeclaration = this
  [20316] (21217/0) Call[20316] access __x0__ = (ImportClause "BoundNames")
  [20317] (21218/0) Normal[20317] return __x0__
  [20318] Exit[20318]
Algo: ImportDeclaration[0,0].ImportEntries [1677]
  [20319] Entry[20319]
  [20320] (21220)Normal[20320] let ImportDeclaration = this
  [20321] (21224/1) Normal[20321] return __x1__
  [20322] Exit[20322]
  [20323] (21221/0) Call[20323] access __x0__ = (FromClause "ModuleRequests")
  [20324] (21222/0) Normal[20324] let module = __x0__[0i]
  [20325] (21223/1) Call[20325] access __x1__ = (ImportClause "ImportEntriesForModule" module)
Algo: ImportDeclaration[0,0].ModuleRequests [1678]
  [20326] Entry[20326]
  [20327] (21226)Normal[20327] let ImportDeclaration = this
  [20328] (21227/0) Call[20328] access __x0__ = (FromClause "ModuleRequests")
  [20329] (21228/0) Normal[20329] return __x0__
  [20330] Exit[20330]
Algo: ImportDeclaration[1,0].BoundNames [1679]
  [20331] Entry[20331]
  [20332] (21230)Normal[20332] let ImportDeclaration = this
  [20333] (21231/0) Normal[20333] return (new [])
  [20334] Exit[20334]
Algo: ImportDeclaration[1,0].ImportEntries [1680]
  [20335] Entry[20335]
  [20336] (21233)Normal[20336] let ImportDeclaration = this
  [20337] (21234/0) Normal[20337] return (new [])
  [20338] Exit[20338]
Algo: ImportMeta[0,0].AssignmentTargetType [1681]
  [20339] Entry[20339]
  [20340] (21236)Normal[20340] let ImportMeta = this
  [20341] (21237/0) Normal[20341] return ~invalid~
  [20342] Exit[20342]
Algo: ImportMeta[0,0].EarlyErrors [1682]
  [20343] Entry[20343]
  [20344] (21239)Normal[20344] let ImportMeta = this
  [20345] (21244/0) If[20345] __x0__
  [20346] (21245/0) Normal[20346] throw SyntaxError
  [20347] Exit[20347]
  [20348] (21240/0) Normal[20348] let __x0__ = false
  [20349] (21241/0) If[20349] (= absent (parse-syntax this "Module"))
  [20350] (21242/0) Normal[20350] __x0__ = true
Algo: ImportMeta[0,0].Evaluation [1683]
  [20351] Entry[20351]
  [20352] (21248)Normal[20352] let ImportMeta = this
  [20353] (21252/2) Normal[20353] let importMeta = module.ImportMeta
  [20354] (21253/3) If[20354] (= importMeta ~empty~)
  [20355] (21258/5) Normal[20355] let importMetaValues = [! __x2__]
  [20356] (21259/6) Normal[20356] let __x3__ = importMetaValues
  [20357] (21273/13) Normal[20357] return importMeta
  [20358] Exit[20358]
  [20359] (21263/6) Normal[20359] let p = __x3__[__x4__]
  [20360] (21264/6) Normal[20360] __x4__ = (+ __x4__ 1i)
  [20361] (21268/8) Normal[20361] [! __x6__]
  [20362] (21269/9) Normal[20362] module.ImportMeta = importMeta
  [20363] (21249/0) Call[20363] app __x0__ = (GetActiveScriptOrModule)
  [20364] (21255/4) Call[20364] app __x1__ = (OrdinaryObjectCreate null)
  [20365] (21272/12) Normal[20365] assert (= (typeof importMeta) Object)
  [20366] (21270/10) Normal[20366] return importMeta
  [20367] (21257/5) Call[20367] app __x2__ = (HostGetImportMetaProperties module)
  [20368] (21261/6) Loop[20368] (< __x4__ __x3__.length)
  [20369] (21267/8) Call[20369] app __x6__ = (HostFinalizeImportMeta importMeta module)
  [20370] (21250/0) Normal[20370] let module = [! __x0__]
  [20371] (21266/7) Normal[20371] [! __x5__]
  [20372] LoopCont[20372]
  [20373] (21260/6) Normal[20373] let __x4__ = 0i
  [20374] (21256/4) Normal[20374] importMeta = [! __x1__]
  [20375] (21251/1) Normal[20375] assert (is-instance-of module SourceTextModuleRecord)
  [20376] (21265/7) Call[20376] app __x5__ = (CreateDataPropertyOrThrow importMeta p.Key p.Value)
Algo: ImportSpecifier[0,0].ImportEntriesForModule [1684]
  [20377] Entry[20377]
  [20378] (21275)Normal[20378] let ImportSpecifier = this
  [20379] (21279/2) Normal[20379] return (new [entry])
  [20380] Exit[20380]
  [20381] (21276/0) Call[20381] access __x0__ = (ImportedBinding "BoundNames")
  [20382] (21277/0) Normal[20382] let localName = __x0__[0i]
  [20383] (21278/1) Normal[20383] let entry = (new ImportEntryRecord("ModuleRequest" -> module, "ImportName" -> localName, "LocalName" -> localName))
Algo: ImportSpecifier[1,0].BoundNames [1685]
  [20384] Entry[20384]
  [20385] (21281)Normal[20385] let ImportSpecifier = this
  [20386] (21282/0) Call[20386] access __x0__ = (ImportedBinding "BoundNames")
  [20387] (21283/0) Normal[20387] return __x0__
  [20388] Exit[20388]
Algo: ImportSpecifier[1,0].ImportEntriesForModule [1686]
  [20389] Entry[20389]
  [20390] (21285)Normal[20390] let ImportSpecifier = this
  [20391] (21289/1) Normal[20391] let localName = __x1__
  [20392] (21290/2) Normal[20392] let entry = (new ImportEntryRecord("ModuleRequest" -> module, "ImportName" -> importName, "LocalName" -> localName))
  [20393] (21286/0) Call[20393] access __x0__ = (IdentifierName "StringValue")
  [20394] (21291/3) Normal[20394] return (new [entry])
  [20395] (21287/0) Normal[20395] let importName = __x0__
  [20396] Exit[20396]
  [20397] (21288/1) Call[20397] access __x1__ = (ImportedBinding "StringValue")
Algo: ImportedDefaultBinding[0,0].ImportEntriesForModule [1687]
  [20398] Entry[20398]
  [20399] (21293)Normal[20399] let ImportedDefaultBinding = this
  [20400] (21297/2) Normal[20400] return (new [defaultEntry])
  [20401] Exit[20401]
  [20402] (21294/0) Call[20402] access __x0__ = (ImportedBinding "BoundNames")
  [20403] (21295/0) Normal[20403] let localName = __x0__[0i]
  [20404] (21296/1) Normal[20404] let defaultEntry = (new ImportEntryRecord("ModuleRequest" -> module, "ImportName" -> "default", "LocalName" -> localName))
Algo: ImportedLocalNames [1688]
  [20405] Entry[20405]
  [20406] (21299/0) Normal[20406] let localNames = (new [])
  [20407] (21304/1) Normal[20407] let i = __x0__[__x1__]
  [20408] (21305/1) Normal[20408] __x1__ = (+ __x1__ 1i)
  [20409] (21300/1) Normal[20409] let __x0__ = importEntries
  [20410] (21306/2) Normal[20410] append i.LocalName -> localNames
  [20411] (21307/3) Normal[20411] return localNames
  [20412] Exit[20412]
  [20413] (21301/1) Normal[20413] let __x1__ = 0i
  [20414] LoopCont[20414]
  [20415] (21302/1) Loop[20415] (< __x1__ __x0__.length)
Algo: ImportsList[1,0].BoundNames [1689]
  [20416] Entry[20416]
  [20417] (21309/0) Call[20417] access __x0__ = (ImportsList "BoundNames")
  [20418] (21313/1) Normal[20418] let __x3__ = 0i
  [20419] (21314/1) Loop[20419] (< __x3__ __x2__.length)
  [20420] LoopCont[20420]
  [20421] (21310/0) Normal[20421] let names = __x0__
  [20422] (21316/1) Normal[20422] let __x4__ = __x2__[__x3__]
  [20423] (21319/2) Normal[20423] return names
  [20424] (21318/1) Normal[20424] append __x4__ -> names
  [20425] (21311/1) Call[20425] access __x1__ = (ImportSpecifier "BoundNames")
  [20426] (21317/1) Normal[20426] __x3__ = (+ __x3__ 1i)
  [20427] (21312/1) Normal[20427] let __x2__ = __x1__
  [20428] Exit[20428]
Algo: ImportsList[1,0].ImportEntriesForModule [1690]
  [20429] Entry[20429]
  [20430] (21321/0) Call[20430] access __x0__ = (ImportsList "ImportEntriesForModule" module)
  [20431] (21325/1) Normal[20431] let __x3__ = 0i
  [20432] (21326/1) Loop[20432] (< __x3__ __x2__.length)
  [20433] LoopCont[20433]
  [20434] (21322/0) Normal[20434] let specs = __x0__
  [20435] (21328/1) Normal[20435] let __x4__ = __x2__[__x3__]
  [20436] (21331/2) Normal[20436] return specs
  [20437] (21330/1) Normal[20437] append __x4__ -> specs
  [20438] (21323/1) Call[20438] access __x1__ = (ImportSpecifier "ImportEntriesForModule" module)
  [20439] (21329/1) Normal[20439] __x3__ = (+ __x3__ 1i)
  [20440] (21324/1) Normal[20440] let __x2__ = __x1__
  [20441] Exit[20441]
Algo: InLeapYear [1691]
  [20442] Entry[20442]
  [20443] (21333/0) Call[20443] app __x0__ = (YearFromTime t)
  [20444] (21338/1) Call[20444] app __x2__ = (YearFromTime t)
  [20445] (21339/1) Call[20445] app __x3__ = (DaysInYear __x2__)
  [20446] (21334/0) Call[20446] app __x1__ = (DaysInYear __x0__)
  [20447] (21340/1) If[20447] (== __x3__ 366i)
  [20448] (21335/0) If[20448] (== __x1__ 365i)
  [20449] (21341/1) Normal[20449] return 1i
  [20450] Exit[20450]
  [20451] (21336/0) Normal[20451] return 0i
Algo: InitializeBoundName [1692]
  [20452] Entry[20452]
  [20453] (21344/0) Normal[20453] assert (= (typeof name) String)
  [20454] (21349/3) Normal[20454] return undefined
  [20455] Exit[20455]
  [20456] (21345/1) If[20456] (! (= environment undefined))
  [20457] (21351/5) Call[20457] app __x1__ = (ResolveBinding name)
  [20458] (21352/5) Normal[20458] let lhs = __x1__
  [20459] (21354/6) Normal[20459] return [? __x2__]
  [20460] (21347/2) Call[20460] app __x0__ = (environment.InitializeBinding environment name value)
  [20461] (21353/6) Call[20461] app __x2__ = (PutValue lhs value)
  [20462] (21348/2) Normal[20462] __x0__
Algo: InitializeEnvironment [1693]
  [20463] (21361/0) Normal[20463] __x1__ = (+ __x1__ 1i)
  [20464] (21362/1) Call[20464] app __x2__ = (module.ResolveExport module e.ExportName)
  [20465] (21448/44) Normal[20465] __x25__ = (+ __x25__ 1i)
  [20466] (21449/45) Call[20466] access __x26__ = (d "BoundNames")
  [20467] (21432/38) Normal[20467] __x20__ = (+ __x20__ 1i)
  [20468] (21433/39) If[20468] (! (contains declaredVarNames dn))
  [20469] (21469/52) Normal[20469] __x33__
  [20470] LoopCont[20470]
  [20471] Entry[20471]
  [20472] (21356/0) Normal[20472] let __x0__ = module.IndirectExportEntries
  [20473] (21452/45) Loop[20473] (< __x28__ __x27__.length)
  [20474] (21454/45) Normal[20474] let dn = __x27__[__x28__]
  [20475] LoopCont[20475]
  [20476] (21367/3) Normal[20476] assert (is-instance-of resolution ResolvedBindingRecord)
  [20477] LoopCont[20477]
  [20478] (21417/35) Call[20478] access __x15__ = (code "VarScopedDeclarations")
  [20479] (21418/35) Normal[20479] let varDeclarations = __x15__
  [20480] (21404/24) Call[20480] app __x14__ = (env.CreateImportBinding env in.LocalName resolution.Module resolution.BindingName)
  [20481] (21405/24) Normal[20481] __x14__
  [20482] (21381/12) If[20482] (= in.ImportName "*")
  [20483] (21383/13) Call[20483] app __x7__ = (GetModuleNamespace importedModule)
  [20484] (21390/17) Call[20484] app __x10__ = (importedModule.ResolveExport importedModule in.ImportName)
  [20485] (21398/20) Normal[20485] let namespace = [? __x11__]
  [20486] (21399/21) Call[20486] app __x12__ = (env.CreateImmutableBinding env in.LocalName true)
  [20487] (21384/13) Normal[20487] let namespace = [? __x7__]
  [20488] (21413/32) Normal[20488] module.Context = moduleContext
  [20489] (21414/33) Normal[20489] append moduleContext -> EXECUTION_STACK
  [20490] (21370/7) Call[20490] app __x3__ = (NewModuleEnvironment realm.GlobalEnv)
  [20491] (21371/7) Normal[20491] let env = __x3__
  [20492] (21377/9) Normal[20492] let in = __x4__[__x5__]
  [20493] (21378/9) Normal[20493] __x5__ = (+ __x5__ 1i)
  [20494] (21407/26) Normal[20494] moduleContext.Function = null
  [20495] (21408/27) Normal[20495] assert (! (= module.Realm undefined))
  [20496] (21459/47) Call[20496] app __x30__ = (env.CreateImmutableBinding env dn true)
  [20497] (21460/47) Normal[20497] [! __x30__]
  [20498] (21419/36) Normal[20498] let declaredVarNames = (new [])
  [20499] (21441/43) Call[20499] access __x23__ = (code "LexicallyScopedDeclarations")
  [20500] (21442/43) Normal[20500] let lexDeclarations = __x23__
  [20501] (21387/15) Call[20501] app __x9__ = (env.InitializeBinding env in.LocalName namespace)
  [20502] (21388/15) Normal[20502] __x9__
  [20503] (21422/37) Loop[20503] (< __x17__ __x16__.length)
  [20504] (21424/37) Normal[20504] let d = __x16__[__x17__]
  [20505] (21455/45) Normal[20505] __x28__ = (+ __x28__ 1i)
  [20506] (21357/0) Normal[20506] let __x1__ = 0i
  [20507] (21438/41) Normal[20507] __x22__
  [20508] (21439/42) Normal[20508] append dn -> declaredVarNames
  [20509] (21363/1) Normal[20509] let resolution = [? __x2__]
  [20510] (21421/37) Normal[20510] let __x17__ = 0i
  [20511] (21450/45) Normal[20511] let __x27__ = __x26__
  [20512] (21435/40) Call[20512] app __x21__ = (env.CreateMutableBinding env dn false)
  [20513] LoopCont[20513]
  [20514] (21379/10) Call[20514] app __x6__ = (HostResolveImportedModule module in.ModuleRequest)
  [20515] (21392/18) If[20515] (|| (= resolution null) (= resolution "ambiguous"))
  [20516] (21393/18) Normal[20516] throw SyntaxError
  [20517] (21395/19) If[20517] (= resolution.BindingName "*namespace*")
  [20518] (21386/14) Normal[20518] [! __x8__]
  [20519] (21400/21) Normal[20519] [! __x12__]
  [20520] (21457/46) If[20520] (= __x29__ true)
  [20521] (21462/49) Call[20521] app __x31__ = (env.CreateMutableBinding env dn false)
  [20522] (21427/38) Normal[20522] let __x19__ = __x18__
  [20523] (21428/38) Normal[20523] let __x20__ = 0i
  [20524] (21464/50) If[20524] (|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration))
  [20525] (21466/51) Call[20525] access __x32__ = (d "InstantiateFunctionObject" env)
  [20526] (21365/2) Normal[20526] throw SyntaxError
  [20527] (21415/33) Normal[20527] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [20528] LoopCont[20528]
  [20529] (21463/49) Normal[20529] [! __x31__]
  [20530] (21369/6) Normal[20530] assert (! (= realm undefined))
  [20531] (21402/22) Normal[20531] __x13__
  [20532] LoopCont[20532]
  [20533] (21437/41) Call[20533] app __x22__ = (env.InitializeBinding env dn undefined)
  [20534] (21472/54) Normal[20534] return ~empty~
  [20535] Exit[20535]
  [20536] (21358/0) Loop[20536] (< __x1__ __x0__.length)
  [20537] (21406/25) Normal[20537] let moduleContext = (new ExecutionContext())
  [20538] (21426/38) Call[20538] access __x18__ = (d "BoundNames")
  [20539] (21373/9) Normal[20539] let __x4__ = module.ImportEntries
  [20540] (21374/9) Normal[20540] let __x5__ = 0i
  [20541] (21391/17) Normal[20541] let resolution = [? __x10__]
  [20542] (21380/10) Normal[20542] let importedModule = [! __x6__]
  [20543] (21375/9) Loop[20543] (< __x5__ __x4__.length)
  [20544] (21420/37) Normal[20544] let __x16__ = varDeclarations
  [20545] (21385/14) Call[20545] app __x8__ = (env.CreateImmutableBinding env in.LocalName true)
  [20546] (21436/40) Normal[20546] [! __x21__]
  [20547] (21368/5) Normal[20547] let realm = module.Realm
  [20548] (21416/34) Normal[20548] let code = module.ECMAScriptCode
  [20549] (21410/29) Normal[20549] moduleContext.ScriptOrModule = module
  [20550] (21411/30) Normal[20550] moduleContext.VariableEnvironment = module.Environment
  [20551] (21451/45) Normal[20551] let __x28__ = 0i
  [20552] (21444/44) Normal[20552] let __x25__ = 0i
  [20553] (21445/44) Loop[20553] (< __x25__ __x24__.length)
  [20554] (21429/38) Loop[20554] (< __x20__ __x19__.length)
  [20555] (21364/2) If[20555] (|| (= resolution null) (= resolution "ambiguous"))
  [20556] (21401/22) Call[20556] app __x13__ = (env.InitializeBinding env in.LocalName namespace)
  [20557] (21467/51) Normal[20557] let fo = __x32__
  [20558] (21456/46) Call[20558] access __x29__ = (d "IsConstantDeclaration")
  [20559] (21360/0) Normal[20559] let e = __x0__[__x1__]
  [20560] (21443/44) Normal[20560] let __x24__ = lexDeclarations
  [20561] (21397/20) Call[20561] app __x11__ = (GetModuleNamespace resolution.Module)
  [20562] (21409/28) Normal[20562] moduleContext.Realm = module.Realm
  [20563] (21425/37) Normal[20563] __x17__ = (+ __x17__ 1i)
  [20564] (21412/31) Normal[20564] moduleContext.LexicalEnvironment = module.Environment
  [20565] (21431/38) Normal[20565] let dn = __x19__[__x20__]
  [20566] (21372/8) Normal[20566] module.Environment = env
  [20567] (21468/52) Call[20567] app __x33__ = (env.InitializeBinding env dn fo)
  [20568] (21471/53) Normal[20568] ??? "Remove id:{moduleContext} from the execution context stack ."
  [20569] (21447/44) Normal[20569] let d = __x24__[__x25__]
Algo: InitializeHostDefinedRealm [1694]
  [20570] Entry[20570]
  [20571] (21474/0) Call[20571] app __x0__ = (CreateRealm)
  [20572] (21478/3) Normal[20572] newContext.Realm = realm
  [20573] (21479/4) Normal[20573] newContext.ScriptOrModule = null
  [20574] (21483/7) Normal[20574] let thisValue = undefined
  [20575] (21484/8) Call[20575] app __x1__ = (SetRealmGlobalObject realm global thisValue)
  [20576] (21487/9) Normal[20576] let globalObj = [? __x2__]
  [20577] (21488/11) Normal[20577] return ~empty~
  [20578] (21475/0) Normal[20578] let realm = __x0__
  [20579] (21480/5) Normal[20579] append newContext -> EXECUTION_STACK
  [20580] (21482/6) Normal[20580] let global = undefined
  [20581] (21486/9) Call[20581] app __x2__ = (SetDefaultGlobalBindings realm)
  [20582] (21476/1) Normal[20582] let newContext = (new ExecutionContext())
  [20583] (21485/8) Normal[20583] __x1__
  [20584] (21481/5) Normal[20584] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [20585] (21477/2) Normal[20585] newContext.Function = null
  [20586] Exit[20586]
Algo: InitializeReferencedBinding [1695]
  [20587] Entry[20587]
  [20588] (21490/0) Normal[20588] [? V]
  [20589] (21494/3) Normal[20589] assert (= __x0__ false)
  [20590] (21495/4) Normal[20590] let base = V.Base
  [20591] (21491/1) Normal[20591] [? W]
  [20592] (21496/5) Normal[20592] assert (is-instance-of base EnvironmentRecord)
  [20593] (21498/6) Normal[20593] return __x1__
  [20594] Exit[20594]
  [20595] (21492/2) Normal[20595] assert (is-instance-of V ReferenceRecord)
  [20596] (21497/6) Call[20596] app __x1__ = (base.InitializeBinding base V.ReferencedName W)
  [20597] (21493/3) Call[20597] app __x0__ = (IsUnresolvableReference V)
Algo: InitializeTypedArrayFromArrayBuffer [1696]
  [20598] Entry[20598]
  [20599] (21500/2) Normal[20599] let constructorName = O.TypedArrayName
  [20600] (21504/5) If[20600] (! (== (%% offset elementSize) 0i))
  [20601] (21505/5) Normal[20601] throw RangeError
  [20602] (21507/6) If[20602] (! (= length undefined))
  [20603] (21512/8) Call[20603] app __x2__ = (IsDetachedBuffer buffer)
  [20604] (21513/8) If[20604] (= __x2__ true)
  [20605] (21517/10) If[20605] (= length undefined)
  [20606] (21519/11) If[20606] (! (== (%% bufferByteLength elementSize) 0i))
  [20607] (21527/15) Normal[20607] let newByteLength = (* newLength elementSize)
  [20608] (21528/16) If[20608] (< bufferByteLength (+ offset newByteLength))
  [20609] (21501/3) Normal[20609] ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for id:{constructorName} ."
  [20610] (21529/16) Normal[20610] throw RangeError
  [20611] (21531/17) Normal[20611] O.ViewedArrayBuffer = buffer
  [20612] (21510/7) Normal[20612] let newLength = [? __x1__]
  [20613] (21516/9) Normal[20613] let bufferByteLength = buffer.ArrayBufferByteLength
  [20614] (21502/4) Call[20614] app __x0__ = (ToIndex byteOffset)
  [20615] (21522/12) Normal[20615] let newByteLength = (- bufferByteLength offset)
  [20616] (21523/13) If[20616] (< newByteLength 0i)
  [20617] (21514/8) Normal[20617] throw TypeError
  [20618] (21509/7) Call[20618] app __x1__ = (ToIndex length)
  [20619] (21503/4) Normal[20619] let offset = [? __x0__]
  [20620] (21524/13) Normal[20620] throw RangeError
  [20621] (21520/11) Normal[20621] throw RangeError
  [20622] (21532/18) Normal[20622] O.ByteLength = newByteLength
  [20623] (21533/19) Normal[20623] O.ByteOffset = offset
  [20624] (21534/20) Normal[20624] O.ArrayLength = (/ newByteLength elementSize)
  [20625] Exit[20625]
Algo: InitializeTypedArrayFromArrayLike [1697]
  [20626] Entry[20626]
  [20627] (21536/1) Call[20627] app __x0__ = (LengthOfArrayLike arrayLike)
  [20628] (21540/3) Normal[20628] let k = 0i
  [20629] (21541/4) Loop[20629] (< k len)
  [20630] (21546/6) Normal[20630] let kValue = [? __x3__]
  [20631] (21547/7) Call[20631] app __x4__ = (Set O Pk kValue true)
  [20632] LoopCont[20632]
  [20633] (21537/1) Normal[20633] let len = [? __x0__]
  [20634] (21543/5) Call[20634] app __x2__ = (ToString k)
  [20635] Exit[20635]
  [20636] (21545/6) Call[20636] app __x3__ = (Get arrayLike Pk)
  [20637] (21549/8) Normal[20637] k = (+ k 1i)
  [20638] (21538/2) Call[20638] app __x1__ = (AllocateTypedArrayBuffer O len)
  [20639] (21548/7) Normal[20639] [? __x4__]
  [20640] (21544/5) Normal[20640] let Pk = [! __x2__]
  [20641] (21539/2) Normal[20641] [? __x1__]
Algo: InitializeTypedArrayFromList [1698]
  [20642] Entry[20642]
  [20643] (21551/1) Normal[20643] let len = values.length
  [20644] (21555/4) Loop[20644] (< k len)
  [20645] (21557/5) Call[20645] app __x1__ = (ToString k)
  [20646] Exit[20646]
  [20647] (21561/7) Normal[20647] [? __x2__]
  [20648] (21562/8) Normal[20648] k = (+ k 1i)
  [20649] (21552/2) Call[20649] app __x0__ = (AllocateTypedArrayBuffer O len)
  [20650] (21558/5) Normal[20650] let Pk = [! __x1__]
  [20651] (21560/7) Call[20651] app __x2__ = (Set O Pk kValue true)
  [20652] (21553/2) Normal[20652] [? __x0__]
  [20653] LoopCont[20653]
  [20654] (21559/6) Normal[20654] let kValue = (pop values 0i)
  [20655] (21554/3) Normal[20655] let k = 0i
Algo: InitializeTypedArrayFromTypedArray [1699]
  [20656] Entry[20656]
  [20657] (21564/2) Normal[20657] let srcData = srcArray.ViewedArrayBuffer
  [20658] (21569/4) Normal[20658] let constructorName = O.TypedArrayName
  [20659] (21570/5) Normal[20659] ??? "Let id:{elementType} be the Element Type value in link:{table-the-typedarray-constructors} for id:{constructorName} ."
  [20660] (21574/9) Normal[20660] ??? "Let id:{srcElementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for id:{srcName} ."
  [20661] (21575/10) Normal[20661] let srcByteOffset = srcArray.ByteOffset
  [20662] (21578/13) Call[20662] app __x1__ = (IsSharedArrayBuffer srcData)
  [20663] (21579/13) If[20663] (= __x1__ false)
  [20664] (21565/3) Call[20664] app __x0__ = (IsDetachedBuffer srcData)
  [20665] (21571/6) Normal[20665] let elementLength = srcArray.ArrayLength
  [20666] (21573/8) Normal[20666] ??? "Let id:{srcType} be the Element Type value in link:{table-the-typedarray-constructors} for id:{srcName} ."
  [20667] (21566/3) If[20667] (= __x0__ true)
  [20668] (21576/11) Normal[20668] ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for id:{constructorName} ."
  [20669] (21577/12) Normal[20669] let byteLength = (* elementSize elementLength)
  [20670] (21583/13) Normal[20670] let bufferConstructor = INTRINSICS["%ArrayBuffer%"]
  [20671] (21584/17) If[20671] (= elementType srcType)
  [20672] (21572/7) Normal[20672] let srcName = srcArray.TypedArrayName
  [20673] (21567/3) Normal[20673] throw TypeError
  [20674] (21581/14) Call[20674] app __x2__ = (SpeciesConstructor srcData INTRINSICS["%ArrayBuffer%"])
  [20675] (21611/33) Normal[20675] O.ByteLength = byteLength
  [20676] (21612/34) Normal[20676] O.ByteOffset = 0i
  [20677] (21591/21) Call[20677] app __x5__ = (IsDetachedBuffer srcData)
  [20678] (21592/21) If[20678] (= __x5__ true)
  [20679] (21607/29) Normal[20679] srcByteIndex = (+ srcByteIndex srcElementSize)
  [20680] (21608/30) Normal[20680] targetByteIndex = (+ targetByteIndex elementSize)
  [20681] (21593/21) Normal[20681] throw TypeError
  [20682] (21595/22) If[20682] (! (== srcArray.ContentType O.ContentType))
  [20683] (21586/18) Call[20683] app __x3__ = (CloneArrayBuffer srcData srcByteOffset byteLength bufferConstructor)
  [20684] (21587/18) Normal[20684] let data = [? __x3__]
  [20685] (21598/23) Normal[20685] let srcByteIndex = srcByteOffset
  [20686] (21599/24) Normal[20686] let targetByteIndex = 0i
  [20687] (21610/32) Normal[20687] O.ViewedArrayBuffer = data
  [20688] (21603/27) Call[20688] app __x6__ = (GetValueFromBuffer srcData srcByteIndex srcType true ~Unordered~)
  [20689] (21604/27) Normal[20689] let value = __x6__
  [20690] (21596/22) Normal[20690] throw TypeError
  [20691] (21609/31) Normal[20691] count = (- count 1i)
  [20692] (21582/14) Normal[20692] let bufferConstructor = [? __x2__]
  [20693] (21601/26) Loop[20693] (< 0i count)
  [20694] (21605/28) Call[20694] app __x7__ = (SetValueInBuffer data targetByteIndex elementType value true ~Unordered~)
  [20695] (21589/20) Call[20695] app __x4__ = (AllocateArrayBuffer bufferConstructor byteLength)
  [20696] (21590/20) Normal[20696] let data = [? __x4__]
  [20697] (21613/35) Normal[20697] O.ArrayLength = elementLength
  [20698] Exit[20698]
  [20699] LoopCont[20699]
  [20700] (21606/28) Normal[20700] __x7__
  [20701] (21600/25) Normal[20701] let count = elementLength
Algo: InnerModuleEvaluation [1700]
  [20702] Entry[20702]
  [20703] (21615/0) If[20703] (! (is-instance-of module CyclicModuleRecord))
  [20704] (21621/3) If[20704] (= module.Status ~evaluated~)
  [20705] (21622/4) If[20705] (= module.EvaluationError undefined)
  [20706] (21626/6) If[20706] (= module.Status ~evaluating~)
  [20707] (21627/6) Normal[20707] return index
  [20708] (21629/7) Normal[20708] assert (= module.Status ~linked~)
  [20709] (21632/10) Normal[20709] module.DFSAncestorIndex = index
  [20710] (21633/11) Normal[20710] index = (+ index 1i)
  [20711] (21617/1) Call[20711] app __x0__ = (module.Evaluate module)
  [20712] (21623/4) Normal[20712] return index
  [20713] (21624/4) Normal[20713] return module.EvaluationError
  [20714] (21618/1) Normal[20714] [? __x0__]
  [20715] (21630/8) Normal[20715] module.Status = ~evaluating~
  [20716] (21631/9) Normal[20716] module.DFSIndex = index
  [20717] (21636/13) Normal[20717] let __x2__ = 0i
  [20718] (21637/13) Loop[20718] (< __x2__ __x1__.length)
  [20719] (21619/2) Normal[20719] return index
  [20720] (21634/12) Normal[20720] append module -> stack
  [20721] (21666/32) If[20721] (= requiredModule module)
  [20722] (21667/32) Normal[20722] done = true
  [20723] LoopCont[20723]
  [20724] (21643/16) Call[20724] app __x4__ = (InnerModuleEvaluation requiredModule stack index)
  [20725] (21644/16) Normal[20725] index = [? __x4__]
  [20726] (21660/27) Loop[20726] (= done false)
  [20727] (21662/28) Normal[20727] let requiredModule = stack[(- stack.length 1i)]
  [20728] (21670/33) Normal[20728] return index
  [20729] (21645/17) If[20729] (is-instance-of requiredModule CyclicModuleRecord)
  [20730] (21639/13) Normal[20730] let required = __x1__[__x2__]
  [20731] (21640/13) Normal[20731] __x2__ = (+ __x2__ 1i)
  [20732] (21650/21) Call[20732] app __x5__ = (min module.DFSAncestorIndex requiredModule.DFSAncestorIndex)
  [20733] (21651/21) Normal[20733] module.DFSAncestorIndex = __x5__
  [20734] (21641/14) Call[20734] app __x3__ = (HostResolveImportedModule module required)
  [20735] (21655/22) Normal[20735] [? __x6__]
  [20736] (21656/24) Normal[20736] assert (! (< module.DFSIndex module.DFSAncestorIndex))
  [20737] (21648/20) If[20737] (= requiredModule.Status ~evaluating~)
  [20738] LoopCont[20738]
  [20739] (21663/29) Normal[20739] (pop stack (- stack.length 1i))
  [20740] (21665/31) Normal[20740] requiredModule.Status = ~evaluated~
  [20741] Exit[20741]
  [20742] (21635/13) Normal[20742] let __x1__ = module.RequestedModules
  [20743] (21654/22) Call[20743] app __x6__ = (module.ExecuteModule module)
  [20744] (21657/25) If[20744] (== module.DFSAncestorIndex module.DFSIndex)
  [20745] (21642/14) Normal[20745] let requiredModule = [! __x3__]
  [20746] (21647/18) Normal[20746] assert (|| (= requiredModule.Status ~evaluating~) (= requiredModule.Status ~evaluated~))
  [20747] (21664/30) Normal[20747] assert (is-instance-of requiredModule CyclicModuleRecord)
  [20748] (21659/26) Normal[20748] let done = false
Algo: InnerModuleLinking [1701]
  [20749] Entry[20749]
  [20750] (21672/0) If[20750] (! (is-instance-of module CyclicModuleRecord))
  [20751] (21678/3) If[20751] (|| (|| (= module.Status ~linking~) (= module.Status ~linked~)) (= module.Status ~evaluated~))
  [20752] (21679/4) Normal[20752] return index
  [20753] (21681/5) Normal[20753] assert (= module.Status ~unlinked~)
  [20754] (21684/8) Normal[20754] module.DFSAncestorIndex = index
  [20755] (21685/9) Normal[20755] index = (+ index 1i)
  [20756] (21688/11) Normal[20756] let __x2__ = 0i
  [20757] (21689/11) Loop[20757] (< __x2__ __x1__.length)
  [20758] (21674/1) Call[20758] app __x0__ = (module.Link module)
  [20759] (21683/7) Normal[20759] module.DFSIndex = index
  [20760] (21675/1) Normal[20760] [? __x0__]
  [20761] (21686/10) Normal[20761] append module -> stack
  [20762] (21687/11) Normal[20762] let __x1__ = module.RequestedModules
  [20763] (21693/12) Call[20763] app __x3__ = (HostResolveImportedModule module required)
  [20764] (21694/12) Normal[20764] let requiredModule = [? __x3__]
  [20765] (21682/6) Normal[20765] module.Status = ~linking~
  [20766] (21676/2) Normal[20766] return index
  [20767] (21691/11) Normal[20767] let required = __x1__[__x2__]
  [20768] (21706/19) Call[20768] app __x6__ = (module.InitializeEnvironment module)
  [20769] (21700/17) If[20769] (= requiredModule.Status ~linking~)
  [20770] (21702/18) Call[20770] app __x5__ = (min module.DFSAncestorIndex requiredModule.DFSAncestorIndex)
  [20771] LoopCont[20771]
  [20772] (21717/28) Normal[20772] requiredModule.Status = ~linked~
  [20773] (21718/29) If[20773] (= requiredModule module)
  [20774] (21703/18) Normal[20774] module.DFSAncestorIndex = __x5__
  [20775] (21695/13) Call[20775] app __x4__ = (InnerModuleLinking requiredModule stack index)
  [20776] (21696/13) Normal[20776] index = [? __x4__]
  [20777] (21707/19) Normal[20777] [? __x6__]
  [20778] (21708/21) Normal[20778] assert (! (< module.DFSIndex module.DFSAncestorIndex))
  [20779] (21697/14) If[20779] (is-instance-of requiredModule CyclicModuleRecord)
  [20780] (21712/24) Loop[20780] (= done false)
  [20781] (21714/25) Normal[20781] let requiredModule = stack[(- stack.length 1i)]
  [20782] (21722/30) Normal[20782] return index
  [20783] (21719/29) Normal[20783] done = true
  [20784] LoopCont[20784]
  [20785] Exit[20785]
  [20786] (21692/11) Normal[20786] __x2__ = (+ __x2__ 1i)
  [20787] (21711/23) Normal[20787] let done = false
  [20788] (21715/26) Normal[20788] (pop stack (- stack.length 1i))
  [20789] (21699/15) Normal[20789] assert (|| (|| (= requiredModule.Status ~linking~) (= requiredModule.Status ~linked~)) (= requiredModule.Status ~evaluated~))
  [20790] (21716/27) Normal[20790] assert (is-instance-of requiredModule CyclicModuleRecord)
  [20791] (21709/22) If[20791] (== module.DFSAncestorIndex module.DFSIndex)
Algo: InstanceofOperator [1702]
  [20792] Entry[20792]
  [20793] (21724/0) If[20793] (! (= (typeof target) Object))
  [20794] (21729/2) If[20794] (! (= instOfHandler undefined))
  [20795] (21731/3) Call[20795] app __x1__ = (Call instOfHandler target (new [V]))
  [20796] (21735/4) Call[20796] app __x3__ = (IsCallable target)
  [20797] (21736/4) If[20797] (= __x3__ false)
  [20798] (21737/4) Normal[20798] throw TypeError
  [20799] (21739/5) Call[20799] app __x4__ = (OrdinaryHasInstance target V)
  [20800] (21725/0) Normal[20800] throw TypeError
  [20801] (21727/1) Call[20801] app __x0__ = (GetMethod target SYMBOL_hasInstance)
  [20802] (21732/3) Call[20802] app __x2__ = (ToBoolean [? __x1__])
  [20803] (21740/5) Normal[20803] return [? __x4__]
  [20804] Exit[20804]
  [20805] (21733/3) Normal[20805] return [! __x2__]
  [20806] (21728/1) Normal[20806] let instOfHandler = [? __x0__]
Algo: IntegerIndexedElementGet [1703]
  [20807] Entry[20807]
  [20808] (21742/1) Call[20808] app __x0__ = (IsValidIntegerIndex O index)
  [20809] (21747/3) Normal[20809] let arrayTypeName = O.TypedArrayName
  [20810] (21748/4) Normal[20810] ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for id:{arrayTypeName} ."
  [20811] (21752/7) Normal[20811] return __x1__
  [20812] Exit[20812]
  [20813] (21743/1) If[20813] (= [! __x0__] false)
  [20814] (21749/5) Normal[20814] let indexedPosition = (+ (* index elementSize) offset)
  [20815] (21751/7) Call[20815] app __x1__ = (GetValueFromBuffer O.ViewedArrayBuffer indexedPosition elementType true ~Unordered~)
  [20816] (21744/1) Normal[20816] return undefined
  [20817] (21746/2) Normal[20817] let offset = O.ByteOffset
  [20818] (21750/6) Normal[20818] let elementType = ~Int8~
Algo: IntegerIndexedElementSet [1704]
  [20819] Entry[20819]
  [20820] (21754/1) If[20820] (= O.ContentType ~BigInt~)
  [20821] (21760/2) Normal[20821] let numValue = [? __x1__]
  [20822] (21761/3) Call[20822] app __x2__ = (IsValidIntegerIndex O index)
  [20823] (21766/6) Normal[20823] ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for id:{arrayTypeName} ."
  [20824] (21767/7) Normal[20824] let indexedPosition = (+ (* index elementSize) offset)
  [20825] (21770/9) Normal[20825] __x3__
  [20826] (21772/10) Normal[20826] return undefined
  [20827] (21756/1) Call[20827] app __x0__ = (ToBigInt value)
  [20828] (21759/2) Call[20828] app __x1__ = (ToNumber value)
  [20829] (21762/3) If[20829] (= [! __x2__] true)
  [20830] (21765/5) Normal[20830] let arrayTypeName = O.TypedArrayName
  [20831] (21769/9) Call[20831] app __x3__ = (SetValueInBuffer O.ViewedArrayBuffer indexedPosition elementType numValue true ~Unordered~)
  [20832] (21757/1) Normal[20832] let numValue = [? __x0__]
  [20833] (21768/6) Normal[20833] let elementType = ~Int8~
  [20834] (21764/4) Normal[20834] let offset = O.ByteOffset
  [20835] Exit[20835]
Algo: IntegerIndexedExoticObject.DefineOwnProperty [1705]
  [20836] Entry[20836]
  [20837] (21774/0) Call[20837] app __x0__ = (IsPropertyKey P)
  [20838] (21779/3) Normal[20838] let numericIndex = [! __x1__]
  [20839] (21780/4) If[20839] (! (= numericIndex undefined))
  [20840] (21786/6) If[20840] (&& (! (= Desc.Configurable absent)) (= Desc.Configurable false))
  [20841] (21787/6) Normal[20841] return false
  [20842] (21789/7) If[20842] (&& (! (= Desc.Enumerable absent)) (= Desc.Enumerable false))
  [20843] (21808/12) Normal[20843] return [! __x5__]
  [20844] Exit[20844]
  [20845] (21792/8) Call[20845] app __x3__ = (IsAccessorDescriptor Desc)
  [20846] (21793/8) If[20846] (= [! __x3__] true)
  [20847] (21801/10) Call[20847] app __x4__ = (IntegerIndexedElementSet O numericIndex Desc.Value)
  [20848] (21802/10) Normal[20848] [? __x4__]
  [20849] (21775/0) Normal[20849] assert (= __x0__ true)
  [20850] (21782/5) Call[20850] app __x2__ = (IsValidIntegerIndex O numericIndex)
  [20851] (21807/12) Call[20851] app __x5__ = (OrdinaryDefineOwnProperty O P Desc)
  [20852] (21804/11) Normal[20852] return true
  [20853] (21784/5) Normal[20853] return false
  [20854] (21790/7) Normal[20854] return false
  [20855] (21776/2) If[20855] (= (typeof P) String)
  [20856] (21796/9) If[20856] (&& (! (= Desc.Writable absent)) (= Desc.Writable false))
  [20857] (21797/9) Normal[20857] return false
  [20858] (21799/10) If[20858] (! (= Desc.Value absent))
  [20859] (21783/5) If[20859] (= [! __x2__] false)
  [20860] (21778/3) Call[20860] app __x1__ = (CanonicalNumericIndexString P)
  [20861] (21794/8) Normal[20861] return false
Algo: IntegerIndexedExoticObject.Delete [1706]
  [20862] Entry[20862]
  [20863] (21810/0) Call[20863] app __x0__ = (IsPropertyKey P)
  [20864] (21815/3) Normal[20864] let numericIndex = [! __x1__]
  [20865] (21816/4) If[20865] (! (= numericIndex undefined))
  [20866] (21821/5) Normal[20866] return false
  [20867] (21824/6) Call[20867] app __x3__ = (OrdinaryDelete O P)
  [20868] (21811/0) Normal[20868] assert (= __x0__ true)
  [20869] (21818/5) Call[20869] app __x2__ = (IsValidIntegerIndex O numericIndex)
  [20870] (21820/5) Normal[20870] return true
  [20871] (21812/2) If[20871] (= (typeof P) String)
  [20872] (21825/6) Normal[20872] return [? __x3__]
  [20873] Exit[20873]
  [20874] (21819/5) If[20874] (= [! __x2__] false)
  [20875] (21814/3) Call[20875] app __x1__ = (CanonicalNumericIndexString P)
Algo: IntegerIndexedExoticObject.Get [1707]
  [20876] Entry[20876]
  [20877] (21827/0) Call[20877] app __x0__ = (IsPropertyKey P)
  [20878] (21832/2) Normal[20878] let numericIndex = [! __x1__]
  [20879] (21833/3) If[20879] (! (= numericIndex undefined))
  [20880] (21840/5) Normal[20880] return [? __x3__]
  [20881] Exit[20881]
  [20882] (21828/0) Normal[20882] assert (= __x0__ true)
  [20883] (21835/4) Call[20883] app __x2__ = (IntegerIndexedElementGet O numericIndex)
  [20884] (21839/5) Call[20884] app __x3__ = (OrdinaryGet O P Receiver)
  [20885] (21829/1) If[20885] (= (typeof P) String)
  [20886] (21836/4) Normal[20886] return [! __x2__]
  [20887] (21831/2) Call[20887] app __x1__ = (CanonicalNumericIndexString P)
Algo: IntegerIndexedExoticObject.GetOwnProperty [1708]
  [20888] Entry[20888]
  [20889] (21842/0) Call[20889] app __x0__ = (IsPropertyKey P)
  [20890] (21847/3) Normal[20890] let numericIndex = [! __x1__]
  [20891] (21848/4) If[20891] (! (= numericIndex undefined))
  [20892] (21853/6) Normal[20892] return undefined
  [20893] (21855/7) Normal[20893] return (new PropertyDescriptor("Value" -> value, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true))
  [20894] (21843/0) Normal[20894] assert (= __x0__ true)
  [20895] (21850/5) Call[20895] app __x2__ = (IntegerIndexedElementGet O numericIndex)
  [20896] (21858/8) Call[20896] app __x3__ = (OrdinaryGetOwnProperty O P)
  [20897] (21852/6) If[20897] (= value undefined)
  [20898] (21859/8) Normal[20898] return __x3__
  [20899] Exit[20899]
  [20900] (21844/2) If[20900] (= (typeof P) String)
  [20901] (21851/5) Normal[20901] let value = [! __x2__]
  [20902] (21846/3) Call[20902] app __x1__ = (CanonicalNumericIndexString P)
Algo: IntegerIndexedExoticObject.HasProperty [1709]
  [20903] Entry[20903]
  [20904] (21861/0) Call[20904] app __x0__ = (IsPropertyKey P)
  [20905] (21866/3) Normal[20905] let numericIndex = [! __x1__]
  [20906] (21867/4) If[20906] (! (= numericIndex undefined))
  [20907] (21874/5) Normal[20907] return [? __x3__]
  [20908] Exit[20908]
  [20909] (21862/0) Normal[20909] assert (= __x0__ true)
  [20910] (21869/4) Call[20910] app __x2__ = (IsValidIntegerIndex O numericIndex)
  [20911] (21873/5) Call[20911] app __x3__ = (OrdinaryHasProperty O P)
  [20912] (21863/2) If[20912] (= (typeof P) String)
  [20913] (21870/4) Normal[20913] return [! __x2__]
  [20914] (21865/3) Call[20914] app __x1__ = (CanonicalNumericIndexString P)
Algo: IntegerIndexedExoticObject.OwnPropertyKeys [1710]
  [20915] Entry[20915]
  [20916] (21876/0) Normal[20916] let keys = (new [])
  [20917] (21881/3) Normal[20917] let __x1__ = (+ O.ArrayLength 0i)
  [20918] (21882/3) Loop[20918] (< i __x1__)
  [20919] LoopCont[20919]
  [20920] (21877/2) Call[20920] app __x0__ = (IsDetachedBuffer O.ViewedArrayBuffer)
  [20921] (21884/3) Call[20921] app __x2__ = (ToString i)
  [20922] (21888/5) Normal[20922] ??? "For each own property key id:{P} of id:{O} such that Type ( id:{P} ) is String and id:{P} is not an integer index , in ascending chronological order of property creation , do in:{} out:{}"
  [20923] (21886/3) Normal[20923] i = (+ i 1i)
  [20924] (21890/9) Normal[20924] return keys
  [20925] Exit[20925]
  [20926] (21878/2) If[20926] (= __x0__ false)
  [20927] (21889/7) Normal[20927] ??? "For each own property key id:{P} of id:{O} such that Type ( id:{P} ) is Symbol , in ascending chronological order of property creation , do in:{} out:{}"
  [20928] (21885/3) Normal[20928] append [! __x2__] -> keys
  [20929] (21880/3) Normal[20929] let i = (+ 0i 0i)
Algo: IntegerIndexedExoticObject.Set [1711]
  [20930] Entry[20930]
  [20931] (21892/0) Call[20931] app __x0__ = (IsPropertyKey P)
  [20932] (21897/2) Normal[20932] let numericIndex = [! __x1__]
  [20933] (21898/3) If[20933] (! (= numericIndex undefined))
  [20934] (21905/6) Call[20934] app __x3__ = (OrdinarySet O P V Receiver)
  [20935] (21906/6) Normal[20935] return [? __x3__]
  [20936] (21893/0) Normal[20936] assert (= __x0__ true)
  [20937] (21900/4) Call[20937] app __x2__ = (IntegerIndexedElementSet O numericIndex V)
  [20938] (21902/5) Normal[20938] return true
  [20939] (21894/1) If[20939] (= (typeof P) String)
  [20940] (21901/4) Normal[20940] [? __x2__]
  [20941] (21896/2) Call[20941] app __x1__ = (CanonicalNumericIndexString P)
  [20942] Exit[20942]
Algo: IntegerIndexedObjectCreate [1712]
  [20943] Entry[20943]
  [20944] (21908/0) Normal[20944] let internalSlotsList = (new ["Prototype", "Extensible", "ViewedArrayBuffer", "TypedArrayName", "ContentType", "ByteLength", "ByteOffset", "ArrayLength"])
  [20945] (21912/3) Normal[20945] A.HasProperty = ALGORITHM["IntegerIndexedExoticObject.HasProperty"]
  [20946] (21913/4) Normal[20946] A.DefineOwnProperty = ALGORITHM["IntegerIndexedExoticObject.DefineOwnProperty"]
  [20947] (21917/8) Normal[20947] A.OwnPropertyKeys = ALGORITHM["IntegerIndexedExoticObject.OwnPropertyKeys"]
  [20948] (21918/9) Normal[20948] A.Prototype = prototype
  [20949] (21909/1) Call[20949] app __x0__ = (MakeBasicObject internalSlotsList)
  [20950] (21914/5) Normal[20950] A.Get = ALGORITHM["IntegerIndexedExoticObject.Get"]
  [20951] (21916/7) Normal[20951] A.Delete = ALGORITHM["IntegerIndexedExoticObject.Delete"]
  [20952] (21910/1) Normal[20952] let A = [! __x0__]
  [20953] (21919/10) Normal[20953] return A
  [20954] Exit[20954]
  [20955] (21915/6) Normal[20955] A.Set = ALGORITHM["IntegerIndexedExoticObject.Set"]
  [20956] (21911/2) Normal[20956] A.GetOwnProperty = ALGORITHM["IntegerIndexedExoticObject.GetOwnProperty"]
Algo: Invoke [1713]
  [20957] Entry[20957]
  [20958] (21921/0) Call[20958] app __x0__ = (IsPropertyKey P)
  [20959] (21926/2) Call[20959] app __x1__ = (GetV V P)
  [20960] (21927/2) Normal[20960] let func = [? __x1__]
  [20961] (21922/0) Normal[20961] assert (= __x0__ true)
  [20962] (21928/3) Call[20962] app __x2__ = (Call func V argumentsList)
  [20963] (21923/1) If[20963] (= argumentsList absent)
  [20964] (21929/3) Normal[20964] return [? __x2__]
  [20965] (21924/1) Normal[20965] argumentsList = (new [])
  [20966] Exit[20966]
Algo: IsAccessorDescriptor [1714]
  [20967] Entry[20967]
  [20968] (21931/0) If[20968] (= Desc undefined)
  [20969] (21937/2) Normal[20969] return true
  [20970] Exit[20970]
  [20971] (21932/0) Normal[20971] return false
  [20972] (21934/1) If[20972] (&& (= Desc.Get absent) (= Desc.Set absent))
  [20973] (21935/1) Normal[20973] return false
Algo: IsAnonymousFunctionDefinition [1715]
  [20974] Entry[20974]
  [20975] (21939/0) Call[20975] access __x0__ = (expr "IsFunctionDefinition")
  [20976] (21944/1) Normal[20976] let hasName = __x1__
  [20977] (21945/2) If[20977] (= hasName true)
  [20978] (21940/0) If[20978] (= __x0__ false)
  [20979] (21946/2) Normal[20979] return false
  [20980] (21948/3) Normal[20980] return true
  [20981] (21941/0) Normal[20981] return false
  [20982] (21943/1) Call[20982] access __x1__ = (expr "HasName")
  [20983] Exit[20983]
Algo: IsArray [1716]
  [20984] Entry[20984]
  [20985] (21950/0) If[20985] (! (= (typeof argument) Object))
  [20986] (21956/2) If[20986] (is-instance-of argument ProxyExoticObject)
  [20987] (21958/3) If[20987] (= argument.ProxyHandler null)
  [20988] (21965/6) Normal[20988] return false
  [20989] (21963/5) Normal[20989] return [? __x0__]
  [20990] (21951/0) Normal[20990] return false
  [20991] (21953/1) If[20991] (is-instance-of argument ArrayExoticObject)
  [20992] (21959/3) Normal[20992] throw TypeError
  [20993] (21961/4) Normal[20993] let target = argument.ProxyTarget
  [20994] (21962/5) Call[20994] app __x0__ = (IsArray target)
  [20995] (21954/1) Normal[20995] return true
  [20996] Exit[20996]
Algo: IsBigIntElementType [1717]
  [20997] Entry[20997]
  [20998] (21967/0) If[20998] (|| (= type ~BigUint64~) (= type ~BigInt64~))
  [20999] (21968/0) Normal[20999] return true
  [21000] (21970/1) Normal[21000] return false
  [21001] Exit[21001]
Algo: IsCallable [1718]
  [21002] Entry[21002]
  [21003] (21972/0) If[21003] (! (= (typeof argument) Object))
  [21004] (21978/2) Normal[21004] return false
  [21005] Exit[21005]
  [21006] (21973/0) Normal[21006] return false
  [21007] (21975/1) If[21007] (! (= argument.Call absent))
  [21008] (21976/1) Normal[21008] return true
Algo: IsCompatiblePropertyDescriptor [1719]
  [21009] Entry[21009]
  [21010] (21980/0) Call[21010] app __x0__ = (ValidateAndApplyPropertyDescriptor undefined undefined Extensible Desc Current)
  [21011] (21981/0) Normal[21011] return __x0__
  [21012] Exit[21012]
Algo: IsConcatSpreadable [1720]
  [21013] Entry[21013]
  [21014] (21983/0) If[21014] (! (= (typeof O) Object))
  [21015] (21988/2) If[21015] (! (= spreadable undefined))
  [21016] (21990/2) Call[21016] app __x1__ = (ToBoolean spreadable)
  [21017] (21993/3) Call[21017] app __x2__ = (IsArray O)
  [21018] (21984/0) Normal[21018] return false
  [21019] (21986/1) Call[21019] app __x0__ = (Get O SYMBOL_isConcatSpreadable)
  [21020] (21991/2) Normal[21020] return [! __x1__]
  [21021] (21994/3) Normal[21021] return [? __x2__]
  [21022] Exit[21022]
  [21023] (21987/1) Normal[21023] let spreadable = [? __x0__]
Algo: IsConstructor [1721]
  [21024] Entry[21024]
  [21025] (21996/0) If[21025] (! (= (typeof argument) Object))
  [21026] (22002/2) Normal[21026] return false
  [21027] Exit[21027]
  [21028] (21997/0) Normal[21028] return false
  [21029] (21999/1) If[21029] (! (= argument.Construct absent))
  [21030] (22000/1) Normal[21030] return true
Algo: IsDataDescriptor [1722]
  [21031] Entry[21031]
  [21032] (22004/0) If[21032] (= Desc undefined)
  [21033] (22010/2) Normal[21033] return true
  [21034] Exit[21034]
  [21035] (22005/0) Normal[21035] return false
  [21036] (22007/1) If[21036] (&& (= Desc.Value absent) (= Desc.Writable absent))
  [21037] (22008/1) Normal[21037] return false
Algo: IsDetachedBuffer [1723]
  [21038] Entry[21038]
  [21039] (22012/1) If[21039] (= arrayBuffer.ArrayBufferData null)
  [21040] (22013/1) Normal[21040] return true
  [21041] (22015/2) Normal[21041] return false
  [21042] Exit[21042]
Algo: IsExtensible [1724]
  [21043] Entry[21043]
  [21044] (22017/0) Normal[21044] assert (= (typeof O) Object)
  [21045] (22018/1) Call[21045] app __x0__ = (O.IsExtensible O)
  [21046] (22019/1) Normal[21046] return [? __x0__]
  [21047] Exit[21047]
Algo: IsGenericDescriptor [1725]
  [21048] Entry[21048]
  [21049] (22021/0) If[21049] (= Desc undefined)
  [21050] (22026/1) If[21050] (&& (= __x0__ false) (= __x1__ false))
  [21051] (22027/1) Normal[21051] return true
  [21052] (22029/2) Normal[21052] return false
  [21053] (22022/0) Normal[21053] return false
  [21054] (22024/1) Call[21054] app __x0__ = (IsAccessorDescriptor Desc)
  [21055] Exit[21055]
  [21056] (22025/1) Call[21056] app __x1__ = (IsDataDescriptor Desc)
Algo: IsInTailPosition [1726]
  [21057] Entry[21057]
  [21058] (22031)If[21058] false
  [21059] (22036)Loop[21059] (&& (! __c__) (! (= __b__ absent)))
  [21060] (22038)Normal[21060] __c__ = (|| __c__ (is-instance-of __b__ FunctionBody))
  [21061] (22044)If[21061] (! __c__)
  [21062] (22042)Call[21062] access __b__ = (__b__ "parent")
  [21063] LoopCont[21063]
  [21064] (22047)Normal[21064] let body = __b__
  [21065] (22048)Call[21065] access __p__ = (body "parent")
  [21066] (22055)Normal[21066] return false
  [21067] (22057)If[21067] (&& (is-instance-of body FunctionBody) (is-instance-of __p__ AsyncGeneratorBody))
  [21068] (22032)Normal[21068] return false
  [21069] (22034)Normal[21069] let __c__ = false
  [21070] (22039)Normal[21070] __c__ = (|| __c__ (is-instance-of __b__ ConciseBody))
  [21071] (22058)Normal[21071] return false
  [21072] (22061)If[21072] (is-instance-of body AsyncConciseBody)
  [21073] (22041)If[21073] (! __c__)
  [21074] (22045)Normal[21074] return false
  [21075] (22051)If[21075] (&& (is-instance-of body FunctionBody) (is-instance-of __p__ GeneratorBody))
  [21076] (22052)Normal[21076] return false
  [21077] (22054)If[21077] (&& (is-instance-of body FunctionBody) (is-instance-of __p__ AsyncFunctionBody))
  [21078] (22040)Normal[21078] __c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody))
  [21079] (22035)Normal[21079] let __b__ = call
  [21080] (22049)If[21080] (! (= __p__ absent))
  [21081] (22062)Normal[21081] return false
  [21082] (22064)Call[21082] access __r__ = (body "HasCallInTailPosition" call)
  [21083] (22065)Normal[21083] return __r__
  [21084] Exit[21084]
Algo: IsIntegralNumber [1727]
  [21085] Entry[21085]
  [21086] (22067/0) If[21086] (! (= (typeof argument) Number))
  [21087] (22073/2) Call[21087] app __x0__ = (abs argument)
  [21088] (22074/2) Call[21088] app __x1__ = (floor __x0__)
  [21089] (22079/3) Normal[21089] return true
  [21090] Exit[21090]
  [21091] (22068/0) Normal[21091] return false
  [21092] (22070/1) If[21092] (|| (|| (= argument NaN) (= argument Infinity)) (= argument -Infinity))
  [21093] (22075/2) Call[21093] app __x2__ = (abs argument)
  [21094] (22077/2) Normal[21094] return false
  [21095] (22076/2) If[21095] (! (== __x1__ __x2__))
  [21096] (22071/1) Normal[21096] return false
Algo: IsLabelledFunction [1728]
  [21097] Entry[21097]
  [21098] (22081/0) If[21098] (! (is-instance-of stmt LabelledStatement))
  [21099] (22086/2) If[21099] (is-instance-of item LabelledItem1)
  [21100] (22088/2) Call[21100] access FunctionDeclaration = (item "FunctionDeclaration")
  [21101] (22091/3) Call[21101] access __x1__ = (item "Statement")
  [21102] (22093/4) Call[21102] app __x2__ = (IsLabelledFunction subStmt)
  [21103] (22094/4) Normal[21103] return __x2__
  [21104] (22082/0) Normal[21104] return false
  [21105] (22084/1) Call[21105] access __x0__ = (stmt "LabelledItem")
  [21106] (22089/2) Normal[21106] return true
  [21107] (22092/3) Normal[21107] let subStmt = __x1__
  [21108] (22085/1) Normal[21108] let item = __x0__
  [21109] Exit[21109]
Algo: IsNoTearConfiguration [1729]
  [21110] Entry[21110]
  [21111] (22096/0) Call[21111] app __x0__ = (IsUnclampedIntegerElementType type)
  [21112] (22101/1) If[21112] (&& (= [! __x1__] true) (! (|| (= order ~Init~) (= order ~Unordered~))))
  [21113] (22102/1) Normal[21113] return true
  [21114] (22104/2) Normal[21114] return false
  [21115] (22097/0) If[21115] (= [! __x0__] true)
  [21116] (22098/0) Normal[21116] return true
  [21117] (22100/1) Call[21117] app __x1__ = (IsBigIntElementType type)
  [21118] Exit[21118]
Algo: IsPromise [1730]
  [21119] Entry[21119]
  [21120] (22106/0) If[21120] (! (= (typeof x) Object))
  [21121] (22112/2) Normal[21121] return true
  [21122] Exit[21122]
  [21123] (22107/0) Normal[21123] return false
  [21124] (22109/1) If[21124] (= x.PromiseState absent)
  [21125] (22110/1) Normal[21125] return false
Algo: IsPropertyKey [1731]
  [21126] Entry[21126]
  [21127] (22114/0) If[21127] (= (typeof argument) String)
  [21128] (22120/2) Normal[21128] return false
  [21129] Exit[21129]
  [21130] (22115/0) Normal[21130] return true
  [21131] (22117/1) If[21131] (= (typeof argument) Symbol)
  [21132] (22118/1) Normal[21132] return true
Algo: IsPropertyReference [1732]
  [21133] Entry[21133]
  [21134] (22122/0) Normal[21134] assert (is-instance-of V ReferenceRecord)
  [21135] (22127/2) Normal[21135] return true
  [21136] Exit[21136]
  [21137] (22123/1) If[21137] (= V.Base ~unresolvable~)
  [21138] (22128/2) Normal[21138] return false
  [21139] (22124/1) Normal[21139] return false
  [21140] (22126/2) If[21140] (|| (|| (|| (|| (|| (= (typeof V.Base) Boolean) (= (typeof V.Base) String)) (= (typeof V.Base) Symbol)) (= (typeof V.Base) BigInt)) (= (typeof V.Base) Number)) (= (typeof V.Base) Object))
Algo: IsRegExp [1733]
  [21141] Entry[21141]
  [21142] (22130/0) If[21142] (! (= (typeof argument) Object))
  [21143] (22135/2) If[21143] (! (= matcher undefined))
  [21144] (22137/2) Call[21144] app __x1__ = (ToBoolean matcher)
  [21145] (22140/3) If[21145] (! (= argument.RegExpMatcher absent))
  [21146] (22143/4) Normal[21146] return false
  [21147] Exit[21147]
  [21148] (22131/0) Normal[21148] return false
  [21149] (22133/1) Call[21149] app __x0__ = (Get argument SYMBOL_match)
  [21150] (22138/2) Normal[21150] return [! __x1__]
  [21151] (22141/3) Normal[21151] return true
  [21152] (22134/1) Normal[21152] let matcher = [? __x0__]
Algo: IsSharedArrayBuffer [1734]
  [21153] Entry[21153]
  [21154] (22145/1) Normal[21154] let bufferData = obj.ArrayBufferData
  [21155] (22150/3) Normal[21155] return false
  [21156] (22152/4) Normal[21156] assert (is-instance-of bufferData SharedDataBlock)
  [21157] (22146/2) If[21157] (= bufferData null)
  [21158] (22153/5) Normal[21158] return true
  [21159] (22147/2) Normal[21159] return false
  [21160] (22149/3) If[21160] (is-instance-of bufferData DataBlock)
  [21161] Exit[21161]
Algo: IsStringPrefix [1735]
  [21162] Entry[21162]
  [21163] (22155/0) Normal[21163] assert (= (typeof p) String)
  [21164] (22156/1) Normal[21164] assert (= (typeof q) String)
  [21165] (22157/2) Normal[21165] return (< p q)
  [21166] Exit[21166]
Algo: IsSuperReference [1736]
  [21167] Entry[21167]
  [21168] (22159/0) Normal[21168] assert (is-instance-of V ReferenceRecord)
  [21169] (22160/1) If[21169] (! (= V.ThisValue ~empty~))
  [21170] (22161/1) Normal[21170] return true
  [21171] (22162/1) Normal[21171] return false
  [21172] Exit[21172]
Algo: IsUnclampedIntegerElementType [1737]
  [21173] Entry[21173]
  [21174] (22164/0) If[21174] (|| (|| (|| (|| (|| (= type ~Int8~) (= type ~Uint8~)) (= type ~Int16~)) (= type ~Uint16~)) (= type ~Int32~)) (= type ~Uint32~))
  [21175] (22165/0) Normal[21175] return true
  [21176] (22167/1) Normal[21176] return false
  [21177] Exit[21177]
Algo: IsUnresolvableReference [1738]
  [21178] Entry[21178]
  [21179] (22169/0) Normal[21179] assert (is-instance-of V ReferenceRecord)
  [21180] (22170/1) If[21180] (= V.Base ~unresolvable~)
  [21181] (22171/1) Normal[21181] return true
  [21182] (22172/1) Normal[21182] return false
  [21183] Exit[21183]
Algo: IsUnsignedElementType [1739]
  [21184] Entry[21184]
  [21185] (22174/0) If[21185] (|| (|| (|| (|| (= type ~Uint8~) (= type ~Uint8C~)) (= type ~Uint16~)) (= type ~Uint32~)) (= type ~BigUint64~))
  [21186] (22175/0) Normal[21186] return true
  [21187] (22177/1) Normal[21187] return false
  [21188] Exit[21188]
Algo: IsValidIntegerIndex [1740]
  [21189] Entry[21189]
  [21190] (22179/1) Call[21190] app __x0__ = (IsDetachedBuffer O.ViewedArrayBuffer)
  [21191] (22184/2) If[21191] (= [! __x1__] false)
  [21192] (22185/2) Normal[21192] return false
  [21193] (22187/3) If[21193] (= index -0.0)
  [21194] (22191/4) Normal[21194] return false
  [21195] (22193/5) Normal[21195] return true
  [21196] (22180/1) If[21196] (= __x0__ true)
  [21197] (22190/4) If[21197] (|| (< index 0i) (! (< index O.ArrayLength)))
  [21198] (22181/1) Normal[21198] return false
  [21199] (22183/2) Call[21199] app __x1__ = (IsIntegralNumber index)
  [21200] (22188/3) Normal[21200] return false
  [21201] Exit[21201]
Algo: IsValidRegularExpressionLiteral [1741]
  [21202] Entry[21202]
  [21203] (22195/0) Normal[21203] assert (is-instance-of literal RegularExpressionLiteral)
  [21204] (22199/3) Call[21204] access __x1__ = (literal "FlagText")
  [21205] (22200/3) If[21205] (contains __x1__ ??? "u")
  [21206] (22205/5) Call[21206] app __x2__ = (CodePointsToString patternText)
  [21207] (22206/5) Normal[21207] let stringValue = __x2__
  [21208] (22210/7) Normal[21208] let parseResult = __x3__
  [21209] (22211/8) If[21209] (= (typeof parseResult) "AST")
  [21210] (22196/1) Normal[21210] ??? "If FlagText of id:{literal} contains any code points other than code:{g} , code:{i} , code:{m} , code:{s} , code:{u} , or code:{y} , or if it contains the same code point more than once , return value:{false} ."
  [21211] (22201/3) Normal[21211] let u = true
  [21212] (22202/3) Normal[21212] let u = false
  [21213] (22203/4) If[21213] (= u false)
  [21214] (22209/7) Call[21214] app __x3__ = (ParsePattern patternText u)
  [21215] (22197/2) Call[21215] access __x0__ = (literal "BodyText")
  [21216] (22213/8) Normal[21216] return false
  [21217] Exit[21217]
  [21218] (22207/6) Normal[21218] ??? "Set id:{patternText} to the sequence of code points resulting from interpreting each of the 16 - bit elements of id:{stringValue} as a Unicode BMP code point . UTF - 16 decoding is not applied to the elements ."
  [21219] (22198/2) Normal[21219] let patternText = __x0__
  [21220] (22212/8) Normal[21220] return true
Algo: IsWordChar [1742]
  [21221] Entry[21221]
  [21222] (22215/0) If[21222] (|| (== e -1i) (= e InputLength))
  [21223] (22220/2) Normal[21223] return true
  [21224] (22222/3) Normal[21224] return false
  [21225] (22216/0) Normal[21225] return false
  [21226] (22218/1) Normal[21226] let c = Input[e]
  [21227] Exit[21227]
  [21228] (22219/2) If[21228] (contains WordCharacters c)
Algo: IterableToList [1743]
  [21229] Entry[21229]
  [21230] (22224/0) If[21230] (! (= method absent))
  [21231] (22230/3) Normal[21231] let iteratorRecord = [? __x1__]
  [21232] (22231/4) Normal[21232] let values = (new [])
  [21233] (22236/7) Normal[21233] next = [? __x2__]
  [21234] (22237/8) If[21234] (! (= next false))
  [21235] (22241/10) Normal[21235] append nextValue -> values
  [21236] LoopCont[21236]
  [21237] (22226/1) Call[21237] app __x0__ = (GetIterator items ~sync~ method)
  [21238] (22229/3) Call[21238] app __x1__ = (GetIterator items ~sync~)
  [21239] (22232/5) Normal[21239] let next = true
  [21240] (22235/7) Call[21240] app __x2__ = (IteratorStep iteratorRecord)
  [21241] (22240/9) Normal[21241] let nextValue = [? __x3__]
  [21242] (22227/1) Normal[21242] let iteratorRecord = [? __x0__]
  [21243] (22239/9) Call[21243] app __x3__ = (IteratorValue next)
  [21244] (22233/6) Loop[21244] (! (= next false))
  [21245] (22243/11) Normal[21245] return values
  [21246] Exit[21246]
Algo: IterationStatement[0,0].LoopEvaluation [1744]
  [21247] Entry[21247]
  [21248] (22245)Normal[21248] let IterationStatement = this
  [21249] (22246/0) Call[21249] access __x0__ = (DoWhileStatement "DoWhileLoopEvaluation" labelSet)
  [21250] (22247/0) Normal[21250] return [? __x0__]
  [21251] Exit[21251]
Algo: IterationStatement[1,0].LoopEvaluation [1745]
  [21252] Entry[21252]
  [21253] (22249)Normal[21253] let IterationStatement = this
  [21254] (22250/0) Call[21254] access __x0__ = (WhileStatement "WhileLoopEvaluation" labelSet)
  [21255] (22251/0) Normal[21255] return [? __x0__]
  [21256] Exit[21256]
Algo: IterationStatement[2,0].LoopEvaluation [1746]
  [21257] Entry[21257]
  [21258] (22253)Normal[21258] let IterationStatement = this
  [21259] (22254/0) Call[21259] access __x0__ = (ForStatement "ForLoopEvaluation" labelSet)
  [21260] (22255/0) Normal[21260] return [? __x0__]
  [21261] Exit[21261]
Algo: IterationStatement[3,0].LoopEvaluation [1747]
  [21262] Entry[21262]
  [21263] (22257)Normal[21263] let IterationStatement = this
  [21264] (22258/0) Call[21264] access __x0__ = (ForInOfStatement "ForInOfLoopEvaluation" labelSet)
  [21265] (22259/0) Normal[21265] return [? __x0__]
  [21266] Exit[21266]
Algo: IteratorClose [1748]
  [21267] Entry[21267]
  [21268] (22261/0) Normal[21268] assert (= (typeof iteratorRecord.Iterator) Object)
  [21269] (22265/3) Normal[21269] let innerResult = __x0__
  [21270] (22266/4) If[21270] (= innerResult.Type ~normal~)
  [21271] (22272/7) Call[21271] app __x1__ = (Call return iterator)
  [21272] (22273/7) Normal[21272] innerResult = __x1__
  [21273] (22278/9) If[21273] (= innerResult.Type ~throw~)
  [21274] (22279/9) Normal[21274] return innerResult
  [21275] (22281/10) If[21275] (! (= (typeof innerResult.Value) Object))
  [21276] (22262/1) Normal[21276] assert (is-completion completion)
  [21277] (22268/5) Normal[21277] let return = innerResult.Value
  [21278] (22275/8) If[21278] (= completion.Type ~throw~)
  [21279] (22270/6) Normal[21279] return completion
  [21280] (22276/8) Normal[21280] return completion
  [21281] (22263/2) Normal[21281] let iterator = iteratorRecord.Iterator
  [21282] (22282/10) Normal[21282] throw TypeError
  [21283] (22284/11) Normal[21283] return completion
  [21284] (22269/6) If[21284] (= return undefined)
  [21285] (22264/3) Call[21285] app __x0__ = (GetMethod iterator "return")
  [21286] Exit[21286]
Algo: IteratorComplete [1749]
  [21287] Entry[21287]
  [21288] (22286/0) Normal[21288] assert (= (typeof iterResult) Object)
  [21289] (22287/1) Call[21289] app __x0__ = (Get iterResult "done")
  [21290] (22288/1) Call[21290] app __x1__ = (ToBoolean [? __x0__])
  [21291] (22289/1) Normal[21291] return [! __x1__]
  [21292] Exit[21292]
Algo: IteratorNext [1750]
  [21293] Entry[21293]
  [21294] (22291/0) If[21294] (= value absent)
  [21295] (22297/3) Normal[21295] let result = [? __x1__]
  [21296] (22298/4) If[21296] (! (= (typeof result) Object))
  [21297] (22293/1) Call[21297] app __x0__ = (Call iteratorRecord.NextMethod iteratorRecord.Iterator)
  [21298] (22296/3) Call[21298] app __x1__ = (Call iteratorRecord.NextMethod iteratorRecord.Iterator (new [value]))
  [21299] (22299/4) Normal[21299] throw TypeError
  [21300] (22301/5) Normal[21300] return result
  [21301] (22294/1) Normal[21301] let result = [? __x0__]
  [21302] Exit[21302]
Algo: IteratorStep [1751]
  [21303] Entry[21303]
  [21304] (22303/0) Call[21304] app __x0__ = (IteratorNext iteratorRecord)
  [21305] (22307/2) If[21305] (= done true)
  [21306] (22308/2) Normal[21306] return false
  [21307] (22310/3) Normal[21307] return result
  [21308] (22304/0) Normal[21308] let result = [? __x0__]
  [21309] (22305/1) Call[21309] app __x1__ = (IteratorComplete result)
  [21310] Exit[21310]
  [21311] (22306/1) Normal[21311] let done = [? __x1__]
Algo: IteratorValue [1752]
  [21312] Entry[21312]
  [21313] (22312/0) Normal[21313] assert (= (typeof iterResult) Object)
  [21314] (22313/1) Call[21314] app __x0__ = (Get iterResult "value")
  [21315] (22314/1) Normal[21315] return [? __x0__]
  [21316] Exit[21316]
Algo: LabelIdentifier[0,0].EarlyErrors [1753]
  [21317] Entry[21317]
  [21318] (22316)Normal[21318] let LabelIdentifier = this
  [21319] (22317/0) Normal[21319] ??? "It is a Syntax Error if this production has a sub:{[ Yield ]} parameter and StringValue of nt:{Identifier} is value:{\"yield\"} ."
  [21320] (22318/1) Normal[21320] ??? "It is a Syntax Error if this production has an sub:{[ Await ]} parameter and StringValue of nt:{Identifier} is value:{\"await\"} ."
  [21321] Exit[21321]
Algo: LabelIdentifier[1,0].EarlyErrors [1754]
  [21322] Entry[21322]
  [21323] (22320)Normal[21323] let LabelIdentifier = this
  [21324] (22321/0) If[21324] true
  [21325] (22322/0) Normal[21325] throw SyntaxError
  [21326] Exit[21326]
Algo: LabelIdentifier[1,0].StringValue [1755]
  [21327] Entry[21327]
  [21328] (22325)Normal[21328] let LabelIdentifier = this
  [21329] (22326/0) Normal[21329] return "yield"
  [21330] Exit[21330]
Algo: LabelIdentifier[2,0].EarlyErrors [1756]
  [21331] Entry[21331]
  [21332] (22328)Normal[21332] let LabelIdentifier = this
  [21333] (22333/0) If[21333] __x0__
  [21334] (22334/0) Normal[21334] throw SyntaxError
  [21335] Exit[21335]
  [21336] (22329/0) Normal[21336] let __x0__ = false
  [21337] (22330/0) If[21337] (= absent (parse-syntax this "Module"))
  [21338] (22331/0) Normal[21338] __x0__ = true
Algo: LabelIdentifier[2,0].StringValue [1757]
  [21339] Entry[21339]
  [21340] (22337)Normal[21340] let LabelIdentifier = this
  [21341] (22338/0) Normal[21341] return "await"
  [21342] Exit[21342]
Algo: LabelledItem[0,0].LexicallyDeclaredNames [1758]
  [21343] Entry[21343]
  [21344] (22340)Normal[21344] let LabelledItem = this
  [21345] (22341/0) Normal[21345] return (new [])
  [21346] Exit[21346]
Algo: LabelledItem[0,0].LexicallyScopedDeclarations [1759]
  [21347] Entry[21347]
  [21348] (22343)Normal[21348] let LabelledItem = this
  [21349] (22344/0) Normal[21349] return (new [])
  [21350] Exit[21350]
Algo: LabelledItem[0,0].TopLevelVarDeclaredNames [1760]
  [21351] Entry[21351]
  [21352] (22346)Normal[21352] let LabelledItem = this
  [21353] (22351/0) Normal[21353] return __x0__
  [21354] (22353/1) Call[21354] access __x1__ = (Statement "VarDeclaredNames")
  [21355] (22347/0) If[21355] (is-instance-of Statement Statement10)
  [21356] (22354/1) Normal[21356] return __x1__
  [21357] (22349/0) Call[21357] access LabelledStatement = (Statement "LabelledStatement")
  [21358] Exit[21358]
  [21359] (22350/0) Call[21359] access __x0__ = (Statement "TopLevelVarDeclaredNames")
Algo: LabelledItem[0,0].TopLevelVarScopedDeclarations [1761]
  [21360] Entry[21360]
  [21361] (22356)Normal[21361] let LabelledItem = this
  [21362] (22361/0) Normal[21362] return __x0__
  [21363] (22363/1) Call[21363] access __x1__ = (Statement "VarScopedDeclarations")
  [21364] (22357/0) If[21364] (is-instance-of Statement Statement10)
  [21365] (22364/1) Normal[21365] return __x1__
  [21366] (22359/0) Call[21366] access LabelledStatement = (Statement "LabelledStatement")
  [21367] Exit[21367]
  [21368] (22360/0) Call[21368] access __x0__ = (Statement "TopLevelVarScopedDeclarations")
Algo: LabelledItem[1,0].ContainsDuplicateLabels [1762]
  [21369] Entry[21369]
  [21370] (22366)Normal[21370] let LabelledItem = this
  [21371] (22367/0) Normal[21371] return false
  [21372] Exit[21372]
Algo: LabelledItem[1,0].ContainsUndefinedBreakTarget [1763]
  [21373] Entry[21373]
  [21374] (22369)Normal[21374] let LabelledItem = this
  [21375] (22370/0) Normal[21375] return false
  [21376] Exit[21376]
Algo: LabelledItem[1,0].ContainsUndefinedContinueTarget [1764]
  [21377] Entry[21377]
  [21378] (22372)Normal[21378] let LabelledItem = this
  [21379] (22373/0) Normal[21379] return false
  [21380] Exit[21380]
Algo: LabelledItem[1,0].EarlyErrors [1765]
  [21381] Entry[21381]
  [21382] (22375)Normal[21382] let LabelledItem = this
  [21383] (22376/0) If[21383] true
  [21384] (22377/0) Normal[21384] throw SyntaxError
  [21385] Exit[21385]
Algo: LabelledItem[1,0].HasCallInTailPosition [1766]
  [21386] Entry[21386]
  [21387] (22380)Normal[21387] let LabelledItem = this
  [21388] (22381/0) Normal[21388] return false
  [21389] Exit[21389]
Algo: LabelledItem[1,0].LabelledEvaluation [1767]
  [21390] Entry[21390]
  [21391] (22383)Normal[21391] let LabelledItem = this
  [21392] (22384/0) Call[21392] access __x0__ = (FunctionDeclaration "Evaluation")
  [21393] (22385/0) Normal[21393] return __x0__
  [21394] Exit[21394]
Algo: LabelledItem[1,0].LexicallyDeclaredNames [1768]
  [21395] Entry[21395]
  [21396] (22387)Normal[21396] let LabelledItem = this
  [21397] (22388/0) Call[21397] access __x0__ = (FunctionDeclaration "BoundNames")
  [21398] (22389/0) Normal[21398] return __x0__
  [21399] Exit[21399]
Algo: LabelledItem[1,0].LexicallyScopedDeclarations [1769]
  [21400] Entry[21400]
  [21401] (22391)Normal[21401] let LabelledItem = this
  [21402] (22392/0) Normal[21402] return (new [FunctionDeclaration])
  [21403] Exit[21403]
Algo: LabelledItem[1,0].TopLevelVarDeclaredNames [1770]
  [21404] Entry[21404]
  [21405] (22394)Normal[21405] let LabelledItem = this
  [21406] (22395/0) Call[21406] access __x0__ = (FunctionDeclaration "BoundNames")
  [21407] (22396/0) Normal[21407] return __x0__
  [21408] Exit[21408]
Algo: LabelledItem[1,0].TopLevelVarScopedDeclarations [1771]
  [21409] Entry[21409]
  [21410] (22398)Normal[21410] let LabelledItem = this
  [21411] (22399/0) Normal[21411] return (new [FunctionDeclaration])
  [21412] Exit[21412]
Algo: LabelledItem[1,0].VarDeclaredNames [1772]
  [21413] Entry[21413]
  [21414] (22401)Normal[21414] let LabelledItem = this
  [21415] (22402/0) Normal[21415] return (new [])
  [21416] Exit[21416]
Algo: LabelledItem[1,0].VarScopedDeclarations [1773]
  [21417] Entry[21417]
  [21418] (22404)Normal[21418] let LabelledItem = this
  [21419] (22405/0) Normal[21419] return (new [])
  [21420] Exit[21420]
Algo: LabelledStatement[0,0].ContainsDuplicateLabels [1774]
  [21421] Entry[21421]
  [21422] (22407)Normal[21422] let LabelledStatement = this
  [21423] (22411/1) Normal[21423] return true
  [21424] (22413/2) Normal[21424] let __x1__ = (copy-obj labelSet)
  [21425] (22417/3) Normal[21425] return __x2__
  [21426] Exit[21426]
  [21427] (22408/0) Call[21427] access __x0__ = (LabelIdentifier "StringValue")
  [21428] (22414/2) Normal[21428] append label -> __x1__
  [21429] (22416/3) Call[21429] access __x2__ = (LabelledItem "ContainsDuplicateLabels" newLabelSet)
  [21430] (22409/0) Normal[21430] let label = __x0__
  [21431] (22415/2) Normal[21431] let newLabelSet = __x1__
  [21432] (22410/1) If[21432] (contains labelSet label)
Algo: LabelledStatement[0,0].ContainsUndefinedBreakTarget [1775]
  [21433] Entry[21433]
  [21434] (22419)Normal[21434] let LabelledStatement = this
  [21435] (22423/1) Normal[21435] append label -> __x1__
  [21436] (22424/1) Normal[21436] let newLabelSet = __x1__
  [21437] (22420/0) Call[21437] access __x0__ = (LabelIdentifier "StringValue")
  [21438] (22425/2) Call[21438] access __x2__ = (LabelledItem "ContainsUndefinedBreakTarget" newLabelSet)
  [21439] (22421/0) Normal[21439] let label = __x0__
  [21440] (22426/2) Normal[21440] return __x2__
  [21441] (22422/1) Normal[21441] let __x1__ = (copy-obj labelSet)
  [21442] Exit[21442]
Algo: LabelledStatement[0,0].ContainsUndefinedContinueTarget [1776]
  [21443] Entry[21443]
  [21444] (22428)Normal[21444] let LabelledStatement = this
  [21445] (22432/1) Normal[21445] append label -> __x1__
  [21446] (22433/1) Normal[21446] let newLabelSet = __x1__
  [21447] (22429/0) Call[21447] access __x0__ = (LabelIdentifier "StringValue")
  [21448] (22434/2) Call[21448] access __x2__ = (LabelledItem "ContainsUndefinedContinueTarget" iterationSet newLabelSet)
  [21449] (22430/0) Normal[21449] let label = __x0__
  [21450] (22435/2) Normal[21450] return __x2__
  [21451] (22431/1) Normal[21451] let __x1__ = (copy-obj labelSet)
  [21452] Exit[21452]
Algo: LabelledStatement[0,0].Evaluation [1777]
  [21453] Entry[21453]
  [21454] (22437)Normal[21454] let LabelledStatement = this
  [21455] (22438/0) Normal[21455] let newLabelSet = (new [])
  [21456] (22439/1) Call[21456] access __x0__ = (this "LabelledEvaluation" newLabelSet)
  [21457] (22440/1) Normal[21457] return __x0__
  [21458] Exit[21458]
Algo: LabelledStatement[0,0].HasCallInTailPosition [1778]
  [21459] Entry[21459]
  [21460] (22442)Normal[21460] let LabelledStatement = this
  [21461] (22443/0) Call[21461] access __x0__ = (LabelledItem "HasCallInTailPosition" call)
  [21462] (22444/0) Normal[21462] return __x0__
  [21463] Exit[21463]
Algo: LabelledStatement[0,0].LabelledEvaluation [1779]
  [21464] Entry[21464]
  [21465] (22446)Normal[21465] let LabelledStatement = this
  [21466] (22450/2) Call[21466] access __x1__ = (LabelledItem "LabelledEvaluation" labelSet)
  [21467] (22451/2) Normal[21467] let stmtResult = __x1__
  [21468] (22456/3) Call[21468] app __x3__ = (SameValue stmtResult.Target label)
  [21469] (22457/3) Normal[21469] __x2__ = (= __x3__ true)
  [21470] (22462/4) Normal[21470] stmtResult = __x4__
  [21471] (22464/5) Normal[21471] return stmtResult
  [21472] (22447/0) Call[21472] access __x0__ = (LabelIdentifier "StringValue")
  [21473] (22452/3) Normal[21473] let __x2__ = true
  [21474] (22454/3) If[21474] __x2__
  [21475] (22459/3) If[21475] __x2__
  [21476] (22461/4) Call[21476] app __x4__ = (NormalCompletion stmtResult.Value)
  [21477] (22448/0) Normal[21477] let label = __x0__
  [21478] (22453/3) Normal[21478] __x2__ = (= stmtResult.Type ~break~)
  [21479] (22449/1) Normal[21479] append label -> labelSet
  [21480] Exit[21480]
Algo: LabelledStatement[0,0].LexicallyDeclaredNames [1780]
  [21481] Entry[21481]
  [21482] (22466)Normal[21482] let LabelledStatement = this
  [21483] (22467/0) Call[21483] access __x0__ = (LabelledItem "LexicallyDeclaredNames")
  [21484] (22468/0) Normal[21484] return __x0__
  [21485] Exit[21485]
Algo: LabelledStatement[0,0].LexicallyScopedDeclarations [1781]
  [21486] Entry[21486]
  [21487] (22470)Normal[21487] let LabelledStatement = this
  [21488] (22471/0) Call[21488] access __x0__ = (LabelledItem "LexicallyScopedDeclarations")
  [21489] (22472/0) Normal[21489] return __x0__
  [21490] Exit[21490]
Algo: LabelledStatement[0,0].TopLevelLexicallyDeclaredNames [1782]
  [21491] Entry[21491]
  [21492] (22474)Normal[21492] let LabelledStatement = this
  [21493] (22475/0) Normal[21493] return (new [])
  [21494] Exit[21494]
Algo: LabelledStatement[0,0].TopLevelLexicallyScopedDeclarations [1783]
  [21495] Entry[21495]
  [21496] (22477)Normal[21496] let LabelledStatement = this
  [21497] (22478/0) Normal[21497] return (new [])
  [21498] Exit[21498]
Algo: LabelledStatement[0,0].TopLevelVarDeclaredNames [1784]
  [21499] Entry[21499]
  [21500] (22480)Normal[21500] let LabelledStatement = this
  [21501] (22481/0) Call[21501] access __x0__ = (LabelledItem "TopLevelVarDeclaredNames")
  [21502] (22482/0) Normal[21502] return __x0__
  [21503] Exit[21503]
Algo: LabelledStatement[0,0].TopLevelVarScopedDeclarations [1785]
  [21504] Entry[21504]
  [21505] (22484)Normal[21505] let LabelledStatement = this
  [21506] (22485/0) Call[21506] access __x0__ = (LabelledItem "TopLevelVarScopedDeclarations")
  [21507] (22486/0) Normal[21507] return __x0__
  [21508] Exit[21508]
Algo: LabelledStatement[0,0].VarDeclaredNames [1786]
  [21509] Entry[21509]
  [21510] (22488)Normal[21510] let LabelledStatement = this
  [21511] (22489/0) Call[21511] access __x0__ = (LabelledItem "VarDeclaredNames")
  [21512] (22490/0) Normal[21512] return __x0__
  [21513] Exit[21513]
Algo: LabelledStatement[0,0].VarScopedDeclarations [1787]
  [21514] Entry[21514]
  [21515] (22492)Normal[21515] let LabelledStatement = this
  [21516] (22493/0) Call[21516] access __x0__ = (LabelledItem "VarScopedDeclarations")
  [21517] (22494/0) Normal[21517] return __x0__
  [21518] Exit[21518]
Algo: LeaveCriticalSection [1788]
  [21519] Entry[21519]
  [21520] (22496/1) Normal[21520] ??? "Let id:{execution} be the [ [ CandidateExecution ] ] field of the calling surrounding ' s Agent Record ."
  [21521] (22500/5) Normal[21521] append leaveEvent -> leaverEventList
  [21522] (22501/6) Normal[21522] ??? "Set the Synchronize event in id:{WL} to id:{leaveEvent} ."
  [21523] (22497/2) Normal[21523] ??? "Let id:{eventsRecord} be the Agent Events Record in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) ."
  [21524] (22502/7) Normal[21524] ??? "Leave the critical section for id:{WL} ."
  [21525] (22498/3) Normal[21525] let leaverEventList = eventsRecord.EventList
  [21526] Exit[21526]
  [21527] (22499/4) Normal[21527] ??? "Let id:{leaveEvent} be a new Synchronize event ."
Algo: LeftHandSideExpression[1,0].IsDestructuring [1789]
  [21528] Entry[21528]
  [21529] (22504)Normal[21529] let LeftHandSideExpression = this
  [21530] (22505/0) Normal[21530] return false
  [21531] Exit[21531]
Algo: LeftHandSideExpression[1,0].IsFunctionDefinition [1790]
  [21532] Entry[21532]
  [21533] (22507)Normal[21533] let LeftHandSideExpression = this
  [21534] (22508/0) Normal[21534] return false
  [21535] Exit[21535]
Algo: LeftHandSideExpression[1,0].IsIdentifierRef [1791]
  [21536] Entry[21536]
  [21537] (22510)Normal[21537] let LeftHandSideExpression = this
  [21538] (22511/0) Normal[21538] return false
  [21539] Exit[21539]
Algo: LeftHandSideExpression[2,0].AssignmentTargetType [1792]
  [21540] Entry[21540]
  [21541] (22513)Normal[21541] let LeftHandSideExpression = this
  [21542] (22514/0) Normal[21542] return ~invalid~
  [21543] Exit[21543]
Algo: LeftHandSideExpression[2,0].IsDestructuring [1793]
  [21544] Entry[21544]
  [21545] (22516)Normal[21545] let LeftHandSideExpression = this
  [21546] (22517/0) Normal[21546] return false
  [21547] Exit[21547]
Algo: LeftHandSideExpression[2,0].IsFunctionDefinition [1794]
  [21548] Entry[21548]
  [21549] (22519)Normal[21549] let LeftHandSideExpression = this
  [21550] (22520/0) Normal[21550] return false
  [21551] Exit[21551]
Algo: LeftHandSideExpression[2,0].IsIdentifierRef [1795]
  [21552] Entry[21552]
  [21553] (22522)Normal[21553] let LeftHandSideExpression = this
  [21554] (22523/0) Normal[21554] return false
  [21555] Exit[21555]
Algo: LengthOfArrayLike [1796]
  [21556] Entry[21556]
  [21557] (22525/0) Normal[21557] assert (= (typeof obj) Object)
  [21558] (22526/1) Call[21558] app __x0__ = (Get obj "length")
  [21559] (22527/1) Call[21559] app __x1__ = (ToLength [? __x0__])
  [21560] (22528/1) Normal[21560] return [? __x1__]
  [21561] Exit[21561]
Algo: LetOrConst[0,0].IsConstantDeclaration [1797]
  [21562] Entry[21562]
  [21563] (22530)Normal[21563] let LetOrConst = this
  [21564] (22531/0) Normal[21564] return false
  [21565] Exit[21565]
Algo: LetOrConst[1,0].IsConstantDeclaration [1798]
  [21566] Entry[21566]
  [21567] (22533)Normal[21567] let LetOrConst = this
  [21568] (22534/0) Normal[21568] return true
  [21569] Exit[21569]
Algo: LexicalBinding[0,0].BoundNames [1799]
  [21570] Entry[21570]
  [21571] (22536)Normal[21571] let LexicalBinding = this
  [21572] (22537/0) Call[21572] access __x0__ = (BindingIdentifier "BoundNames")
  [21573] (22538/0) Normal[21573] return __x0__
  [21574] Exit[21574]
Algo: LexicalBinding[0,0].EarlyErrors [1800]
  [21575] Entry[21575]
  [21576] (22540)Normal[21576] let LexicalBinding = this
  [21577] (22541/0) Normal[21577] ??? "It is a Syntax Error if nt:{Initializer} is not present and IsConstantDeclaration of the nt:{LexicalDeclaration} containing this nt:{LexicalBinding} is value:{true} ."
  [21578] Exit[21578]
Algo: LexicalBinding[0,0].Evaluation [1801]
  [21579] Entry[21579]
  [21580] (22543)Normal[21580] let LexicalBinding = this
  [21581] (22547/1) Call[21581] app __x2__ = (InitializeReferencedBinding lhs undefined)
  [21582] (22548/1) Normal[21582] return __x2__
  [21583] (22544/0) Call[21583] access __x0__ = (BindingIdentifier "StringValue")
  [21584] Exit[21584]
  [21585] (22545/0) Call[21585] app __x1__ = (ResolveBinding __x0__)
  [21586] (22546/0) Normal[21586] let lhs = __x1__
Algo: LexicalBinding[0,1].BoundNames [1802]
  [21587] Entry[21587]
  [21588] (22550)Normal[21588] let LexicalBinding = this
  [21589] (22551/0) Call[21589] access __x0__ = (BindingIdentifier "BoundNames")
  [21590] (22552/0) Normal[21590] return __x0__
  [21591] Exit[21591]
Algo: LexicalBinding[0,1].EarlyErrors [1803]
  [21592] Entry[21592]
  [21593] (22554)Normal[21593] let LexicalBinding = this
  [21594] (22555/0) Normal[21594] ??? "It is a Syntax Error if nt:{Initializer} is not present and IsConstantDeclaration of the nt:{LexicalDeclaration} containing this nt:{LexicalBinding} is value:{true} ."
  [21595] Exit[21595]
Algo: LexicalBinding[0,1].Evaluation [1804]
  [21596] Entry[21596]
  [21597] (22557)Normal[21597] let LexicalBinding = this
  [21598] (22561/1) Normal[21598] let lhs = __x1__
  [21599] (22562/2) Call[21599] app __x2__ = (IsAnonymousFunctionDefinition Initializer)
  [21600] (22568/5) Call[21600] access __x4__ = (Initializer "Evaluation")
  [21601] (22569/5) Normal[21601] let rhs = __x4__
  [21602] (22572/7) Call[21602] app __x6__ = (InitializeReferencedBinding lhs value)
  [21603] (22573/7) Normal[21603] return __x6__
  [21604] (22558/0) Call[21604] access __x0__ = (BindingIdentifier "StringValue")
  [21605] (22563/2) If[21605] (= __x2__ true)
  [21606] (22566/3) Normal[21606] let value = __x3__
  [21607] (22571/6) Normal[21607] let value = [? __x5__]
  [21608] (22559/0) Normal[21608] let bindingId = __x0__
  [21609] (22570/6) Call[21609] app __x5__ = (GetValue rhs)
  [21610] (22565/3) Call[21610] access __x3__ = (Initializer "NamedEvaluation" bindingId)
  [21611] (22560/1) Call[21611] app __x1__ = (ResolveBinding bindingId)
  [21612] Exit[21612]
Algo: LexicalBinding[1,0].BoundNames [1805]
  [21613] Entry[21613]
  [21614] (22575)Normal[21614] let LexicalBinding = this
  [21615] (22576/0) Call[21615] access __x0__ = (BindingPattern "BoundNames")
  [21616] (22577/0) Normal[21616] return __x0__
  [21617] Exit[21617]
Algo: LexicalBinding[1,0].Evaluation [1806]
  [21618] Entry[21618]
  [21619] (22579)Normal[21619] let LexicalBinding = this
  [21620] (22583/1) Normal[21620] let value = [? __x1__]
  [21621] (22584/2) Normal[21621] let env = CONTEXT.LexicalEnvironment
  [21622] (22580/0) Call[21622] access __x0__ = (Initializer "Evaluation")
  [21623] (22585/3) Call[21623] access __x2__ = (BindingPattern "BindingInitialization" value env)
  [21624] (22581/0) Normal[21624] let rhs = __x0__
  [21625] (22586/3) Normal[21625] return __x2__
  [21626] (22582/1) Call[21626] app __x1__ = (GetValue rhs)
  [21627] Exit[21627]
Algo: LexicalDeclaration[0,0].BoundNames [1807]
  [21628] Entry[21628]
  [21629] (22588)Normal[21629] let LexicalDeclaration = this
  [21630] (22589/0) Call[21630] access __x0__ = (BindingList "BoundNames")
  [21631] (22590/0) Normal[21631] return __x0__
  [21632] Exit[21632]
Algo: LexicalDeclaration[0,0].EarlyErrors [1808]
  [21633] Entry[21633]
  [21634] (22592)Normal[21634] let LexicalDeclaration = this
  [21635] (22597/1) Call[21635] access __x1__ = (BindingList "BoundNames")
  [21636] (22598/1) Call[21636] app __x2__ = (IsDuplicate __x1__)
  [21637] (22593/0) Call[21637] access __x0__ = (BindingList "BoundNames")
  [21638] (22599/1) If[21638] __x2__
  [21639] (22594/0) If[21639] (contains __x0__ "let")
  [21640] (22600/1) Normal[21640] throw SyntaxError
  [21641] Exit[21641]
  [21642] (22595/0) Normal[21642] throw SyntaxError
Algo: LexicalDeclaration[0,0].Evaluation [1809]
  [21643] Entry[21643]
  [21644] (22603)Normal[21644] let LexicalDeclaration = this
  [21645] (22607/2) Normal[21645] return ~empty~
  [21646] Exit[21646]
  [21647] (22604/0) Call[21647] access __x0__ = (BindingList "Evaluation")
  [21648] (22605/0) Normal[21648] let next = __x0__
  [21649] (22606/1) Normal[21649] [? next]
Algo: LexicalDeclaration[0,0].IsConstantDeclaration [1810]
  [21650] Entry[21650]
  [21651] (22609)Normal[21651] let LexicalDeclaration = this
  [21652] (22610/0) Call[21652] access __x0__ = (LetOrConst "IsConstantDeclaration")
  [21653] (22611/0) Normal[21653] return __x0__
  [21654] Exit[21654]
Algo: Link [1811]
  [21655] Entry[21655]
  [21656] (22613/0) Normal[21656] assert (! (|| (= module.Status ~linking~) (= module.Status ~evaluating~)))
  [21657] (22617/3) Call[21657] app __x1__ = (IsAbruptCompletion result)
  [21658] (22618/3) If[21658] __x1__
  [21659] (22624/4) Normal[21659] let m = __x2__[__x3__]
  [21660] (22625/4) Normal[21660] __x3__ = (+ __x3__ 1i)
  [21661] (22628/7) Normal[21661] m.Environment = undefined
  [21662] (22629/8) Normal[21662] m.DFSIndex = undefined
  [21663] (22634/12) Normal[21663] assert (|| (= module.Status ~linked~) (= module.Status ~evaluated~))
  [21664] (22635/13) Normal[21664] assert (= stack.length 0i)
  [21665] (22614/1) Normal[21665] let stack = (new [])
  [21666] (22620/4) Normal[21666] let __x2__ = stack
  [21667] (22636/14) Normal[21667] return undefined
  [21668] (22622/4) Loop[21668] (< __x3__ __x2__.length)
  [21669] (22631/10) Normal[21669] assert (= module.Status ~unlinked~)
  [21670] (22627/6) Normal[21670] m.Status = ~unlinked~
  [21671] (22615/2) Call[21671] app __x0__ = (InnerModuleLinking module stack 0i)
  [21672] LoopCont[21672]
  [21673] Exit[21673]
  [21674] (22626/5) Normal[21674] assert (= m.Status ~linking~)
  [21675] (22621/4) Normal[21675] let __x3__ = 0i
  [21676] (22616/2) Normal[21676] let result = __x0__
  [21677] (22632/11) Normal[21677] return result
  [21678] (22630/9) Normal[21678] m.DFSAncestorIndex = undefined
Algo: LiteralPropertyName[0,0].Contains [1812]
  [21679] Entry[21679]
  [21680] (22638)Normal[21680] let LiteralPropertyName = this
  [21681] (22639/0) Normal[21681] return false
  [21682] Exit[21682]
Algo: LiteralPropertyName[0,0].Evaluation [1813]
  [21683] Entry[21683]
  [21684] (22641)Normal[21684] let LiteralPropertyName = this
  [21685] (22642/0) Call[21685] access __x0__ = (IdentifierName "StringValue")
  [21686] (22643/0) Normal[21686] return __x0__
  [21687] Exit[21687]
Algo: LiteralPropertyName[0,0].PropName [1814]
  [21688] Entry[21688]
  [21689] (22645)Normal[21689] let LiteralPropertyName = this
  [21690] (22646/0) Call[21690] access __x0__ = (IdentifierName "StringValue")
  [21691] (22647/0) Normal[21691] return __x0__
  [21692] Exit[21692]
Algo: LiteralPropertyName[1,0].Evaluation [1815]
  [21693] Entry[21693]
  [21694] (22649)Normal[21694] let LiteralPropertyName = this
  [21695] (22650/0) Call[21695] access __x0__ = (StringLiteral "SV")
  [21696] (22651/0) Normal[21696] return __x0__
  [21697] Exit[21697]
Algo: LiteralPropertyName[1,0].PropName [1816]
  [21698] Entry[21698]
  [21699] (22653)Normal[21699] let LiteralPropertyName = this
  [21700] (22654/0) Call[21700] access __x0__ = (StringLiteral "SV")
  [21701] (22655/0) Normal[21701] return __x0__
  [21702] Exit[21702]
Algo: LiteralPropertyName[2,0].Evaluation [1817]
  [21703] Entry[21703]
  [21704] (22657)Normal[21704] let LiteralPropertyName = this
  [21705] (22661/1) Normal[21705] return [! __x1__]
  [21706] Exit[21706]
  [21707] (22658/0) Call[21707] access __x0__ = (NumericLiteral "NumericValue")
  [21708] (22659/0) Normal[21708] let nbr = __x0__
  [21709] (22660/1) Call[21709] app __x1__ = (ToString nbr)
Algo: LiteralPropertyName[2,0].PropName [1818]
  [21710] Entry[21710]
  [21711] (22663)Normal[21711] let LiteralPropertyName = this
  [21712] (22667/1) Normal[21712] return [! __x1__]
  [21713] Exit[21713]
  [21714] (22664/0) Call[21714] access __x0__ = (NumericLiteral "NumericValue")
  [21715] (22665/0) Normal[21715] let nbr = __x0__
  [21716] (22666/1) Call[21716] app __x1__ = (ToString nbr)
Algo: Literal[0,0].Evaluation [1819]
  [21717] Entry[21717]
  [21718] (22669)Normal[21718] let Literal = this
  [21719] (22670/0) Normal[21719] return null
  [21720] Exit[21720]
Algo: Literal[1,0].Evaluation [1820]
  [21721] Entry[21721]
  [21722] (22672)Normal[21722] let Literal = this
  [21723] (22677/1) Normal[21723] return true
  [21724] Exit[21724]
  [21725] (22673/0) If[21725] (= (get-syntax BooleanLiteral) "false")
  [21726] (22674/0) Normal[21726] return false
  [21727] (22676/1) If[21727] (= (get-syntax BooleanLiteral) "true")
Algo: Literal[2,0].Evaluation [1821]
  [21728] Entry[21728]
  [21729] (22680)Normal[21729] let Literal = this
  [21730] (22681/0) Call[21730] access __x0__ = (NumericLiteral "NumericValue")
  [21731] (22682/0) Normal[21731] return __x0__
  [21732] Exit[21732]
Algo: Literal[3,0].Evaluation [1822]
  [21733] Entry[21733]
  [21734] (22684)Normal[21734] let Literal = this
  [21735] (22685/0) Call[21735] access __x0__ = (StringLiteral "SV")
  [21736] (22686/0) Normal[21736] return __x0__
  [21737] Exit[21737]
Algo: LocalTime [1823]
  [21738] Entry[21738]
  [21739] (22688/0) Call[21739] app __x0__ = (LocalTZA t true)
  [21740] (22689/0) Normal[21740] return (+ t __x0__)
  [21741] Exit[21741]
Algo: LogicalANDExpression[1,0].AssignmentTargetType [1824]
  [21742] Entry[21742]
  [21743] (22690/0) Normal[21743] return ~invalid~
  [21744] Exit[21744]
Algo: LogicalANDExpression[1,0].Evaluation [1825]
  [21745] Entry[21745]
  [21746] (22692/0) Call[21746] access __x0__ = (LogicalANDExpression "Evaluation")
  [21747] (22696/2) Call[21747] app __x2__ = (ToBoolean lval)
  [21748] (22697/2) Normal[21748] let lbool = [! __x2__]
  [21749] (22702/4) Normal[21749] let rref = __x3__
  [21750] (22703/5) Call[21750] app __x4__ = (GetValue rref)
  [21751] (22693/0) Normal[21751] let lref = __x0__
  [21752] (22698/3) If[21752] (= lbool false)
  [21753] (22701/4) Call[21753] access __x3__ = (BitwiseORExpression "Evaluation")
  [21754] (22694/1) Call[21754] app __x1__ = (GetValue lref)
  [21755] (22704/5) Normal[21755] return [? __x4__]
  [21756] Exit[21756]
  [21757] (22699/3) Normal[21757] return lval
  [21758] (22695/1) Normal[21758] let lval = [? __x1__]
Algo: LogicalANDExpression[1,0].HasCallInTailPosition [1826]
  [21759] Entry[21759]
  [21760] (22706/0) Call[21760] access __x0__ = (BitwiseORExpression "HasCallInTailPosition" call)
  [21761] (22707/0) Normal[21761] return __x0__
  [21762] Exit[21762]
Algo: LogicalANDExpression[1,0].IsFunctionDefinition [1827]
  [21763] Entry[21763]
  [21764] (22708/0) Normal[21764] return false
  [21765] Exit[21765]
Algo: LogicalORExpression[1,0].AssignmentTargetType [1828]
  [21766] Entry[21766]
  [21767] (22709/0) Normal[21767] return ~invalid~
  [21768] Exit[21768]
Algo: LogicalORExpression[1,0].Evaluation [1829]
  [21769] Entry[21769]
  [21770] (22711/0) Call[21770] access __x0__ = (LogicalORExpression "Evaluation")
  [21771] (22715/2) Call[21771] app __x2__ = (ToBoolean lval)
  [21772] (22716/2) Normal[21772] let lbool = [! __x2__]
  [21773] (22721/4) Normal[21773] let rref = __x3__
  [21774] (22722/5) Call[21774] app __x4__ = (GetValue rref)
  [21775] (22712/0) Normal[21775] let lref = __x0__
  [21776] (22717/3) If[21776] (= lbool true)
  [21777] (22720/4) Call[21777] access __x3__ = (LogicalANDExpression "Evaluation")
  [21778] (22713/1) Call[21778] app __x1__ = (GetValue lref)
  [21779] (22723/5) Normal[21779] return [? __x4__]
  [21780] Exit[21780]
  [21781] (22718/3) Normal[21781] return lval
  [21782] (22714/1) Normal[21782] let lval = [? __x1__]
Algo: LogicalORExpression[1,0].HasCallInTailPosition [1830]
  [21783] Entry[21783]
  [21784] (22725/0) Call[21784] access __x0__ = (LogicalANDExpression "HasCallInTailPosition" call)
  [21785] (22726/0) Normal[21785] return __x0__
  [21786] Exit[21786]
Algo: LogicalORExpression[1,0].IsFunctionDefinition [1831]
  [21787] Entry[21787]
  [21788] (22727/0) Normal[21788] return false
  [21789] Exit[21789]
Algo: LoopContinues [1832]
  [21790] Entry[21790]
  [21791] (22729/0) If[21791] (= completion.Type ~normal~)
  [21792] (22735/2) If[21792] (= completion.Target ~empty~)
  [21793] (22736/2) Normal[21793] return true
  [21794] (22738/3) If[21794] (contains labelSet completion.Target)
  [21795] (22730/0) Normal[21795] return true
  [21796] (22732/1) If[21796] (! (= completion.Type ~continue~))
  [21797] (22741/4) Normal[21797] return false
  [21798] Exit[21798]
  [21799] (22739/3) Normal[21799] return true
  [21800] (22733/1) Normal[21800] return false
Algo: MakeArgGetter [1833]
  [21801] Entry[21801]
  [21802] (22743/0) Normal[21802] let steps = ALGORITHM["GLOBAL.ArgGetter"]
  [21803] (22747/3) Normal[21803] getter.Name = name
  [21804] (22748/4) Normal[21804] getter.Env = env
  [21805] (22744/1) Normal[21805] let length = 0i
  [21806] (22749/5) Normal[21806] return getter
  [21807] (22745/2) Call[21807] app getter = (CreateBuiltinFunction steps length "" (new ["Name", "Env"]))
  [21808] Exit[21808]
  [21809] (22746/2) Normal[21809] [! getter]
Algo: MakeArgSetter [1834]
  [21810] Entry[21810]
  [21811] (22751/0) Normal[21811] let steps = ALGORITHM["GLOBAL.ArgSetter"]
  [21812] (22755/3) Normal[21812] setter.Name = name
  [21813] (22756/4) Normal[21813] setter.Env = env
  [21814] (22752/1) Normal[21814] let length = 0i
  [21815] (22757/5) Normal[21815] return setter
  [21816] (22753/2) Call[21816] app setter = (CreateBuiltinFunction steps length "" (new ["Name", "Env"]))
  [21817] Exit[21817]
  [21818] (22754/2) Normal[21818] [! setter]
Algo: MakeBasicObject [1835]
  [21819] Entry[21819]
  [21820] (22759/1) Normal[21820] let obj = (new OrdinaryObject())
  [21821] (22764/1) Normal[21821] let __x2__ = __x0__[__x1__]
  [21822] (22765/1) Normal[21822] __x1__ = (+ __x1__ 1i)
  [21823] (22768/5) Normal[21823] obj.Extensible = true
  [21824] (22770/6) Normal[21824] return obj
  [21825] (22760/1) Normal[21825] let __x0__ = internalSlotsList
  [21826] (22766/1) Normal[21826] obj[__x2__] = undefined
  [21827] (22767/5) If[21827] (contains internalSlotsList "Extensible")
  [21828] (22761/1) Normal[21828] let __x1__ = 0i
  [21829] LoopCont[21829]
  [21830] (22762/1) Loop[21830] (< __x1__ __x0__.length)
  [21831] Exit[21831]
Algo: MakeClassConstructor [1836]
  [21832] Entry[21832]
  [21833] (22772/0) Normal[21833] assert (is-instance-of F ECMAScriptFunctionObject)
  [21834] (22773/1) Normal[21834] assert (= F.IsClassConstructor false)
  [21835] (22774/2) Normal[21835] F.IsClassConstructor = true
  [21836] (22775/3) Normal[21836] return undefined
  [21837] Exit[21837]
Algo: MakeConstructor [1837]
  [21838] Entry[21838]
  [21839] (22777/1) If[21839] (is-instance-of F ECMAScriptFunctionObject)
  [21840] (22783)Normal[21840] F.Construct = ALGORITHM["BuiltinFunctionObject.Construct"]
  [21841] (22784/5) Normal[21841] F.ConstructorKind = ~base~
  [21842] (22790/8) Call[21842] app __x1__ = (OrdinaryObjectCreate INTRINSICS["%Object.prototype%"])
  [21843] (22791/8) Normal[21843] prototype = [! __x1__]
  [21844] (22795/10) Call[21844] app __x3__ = (DefinePropertyOrThrow F "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> writablePrototype, "Enumerable" -> false, "Configurable" -> false)))
  [21845] (22796/10) Normal[21845] [! __x3__]
  [21846] (22779/2) Call[21846] app __x0__ = (IsConstructor F)
  [21847] (22785/6) If[21847] (= writablePrototype absent)
  [21848] (22788/7) If[21848] (= prototype absent)
  [21849] (22793/9) Normal[21849] [! __x2__]
  [21850] (22780/2) Normal[21850] assert (= __x0__ false)
  [21851] (22792/9) Call[21851] app __x2__ = (DefinePropertyOrThrow prototype "constructor" (new PropertyDescriptor("Value" -> F, "Writable" -> writablePrototype, "Enumerable" -> false, "Configurable" -> true)))
  [21852] (22786)Normal[21852] writablePrototype = true
  [21853] (22781/4) Normal[21853] F.Construct = ALGORITHM["ECMAScriptFunctionObject.Construct"]
  [21854] (22797/11) Normal[21854] return undefined
  [21855] Exit[21855]
Algo: MakeDate [1838]
  [21856] Entry[21856]
  [21857] (22799/0) If[21857] (|| (|| (|| (= day Infinity) (= day -Infinity)) (= day NaN)) (|| (|| (= time Infinity) (= time -Infinity)) (= time NaN)))
  [21858] (22804/2) Normal[21858] return NaN
  [21859] (22806/3) Normal[21859] return tv
  [21860] (22800/0) Normal[21860] return NaN
  [21861] (22802/1) Normal[21861] let tv = (+ (* day 8.64E7) time)
  [21862] Exit[21862]
  [21863] (22803/2) If[21863] (|| (|| (= tv Infinity) (= tv -Infinity)) (= tv NaN))
Algo: MakeDay [1839]
  [21864] Entry[21864]
  [21865] (22808/0) If[21865] (|| (|| (|| (|| (= year Infinity) (= year -Infinity)) (= year NaN)) (|| (|| (= month Infinity) (= month -Infinity)) (= month NaN))) (|| (|| (= date Infinity) (= date -Infinity)) (= date NaN)))
  [21866] (22813/2) Call[21866] app __x1__ = (ToIntegerOrInfinity month)
  [21867] (22814/2) Normal[21867] let m = [! __x1__]
  [21868] (22818/4) Normal[21868] let ym = (+ y __x3__)
  [21869] (22819/5) If[21869] (|| (|| (= ym Infinity) (= ym -Infinity)) (= ym NaN))
  [21870] (22823/7) Normal[21870] ??? "Find a finite time value id:{t} such that YearFromTime ( id:{t} ) is id:{ym} and MonthFromTime ( id:{t} ) is id:{mn} and DateFromTime ( id:{t} ) is value:{1} sub:{𝔽} ; but if this is not possible ( because some argument is out of range ) , return value:{NaN} ."
  [21871] (22824/8) Call[21871] app __x4__ = (Day t)
  [21872] (22809/0) Normal[21872] return NaN
  [21873] (22811/1) Call[21873] app __x0__ = (ToIntegerOrInfinity year)
  [21874] (22815/3) Call[21874] app __x2__ = (ToIntegerOrInfinity date)
  [21875] (22817/4) Call[21875] app __x3__ = (floor (/ m 12i))
  [21876] (22822/6) Normal[21876] let mn = (%% m 12i)
  [21877] (22820/5) Normal[21877] return NaN
  [21878] (22816/3) Normal[21878] let dt = [! __x2__]
  [21879] (22812/1) Normal[21879] let y = [! __x0__]
  [21880] (22825/8) Normal[21880] return (- (+ __x4__ dt) 1i)
  [21881] Exit[21881]
Algo: MakeMethod [1840]
  [21882] Entry[21882]
  [21883] (22827/0) Normal[21883] assert (is-instance-of F ECMAScriptFunctionObject)
  [21884] (22828/1) Normal[21884] assert (= (typeof homeObject) Object)
  [21885] (22829/2) Normal[21885] F.HomeObject = homeObject
  [21886] (22830/3) Normal[21886] return undefined
  [21887] Exit[21887]
Algo: MakeSuperPropertyReference [1841]
  [21888] Entry[21888]
  [21889] (22832/0) Call[21889] app __x0__ = (GetThisEnvironment)
  [21890] (22836/2) Call[21890] app __x2__ = (env.GetSuperBase env)
  [21891] (22837/2) Normal[21891] let baseValue = [? __x2__]
  [21892] (22833/0) Normal[21892] let env = __x0__
  [21893] (22838/3) Call[21893] app __x3__ = (RequireObjectCoercible baseValue)
  [21894] (22840/4) Normal[21894] return (new ReferenceRecord("Base" -> bv, "ReferencedName" -> propertyKey, "Strict" -> strict, "ThisValue" -> actualThis))
  [21895] Exit[21895]
  [21896] (22834/1) Call[21896] app __x1__ = (env.HasSuperBinding env)
  [21897] (22839/3) Normal[21897] let bv = [? __x3__]
  [21898] (22835/1) Normal[21898] assert (= __x1__ true)
Algo: MakeTime [1842]
  [21899] Entry[21899]
  [21900] (22842/0) If[21900] (|| (|| (|| (|| (|| (= hour Infinity) (= hour -Infinity)) (= hour NaN)) (|| (|| (= min Infinity) (= min -Infinity)) (= min NaN))) (|| (|| (= sec Infinity) (= sec -Infinity)) (= sec NaN))) (|| (|| (= ms Infinity) (= ms -Infinity)) (= ms NaN)))
  [21901] (22847/2) Call[21901] app __x1__ = (ToIntegerOrInfinity min)
  [21902] (22848/2) Normal[21902] let m = [! __x1__]
  [21903] (22852/4) Normal[21903] let milli = [! __x3__]
  [21904] (22853/5) Normal[21904] ??? "Let id:{t} be ( ( id:{h} code:{*} msPerHour code:{+} id:{m} code:{*} msPerMinute ) code:{+} id:{s} code:{*} msPerSecond ) code:{+} id:{milli} , performing the arithmetic according to IEEE 754 - 2019 rules ( that is , as if using the ECMAScript operators code:{*} and code:{+} ) ."
  [21905] (22843/0) Normal[21905] return NaN
  [21906] (22845/1) Call[21906] app __x0__ = (ToIntegerOrInfinity hour)
  [21907] (22849/3) Call[21907] app __x2__ = (ToIntegerOrInfinity sec)
  [21908] (22851/4) Call[21908] app __x3__ = (ToIntegerOrInfinity ms)
  [21909] (22854/6) Normal[21909] return t
  [21910] Exit[21910]
  [21911] (22850/3) Normal[21911] let s = [! __x2__]
  [21912] (22846/1) Normal[21912] let h = [! __x0__]
Algo: MemberExpression[0,0].IsDestructuring [1843]
  [21913] Entry[21913]
  [21914] (22856)Normal[21914] let MemberExpression = this
  [21915] (22857/0) If[21915] (|| (is-instance-of PrimaryExpression ObjectLiteral) (is-instance-of PrimaryExpression ArrayLiteral))
  [21916] (22858/0) Normal[21916] return true
  [21917] (22860/1) Normal[21917] return false
  [21918] Exit[21918]
Algo: MemberExpression[1,0].AssignmentTargetType [1844]
  [21919] Entry[21919]
  [21920] (22861/0) Normal[21920] return ~simple~
  [21921] Exit[21921]
Algo: MemberExpression[1,0].Evaluation [1845]
  [21922] Entry[21922]
  [21923] (22863/0) Call[21923] access __x0__ = (MemberExpression "Evaluation")
  [21924] (22867/2) If[21924] true
  [21925] (22868/2) Normal[21925] let strict = true
  [21926] (22869/2) Normal[21926] let strict = false
  [21927] (22864/0) Normal[21927] let baseReference = __x0__
  [21928] (22870/3) Call[21928] app __x2__ = (EvaluatePropertyAccessWithExpressionKey baseValue Expression strict)
  [21929] (22871/3) Normal[21929] return [? __x2__]
  [21930] Exit[21930]
  [21931] (22865/1) Call[21931] app __x1__ = (GetValue baseReference)
  [21932] (22866/1) Normal[21932] let baseValue = [? __x1__]
Algo: MemberExpression[1,0].HasCallInTailPosition [1846]
  [21933] Entry[21933]
  [21934] (22872/0) Normal[21934] return false
  [21935] Exit[21935]
Algo: MemberExpression[1,0].IsDestructuring [1847]
  [21936] Entry[21936]
  [21937] (22873/0) Normal[21937] return false
  [21938] Exit[21938]
Algo: MemberExpression[1,0].IsFunctionDefinition [1848]
  [21939] Entry[21939]
  [21940] (22874/0) Normal[21940] return false
  [21941] Exit[21941]
Algo: MemberExpression[1,0].IsIdentifierRef [1849]
  [21942] Entry[21942]
  [21943] (22875/0) Normal[21943] return false
  [21944] Exit[21944]
Algo: MemberExpression[2,0].AssignmentTargetType [1850]
  [21945] Entry[21945]
  [21946] (22876/0) Normal[21946] return ~simple~
  [21947] Exit[21947]
Algo: MemberExpression[2,0].Contains [1851]
  [21948] Entry[21948]
  [21949] (22878/0) Call[21949] access __x0__ = (MemberExpression "Contains" symbol)
  [21950] (22879/0) If[21950] (= __x0__ true)
  [21951] (22880/0) Normal[21951] return true
  [21952] (22882/1) Normal[21952] return false
  [21953] Exit[21953]
Algo: MemberExpression[2,0].Evaluation [1852]
  [21954] Entry[21954]
  [21955] (22884/0) Call[21955] access __x0__ = (MemberExpression "Evaluation")
  [21956] (22888/2) If[21956] true
  [21957] (22889/2) Normal[21957] let strict = true
  [21958] (22890/2) Normal[21958] let strict = false
  [21959] (22885/0) Normal[21959] let baseReference = __x0__
  [21960] (22891/3) Call[21960] app __x2__ = (EvaluatePropertyAccessWithIdentifierKey baseValue IdentifierName strict)
  [21961] (22892/3) Normal[21961] return [? __x2__]
  [21962] Exit[21962]
  [21963] (22886/1) Call[21963] app __x1__ = (GetValue baseReference)
  [21964] (22887/1) Normal[21964] let baseValue = [? __x1__]
Algo: MemberExpression[2,0].HasCallInTailPosition [1853]
  [21965] Entry[21965]
  [21966] (22893/0) Normal[21966] return false
  [21967] Exit[21967]
Algo: MemberExpression[2,0].IsDestructuring [1854]
  [21968] Entry[21968]
  [21969] (22894/0) Normal[21969] return false
  [21970] Exit[21970]
Algo: MemberExpression[2,0].IsFunctionDefinition [1855]
  [21971] Entry[21971]
  [21972] (22895/0) Normal[21972] return false
  [21973] Exit[21973]
Algo: MemberExpression[2,0].IsIdentifierRef [1856]
  [21974] Entry[21974]
  [21975] (22896/0) Normal[21975] return false
  [21976] Exit[21976]
Algo: MemberExpression[3,0].AssignmentTargetType [1857]
  [21977] Entry[21977]
  [21978] (22897/0) Normal[21978] return ~invalid~
  [21979] Exit[21979]
Algo: MemberExpression[3,0].Evaluation [1858]
  [21980] Entry[21980]
  [21981] (22899/0) Call[21981] access __x0__ = (MemberExpression "Evaluation")
  [21982] (22903/2) Normal[21982] let thisCall = this
  [21983] (22904/3) Call[21983] app __x2__ = (IsInTailPosition thisCall)
  [21984] (22900/0) Normal[21984] let tagRef = __x0__
  [21985] (22905/3) Normal[21985] let tailCall = __x2__
  [21986] (22907/4) Normal[21986] return [? __x3__]
  [21987] Exit[21987]
  [21988] (22901/1) Call[21988] app __x1__ = (GetValue tagRef)
  [21989] (22906/4) Call[21989] app __x3__ = (EvaluateCall tagFunc tagRef TemplateLiteral tailCall)
  [21990] (22902/1) Normal[21990] let tagFunc = [? __x1__]
Algo: MemberExpression[3,0].HasCallInTailPosition [1859]
  [21991] Entry[21991]
  [21992] (22909/0) If[21992] (= this call)
  [21993] (22910/0) Normal[21993] return true
  [21994] (22912/1) Normal[21994] return false
  [21995] Exit[21995]
Algo: MemberExpression[3,0].IsDestructuring [1860]
  [21996] Entry[21996]
  [21997] (22913/0) Normal[21997] return false
  [21998] Exit[21998]
Algo: MemberExpression[3,0].IsFunctionDefinition [1861]
  [21999] Entry[21999]
  [22000] (22914/0) Normal[22000] return false
  [22001] Exit[22001]
Algo: MemberExpression[3,0].IsIdentifierRef [1862]
  [22002] Entry[22002]
  [22003] (22915/0) Normal[22003] return false
  [22004] Exit[22004]
Algo: MemberExpression[4,0].AssignmentTargetType [1863]
  [22005] Entry[22005]
  [22006] (22917)Normal[22006] let MemberExpression = this
  [22007] (22918/0) Normal[22007] return ~simple~
  [22008] Exit[22008]
Algo: MemberExpression[4,0].HasCallInTailPosition [1864]
  [22009] Entry[22009]
  [22010] (22920)Normal[22010] let MemberExpression = this
  [22011] (22921/0) Normal[22011] return false
  [22012] Exit[22012]
Algo: MemberExpression[4,0].IsDestructuring [1865]
  [22013] Entry[22013]
  [22014] (22923)Normal[22014] let MemberExpression = this
  [22015] (22924/0) Normal[22015] return false
  [22016] Exit[22016]
Algo: MemberExpression[4,0].IsFunctionDefinition [1866]
  [22017] Entry[22017]
  [22018] (22926)Normal[22018] let MemberExpression = this
  [22019] (22927/0) Normal[22019] return false
  [22020] Exit[22020]
Algo: MemberExpression[4,0].IsIdentifierRef [1867]
  [22021] Entry[22021]
  [22022] (22929)Normal[22022] let MemberExpression = this
  [22023] (22930/0) Normal[22023] return false
  [22024] Exit[22024]
Algo: MemberExpression[5,0].HasCallInTailPosition [1868]
  [22025] Entry[22025]
  [22026] (22932)Normal[22026] let MemberExpression = this
  [22027] (22933/0) Normal[22027] return false
  [22028] Exit[22028]
Algo: MemberExpression[5,0].IsDestructuring [1869]
  [22029] Entry[22029]
  [22030] (22935)Normal[22030] let MemberExpression = this
  [22031] (22936/0) Normal[22031] return false
  [22032] Exit[22032]
Algo: MemberExpression[5,0].IsFunctionDefinition [1870]
  [22033] Entry[22033]
  [22034] (22938)Normal[22034] let MemberExpression = this
  [22035] (22939/0) Normal[22035] return false
  [22036] Exit[22036]
Algo: MemberExpression[5,0].IsIdentifierRef [1871]
  [22037] Entry[22037]
  [22038] (22941)Normal[22038] let MemberExpression = this
  [22039] (22942/0) Normal[22039] return false
  [22040] Exit[22040]
Algo: MemberExpression[6,0].AssignmentTargetType [1872]
  [22041] Entry[22041]
  [22042] (22943/0) Normal[22042] return ~invalid~
  [22043] Exit[22043]
Algo: MemberExpression[6,0].Evaluation [1873]
  [22044] Entry[22044]
  [22045] (22945/0) Call[22045] app __x0__ = (EvaluateNew MemberExpression Arguments)
  [22046] (22946/0) Normal[22046] return [? __x0__]
  [22047] Exit[22047]
Algo: MemberExpression[6,0].HasCallInTailPosition [1874]
  [22048] Entry[22048]
  [22049] (22947/0) Normal[22049] return false
  [22050] Exit[22050]
Algo: MemberExpression[6,0].IsDestructuring [1875]
  [22051] Entry[22051]
  [22052] (22948/0) Normal[22052] return false
  [22053] Exit[22053]
Algo: MemberExpression[6,0].IsFunctionDefinition [1876]
  [22054] Entry[22054]
  [22055] (22949/0) Normal[22055] return false
  [22056] Exit[22056]
Algo: MemberExpression[6,0].IsIdentifierRef [1877]
  [22057] Entry[22057]
  [22058] (22950/0) Normal[22058] return false
  [22059] Exit[22059]
Algo: MethodDefinition[0,0].ComputedPropertyContains [1878]
  [22060] Entry[22060]
  [22061] (22952)Normal[22061] let MethodDefinition = this
  [22062] (22953/0) Call[22062] access __x0__ = (PropertyName "ComputedPropertyContains" symbol)
  [22063] (22954/0) Normal[22063] return __x0__
  [22064] Exit[22064]
Algo: MethodDefinition[0,0].DefineMethod [1879]
  [22065] Entry[22065]
  [22066] (22956)Normal[22066] let MethodDefinition = this
  [22067] (22960/2) Normal[22067] let scope = CONTEXT.LexicalEnvironment
  [22068] (22961/3) If[22068] (! (= functionPrototype absent))
  [22069] (22965/8) Call[22069] app __x1__ = (OrdinaryFunctionCreate prototype sourceText UniqueFormalParameters FunctionBody ~non-lexical-this~ scope)
  [22070] (22966/8) Normal[22070] let closure = __x1__
  [22071] (22969/10) Normal[22071] return (new Record("Key" -> propKey, "Closure" -> closure))
  [22072] Exit[22072]
  [22073] (22957/0) Call[22073] access __x0__ = (PropertyName "Evaluation")
  [22074] (22962/4) Normal[22074] let prototype = functionPrototype
  [22075] (22963/3) Normal[22075] let prototype = INTRINSICS["%Function.prototype%"]
  [22076] (22964/7) Normal[22076] let sourceText = (get-syntax MethodDefinition)
  [22077] (22968/9) Normal[22077] __x2__
  [22078] (22958/0) Normal[22078] let propKey = __x0__
  [22079] (22967/9) Call[22079] app __x2__ = (MakeMethod closure object)
  [22080] (22959/1) Normal[22080] [? propKey]
Algo: MethodDefinition[0,0].EarlyErrors [1880]
  [22081] Entry[22081]
  [22082] (22971)Normal[22082] let MethodDefinition = this
  [22083] (22975/0) If[22083] __x0__
  [22084] (22977/0) Call[22084] access __x2__ = (UniqueFormalParameters "IsSimpleParameterList")
  [22085] (22980/0) If[22085] __x0__
  [22086] (22983/1) Call[22086] access __x3__ = (UniqueFormalParameters "BoundNames")
  [22087] (22984/1) Call[22087] access __x4__ = (FunctionBody "LexicallyDeclaredNames")
  [22088] (22987/1) Normal[22088] let __x7__ = 0i
  [22089] (22988/1) Normal[22089] let __x8__ = 0i
  [22090] (22994/1) If[22090] (= __x5__[__x7__] __x6__[__x8__])
  [22091] (22995/1) Normal[22091] __x9__ = true
  [22092] LoopCont[22092]
  [22093] (22972/0) Normal[22093] let __x0__ = true
  [22094] (22978/0) Normal[22094] __x0__ = (= __x2__ false)
  [22095] (22981/0) Normal[22095] throw SyntaxError
  [22096] (22986/1) Normal[22096] let __x6__ = __x4__
  [22097] (22973/0) Call[22097] access __x1__ = (FunctionBody "FunctionBodyContainsUseStrict")
  [22098] (22990/1) Loop[22098] (< __x7__ __x5__.length)
  [22099] (22992/1) Normal[22099] __x8__ = 0i
  [22100] (22997/1) If[22100] __x9__
  [22101] (22993/1) Loop[22101] (< __x8__ __x6__.length)
  [22102] (22985/1) Normal[22102] let __x5__ = __x3__
  [22103] (22974/0) Normal[22103] __x0__ = (= __x1__ true)
  [22104] (22989/1) Normal[22104] let __x9__ = false
  [22105] LoopCont[22105]
  [22106] (22998/1) Normal[22106] throw SyntaxError
  [22107] Exit[22107]
Algo: MethodDefinition[0,0].HasDirectSuper [1881]
  [22108] Entry[22108]
  [22109] (23001)Normal[22109] let MethodDefinition = this
  [22110] (23006/1) Call[22110] access __x1__ = (FunctionBody "Contains" "SuperCall")
  [22111] (23007/1) Normal[22111] return __x1__
  [22112] (23002/0) Call[22112] access __x0__ = (UniqueFormalParameters "Contains" "SuperCall")
  [22113] Exit[22113]
  [22114] (23003/0) If[22114] (= __x0__ true)
  [22115] (23004/0) Normal[22115] return true
Algo: MethodDefinition[0,0].MethodDefinitionEvaluation [1882]
  [22116] Entry[22116]
  [22117] (23009)Normal[22117] let MethodDefinition = this
  [22118] (23013/1) Normal[22118] __x1__
  [22119] (23014/2) Normal[22119] let desc = (new PropertyDescriptor("Value" -> methodDef.Closure, "Writable" -> true, "Enumerable" -> enumerable, "Configurable" -> true))
  [22120] (23010/0) Call[22120] access __x0__ = (MethodDefinition "DefineMethod" object)
  [22121] (23015/3) Call[22121] app __x2__ = (DefinePropertyOrThrow object methodDef.Key desc)
  [22122] (23011/0) Normal[22122] let methodDef = [? __x0__]
  [22123] (23016/3) Normal[22123] return [? __x2__]
  [22124] (23012/1) Call[22124] app __x1__ = (SetFunctionName methodDef.Closure methodDef.Key)
  [22125] Exit[22125]
Algo: MethodDefinition[0,0].PropName [1883]
  [22126] Entry[22126]
  [22127] (23018)Normal[22127] let MethodDefinition = this
  [22128] (23019/0) Call[22128] access __x0__ = (PropertyName "PropName")
  [22129] (23020/0) Normal[22129] return __x0__
  [22130] Exit[22130]
Algo: MethodDefinition[0,0].PropertyDefinitionEvaluation [1884]
  [22131] Entry[22131]
  [22132] (23022)Normal[22132] let MethodDefinition = this
  [22133] (23023/0) Call[22133] access __x0__ = (MethodDefinition "MethodDefinitionEvaluation" object enumerable)
  [22134] (23024/0) Normal[22134] return [? __x0__]
  [22135] Exit[22135]
Algo: MethodDefinition[0,0].SpecialMethod [1885]
  [22136] Entry[22136]
  [22137] (23026)Normal[22137] let MethodDefinition = this
  [22138] (23027/0) Normal[22138] return false
  [22139] Exit[22139]
Algo: MethodDefinition[1,0].SpecialMethod [1886]
  [22140] Entry[22140]
  [22141] (23029)Normal[22141] let MethodDefinition = this
  [22142] (23030/0) Normal[22142] return true
  [22143] Exit[22143]
Algo: MethodDefinition[2,0].SpecialMethod [1887]
  [22144] Entry[22144]
  [22145] (23032)Normal[22145] let MethodDefinition = this
  [22146] (23033/0) Normal[22146] return true
  [22147] Exit[22147]
Algo: MethodDefinition[3,0].SpecialMethod [1888]
  [22148] Entry[22148]
  [22149] (23035)Normal[22149] let MethodDefinition = this
  [22150] (23036/0) Normal[22150] return true
  [22151] Exit[22151]
Algo: MethodDefinition[4,0].ComputedPropertyContains [1889]
  [22152] Entry[22152]
  [22153] (23038)Normal[22153] let MethodDefinition = this
  [22154] (23039/0) Call[22154] access __x0__ = (PropertyName "ComputedPropertyContains" symbol)
  [22155] (23040/0) Normal[22155] return __x0__
  [22156] Exit[22156]
Algo: MethodDefinition[4,0].HasDirectSuper [1890]
  [22157] Entry[22157]
  [22158] (23042)Normal[22158] let MethodDefinition = this
  [22159] (23043/0) Call[22159] access __x0__ = (FunctionBody "Contains" "SuperCall")
  [22160] (23044/0) Normal[22160] return __x0__
  [22161] Exit[22161]
Algo: MethodDefinition[4,0].MethodDefinitionEvaluation [1891]
  [22162] Entry[22162]
  [22163] (23046)Normal[22163] let MethodDefinition = this
  [22164] (23050/2) Normal[22164] let scope = CONTEXT.LexicalEnvironment
  [22165] (23051/3) Normal[22165] let sourceText = (get-syntax MethodDefinition)
  [22166] (23055/6) Call[22166] app __x2__ = (MakeMethod closure object)
  [22167] (23056/6) Normal[22167] __x2__
  [22168] (23059/8) Normal[22168] let desc = (new PropertyDescriptor("Get" -> closure, "Enumerable" -> enumerable, "Configurable" -> true))
  [22169] (23060/9) Call[22169] app __x4__ = (DefinePropertyOrThrow object propKey desc)
  [22170] (23047/0) Call[22170] access __x0__ = (PropertyName "Evaluation")
  [22171] (23052/4) Normal[22171] ??? "Let id:{formalParameterList} be an instance of the production grammar:{FormalParameters0, []} ."
  [22172] (23054/5) Normal[22172] let closure = __x1__
  [22173] (23058/7) Normal[22173] __x3__
  [22174] (23048/0) Normal[22174] let propKey = __x0__
  [22175] (23057/7) Call[22175] app __x3__ = (SetFunctionName closure propKey "get")
  [22176] (23053/5) Call[22176] app __x1__ = (OrdinaryFunctionCreate INTRINSICS["%Function.prototype%"] sourceText formalParameterList FunctionBody ~non-lexical-this~ scope)
  [22177] (23049/1) Normal[22177] [? propKey]
  [22178] (23061/9) Normal[22178] return [? __x4__]
  [22179] Exit[22179]
Algo: MethodDefinition[4,0].PropName [1892]
  [22180] Entry[22180]
  [22181] (23063)Normal[22181] let MethodDefinition = this
  [22182] (23064/0) Call[22182] access __x0__ = (PropertyName "PropName")
  [22183] (23065/0) Normal[22183] return __x0__
  [22184] Exit[22184]
Algo: MethodDefinition[4,0].PropertyDefinitionEvaluation [1893]
  [22185] Entry[22185]
  [22186] (23067)Normal[22186] let MethodDefinition = this
  [22187] (23068/0) Call[22187] access __x0__ = (MethodDefinition "MethodDefinitionEvaluation" object enumerable)
  [22188] (23069/0) Normal[22188] return [? __x0__]
  [22189] Exit[22189]
Algo: MethodDefinition[4,0].SpecialMethod [1894]
  [22190] Entry[22190]
  [22191] (23071)Normal[22191] let MethodDefinition = this
  [22192] (23072/0) Normal[22192] return true
  [22193] Exit[22193]
Algo: MethodDefinition[5,0].ComputedPropertyContains [1895]
  [22194] Entry[22194]
  [22195] (23074)Normal[22195] let MethodDefinition = this
  [22196] (23075/0) Call[22196] access __x0__ = (PropertyName "ComputedPropertyContains" symbol)
  [22197] (23076/0) Normal[22197] return __x0__
  [22198] Exit[22198]
Algo: MethodDefinition[5,0].EarlyErrors [1896]
  [22199] Entry[22199]
  [22200] (23078)Normal[22200] let MethodDefinition = this
  [22201] (23082/0) Normal[22201] throw SyntaxError
  [22202] (23084/1) Normal[22202] let __x2__ = true
  [22203] (23089/1) Call[22203] access __x4__ = (PropertySetParameterList "IsSimpleParameterList")
  [22204] (23090/1) Normal[22204] __x2__ = (= __x4__ false)
  [22205] (23095/2) Call[22205] access __x5__ = (PropertySetParameterList "BoundNames")
  [22206] (23096/2) Call[22206] access __x6__ = (FunctionBody "LexicallyDeclaredNames")
  [22207] (23079/0) Call[22207] access __x0__ = (PropertySetParameterList "BoundNames")
  [22208] (23085/1) Call[22208] access __x3__ = (FunctionBody "FunctionBodyContainsUseStrict")
  [22209] (23087/1) If[22209] __x2__
  [22210] (23092/1) If[22210] __x2__
  [22211] (23093/1) Normal[22211] throw SyntaxError
  [22212] (23080/0) Call[22212] app __x1__ = (IsDuplicate __x0__)
  [22213] (23098/2) Normal[22213] let __x8__ = __x6__
  [22214] (23099/2) Normal[22214] let __x9__ = 0i
  [22215] (23086/1) Normal[22215] __x2__ = (= __x3__ true)
  [22216] (23081/0) If[22216] __x1__
  [22217] (23100/2) Normal[22217] let __x10__ = 0i
  [22218] (23097/2) Normal[22218] let __x7__ = __x5__
  [22219] (23101/2) Normal[22219] let __x11__ = false
  [22220] (23106/2) If[22220] (= __x7__[__x9__] __x8__[__x10__])
  [22221] (23107/2) Normal[22221] __x11__ = true
  [22222] LoopCont[22222]
  [22223] (23102/2) Loop[22223] (< __x9__ __x7__.length)
  [22224] (23110/2) Normal[22224] throw SyntaxError
  [22225] Exit[22225]
  [22226] (23109/2) If[22226] __x11__
  [22227] (23104/2) Normal[22227] __x10__ = 0i
  [22228] (23105/2) Loop[22228] (< __x10__ __x8__.length)
  [22229] LoopCont[22229]
Algo: MethodDefinition[5,0].HasDirectSuper [1897]
  [22230] Entry[22230]
  [22231] (23113)Normal[22231] let MethodDefinition = this
  [22232] (23118/1) Call[22232] access __x1__ = (FunctionBody "Contains" "SuperCall")
  [22233] (23119/1) Normal[22233] return __x1__
  [22234] (23114/0) Call[22234] access __x0__ = (PropertySetParameterList "Contains" "SuperCall")
  [22235] Exit[22235]
  [22236] (23115/0) If[22236] (= __x0__ true)
  [22237] (23116/0) Normal[22237] return true
Algo: MethodDefinition[5,0].MethodDefinitionEvaluation [1898]
  [22238] Entry[22238]
  [22239] (23121)Normal[22239] let MethodDefinition = this
  [22240] (23125/2) Normal[22240] let scope = CONTEXT.LexicalEnvironment
  [22241] (23126/3) Normal[22241] let sourceText = (get-syntax MethodDefinition)
  [22242] (23130/5) Normal[22242] __x2__
  [22243] (23131/6) Call[22243] app __x3__ = (SetFunctionName closure propKey "set")
  [22244] (23134/8) Call[22244] app __x4__ = (DefinePropertyOrThrow object propKey desc)
  [22245] (23135/8) Normal[22245] return [? __x4__]
  [22246] (23122/0) Call[22246] access __x0__ = (PropertyName "Evaluation")
  [22247] (23127/4) Call[22247] app __x1__ = (OrdinaryFunctionCreate INTRINSICS["%Function.prototype%"] sourceText PropertySetParameterList FunctionBody ~non-lexical-this~ scope)
  [22248] (23129/5) Call[22248] app __x2__ = (MakeMethod closure object)
  [22249] (23133/7) Normal[22249] let desc = (new PropertyDescriptor("Set" -> closure, "Enumerable" -> enumerable, "Configurable" -> true))
  [22250] (23123/0) Normal[22250] let propKey = __x0__
  [22251] (23132/6) Normal[22251] __x3__
  [22252] (23128/4) Normal[22252] let closure = __x1__
  [22253] (23124/1) Normal[22253] [? propKey]
  [22254] Exit[22254]
Algo: MethodDefinition[5,0].PropName [1899]
  [22255] Entry[22255]
  [22256] (23137)Normal[22256] let MethodDefinition = this
  [22257] (23138/0) Call[22257] access __x0__ = (PropertyName "PropName")
  [22258] (23139/0) Normal[22258] return __x0__
  [22259] Exit[22259]
Algo: MethodDefinition[5,0].PropertyDefinitionEvaluation [1900]
  [22260] Entry[22260]
  [22261] (23141)Normal[22261] let MethodDefinition = this
  [22262] (23142/0) Call[22262] access __x0__ = (MethodDefinition "MethodDefinitionEvaluation" object enumerable)
  [22263] (23143/0) Normal[22263] return [? __x0__]
  [22264] Exit[22264]
Algo: MethodDefinition[5,0].SpecialMethod [1901]
  [22265] Entry[22265]
  [22266] (23145)Normal[22266] let MethodDefinition = this
  [22267] (23146/0) Normal[22267] return true
  [22268] Exit[22268]
Algo: MinFromTime [1902]
  [22269] Entry[22269]
  [22270] (23148/0) Call[22270] app __x0__ = (floor (/ t 60000.0))
  [22271] (23149/0) Normal[22271] return (%% __x0__ MinutesPerHour)
  [22272] Exit[22272]
Algo: MinutesPerHour [1903]
  [22273] Entry[22273]
  [22274] (23150/0) Normal[22274] return 60i
  [22275] Exit[22275]
Algo: ModuleBody[0,0].EarlyErrors [1904]
  [22276] Entry[22276]
  [22277] (23152)Normal[22277] let ModuleBody = this
  [22278] (23156/0) Normal[22278] throw SyntaxError
  [22279] (23158/1) Call[22279] access __x2__ = (ModuleItemList "LexicallyDeclaredNames")
  [22280] (23153/0) Call[22280] access __x0__ = (ModuleItemList "LexicallyDeclaredNames")
  [22281] (23154/0) Call[22281] app __x1__ = (IsDuplicate __x0__)
  [22282] (23155/0) If[22282] __x1__
  [22283] (23162/1) Normal[22283] let __x6__ = 0i
  [22284] (23163/1) Normal[22284] let __x7__ = 0i
  [22285] (23213/6) Normal[22285] throw SyntaxError
  [22286] (23215/7) Call[22286] access __x22__ = (ModuleItemList "ContainsUndefinedBreakTarget" (new []))
  [22287] (23197/3) Loop[22287] (< __x18__ __x16__.length)
  [22288] (23198/3) If[22288] (= __x14__[__x17__] __x16__[__x18__])
  [22289] LoopCont[22289]
  [22290] (23177/2) If[22290] __x10__
  [22291] (23178/2) Normal[22291] throw SyntaxError
  [22292] (23180/3) Call[22292] access __x11__ = (ModuleItemList "ExportedBindings")
  [22293] (23192/3) Loop[22293] (< __x18__ __x15__.length)
  [22294] (23193/3) If[22294] (= __x14__[__x17__] __x15__[__x18__])
  [22295] (23196/3) Normal[22295] __x18__ = 0i
  [22296] (23208/5) If[22296] __x20__
  [22297] (23209/5) Normal[22297] throw SyntaxError
  [22298] (23211/6) Call[22298] access __x21__ = (ModuleItemList "ContainsDuplicateLabels" (new []))
  [22299] (23167/1) Normal[22299] __x7__ = 0i
  [22300] (23168/1) Loop[22300] (< __x7__ __x5__.length)
  [22301] (23172/1) If[22301] __x8__
  [22302] (23173/1) Normal[22302] throw SyntaxError
  [22303] (23175/2) Call[22303] access __x9__ = (ModuleItemList "ExportedNames")
  [22304] (23189/3) Loop[22304] (< __x17__ __x14__.length)
  [22305] (23216/7) If[22305] (= __x22__ true)
  [22306] (23183/3) Normal[22306] let __x14__ = __x11__
  [22307] (23184/3) Normal[22307] let __x15__ = __x12__
  [22308] (23220/8) If[22308] (= __x23__ true)
  [22309] (23221/8) Normal[22309] throw SyntaxError
  [22310] Exit[22310]
  [22311] (23159/1) Call[22311] access __x3__ = (ModuleItemList "VarDeclaredNames")
  [22312] (23219/8) Call[22312] access __x23__ = (ModuleItemList "ContainsUndefinedContinueTarget" (new []) (new []))
  [22313] (23187/3) Normal[22313] let __x18__ = 0i
  [22314] (23188/3) Normal[22314] let __x19__ = false
  [22315] (23182/3) Call[22315] access __x13__ = (ModuleItemList "LexicallyDeclaredNames")
  [22316] (23194/3) Normal[22316] __x19__ = true
  [22317] LoopCont[22317]
  [22318] (23161/1) Normal[22318] let __x5__ = __x3__
  [22319] (23165/1) Loop[22319] (< __x6__ __x4__.length)
  [22320] LoopCont[22320]
  [22321] (23170/1) Normal[22321] __x8__ = true
  [22322] LoopCont[22322]
  [22323] (23186/3) Normal[22323] let __x17__ = 0i
  [22324] (23176/2) Call[22324] app __x10__ = (IsDuplicate __x9__)
  [22325] (23199/3) Normal[22325] __x19__ = true
  [22326] (23217/7) Normal[22326] throw SyntaxError
  [22327] (23181/3) Call[22327] access __x12__ = (ModuleItemList "VarDeclaredNames")
  [22328] (23164/1) Normal[22328] let __x8__ = false
  [22329] (23212/6) If[22329] (= __x21__ true)
  [22330] (23204/4) If[22330] (contains ModuleItemList "super")
  [22331] (23205/4) Normal[22331] throw SyntaxError
  [22332] (23207/5) Call[22332] access __x20__ = (ModuleItemList "Contains" "NewTarget")
  [22333] (23160/1) Normal[22333] let __x4__ = __x2__
  [22334] (23191/3) Normal[22334] __x18__ = 0i
  [22335] (23201/3) If[22335] __x19__
  [22336] (23202/3) Normal[22336] throw SyntaxError
  [22337] (23169/1) If[22337] (= __x4__[__x6__] __x5__[__x7__])
  [22338] (23185/3) Normal[22338] let __x16__ = __x13__
  [22339] LoopCont[22339]
Algo: ModuleBody[0,0].Evaluation [1905]
  [22340] Entry[22340]
  [22341] (23224)Normal[22341] let ModuleBody = this
  [22342] (23228/2) Normal[22342] return undefined
  [22343] (23230/3) Normal[22343] return result
  [22344] (23225/0) Call[22344] access __x0__ = (ModuleItemList "Evaluation")
  [22345] Exit[22345]
  [22346] (23226/0) Normal[22346] let result = __x0__
  [22347] (23227/1) If[22347] (&& (= result.Type ~normal~) (= result.Value ~empty~))
Algo: ModuleEnvironmentRecord.CreateImportBinding [1906]
  [22348] Entry[22348]
  [22349] (23232/3) Normal[22349] ??? "Create an immutable indirect binding in id:{envRec} for id:{N} that references id:{M} and id:{N2} as its target binding and record that the binding is initialized ."
  [22350] (23233/4) Normal[22350] return ~empty~
  [22351] Exit[22351]
Algo: ModuleEnvironmentRecord.GetBindingValue [1907]
  [22352] Entry[22352]
  [22353] (23235/0) Normal[22353] assert (= S true)
  [22354] (23240/8) Normal[22354] return envRec.SubMap[N].BoundValue
  [22355] Exit[22355]
  [22356] (23236/2) Normal[22356] ??? "If the binding for id:{N} is an indirect binding , then in:{} out:{}"
  [22357] (23237/1) If[22357] (! envRec.SubMap[N].initialized)
  [22358] (23238/1) Normal[22358] throw ReferenceError
Algo: ModuleEnvironmentRecord.GetThisBinding [1908]
  [22359] Entry[22359]
  [22360] (23241/0) Normal[22360] return undefined
  [22361] Exit[22361]
Algo: ModuleEnvironmentRecord.HasThisBinding [1909]
  [22362] Entry[22362]
  [22363] (23242/0) Normal[22363] return true
  [22364] Exit[22364]
Algo: ModuleItemList[0,0].ModuleRequests [1910]
  [22365] Entry[22365]
  [22366] (23244)Normal[22366] let ModuleItemList = this
  [22367] (23245/0) Call[22367] access __x0__ = (ModuleItem "ModuleRequests")
  [22368] (23246/0) Normal[22368] return __x0__
  [22369] Exit[22369]
Algo: ModuleItemList[1,0].ContainsDuplicateLabels [1911]
  [22370] Entry[22370]
  [22371] (23248/0) Call[22371] access __x0__ = (ModuleItemList "ContainsDuplicateLabels" labelSet)
  [22372] (23253/2) Call[22372] access __x1__ = (ModuleItem "ContainsDuplicateLabels" labelSet)
  [22373] (23254/2) Normal[22373] return __x1__
  [22374] (23249/0) Normal[22374] let hasDuplicates = __x0__
  [22375] Exit[22375]
  [22376] (23250/1) If[22376] (= hasDuplicates true)
  [22377] (23251/1) Normal[22377] return true
Algo: ModuleItemList[1,0].ContainsUndefinedBreakTarget [1912]
  [22378] Entry[22378]
  [22379] (23256/0) Call[22379] access __x0__ = (ModuleItemList "ContainsUndefinedBreakTarget" labelSet)
  [22380] (23261/2) Call[22380] access __x1__ = (ModuleItem "ContainsUndefinedBreakTarget" labelSet)
  [22381] (23262/2) Normal[22381] return __x1__
  [22382] (23257/0) Normal[22382] let hasUndefinedLabels = __x0__
  [22383] Exit[22383]
  [22384] (23258/1) If[22384] (= hasUndefinedLabels true)
  [22385] (23259/1) Normal[22385] return true
Algo: ModuleItemList[1,0].ContainsUndefinedContinueTarget [1913]
  [22386] Entry[22386]
  [22387] (23264/0) Call[22387] access __x0__ = (ModuleItemList "ContainsUndefinedContinueTarget" iterationSet (new []))
  [22388] (23269/2) Call[22388] access __x1__ = (ModuleItem "ContainsUndefinedContinueTarget" iterationSet (new []))
  [22389] (23270/2) Normal[22389] return __x1__
  [22390] (23265/0) Normal[22390] let hasUndefinedLabels = __x0__
  [22391] Exit[22391]
  [22392] (23266/1) If[22392] (= hasUndefinedLabels true)
  [22393] (23267/1) Normal[22393] return true
Algo: ModuleItemList[1,0].Evaluation [1914]
  [22394] Entry[22394]
  [22395] (23272/0) Call[22395] access __x0__ = (ModuleItemList "Evaluation")
  [22396] (23276/2) Normal[22396] let s = __x1__
  [22397] (23277/3) Call[22397] app __x2__ = (UpdateEmpty s sl)
  [22398] (23273/0) Normal[22398] let sl = __x0__
  [22399] (23278/3) Normal[22399] return __x2__
  [22400] (23274/1) Normal[22400] [? sl]
  [22401] Exit[22401]
  [22402] (23275/2) Call[22402] access __x1__ = (ModuleItem "Evaluation")
Algo: ModuleItemList[1,0].ExportEntries [1915]
  [22403] Entry[22403]
  [22404] (23280/0) Call[22404] access __x0__ = (ModuleItemList "ExportEntries")
  [22405] (23284/1) Normal[22405] let __x3__ = 0i
  [22406] (23285/1) Loop[22406] (< __x3__ __x2__.length)
  [22407] LoopCont[22407]
  [22408] (23281/0) Normal[22408] let entries = __x0__
  [22409] (23287/1) Normal[22409] let __x4__ = __x2__[__x3__]
  [22410] (23290/2) Normal[22410] return entries
  [22411] (23289/1) Normal[22411] append __x4__ -> entries
  [22412] (23282/1) Call[22412] access __x1__ = (ModuleItem "ExportEntries")
  [22413] (23288/1) Normal[22413] __x3__ = (+ __x3__ 1i)
  [22414] (23283/1) Normal[22414] let __x2__ = __x1__
  [22415] Exit[22415]
Algo: ModuleItemList[1,0].ExportedBindings [1916]
  [22416] Entry[22416]
  [22417] (23292/0) Call[22417] access __x0__ = (ModuleItemList "ExportedBindings")
  [22418] (23296/1) Normal[22418] let __x3__ = 0i
  [22419] (23297/1) Loop[22419] (< __x3__ __x2__.length)
  [22420] LoopCont[22420]
  [22421] (23293/0) Normal[22421] let names = __x0__
  [22422] (23299/1) Normal[22422] let __x4__ = __x2__[__x3__]
  [22423] (23302/2) Normal[22423] return names
  [22424] (23301/1) Normal[22424] append __x4__ -> names
  [22425] (23294/1) Call[22425] access __x1__ = (ModuleItem "ExportedBindings")
  [22426] (23300/1) Normal[22426] __x3__ = (+ __x3__ 1i)
  [22427] (23295/1) Normal[22427] let __x2__ = __x1__
  [22428] Exit[22428]
Algo: ModuleItemList[1,0].ExportedNames [1917]
  [22429] Entry[22429]
  [22430] (23304/0) Call[22430] access __x0__ = (ModuleItemList "ExportedNames")
  [22431] (23308/1) Normal[22431] let __x3__ = 0i
  [22432] (23309/1) Loop[22432] (< __x3__ __x2__.length)
  [22433] LoopCont[22433]
  [22434] (23305/0) Normal[22434] let names = __x0__
  [22435] (23311/1) Normal[22435] let __x4__ = __x2__[__x3__]
  [22436] (23314/2) Normal[22436] return names
  [22437] (23313/1) Normal[22437] append __x4__ -> names
  [22438] (23306/1) Call[22438] access __x1__ = (ModuleItem "ExportedNames")
  [22439] (23312/1) Normal[22439] __x3__ = (+ __x3__ 1i)
  [22440] (23307/1) Normal[22440] let __x2__ = __x1__
  [22441] Exit[22441]
Algo: ModuleItemList[1,0].ImportEntries [1918]
  [22442] Entry[22442]
  [22443] (23316/0) Call[22443] access __x0__ = (ModuleItemList "ImportEntries")
  [22444] (23320/1) Normal[22444] let __x3__ = 0i
  [22445] (23321/1) Loop[22445] (< __x3__ __x2__.length)
  [22446] LoopCont[22446]
  [22447] (23317/0) Normal[22447] let entries = __x0__
  [22448] (23323/1) Normal[22448] let __x4__ = __x2__[__x3__]
  [22449] (23326/2) Normal[22449] return entries
  [22450] (23325/1) Normal[22450] append __x4__ -> entries
  [22451] (23318/1) Call[22451] access __x1__ = (ModuleItem "ImportEntries")
  [22452] (23324/1) Normal[22452] __x3__ = (+ __x3__ 1i)
  [22453] (23319/1) Normal[22453] let __x2__ = __x1__
  [22454] Exit[22454]
Algo: ModuleItemList[1,0].LexicallyDeclaredNames [1919]
  [22455] Entry[22455]
  [22456] (23328/0) Call[22456] access __x0__ = (ModuleItemList "LexicallyDeclaredNames")
  [22457] (23332/1) Normal[22457] let __x3__ = 0i
  [22458] (23333/1) Loop[22458] (< __x3__ __x2__.length)
  [22459] LoopCont[22459]
  [22460] (23329/0) Normal[22460] let names = __x0__
  [22461] (23335/1) Normal[22461] let __x4__ = __x2__[__x3__]
  [22462] (23338/2) Normal[22462] return names
  [22463] (23337/1) Normal[22463] append __x4__ -> names
  [22464] (23330/1) Call[22464] access __x1__ = (ModuleItem "LexicallyDeclaredNames")
  [22465] (23336/1) Normal[22465] __x3__ = (+ __x3__ 1i)
  [22466] (23331/1) Normal[22466] let __x2__ = __x1__
  [22467] Exit[22467]
Algo: ModuleItemList[1,0].LexicallyScopedDeclarations [1920]
  [22468] Entry[22468]
  [22469] (23340/0) Call[22469] access __x0__ = (ModuleItemList "LexicallyScopedDeclarations")
  [22470] (23344/1) Normal[22470] let __x3__ = 0i
  [22471] (23345/1) Loop[22471] (< __x3__ __x2__.length)
  [22472] LoopCont[22472]
  [22473] (23341/0) Normal[22473] let declarations = __x0__
  [22474] (23347/1) Normal[22474] let __x4__ = __x2__[__x3__]
  [22475] (23350/2) Normal[22475] return declarations
  [22476] (23349/1) Normal[22476] append __x4__ -> declarations
  [22477] (23342/1) Call[22477] access __x1__ = (ModuleItem "LexicallyScopedDeclarations")
  [22478] (23348/1) Normal[22478] __x3__ = (+ __x3__ 1i)
  [22479] (23343/1) Normal[22479] let __x2__ = __x1__
  [22480] Exit[22480]
Algo: ModuleItemList[1,0].ModuleRequests [1921]
  [22481] Entry[22481]
  [22482] (23352/0) Call[22482] access __x0__ = (ModuleItemList "ModuleRequests")
  [22483] (23356/2) Normal[22483] let __i__ = 0i
  [22484] (23357/2) Loop[22484] (< __i__ additionalNames.length)
  [22485] (23361/3) Normal[22485] return moduleNames
  [22486] Exit[22486]
  [22487] (23353/0) Normal[22487] let moduleNames = __x0__
  [22488] (23358/2) If[22488] (contains moduleNames additionalNames[__i__])
  [22489] LoopCont[22489]
  [22490] (23354/1) Call[22490] access __x1__ = (ModuleItem "ModuleRequests")
  [22491] (23360/2) Normal[22491] append additionalNames[__i__] -> moduleNames
  [22492] (23355/1) Normal[22492] let additionalNames = __x1__
Algo: ModuleItemList[1,0].VarDeclaredNames [1922]
  [22493] Entry[22493]
  [22494] (23363/0) Call[22494] access __x0__ = (ModuleItemList "VarDeclaredNames")
  [22495] (23367/1) Normal[22495] let __x3__ = 0i
  [22496] (23368/1) Loop[22496] (< __x3__ __x2__.length)
  [22497] LoopCont[22497]
  [22498] (23364/0) Normal[22498] let names = __x0__
  [22499] (23370/1) Normal[22499] let __x4__ = __x2__[__x3__]
  [22500] (23373/2) Normal[22500] return names
  [22501] (23372/1) Normal[22501] append __x4__ -> names
  [22502] (23365/1) Call[22502] access __x1__ = (ModuleItem "VarDeclaredNames")
  [22503] (23371/1) Normal[22503] __x3__ = (+ __x3__ 1i)
  [22504] (23366/1) Normal[22504] let __x2__ = __x1__
  [22505] Exit[22505]
Algo: ModuleItemList[1,0].VarScopedDeclarations [1923]
  [22506] Entry[22506]
  [22507] (23375/0) Call[22507] access __x0__ = (ModuleItemList "VarScopedDeclarations")
  [22508] (23379/1) Normal[22508] let __x3__ = 0i
  [22509] (23380/1) Loop[22509] (< __x3__ __x2__.length)
  [22510] LoopCont[22510]
  [22511] (23376/0) Normal[22511] let declarations = __x0__
  [22512] (23382/1) Normal[22512] let __x4__ = __x2__[__x3__]
  [22513] (23385/2) Normal[22513] return declarations
  [22514] (23384/1) Normal[22514] append __x4__ -> declarations
  [22515] (23377/1) Call[22515] access __x1__ = (ModuleItem "VarScopedDeclarations")
  [22516] (23383/1) Normal[22516] __x3__ = (+ __x3__ 1i)
  [22517] (23378/1) Normal[22517] let __x2__ = __x1__
  [22518] Exit[22518]
Algo: ModuleItem[0,0].ContainsDuplicateLabels [1924]
  [22519] Entry[22519]
  [22520] (23387)Normal[22520] let ModuleItem = this
  [22521] (23388/0) Normal[22521] return false
  [22522] Exit[22522]
Algo: ModuleItem[0,0].ContainsUndefinedBreakTarget [1925]
  [22523] Entry[22523]
  [22524] (23390)Normal[22524] let ModuleItem = this
  [22525] (23391/0) Normal[22525] return false
  [22526] Exit[22526]
Algo: ModuleItem[0,0].ContainsUndefinedContinueTarget [1926]
  [22527] Entry[22527]
  [22528] (23393)Normal[22528] let ModuleItem = this
  [22529] (23394/0) Normal[22529] return false
  [22530] Exit[22530]
Algo: ModuleItem[0,0].EarlyErrors [1927]
  [22531] Entry[22531]
  [22532] (23396)Normal[22532] let ModuleItem = this
  [22533] (23400/0) Normal[22533] throw SyntaxError
  [22534] Exit[22534]
  [22535] (23397/0) Call[22535] access __x0__ = (ImportDeclaration "BoundNames")
  [22536] (23398/0) Call[22536] app __x1__ = (IsDuplicate __x0__)
  [22537] (23399/0) If[22537] __x1__
Algo: ModuleItem[0,0].Evaluation [1928]
  [22538] Entry[22538]
  [22539] (23403)Normal[22539] let ModuleItem = this
  [22540] (23404/0) Normal[22540] return ~empty~
  [22541] Exit[22541]
Algo: ModuleItem[0,0].ExportEntries [1929]
  [22542] Entry[22542]
  [22543] (23406)Normal[22543] let ModuleItem = this
  [22544] (23407/0) Normal[22544] return (new [])
  [22545] Exit[22545]
Algo: ModuleItem[0,0].ExportedBindings [1930]
  [22546] Entry[22546]
  [22547] (23409)Normal[22547] let ModuleItem = this
  [22548] (23410/0) Normal[22548] return (new [])
  [22549] Exit[22549]
Algo: ModuleItem[0,0].ExportedNames [1931]
  [22550] Entry[22550]
  [22551] (23412)Normal[22551] let ModuleItem = this
  [22552] (23413/0) Normal[22552] return (new [])
  [22553] Exit[22553]
Algo: ModuleItem[0,0].LexicallyDeclaredNames [1932]
  [22554] Entry[22554]
  [22555] (23415)Normal[22555] let ModuleItem = this
  [22556] (23416/0) Call[22556] access __x0__ = (ImportDeclaration "BoundNames")
  [22557] (23417/0) Normal[22557] return __x0__
  [22558] Exit[22558]
Algo: ModuleItem[0,0].LexicallyScopedDeclarations [1933]
  [22559] Entry[22559]
  [22560] (23419)Normal[22560] let ModuleItem = this
  [22561] (23420/0) Normal[22561] return (new [])
  [22562] Exit[22562]
Algo: ModuleItem[0,0].VarDeclaredNames [1934]
  [22563] Entry[22563]
  [22564] (23422)Normal[22564] let ModuleItem = this
  [22565] (23423/0) Normal[22565] return (new [])
  [22566] Exit[22566]
Algo: ModuleItem[0,0].VarScopedDeclarations [1935]
  [22567] Entry[22567]
  [22568] (23425)Normal[22568] let ModuleItem = this
  [22569] (23426/0) Normal[22569] return (new [])
  [22570] Exit[22570]
Algo: ModuleItem[1,0].ContainsDuplicateLabels [1936]
  [22571] Entry[22571]
  [22572] (23428)Normal[22572] let ModuleItem = this
  [22573] (23429/0) Normal[22573] return false
  [22574] Exit[22574]
Algo: ModuleItem[1,0].ContainsUndefinedBreakTarget [1937]
  [22575] Entry[22575]
  [22576] (23431)Normal[22576] let ModuleItem = this
  [22577] (23432/0) Normal[22577] return false
  [22578] Exit[22578]
Algo: ModuleItem[1,0].ContainsUndefinedContinueTarget [1938]
  [22579] Entry[22579]
  [22580] (23434)Normal[22580] let ModuleItem = this
  [22581] (23435/0) Normal[22581] return false
  [22582] Exit[22582]
Algo: ModuleItem[1,0].ExportedNames [1939]
  [22583] Entry[22583]
  [22584] (23437)Normal[22584] let ModuleItem = this
  [22585] (23438/0) Call[22585] access __x0__ = (ExportDeclaration "ExportedNames")
  [22586] (23439/0) Normal[22586] return __x0__
  [22587] Exit[22587]
Algo: ModuleItem[1,0].ImportEntries [1940]
  [22588] Entry[22588]
  [22589] (23441)Normal[22589] let ModuleItem = this
  [22590] (23442/0) Normal[22590] return (new [])
  [22591] Exit[22591]
Algo: ModuleItem[1,0].LexicallyDeclaredNames [1941]
  [22592] Entry[22592]
  [22593] (23444)Normal[22593] let ModuleItem = this
  [22594] (23445/0) Normal[22594] ??? "If nt:{ExportDeclaration} is code:{export} nt:{VariableStatement} , return a new empty List ."
  [22595] (23446/1) Call[22595] access __x0__ = (ExportDeclaration "BoundNames")
  [22596] (23447/1) Normal[22596] return __x0__
  [22597] Exit[22597]
Algo: ModuleItem[1,0].VarDeclaredNames [1942]
  [22598] Entry[22598]
  [22599] (23449)Normal[22599] let ModuleItem = this
  [22600] (23450/0) Normal[22600] ??? "If nt:{ExportDeclaration} is code:{export} nt:{VariableStatement} , return BoundNames of nt:{ExportDeclaration} ."
  [22601] (23451/1) Normal[22601] return (new [])
  [22602] Exit[22602]
Algo: ModuleItem[1,0].VarScopedDeclarations [1943]
  [22603] Entry[22603]
  [22604] (23453)Normal[22604] let ModuleItem = this
  [22605] (23454/0) Normal[22605] ??? "If nt:{ExportDeclaration} is code:{export} nt:{VariableStatement} , return VarScopedDeclarations of nt:{VariableStatement} ."
  [22606] (23455/1) Normal[22606] return (new [])
  [22607] Exit[22607]
Algo: ModuleItem[2,0].ExportEntries [1944]
  [22608] Entry[22608]
  [22609] (23457)Normal[22609] let ModuleItem = this
  [22610] (23458/0) Normal[22610] return (new [])
  [22611] Exit[22611]
Algo: ModuleItem[2,0].ExportedBindings [1945]
  [22612] Entry[22612]
  [22613] (23460)Normal[22613] let ModuleItem = this
  [22614] (23461/0) Normal[22614] return (new [])
  [22615] Exit[22615]
Algo: ModuleItem[2,0].ExportedNames [1946]
  [22616] Entry[22616]
  [22617] (23463)Normal[22617] let ModuleItem = this
  [22618] (23464/0) Normal[22618] return (new [])
  [22619] Exit[22619]
Algo: ModuleItem[2,0].ImportEntries [1947]
  [22620] Entry[22620]
  [22621] (23466)Normal[22621] let ModuleItem = this
  [22622] (23467/0) Normal[22622] return (new [])
  [22623] Exit[22623]
Algo: ModuleItem[2,0].LexicallyDeclaredNames [1948]
  [22624] Entry[22624]
  [22625] (23469)Normal[22625] let ModuleItem = this
  [22626] (23470/0) Call[22626] access __x0__ = (StatementListItem "LexicallyDeclaredNames")
  [22627] (23471/0) Normal[22627] return __x0__
  [22628] Exit[22628]
Algo: ModuleItem[2,0].ModuleRequests [1949]
  [22629] Entry[22629]
  [22630] (23473)Normal[22630] let ModuleItem = this
  [22631] (23474/0) Normal[22631] return (new [])
  [22632] Exit[22632]
Algo: ModuleNamespaceCreate [1950]
  [22633] Entry[22633]
  [22634] (23476/1) Normal[22634] assert (= module.Namespace undefined)
  [22635] (23480/6) Normal[22635] M.Prototype = null
  [22636] (23481/7) Normal[22636] M.Module = module
  [22637] (23485/11) Normal[22637] module.Namespace = M
  [22638] (23486/12) Normal[22638] return M
  [22639] (23477/3) Normal[22639] let internalSlotsList = (new ["Module", "Exports", "Prototype"])
  [22640] (23482/8) Normal[22640] let sortedExports = (copy-obj exports)
  [22641] (23484/10) Normal[22641] M.SubMap = (new SubMap())
  [22642] (23478/4) Call[22642] app __x0__ = (MakeBasicObject internalSlotsList)
  [22643] (23483/9) Normal[22643] M.Exports = sortedExports
  [22644] (23479/4) Normal[22644] let M = [! __x0__]
  [22645] Exit[22645]
Algo: ModuleNamespaceExoticObject.DefineOwnProperty [1951]
  [22646] Entry[22646]
  [22647] (23488/0) If[22647] (= (typeof P) Symbol)
  [22648] (23494/1) Normal[22648] let current = [? __x1__]
  [22649] (23495/2) If[22649] (= current undefined)
  [22650] (23501/4) If[22650] (= Desc.Enumerable false)
  [22651] (23502/4) Normal[22651] return false
  [22652] (23504/5) Call[22652] app __x2__ = (IsAccessorDescriptor Desc)
  [22653] (23506/5) Normal[22653] return false
  [22654] (23508/6) If[22654] (= Desc.Writable false)
  [22655] (23516/8) Normal[22655] return true
  [22656] Exit[22656]
  [22657] (23490/0) Call[22657] app __x0__ = (OrdinaryDefineOwnProperty O P Desc)
  [22658] (23493/1) Call[22658] app __x1__ = (O.GetOwnProperty O P)
  [22659] (23496/2) Normal[22659] return false
  [22660] (23498/3) If[22660] (= Desc.Configurable true)
  [22661] (23499/3) Normal[22661] return false
  [22662] (23505/5) If[22662] (= [! __x2__] true)
  [22663] (23491/0) Normal[22663] return __x0__
  [22664] (23511/7) If[22664] (! (= Desc.Value absent))
  [22665] (23513/7) Call[22665] app __x3__ = (SameValue Desc.Value current.Value)
  [22666] (23514/7) Normal[22666] return __x3__
  [22667] (23509/6) Normal[22667] return false
Algo: ModuleNamespaceExoticObject.Delete [1952]
  [22668] Entry[22668]
  [22669] (23518/0) Call[22669] app __x0__ = (IsPropertyKey P)
  [22670] (23523/2) Normal[22670] return [? __x1__]
  [22671] (23525/3) Normal[22671] let exports = O.Exports
  [22672] (23519/0) Normal[22672] assert (= __x0__ true)
  [22673] (23526/4) If[22673] (contains exports P)
  [22674] (23529/5) Normal[22674] return true
  [22675] Exit[22675]
  [22676] (23520/1) If[22676] (= (typeof P) Symbol)
  [22677] (23527/4) Normal[22677] return false
  [22678] (23522/2) Call[22678] app __x1__ = (OrdinaryDelete O P)
Algo: ModuleNamespaceExoticObject.Get [1953]
  [22679] Entry[22679]
  [22680] (23531/0) Call[22680] app __x0__ = (IsPropertyKey P)
  [22681] (23536/2) Normal[22681] return [? __x1__]
  [22682] (23538/3) Normal[22682] let exports = O.Exports
  [22683] (23543/6) Call[22683] app __x2__ = (m.ResolveExport m P)
  [22684] (23544/6) Normal[22684] let binding = [! __x2__]
  [22685] (23547/9) Normal[22685] assert (! (= targetModule undefined))
  [22686] (23548/10) If[22686] (= binding.BindingName "*namespace*")
  [22687] (23555/13) Normal[22687] throw ReferenceError
  [22688] (23557/14) Call[22688] app __x4__ = (targetEnv.GetBindingValue targetEnv binding.BindingName true)
  [22689] (23532/0) Normal[22689] assert (= __x0__ true)
  [22690] (23539/4) If[22690] (! (contains exports P))
  [22691] (23558/14) Normal[22691] return [? __x4__]
  [22692] (23542/5) Normal[22692] let m = O.Module
  [22693] (23546/8) Normal[22693] let targetModule = binding.Module
  [22694] (23533/1) If[22694] (= (typeof P) Symbol)
  [22695] (23551/11) Normal[22695] return [? __x3__]
  [22696] (23553/12) Normal[22696] let targetEnv = targetModule.Environment
  [22697] Exit[22697]
  [22698] (23545/7) Normal[22698] assert (is-instance-of binding ResolvedBindingRecord)
  [22699] (23540/4) Normal[22699] return undefined
  [22700] (23535/2) Call[22700] app __x1__ = (OrdinaryGet O P Receiver)
  [22701] (23554/13) If[22701] (= targetEnv undefined)
  [22702] (23550/11) Call[22702] app __x3__ = (GetModuleNamespace targetModule)
Algo: ModuleNamespaceExoticObject.GetOwnProperty [1954]
  [22703] Entry[22703]
  [22704] (23560/0) If[22704] (= (typeof P) Symbol)
  [22705] (23566/2) If[22705] (! (contains exports P))
  [22706] (23567/2) Normal[22706] return undefined
  [22707] (23569/3) Call[22707] app __x1__ = (O.Get O P O)
  [22708] (23562/0) Call[22708] app __x0__ = (OrdinaryGetOwnProperty O P)
  [22709] (23565/1) Normal[22709] let exports = O.Exports
  [22710] (23571/4) Normal[22710] return (new PropertyDescriptor("Value" -> value, "Writable" -> true, "Enumerable" -> true, "Configurable" -> false))
  [22711] Exit[22711]
  [22712] (23563/0) Normal[22712] return __x0__
  [22713] (23570/3) Normal[22713] let value = [? __x1__]
Algo: ModuleNamespaceExoticObject.HasProperty [1955]
  [22714] Entry[22714]
  [22715] (23573/0) If[22715] (= (typeof P) Symbol)
  [22716] (23579/2) If[22716] (contains exports P)
  [22717] (23580/2) Normal[22717] return true
  [22718] (23582/3) Normal[22718] return false
  [22719] (23575/0) Call[22719] app __x0__ = (OrdinaryHasProperty O P)
  [22720] (23578/1) Normal[22720] let exports = O.Exports
  [22721] (23576/0) Normal[22721] return __x0__
  [22722] Exit[22722]
Algo: ModuleNamespaceExoticObject.IsExtensible [1956]
  [22723] Entry[22723]
  [22724] (23583/0) Normal[22724] return false
  [22725] Exit[22725]
Algo: ModuleNamespaceExoticObject.OwnPropertyKeys [1957]
  [22726] Entry[22726]
  [22727] (23585/0) Normal[22727] let exports = (copy-obj O.Exports)
  [22728] (23589/2) Normal[22728] let __x2__ = 0i
  [22729] (23590/2) Loop[22729] (< __x2__ __x1__.length)
  [22730] LoopCont[22730]
  [22731] (23586/1) Call[22731] app __x0__ = (OrdinaryOwnPropertyKeys O)
  [22732] (23592/2) Normal[22732] let __x3__ = __x1__[__x2__]
  [22733] (23595/3) Normal[22733] return exports
  [22734] (23594/2) Normal[22734] append __x3__ -> exports
  [22735] (23587/1) Normal[22735] let symbolKeys = [! __x0__]
  [22736] (23593/2) Normal[22736] __x2__ = (+ __x2__ 1i)
  [22737] (23588/2) Normal[22737] let __x1__ = symbolKeys
  [22738] Exit[22738]
Algo: ModuleNamespaceExoticObject.PreventExtensions [1958]
  [22739] Entry[22739]
  [22740] (23596/0) Normal[22740] return true
  [22741] Exit[22741]
Algo: ModuleNamespaceExoticObject.Set [1959]
  [22742] Entry[22742]
  [22743] (23597/0) Normal[22743] return false
  [22744] Exit[22744]
Algo: ModuleNamespaceExoticObject.SetPrototypeOf [1960]
  [22745] Entry[22745]
  [22746] (23599/0) Call[22746] app __x0__ = (SetImmutablePrototype O V)
  [22747] (23600/0) Normal[22747] return [? __x0__]
  [22748] Exit[22748]
Algo: ModuleRecord.Evaluate [1961]
  [22749] Entry[22749]
  [22750] (23601)Normal[22750] return undefined
  [22751] Exit[22751]
Algo: ModuleRecord.Link [1962]
  [22752] Entry[22752]
  [22753] (23602)Normal[22753] return undefined
  [22754] Exit[22754]
Algo: ModuleRecord.ResolveExport [1963]
  [22755] Entry[22755]
  [22756] (23603)Normal[22756] return (new ResolvedBindingRecord())
  [22757] Exit[22757]
Algo: ModuleSpecifier[0,0].ModuleRequests [1964]
  [22758] Entry[22758]
  [22759] (23605)Normal[22759] let ModuleSpecifier = this
  [22760] (23606/0) Call[22760] access __x0__ = (StringLiteral "SV")
  [22761] (23607/0) Normal[22761] return (new [__x0__])
  [22762] Exit[22762]
Algo: Module[0,0].Evaluation [1965]
  [22763] Entry[22763]
  [22764] (23609)Normal[22764] let Module = this
  [22765] (23610/0) Normal[22765] return undefined
  [22766] Exit[22766]
Algo: Module[0,0].ExportEntries [1966]
  [22767] Entry[22767]
  [22768] (23612)Normal[22768] let Module = this
  [22769] (23613/0) Normal[22769] return (new [])
  [22770] Exit[22770]
Algo: Module[0,0].ImportEntries [1967]
  [22771] Entry[22771]
  [22772] (23615)Normal[22772] let Module = this
  [22773] (23616/0) Normal[22773] return (new [])
  [22774] Exit[22774]
Algo: Module[0,0].LexicallyScopedDeclarations [1968]
  [22775] Entry[22775]
  [22776] (23618)Normal[22776] let Module = this
  [22777] (23619/0) Normal[22777] return (new [])
  [22778] Exit[22778]
Algo: Module[0,0].ModuleRequests [1969]
  [22779] Entry[22779]
  [22780] (23621)Normal[22780] let Module = this
  [22781] (23622/0) Normal[22781] return (new [])
  [22782] Exit[22782]
Algo: Module[0,0].VarDeclaredNames [1970]
  [22783] Entry[22783]
  [22784] (23624)Normal[22784] let Module = this
  [22785] (23625/0) Normal[22785] return (new [])
  [22786] Exit[22786]
Algo: Module[0,0].VarScopedDeclarations [1971]
  [22787] Entry[22787]
  [22788] (23627)Normal[22788] let Module = this
  [22789] (23628/0) Normal[22789] return (new [])
  [22790] Exit[22790]
Algo: MonthFromTime [1972]
  [22791] Entry[22791]
  [22792] (23630/0) Call[22792] app __x0__ = (DayWithinYear t)
  [22793] (23635/1) Call[22793] app __x2__ = (InLeapYear t)
  [22794] (23636/1) If[22794] (&& (! (< __x1__ 31i)) (< __x1__ (+ 59i __x2__)))
  [22795] (23631/0) If[22795] (&& (! (< __x0__ 0i)) (< __x0__ 31i))
  [22796] (23637/1) Normal[22796] return 1i
  [22797] (23639/2) Call[22797] app __x3__ = (InLeapYear t)
  [22798] (23632/0) Normal[22798] return 0i
  [22799] (23634/1) Call[22799] app __x1__ = (DayWithinYear t)
  [22800] (23640/2) Call[22800] app __x4__ = (DayWithinYear t)
  [22801] (23641/2) Call[22801] app __x5__ = (InLeapYear t)
  [22802] (23642/2) If[22802] (&& (! (< __x4__ (+ 59i __x3__))) (< __x4__ (+ 90i __x5__)))
  [22803] (23696/11) If[22803] (&& (! (< __x31__ (+ 334i __x30__))) (< __x31__ (+ 365i __x32__)))
  [22804] (23697/11) Normal[22804] return 11i
  [22805] Exit[22805]
  [22806] (23679/8) Normal[22806] return 8i
  [22807] (23681/9) Call[22807] app __x24__ = (InLeapYear t)
  [22808] (23658/5) Call[22808] app __x13__ = (DayWithinYear t)
  [22809] (23659/5) Call[22809] app __x14__ = (InLeapYear t)
  [22810] (23673/7) Normal[22810] return 7i
  [22811] (23675/8) Call[22811] app __x21__ = (InLeapYear t)
  [22812] (23660/5) If[22812] (&& (! (< __x13__ (+ 151i __x12__))) (< __x13__ (+ 181i __x14__)))
  [22813] (23691/10) Normal[22813] return 10i
  [22814] (23693/11) Call[22814] app __x30__ = (InLeapYear t)
  [22815] (23646/3) Call[22815] app __x7__ = (DayWithinYear t)
  [22816] (23647/3) Call[22816] app __x8__ = (InLeapYear t)
  [22817] (23653/4) Call[22817] app __x11__ = (InLeapYear t)
  [22818] (23654/4) If[22818] (&& (! (< __x10__ (+ 120i __x9__))) (< __x10__ (+ 151i __x11__)))
  [22819] (23684/9) If[22819] (&& (! (< __x25__ (+ 273i __x24__))) (< __x25__ (+ 304i __x26__)))
  [22820] (23685/9) Normal[22820] return 9i
  [22821] (23687/10) Call[22821] app __x27__ = (InLeapYear t)
  [22822] (23664/6) Call[22822] app __x16__ = (DayWithinYear t)
  [22823] (23665/6) Call[22823] app __x17__ = (InLeapYear t)
  [22824] (23655/4) Normal[22824] return 4i
  [22825] (23657/5) Call[22825] app __x12__ = (InLeapYear t)
  [22826] (23669/7) Call[22826] app __x18__ = (InLeapYear t)
  [22827] (23670/7) Call[22827] app __x19__ = (DayWithinYear t)
  [22828] (23663/6) Call[22828] app __x15__ = (InLeapYear t)
  [22829] (23676/8) Call[22829] app __x22__ = (DayWithinYear t)
  [22830] (23694/11) Call[22830] app __x31__ = (DayWithinYear t)
  [22831] (23645/3) Call[22831] app __x6__ = (InLeapYear t)
  [22832] (23678/8) If[22832] (&& (! (< __x22__ (+ 243i __x21__))) (< __x22__ (+ 273i __x23__)))
  [22833] (23683/9) Call[22833] app __x26__ = (InLeapYear t)
  [22834] (23649/3) Normal[22834] return 3i
  [22835] (23651/4) Call[22835] app __x9__ = (InLeapYear t)
  [22836] (23667/6) Normal[22836] return 6i
  [22837] (23671/7) Call[22837] app __x20__ = (InLeapYear t)
  [22838] (23682/9) Call[22838] app __x25__ = (DayWithinYear t)
  [22839] (23661/5) Normal[22839] return 5i
  [22840] (23643/2) Normal[22840] return 2i
  [22841] (23695/11) Call[22841] app __x32__ = (InLeapYear t)
  [22842] (23688/10) Call[22842] app __x28__ = (DayWithinYear t)
  [22843] (23689/10) Call[22843] app __x29__ = (InLeapYear t)
  [22844] (23677/8) Call[22844] app __x23__ = (InLeapYear t)
  [22845] (23672/7) If[22845] (&& (! (< __x19__ (+ 212i __x18__))) (< __x19__ (+ 243i __x20__)))
  [22846] (23652/4) Call[22846] app __x10__ = (DayWithinYear t)
  [22847] (23690/10) If[22847] (&& (! (< __x28__ (+ 304i __x27__))) (< __x28__ (+ 334i __x29__)))
  [22848] (23648/3) If[22848] (&& (! (< __x7__ (+ 90i __x6__))) (< __x7__ (+ 120i __x8__)))
  [22849] (23666/6) If[22849] (&& (! (< __x16__ (+ 181i __x15__))) (< __x16__ (+ 212i __x17__)))
Algo: MultiplicativeExpression[1,0].AssignmentTargetType [1973]
  [22850] Entry[22850]
  [22851] (23699/0) Normal[22851] return ~invalid~
  [22852] Exit[22852]
Algo: MultiplicativeExpression[1,0].Evaluation [1974]
  [22853] Entry[22853]
  [22854] (23701/0) Normal[22854] let opText = (get-syntax MultiplicativeOperator)
  [22855] (23702/1) Call[22855] app __x0__ = (EvaluateStringOrNumericBinaryExpression MultiplicativeExpression opText ExponentiationExpression)
  [22856] (23703/1) Normal[22856] return [? __x0__]
  [22857] Exit[22857]
Algo: MultiplicativeExpression[1,0].HasCallInTailPosition [1975]
  [22858] Entry[22858]
  [22859] (23704/0) Normal[22859] return false
  [22860] Exit[22860]
Algo: MultiplicativeExpression[1,0].IsFunctionDefinition [1976]
  [22861] Entry[22861]
  [22862] (23705/0) Normal[22862] return false
  [22863] Exit[22863]
Algo: NameSpaceImport[0,0].ImportEntriesForModule [1977]
  [22864] Entry[22864]
  [22865] (23707)Normal[22865] let NameSpaceImport = this
  [22866] (23711/2) Normal[22866] return (new [entry])
  [22867] Exit[22867]
  [22868] (23708/0) Call[22868] access __x0__ = (ImportedBinding "StringValue")
  [22869] (23709/0) Normal[22869] let localName = __x0__
  [22870] (23710/1) Normal[22870] let entry = (new ImportEntryRecord("ModuleRequest" -> module, "ImportName" -> "*", "LocalName" -> localName))
Algo: NamedExports[0,0].ExportEntriesForModule [1978]
  [22871] Entry[22871]
  [22872] (23713)Normal[22872] let NamedExports = this
  [22873] (23714/0) Normal[22873] return (new [])
  [22874] Exit[22874]
Algo: NamedExports[0,0].ExportedBindings [1979]
  [22875] Entry[22875]
  [22876] (23716)Normal[22876] let NamedExports = this
  [22877] (23717/0) Normal[22877] return (new [])
  [22878] Exit[22878]
Algo: NamedExports[0,0].ExportedNames [1980]
  [22879] Entry[22879]
  [22880] (23719)Normal[22880] let NamedExports = this
  [22881] (23720/0) Normal[22881] return (new [])
  [22882] Exit[22882]
Algo: NamedExports[0,0].ReferencedBindings [1981]
  [22883] Entry[22883]
  [22884] (23722)Normal[22884] let NamedExports = this
  [22885] (23723/0) Normal[22885] return (new [])
  [22886] Exit[22886]
Algo: NamedImports[0,0].BoundNames [1982]
  [22887] Entry[22887]
  [22888] (23725)Normal[22888] let NamedImports = this
  [22889] (23726/0) Normal[22889] return (new [])
  [22890] Exit[22890]
Algo: NamedImports[0,0].ImportEntriesForModule [1983]
  [22891] Entry[22891]
  [22892] (23728)Normal[22892] let NamedImports = this
  [22893] (23729/0) Normal[22893] return (new [])
  [22894] Exit[22894]
Algo: NewDeclarativeEnvironment [1984]
  [22895] Entry[22895]
  [22896] (23731/0) Normal[22896] let env = (new DeclarativeEnvironmentRecord())
  [22897] (23732/1) Normal[22897] env.OuterEnv = E
  [22898] (23733/2) Normal[22898] return env
  [22899] Exit[22899]
Algo: NewExpression[1,0].AssignmentTargetType [1985]
  [22900] Entry[22900]
  [22901] (23734/0) Normal[22901] return ~invalid~
  [22902] Exit[22902]
Algo: NewExpression[1,0].Evaluation [1986]
  [22903] Entry[22903]
  [22904] (23736/0) Call[22904] app __x0__ = (EvaluateNew NewExpression ~empty~)
  [22905] (23737/0) Normal[22905] return [? __x0__]
  [22906] Exit[22906]
Algo: NewExpression[1,0].HasCallInTailPosition [1987]
  [22907] Entry[22907]
  [22908] (23738/0) Normal[22908] return false
  [22909] Exit[22909]
Algo: NewExpression[1,0].IsDestructuring [1988]
  [22910] Entry[22910]
  [22911] (23739/0) Normal[22911] return false
  [22912] Exit[22912]
Algo: NewExpression[1,0].IsFunctionDefinition [1989]
  [22913] Entry[22913]
  [22914] (23740/0) Normal[22914] return false
  [22915] Exit[22915]
Algo: NewExpression[1,0].IsIdentifierRef [1990]
  [22916] Entry[22916]
  [22917] (23741/0) Normal[22917] return false
  [22918] Exit[22918]
Algo: NewFunctionEnvironment [1991]
  [22919] Entry[22919]
  [22920] (23743/0) Normal[22920] assert (is-instance-of F ECMAScriptFunctionObject)
  [22921] (23747/4) If[22921] (= F.ThisMode ~lexical~)
  [22922] (23748/4) Normal[22922] env.ThisBindingStatus = ~lexical~
  [22923] (23749/4) Normal[22923] env.ThisBindingStatus = ~uninitialized~
  [22924] (23752/8) Normal[22924] return env
  [22925] Exit[22925]
  [22926] (23744/1) Normal[22926] assert (|| (= (typeof newTarget) Undefined) (= (typeof newTarget) Object))
  [22927] (23750/6) Normal[22927] env.NewTarget = newTarget
  [22928] (23751/7) Normal[22928] env.OuterEnv = F.Environment
  [22929] (23745/2) Normal[22929] let env = (new FunctionEnvironmentRecord())
  [22930] (23746/3) Normal[22930] env.FunctionObject = F
Algo: NewGlobalEnvironment [1992]
  [22931] Entry[22931]
  [22932] (23754/0) Normal[22932] let objRec = (new ObjectEnvironmentRecord("BindingObject" -> G, "withEnvironment" -> false))
  [22933] (23758/4) Normal[22933] env.GlobalThisValue = thisValue
  [22934] (23759/5) Normal[22934] env.DeclarativeRecord = dclRec
  [22935] (23755/1) Normal[22935] let dclRec = (new DeclarativeEnvironmentRecord())
  [22936] (23760/6) Normal[22936] env.VarNames = (new [])
  [22937] (23762/8) Normal[22937] return env
  [22938] Exit[22938]
  [22939] (23756/2) Normal[22939] let env = (new GlobalEnvironmentRecord())
  [22940] (23761/7) Normal[22940] env.OuterEnv = null
  [22941] (23757/3) Normal[22941] env.ObjectRecord = objRec
Algo: NewModuleEnvironment [1993]
  [22942] Entry[22942]
  [22943] (23764/0) Normal[22943] let env = (new ModuleEnvironmentRecord())
  [22944] (23765/1) Normal[22944] env.OuterEnv = E
  [22945] (23766/2) Normal[22945] return env
  [22946] Exit[22946]
Algo: NewObjectEnvironment [1994]
  [22947] Entry[22947]
  [22948] (23768/0) Normal[22948] let env = (new ObjectEnvironmentRecord("BindingObject" -> O, "withEnvironment" -> false))
  [22949] (23769/1) Normal[22949] env.OuterEnv = E
  [22950] (23770/2) Normal[22950] return env
  [22951] Exit[22951]
Algo: NewPromiseCapability [1995]
  [22952] Entry[22952]
  [22953] (23772/0) Call[22953] app __x0__ = (IsConstructor C)
  [22954] (23777/3) Normal[22954] let steps = ALGORITHM["GLOBAL.GetCapabilitiesExecutorFunctions"]
  [22955] (23778/4) Normal[22955] let length = 2i
  [22956] (23782/7) Call[22956] app __x2__ = (Construct C (new [executor]))
  [22957] (23783/7) Normal[22957] let promise = [? __x2__]
  [22958] (23786/8) Normal[22958] throw TypeError
  [22959] (23788/9) Call[22959] app __x4__ = (IsCallable promiseCapability.Reject)
  [22960] (23773/0) If[22960] (= __x0__ false)
  [22961] (23779/5) Call[22961] app __x1__ = (CreateBuiltinFunction steps length "" (new ["Capability"]))
  [22962] (23781/6) Normal[22962] executor.Capability = promiseCapability
  [22963] (23785/8) If[22963] (= __x3__ false)
  [22964] (23774/0) Normal[22964] throw TypeError
  [22965] (23776/2) Normal[22965] let promiseCapability = (new PromiseCapabilityRecord("Promise" -> undefined, "Resolve" -> undefined, "Reject" -> undefined))
  [22966] (23790/9) Normal[22966] throw TypeError
  [22967] (23792/10) Normal[22967] promiseCapability.Promise = promise
  [22968] (23784/8) Call[22968] app __x3__ = (IsCallable promiseCapability.Resolve)
  [22969] (23780/5) Normal[22969] let executor = [! __x1__]
  [22970] (23793/11) Normal[22970] return promiseCapability
  [22971] (23789/9) If[22971] (= __x4__ false)
  [22972] Exit[22972]
Algo: NewPromiseReactionJob [1997]
  [22999] Entry[22999]
  [23000] (23795/0) Arrow[23000] clo __x0__ = ()[reaction, argument] => {
  let promiseCapability = reaction.Capability
  let type = reaction.Type
  let handler = reaction.Handler
  if (= handler ~empty~) if (= type ~Fulfill~) {
    app __x1__ = (NormalCompletion argument)
    let handlerResult = __x1__
  } else {
    assert (= type ~Reject~)
    app __x2__ = (ThrowCompletion argument)
    let handlerResult = __x2__
  } else {
    app __x3__ = (HostCallJobCallback handler undefined (new [argument]))
    let handlerResult = __x3__
  }
  if (= promiseCapability undefined) {
    app __x4__ = (IsAbruptCompletion handlerResult)
    assert (! __x4__)
    return ~empty~
  } else {}
  assert (is-instance-of promiseCapability PromiseCapabilityRecord)
  app __x5__ = (IsAbruptCompletion handlerResult)
  if __x5__ {
    app __x6__ = (Call promiseCapability.Reject undefined (new [handlerResult.Value]))
    let status = __x6__
  } else {
    app __x7__ = (Call promiseCapability.Resolve undefined (new [handlerResult.Value]))
    let status = __x7__
  }
  return status
} [fid: 1996]
  [23001] (23832/22) Call[23001] app __x8__ = (GetFunctionRealm reaction.Handler.Callback)
  [23002] (23833/22) Normal[23002] let getHandlerRealmResult = __x8__
  [23003] (23838/26) Normal[23003] return (new Record("Job" -> job, "Realm" -> handlerRealm))
  [23004] Exit[23004]
  [23005] (23828/0) Normal[23005] let job = __x0__
  [23006] (23834/23) If[23006] (&& (is-completion getHandlerRealmResult) (= getHandlerRealmResult.Type ~normal~))
  [23007] (23836/23) Normal[23007] handlerRealm = REALM
  [23008] (23829/20) Normal[23008] let handlerRealm = null
  [23009] (23835/23) Normal[23009] handlerRealm = getHandlerRealmResult.Value
  [23010] (23830/21) If[23010] (! (= reaction.Handler ~empty~))
Algo: NewPromiseReactionJob:0 [1996]
  [22973] Entry[22973]
  [22974] (23797/2) Normal[22974] let promiseCapability = reaction.Capability
  [22975] (23801/6) If[22975] (= type ~Fulfill~)
  [22976] (23803/6) Call[22976] app __x1__ = (NormalCompletion argument)
  [22977] (23806/8) Normal[22977] assert (= type ~Reject~)
  [22978] (23808/9) Normal[22978] let handlerResult = __x2__
  [22979] (23812/11) If[22979] (= promiseCapability undefined)
  [22980] (23827/19) Normal[22980] return status
  [22981] Exit[22981]
  [22982] (23814/12) Call[22982] app __x4__ = (IsAbruptCompletion handlerResult)
  [22983] (23815/12) Normal[22983] assert (! __x4__)
  [22984] (23822/16) Call[22984] app __x6__ = (Call promiseCapability.Reject undefined (new [handlerResult.Value]))
  [22985] (23823/16) Normal[22985] let status = __x6__
  [22986] (23798/3) Normal[22986] let type = reaction.Type
  [22987] (23804/6) Normal[22987] let handlerResult = __x1__
  [22988] (23807/9) Call[22988] app __x2__ = (ThrowCompletion argument)
  [22989] (23818/14) Normal[22989] assert (is-instance-of promiseCapability PromiseCapabilityRecord)
  [22990] (23799/4) Normal[22990] let handler = reaction.Handler
  [22991] (23819/15) Call[22991] app __x5__ = (IsAbruptCompletion handlerResult)
  [22992] (23825/18) Call[22992] app __x7__ = (Call promiseCapability.Resolve undefined (new [handlerResult.Value]))
  [22993] (23826/18) Normal[22993] let status = __x7__
  [22994] (23811/8) Normal[22994] let handlerResult = __x3__
  [22995] (23800/5) If[22995] (= handler ~empty~)
  [22996] (23820/15) If[22996] __x5__
  [22997] (23816/13) Normal[22997] return ~empty~
  [22998] (23810/8) Call[22998] app __x3__ = (HostCallJobCallback handler undefined (new [argument]))
Algo: NewPromiseResolveThenableJob [1999]
  [23023] Entry[23023]
  [23024] (23840/0) Arrow[23024] clo __x0__ = ()[promiseToResolve, thenable, then] => {
  app __x1__ = (CreateResolvingFunctions promiseToResolve)
  let resolvingFunctions = __x1__
  app __x2__ = (HostCallJobCallback then thenable (new [resolvingFunctions.Resolve, resolvingFunctions.Reject]))
  let thenCallResult = __x2__
  app __x3__ = (IsAbruptCompletion thenCallResult)
  if __x3__ {
    app __x4__ = (Call resolvingFunctions.Reject undefined (new [thenCallResult.Value]))
    let status = __x4__
    return status
  } else {}
  return thenCallResult
} [fid: 1998]
  [23025] (23857/8) If[23025] (&& (is-completion getThenRealmResult) (= getThenRealmResult.Type ~normal~))
  [23026] (23858/8) Normal[23026] let thenRealm = getThenRealmResult.Value
  [23027] (23859/8) Normal[23027] let thenRealm = REALM
  [23028] (23854/0) Normal[23028] let job = __x0__
  [23029] (23860/11) Normal[23029] return (new Record("Job" -> job, "Realm" -> thenRealm))
  [23030] (23855/7) Call[23030] app __x5__ = (GetFunctionRealm then.Callback)
  [23031] (23856/7) Normal[23031] let getThenRealmResult = __x5__
  [23032] Exit[23032]
Algo: NewPromiseResolveThenableJob:0 [1998]
  [23011] Entry[23011]
  [23012] (23842/1) Call[23012] app __x1__ = (CreateResolvingFunctions promiseToResolve)
  [23013] (23846/3) Call[23013] app __x3__ = (IsAbruptCompletion thenCallResult)
  [23014] (23847/3) If[23014] __x3__
  [23015] (23853/6) Normal[23015] return thenCallResult
  [23016] Exit[23016]
  [23017] (23843/1) Normal[23017] let resolvingFunctions = __x1__
  [23018] (23849/4) Call[23018] app __x4__ = (Call resolvingFunctions.Reject undefined (new [thenCallResult.Value]))
  [23019] (23851/5) Normal[23019] return status
  [23020] (23844/2) Call[23020] app __x2__ = (HostCallJobCallback then thenable (new [resolvingFunctions.Resolve, resolvingFunctions.Reject]))
  [23021] (23850/4) Normal[23021] let status = __x4__
  [23022] (23845/2) Normal[23022] let thenCallResult = __x2__
Algo: NewTarget[0,0].AssignmentTargetType [2000]
  [23033] Entry[23033]
  [23034] (23862)Normal[23034] let NewTarget = this
  [23035] (23863/0) Normal[23035] return ~invalid~
  [23036] Exit[23036]
Algo: NewTarget[0,0].Evaluation [2001]
  [23037] Entry[23037]
  [23038] (23865)Normal[23038] let NewTarget = this
  [23039] (23866/0) Call[23039] app __x0__ = (GetNewTarget)
  [23040] (23867/0) Normal[23040] return __x0__
  [23041] Exit[23041]
Algo: NonemptyClassRangesNoDash[0,0].Evaluation [2002]
  [23042] Entry[23042]
  [23043] (23869)Normal[23043] let NonemptyClassRangesNoDash = this
  [23044] (23870/0) Call[23044] access __x0__ = (ClassAtom "Evaluation")
  [23045] (23871/0) Normal[23045] return __x0__
  [23046] Exit[23046]
Algo: NonemptyClassRangesNoDash[1,0].Evaluation [2003]
  [23047] Entry[23047]
  [23048] (23873/0) Call[23048] access __x0__ = (ClassAtomNoDash "Evaluation")
  [23049] (23877/2) Normal[23049] return (+ A B)
  [23050] Exit[23050]
  [23051] (23874/0) Normal[23051] let A = __x0__
  [23052] (23875/1) Call[23052] access __x1__ = (NonemptyClassRangesNoDash "Evaluation")
  [23053] (23876/1) Normal[23053] let B = __x1__
Algo: NonemptyClassRangesNoDash[2,0].EarlyErrors [2004]
  [23054] Entry[23054]
  [23055] (23879)Normal[23055] let NonemptyClassRangesNoDash = this
  [23056] (23883/0) If[23056] __x0__
  [23057] (23888/0) If[23057] __x0__
  [23058] (23886/26) Call[23058] access __x2__ = (ClassAtom "IsCharacterClass")
  [23059] (23891/1) Normal[23059] let __x3__ = true
  [23060] (23892/1) Call[23060] access __x4__ = (ClassAtomNoDash "IsCharacterClass")
  [23061] (23896/1) Call[23061] access __x5__ = (ClassAtom "IsCharacterClass")
  [23062] (23897/1) Normal[23062] __x3__ = (= __x5__ false)
  [23063] (23905/1) If[23063] __x3__
  [23064] (23906/1) Normal[23064] throw SyntaxError
  [23065] Exit[23065]
  [23066] (23880/0) Normal[23066] let __x0__ = true
  [23067] (23887/26) Normal[23067] __x0__ = (= __x2__ true)
  [23068] (23889/0) Normal[23068] throw SyntaxError
  [23069] (23894/1) If[23069] __x3__
  [23070] (23881/0) Call[23070] access __x1__ = (ClassAtomNoDash "IsCharacterClass")
  [23071] (23900/1) Call[23071] access __x6__ = (ClassAtomNoDash "CharacterValue")
  [23072] (23901/1) Call[23072] access __x7__ = (ClassAtom "CharacterValue")
  [23073] (23893/1) Normal[23073] __x3__ = (= __x4__ false)
  [23074] (23882/0) Normal[23074] __x0__ = (= __x1__ true)
  [23075] (23902/1) Normal[23075] __x3__ = (< __x7__ __x6__)
  [23076] (23898/1) If[23076] __x3__
Algo: NonemptyClassRangesNoDash[2,0].Evaluation [2005]
  [23077] Entry[23077]
  [23078] (23909)Normal[23078] let NonemptyClassRangesNoDash = this
  [23079] (23913/1) Normal[23079] let B = __x1__
  [23080] (23914/2) Call[23080] access __x2__ = (ClassRanges "Evaluation")
  [23081] (23918/4) Normal[23081] ??? "Return the union of id:{D} and id:{C} ."
  [23082] Exit[23082]
  [23083] (23910/0) Call[23083] access __x0__ = (ClassAtomNoDash "Evaluation")
  [23084] (23915/2) Normal[23084] let C = __x2__
  [23085] (23917/3) Normal[23085] let D = [! __x3__]
  [23086] (23911/0) Normal[23086] let A = __x0__
  [23087] (23916/3) Call[23087] app __x3__ = (CharacterRange A B)
  [23088] (23912/1) Call[23088] access __x1__ = (ClassAtom "Evaluation")
Algo: NonemptyClassRanges[0,0].Evaluation [2006]
  [23089] Entry[23089]
  [23090] (23920)Normal[23090] let NonemptyClassRanges = this
  [23091] (23921/0) Call[23091] access __x0__ = (ClassAtom "Evaluation")
  [23092] (23922/0) Normal[23092] return __x0__
  [23093] Exit[23093]
Algo: NonemptyClassRanges[1,0].Evaluation [2007]
  [23094] Entry[23094]
  [23095] (23924)Normal[23095] let NonemptyClassRanges = this
  [23096] (23928/1) Normal[23096] let B = __x1__
  [23097] (23929/2) Normal[23097] return (+ A B)
  [23098] (23925/0) Call[23098] access __x0__ = (ClassAtom "Evaluation")
  [23099] Exit[23099]
  [23100] (23926/0) Normal[23100] let A = __x0__
  [23101] (23927/1) Call[23101] access __x1__ = (NonemptyClassRangesNoDash "Evaluation")
Algo: NonemptyClassRanges[2,0].EarlyErrors [2008]
  [23102] Entry[23102]
  [23103] (23931)Normal[23103] let NonemptyClassRanges = this
  [23104] (23935/0) If[23104] __x0__
  [23105] (23940/0) If[23105] __x0__
  [23106] (23938/25) Call[23106] access __x2__ = (ClassAtom1 "IsCharacterClass")
  [23107] (23943/1) Normal[23107] let __x3__ = true
  [23108] (23944/1) Call[23108] access __x4__ = (ClassAtom0 "IsCharacterClass")
  [23109] (23948/1) Call[23109] access __x5__ = (ClassAtom1 "IsCharacterClass")
  [23110] (23949/1) Normal[23110] __x3__ = (= __x5__ false)
  [23111] (23957/1) If[23111] __x3__
  [23112] (23958/1) Normal[23112] throw SyntaxError
  [23113] Exit[23113]
  [23114] (23932/0) Normal[23114] let __x0__ = true
  [23115] (23939/25) Normal[23115] __x0__ = (= __x2__ true)
  [23116] (23941/0) Normal[23116] throw SyntaxError
  [23117] (23946/1) If[23117] __x3__
  [23118] (23933/0) Call[23118] access __x1__ = (ClassAtom0 "IsCharacterClass")
  [23119] (23952/1) Call[23119] access __x6__ = (ClassAtom0 "CharacterValue")
  [23120] (23953/1) Call[23120] access __x7__ = (ClassAtom1 "CharacterValue")
  [23121] (23945/1) Normal[23121] __x3__ = (= __x4__ false)
  [23122] (23934/0) Normal[23122] __x0__ = (= __x1__ true)
  [23123] (23954/1) Normal[23123] __x3__ = (< __x7__ __x6__)
  [23124] (23950/1) If[23124] __x3__
Algo: NonemptyClassRanges[2,0].Evaluation [2009]
  [23125] Entry[23125]
  [23126] (23961)Normal[23126] let NonemptyClassRanges = this
  [23127] (23965/1) Normal[23127] let B = __x1__
  [23128] (23966/2) Call[23128] access __x2__ = (ClassRanges "Evaluation")
  [23129] (23970/4) Normal[23129] ??? "Return the union of id:{D} and id:{C} ."
  [23130] Exit[23130]
  [23131] (23962/0) Call[23131] access __x0__ = (ClassAtom0 "Evaluation")
  [23132] (23967/2) Normal[23132] let C = __x2__
  [23133] (23969/3) Normal[23133] let D = [! __x3__]
  [23134] (23963/0) Normal[23134] let A = __x0__
  [23135] (23968/3) Call[23135] app __x3__ = (CharacterRange A B)
  [23136] (23964/1) Call[23136] access __x1__ = (ClassAtom1 "Evaluation")
Algo: NormalCompletion [2010]
  [23137] Entry[23137]
  [23138] (23971/0) Normal[23138] return (comp[~normal~] argument => ~empty~)
  [23139] Exit[23139]
Algo: NotifyWaiter [2011]
  [23140] Entry[23140]
  [23141] (23972/1) Normal[23141] ??? "Notify the agent id:{W} ."
  [23142] Exit[23142]
Algo: Number::add [2012]
  [23143] Entry[23143]
  [23144] (23973)Normal[23144] return (+ x y)
  [23145] Exit[23145]
Algo: Number::bitwiseAND [2013]
  [23146] Entry[23146]
  [23147] (23975/0) Call[23147] app __x0__ = (NumberBitwiseOp "&" x y)
  [23148] (23976/0) Normal[23148] return __x0__
  [23149] Exit[23149]
Algo: Number::bitwiseNOT [2014]
  [23150] Entry[23150]
  [23151] (23978/0) Call[23151] app __x0__ = (ToInt32 x)
  [23152] (23979/0) Normal[23152] let oldValue = [! __x0__]
  [23153] (23980/1) Normal[23153] return (~ oldValue)
  [23154] Exit[23154]
Algo: Number::bitwiseOR [2015]
  [23155] Entry[23155]
  [23156] (23982/0) Call[23156] app __x0__ = (NumberBitwiseOp "|" x y)
  [23157] (23983/0) Normal[23157] return __x0__
  [23158] Exit[23158]
Algo: Number::bitwiseXOR [2016]
  [23159] Entry[23159]
  [23160] (23985/0) Call[23160] app __x0__ = (NumberBitwiseOp "^" x y)
  [23161] (23986/0) Normal[23161] return __x0__
  [23162] Exit[23162]
Algo: Number::divide [2017]
  [23163] Entry[23163]
  [23164] (23987)Normal[23164] return (/ x y)
  [23165] Exit[23165]
Algo: Number::equal [2018]
  [23166] Entry[23166]
  [23167] (23989/0) If[23167] (= x NaN)
  [23168] (23995/2) If[23168] (= x y)
  [23169] (23996/2) Normal[23169] return true
  [23170] (23998/3) If[23170] (&& (= x 0i) (= y -0.0))
  [23171] (24002/4) Normal[23171] return true
  [23172] (24004/5) Normal[23172] return false
  [23173] (23990/0) Normal[23173] return false
  [23174] (23992/1) If[23174] (= y NaN)
  [23175] (24001/4) If[23175] (&& (= x -0.0) (= y 0i))
  [23176] (23999/3) Normal[23176] return true
  [23177] (23993/1) Normal[23177] return false
  [23178] Exit[23178]
Algo: Number::exponentiate [2019]
  [23179] Entry[23179]
  [23180] (24005)Normal[23180] return (** x y)
  [23181] Exit[23181]
Algo: Number::leftShift [2020]
  [23182] Entry[23182]
  [23183] (24007/0) Call[23183] app __x0__ = (ToInt32 x)
  [23184] (24011/2) Normal[23184] let shiftCount = (%% rnum 32i)
  [23185] (24012/3) Normal[23185] return (<< lnum shiftCount)
  [23186] (24008/0) Normal[23186] let lnum = [! __x0__]
  [23187] Exit[23187]
  [23188] (24009/1) Call[23188] app __x1__ = (ToUint32 y)
  [23189] (24010/1) Normal[23189] let rnum = [! __x1__]
Algo: Number::lessThan [2021]
  [23190] Entry[23190]
  [23191] (24014/0) If[23191] (= x NaN)
  [23192] (24020/2) If[23192] (= x y)
  [23193] (24021/2) Normal[23193] return false
  [23194] (24023/3) If[23194] (&& (= x 0i) (= y -0.0))
  [23195] (24027/4) Normal[23195] return false
  [23196] (24029/5) If[23196] (= x Infinity)
  [23197] (24033/6) Normal[23197] return true
  [23198] (24035/7) If[23198] (= y -Infinity)
  [23199] (24042/10) Normal[23199] return true
  [23200] Exit[23200]
  [23201] (24015/0) Normal[23201] return undefined
  [23202] (24017/1) If[23202] (= y NaN)
  [23203] (24043/10) Normal[23203] return false
  [23204] (24026/4) If[23204] (&& (= x -0.0) (= y 0i))
  [23205] (24032/6) If[23205] (= y Infinity)
  [23206] (24038/8) If[23206] (= x -Infinity)
  [23207] (24039/8) Normal[23207] return true
  [23208] (24041/10) If[23208] (< x y)
  [23209] (24030/5) Normal[23209] return false
  [23210] (24024/3) Normal[23210] return false
  [23211] (24018/1) Normal[23211] return undefined
  [23212] (24036/7) Normal[23212] return false
Algo: Number::multiply [2022]
  [23213] Entry[23213]
  [23214] (24044)Normal[23214] return (* x y)
  [23215] Exit[23215]
Algo: Number::remainder [2023]
  [23216] Entry[23216]
  [23217] (24045)Normal[23217] return (% x y)
  [23218] Exit[23218]
Algo: Number::sameValue [2024]
  [23219] Entry[23219]
  [23220] (24047/0) If[23220] (&& (= x NaN) (= y NaN))
  [23221] (24053/2) If[23221] (&& (= x -0.0) (= y 0i))
  [23222] (24054/2) Normal[23222] return false
  [23223] (24056/3) If[23223] (= x y)
  [23224] (24048/0) Normal[23224] return true
  [23225] (24050/1) If[23225] (&& (= x 0i) (= y -0.0))
  [23226] (24059/4) Normal[23226] return false
  [23227] Exit[23227]
  [23228] (24057/3) Normal[23228] return true
  [23229] (24051/1) Normal[23229] return false
Algo: Number::sameValueZero [2025]
  [23230] Entry[23230]
  [23231] (24061/0) If[23231] (&& (= x NaN) (= y NaN))
  [23232] (24067/2) If[23232] (&& (= x -0.0) (= y 0i))
  [23233] (24068/2) Normal[23233] return true
  [23234] (24070/3) If[23234] (= x y)
  [23235] (24062/0) Normal[23235] return true
  [23236] (24064/1) If[23236] (&& (= x 0i) (= y -0.0))
  [23237] (24073/4) Normal[23237] return false
  [23238] Exit[23238]
  [23239] (24071/3) Normal[23239] return true
  [23240] (24065/1) Normal[23240] return true
Algo: Number::signedRightShift [2026]
  [23241] Entry[23241]
  [23242] (24075/0) Call[23242] app __x0__ = (ToInt32 x)
  [23243] (24079/2) Normal[23243] let shiftCount = (%% rnum 32i)
  [23244] (24080/3) Normal[23244] return (>> lnum shiftCount)
  [23245] (24076/0) Normal[23245] let lnum = [! __x0__]
  [23246] Exit[23246]
  [23247] (24077/1) Call[23247] app __x1__ = (ToUint32 y)
  [23248] (24078/1) Normal[23248] let rnum = [! __x1__]
Algo: Number::subtract [2027]
  [23249] Entry[23249]
  [23250] (24082/0) Call[23250] app __x0__ = (PRIMITIVE[Number].unaryMinus y)
  [23251] (24083/0) Call[23251] app __x1__ = (PRIMITIVE[Number].add x __x0__)
  [23252] (24084/0) Normal[23252] return __x1__
  [23253] Exit[23253]
Algo: Number::toString [2028]
  [23254] Entry[23254]
  [23255] (24085)Normal[23255] return (convert x num2str)
  [23256] Exit[23256]
Algo: Number::unaryMinus [2029]
  [23257] Entry[23257]
  [23258] (24087/0) If[23258] (= x NaN)
  [23259] (24088/0) Normal[23259] return NaN
  [23260] (24090/1) Normal[23260] return (- x)
  [23261] Exit[23261]
Algo: Number::unsignedRightShift [2030]
  [23262] Entry[23262]
  [23263] (24092/0) Call[23263] app __x0__ = (ToUint32 x)
  [23264] (24096/2) Normal[23264] let shiftCount = (%% rnum 32i)
  [23265] (24097/3) Normal[23265] return (>>> lnum shiftCount)
  [23266] (24093/0) Normal[23266] let lnum = [! __x0__]
  [23267] Exit[23267]
  [23268] (24094/1) Call[23268] app __x1__ = (ToUint32 y)
  [23269] (24095/1) Normal[23269] let rnum = [! __x1__]
Algo: NumberBitwiseOp [2031]
  [23270] Entry[23270]
  [23271] (24099/0) Normal[23271] assert (|| (|| (= op "&") (= op "^")) (= op "|"))
  [23272] (24103/2) Normal[23272] let rnum = [! __x1__]
  [23273] (24104/3) Normal[23273] let lbits = lnum
  [23274] (24108/7) If[23274] (= op "|")
  [23275] (24109/7) Normal[23275] let result = (| lbits rbits)
  [23276] (24111/8) Normal[23276] return result
  [23277] (24100/1) Call[23277] app __x0__ = (ToInt32 x)
  [23278] (24105/4) Normal[23278] let rbits = rnum
  [23279] (24107/6) Normal[23279] ??? "Else if id:{op} is code:{^} , let id:{result} be the result of applying the bitwise exclusive OR ( XOR ) operation to id:{lbits} and id:{rbits} ."
  [23280] (24101/1) Normal[23280] let lnum = [! __x0__]
  [23281] Exit[23281]
  [23282] (24106/5) Normal[23282] ??? "If id:{op} is code:{&} , let id:{result} be the result of applying the bitwise AND operation to id:{lbits} and id:{rbits} ."
  [23283] (24102/2) Call[23283] app __x1__ = (ToInt32 y)
Algo: NumberToBigInt [2032]
  [23284] Entry[23284]
  [23285] (24113/0) Call[23285] app __x0__ = (IsIntegralNumber number)
  [23286] (24114/0) If[23286] (= __x0__ false)
  [23287] (24115/0) Normal[23287] throw RangeError
  [23288] (24117/1) Normal[23288] return (convert number num2bigint)
  [23289] Exit[23289]
Algo: NumberToString [2033]
  [23290] Entry[23290]
  [23291] (24119)Normal[23291] return (convert x num2str)
  [23292] Exit[23292]
Algo: NumericLiteral[0,0].NumericValue [2034]
  [23293] Entry[23293]
  [23294] (24121)Normal[23294] let NumericLiteral = this
  [23295] (24122/0) Normal[23295] ??? "Return the Number value that results from rounding the MV of nt:{DecimalLiteral} as described below ."
  [23296] Exit[23296]
Algo: NumericLiteral[2,0].NumericValue [2035]
  [23297] Entry[23297]
  [23298] (24124)Normal[23298] let NumericLiteral = this
  [23299] (24125/0) Normal[23299] ??? "Return the Number value that results from rounding the MV of nt:{NonDecimalIntegerLiteral} as described below ."
  [23300] Exit[23300]
Algo: NumericLiteral[3,0].NumericValue [2036]
  [23301] Entry[23301]
  [23302] (24127)Normal[23302] let NumericLiteral = this
  [23303] (24128/0) Call[23303] access __x0__ = (NonDecimalIntegerLiteral "MV")
  [23304] (24129/0) Normal[23304] return (convert __x0__ num2bigint)
  [23305] Exit[23305]
Algo: NumericToRawBytes [2037]
  [23306] Entry[23306]
  [23307] (24131/0) If[23307] (= type ~Float32~)
  [23308] (24136/5) Normal[23308] ??? "Let id:{n} be the Element Size value specified in link:{table-the-typedarray-constructors} for Element Type id:{type} ."
  [23309] (24137/6) Normal[23309] ??? "Let id:{convOp} be the abstract operation named in the Conversion Operation column in link:{table-the-typedarray-constructors} for Element Type id:{type} ."
  [23310] (24141/9) Normal[23310] ??? "Let id:{rawBytes} be a List whose elements are the id:{n} - byte binary encoding of id:{intValue} . If id:{isLittleEndian} is value:{false} , the bytes are ordered in big endian order . Otherwise , the bytes are ordered in little endian order ."
  [23311] (24143/12) Normal[23311] return rawBytes
  [23312] (24132/1) Normal[23312] ??? "Let id:{rawBytes} be a List whose elements are the 4 bytes that are the result of converting id:{value} to IEEE 754 - 2019 binary32 format using roundTiesToEven mode . If id:{isLittleEndian} is value:{false} , the bytes are arranged in big endian order . Otherwise , the bytes are arranged in little endian order . If id:{value} is value:{NaN} , id:{rawBytes} may be set to any implementation chosen IEEE 754 - 2019 binary32 format Not - a - Number encoding . An implementation must always choose the same encoding for each implementation distinguishable value:{NaN} value ."
  [23313] (24133/0) If[23313] (= type ~Float64~)
  [23314] (24138/7) Call[23314] app __x0__ = (convOp value)
  [23315] (24140/8) If[23315] (! (< intValue 0i))
  [23316] (24142/8) Normal[23316] ??? "Let id:{rawBytes} be a List whose elements are the id:{n} - byte binary two ' s complement encoding of id:{intValue} . If id:{isLittleEndian} is value:{false} , the bytes are ordered in big endian order . Otherwise , the bytes are ordered in little endian order ."
  [23317] Exit[23317]
  [23318] (24139/7) Normal[23318] let intValue = __x0__
  [23319] (24134/3) Normal[23319] ??? "Let id:{rawBytes} be a List whose elements are the 8 bytes that are the IEEE 754 - 2019 binary64 format encoding of id:{value} . If id:{isLittleEndian} is value:{false} , the bytes are arranged in big endian order . Otherwise , the bytes are arranged in little endian order . If id:{value} is value:{NaN} , id:{rawBytes} may be set to any implementation chosen IEEE 754 - 2019 binary64 format Not - a - Number encoding . An implementation must always choose the same encoding for each implementation distinguishable value:{NaN} value ."
Algo: ObjectAssignmentPattern[0,0].DestructuringAssignmentEvaluation [2038]
  [23320] Entry[23320]
  [23321] (24145)Normal[23321] let ObjectAssignmentPattern = this
  [23322] (24146/0) Call[23322] app __x0__ = (RequireObjectCoercible value)
  [23323] (24147/0) Normal[23323] [? __x0__]
  [23324] (24148/1) Normal[23324] return ~empty~
  [23325] Exit[23325]
Algo: ObjectAssignmentPattern[1,0].DestructuringAssignmentEvaluation [2039]
  [23326] Entry[23326]
  [23327] (24150)Normal[23327] let ObjectAssignmentPattern = this
  [23328] (24154/2) Call[23328] access __x1__ = (AssignmentRestProperty "RestDestructuringAssignmentEvaluation" value excludedNames)
  [23329] (24155/2) Normal[23329] return __x1__
  [23330] (24151/0) Call[23330] app __x0__ = (RequireObjectCoercible value)
  [23331] Exit[23331]
  [23332] (24152/0) Normal[23332] [? __x0__]
  [23333] (24153/1) Normal[23333] let excludedNames = (new [])
Algo: ObjectAssignmentPattern[2,0].DestructuringAssignmentEvaluation [2040]
  [23334] Entry[23334]
  [23335] (24157)Normal[23335] let ObjectAssignmentPattern = this
  [23336] (24161/1) Normal[23336] [? __x1__]
  [23337] (24162/2) Normal[23337] return ~empty~
  [23338] (24158/0) Call[23338] app __x0__ = (RequireObjectCoercible value)
  [23339] Exit[23339]
  [23340] (24159/0) Normal[23340] [? __x0__]
  [23341] (24160/1) Call[23341] access __x1__ = (AssignmentPropertyList "PropertyDestructuringAssignmentEvaluation" value)
Algo: ObjectAssignmentPattern[3,0].DestructuringAssignmentEvaluation [2041]
  [23342] Entry[23342]
  [23343] (24164)Normal[23343] let ObjectAssignmentPattern = this
  [23344] (24168/1) Normal[23344] [? __x1__]
  [23345] (24169/2) Normal[23345] return ~empty~
  [23346] (24165/0) Call[23346] app __x0__ = (RequireObjectCoercible value)
  [23347] Exit[23347]
  [23348] (24166/0) Normal[23348] [? __x0__]
  [23349] (24167/1) Call[23349] access __x1__ = (AssignmentPropertyList "PropertyDestructuringAssignmentEvaluation" value)
Algo: ObjectAssignmentPattern[3,1].DestructuringAssignmentEvaluation [2042]
  [23350] Entry[23350]
  [23351] (24171)Normal[23351] let ObjectAssignmentPattern = this
  [23352] (24175/1) Normal[23352] let excludedNames = [? __x1__]
  [23353] (24176/2) Call[23353] access __x2__ = (AssignmentRestProperty "RestDestructuringAssignmentEvaluation" value excludedNames)
  [23354] (24172/0) Call[23354] app __x0__ = (RequireObjectCoercible value)
  [23355] (24177/2) Normal[23355] return __x2__
  [23356] (24173/0) Normal[23356] [? __x0__]
  [23357] Exit[23357]
  [23358] (24174/1) Call[23358] access __x1__ = (AssignmentPropertyList "PropertyDestructuringAssignmentEvaluation" value)
Algo: ObjectBindingPattern[0,0].BindingInitialization [2043]
  [23359] Entry[23359]
  [23360] (24179)Normal[23360] let ObjectBindingPattern = this
  [23361] (24180/0) Normal[23361] return ~empty~
  [23362] Exit[23362]
Algo: ObjectBindingPattern[0,0].BoundNames [2044]
  [23363] Entry[23363]
  [23364] (24182)Normal[23364] let ObjectBindingPattern = this
  [23365] (24183/0) Normal[23365] return (new [])
  [23366] Exit[23366]
Algo: ObjectBindingPattern[0,0].ContainsExpression [2045]
  [23367] Entry[23367]
  [23368] (24185)Normal[23368] let ObjectBindingPattern = this
  [23369] (24186/0) Normal[23369] return false
  [23370] Exit[23370]
Algo: ObjectBindingPattern[1,0].BindingInitialization [2046]
  [23371] Entry[23371]
  [23372] (24188)Normal[23372] let ObjectBindingPattern = this
  [23373] (24189/0) Normal[23373] let excludedNames = (new [])
  [23374] (24190/1) Call[23374] access __x0__ = (BindingRestProperty "RestBindingInitialization" value environment excludedNames)
  [23375] (24191/1) Normal[23375] return __x0__
  [23376] Exit[23376]
Algo: ObjectBindingPattern[1,0].ContainsExpression [2047]
  [23377] Entry[23377]
  [23378] (24193)Normal[23378] let ObjectBindingPattern = this
  [23379] (24194/0) Normal[23379] return false
  [23380] Exit[23380]
Algo: ObjectBindingPattern[2,0].BindingInitialization [2048]
  [23381] Entry[23381]
  [23382] (24196)Normal[23382] let ObjectBindingPattern = this
  [23383] (24197/0) Call[23383] access __x0__ = (BindingPropertyList "PropertyBindingInitialization" value environment)
  [23384] (24198/0) Normal[23384] [? __x0__]
  [23385] (24199/1) Normal[23385] return ~empty~
  [23386] Exit[23386]
Algo: ObjectBindingPattern[3,0].BindingInitialization [2049]
  [23387] Entry[23387]
  [23388] (24201)Normal[23388] let ObjectBindingPattern = this
  [23389] (24202/0) Call[23389] access __x0__ = (BindingPropertyList "PropertyBindingInitialization" value environment)
  [23390] (24203/0) Normal[23390] [? __x0__]
  [23391] (24204/1) Normal[23391] return ~empty~
  [23392] Exit[23392]
Algo: ObjectBindingPattern[3,1].BindingInitialization [2050]
  [23393] Entry[23393]
  [23394] (24206)Normal[23394] let ObjectBindingPattern = this
  [23395] (24210/1) Normal[23395] return __x1__
  [23396] Exit[23396]
  [23397] (24207/0) Call[23397] access __x0__ = (BindingPropertyList "PropertyBindingInitialization" value environment)
  [23398] (24208/0) Normal[23398] let excludedNames = [? __x0__]
  [23399] (24209/1) Call[23399] access __x1__ = (BindingRestProperty "RestBindingInitialization" value environment excludedNames)
Algo: ObjectBindingPattern[3,1].BoundNames [2051]
  [23400] Entry[23400]
  [23401] (24212)Normal[23401] let ObjectBindingPattern = this
  [23402] (24216/1) Normal[23402] let __x2__ = __x1__
  [23403] (24217/1) Normal[23403] let __x3__ = 0i
  [23404] (24222/1) Normal[23404] append __x4__ -> names
  [23405] LoopCont[23405]
  [23406] (24213/0) Call[23406] access __x0__ = (BindingPropertyList "BoundNames")
  [23407] (24218/1) Loop[23407] (< __x3__ __x2__.length)
  [23408] (24221/1) Normal[23408] __x3__ = (+ __x3__ 1i)
  [23409] (24214/0) Normal[23409] let names = __x0__
  [23410] (24223/2) Normal[23410] return names
  [23411] Exit[23411]
  [23412] (24220/1) Normal[23412] let __x4__ = __x2__[__x3__]
  [23413] (24215/1) Call[23413] access __x1__ = (BindingRestProperty "BoundNames")
Algo: ObjectBindingPattern[3,1].ContainsExpression [2052]
  [23414] Entry[23414]
  [23415] (24225)Normal[23415] let ObjectBindingPattern = this
  [23416] (24226/0) Call[23416] access __x0__ = (BindingPropertyList "ContainsExpression")
  [23417] (24227/0) Normal[23417] return __x0__
  [23418] Exit[23418]
Algo: ObjectDefineProperties [2053]
  [23419] Entry[23419]
  [23420] (24229/0) Normal[23420] assert (= (typeof O) Object)
  [23421] (24233/2) Normal[23421] let keys = [? __x1__]
  [23422] (24234/3) Normal[23422] let descriptors = (new [])
  [23423] (24239/4) Normal[23423] let nextKey = __x2__[__x3__]
  [23424] (24240/4) Normal[23424] __x3__ = (+ __x3__ 1i)
  [23425] (24243/6) If[23425] (&& (! (= propDesc undefined)) (= propDesc.Enumerable true))
  [23426] (24245/7) Call[23426] app __x5__ = (Get props nextKey)
  [23427] LoopCont[23427]
  [23428] (24230/1) Call[23428] app __x0__ = (ToObject Properties)
  [23429] (24235/4) Normal[23429] let __x2__ = keys
  [23430] (24237/4) Loop[23430] (< __x3__ __x2__.length)
  [23431] (24251/10) Normal[23431] let __x7__ = descriptors
  [23432] (24242/5) Normal[23432] let propDesc = [? __x4__]
  [23433] (24231/1) Normal[23433] let props = [? __x0__]
  [23434] (24247/8) Call[23434] app __x6__ = (ToPropertyDescriptor descObj)
  [23435] (24248/8) Normal[23435] let desc = [? __x6__]
  [23436] (24241/5) Call[23436] app __x4__ = (props.GetOwnProperty props nextKey)
  [23437] (24236/4) Normal[23437] let __x3__ = 0i
  [23438] (24232/2) Call[23438] app __x1__ = (props.OwnPropertyKeys props)
  [23439] (24249/9) Normal[23439] append (new [nextKey, desc]) -> descriptors
  [23440] (24246/7) Normal[23440] let descObj = [? __x5__]
  [23441] (24255/10) Normal[23441] let pair = __x7__[__x8__]
  [23442] (24256/10) Normal[23442] __x8__ = (+ __x8__ 1i)
  [23443] (24257/11) Normal[23443] let P = pair[0i]
  [23444] (24260/13) Normal[23444] [? __x9__]
  [23445] LoopCont[23445]
  [23446] (24259/13) Call[23446] app __x9__ = (DefinePropertyOrThrow O P desc)
  [23447] (24252/10) Normal[23447] let __x8__ = 0i
  [23448] (24253/10) Loop[23448] (< __x8__ __x7__.length)
  [23449] (24258/12) Normal[23449] let desc = pair[1i]
  [23450] (24261/14) Normal[23450] return O
  [23451] Exit[23451]
Algo: ObjectEnvironmentRecord.CreateMutableBinding [2054]
  [23452] Entry[23452]
  [23453] (24263/0) Normal[23453] let bindings = envRec.BindingObject
  [23454] (24264/1) Call[23454] app __x0__ = (DefinePropertyOrThrow bindings N (new PropertyDescriptor("Value" -> undefined, "Writable" -> true, "Enumerable" -> true, "Configurable" -> D)))
  [23455] (24265/1) Normal[23455] return [? __x0__]
  [23456] Exit[23456]
Algo: ObjectEnvironmentRecord.DeleteBinding [2055]
  [23457] Entry[23457]
  [23458] (24267/0) Normal[23458] let bindings = envRec.BindingObject
  [23459] (24268/1) Call[23459] app __x0__ = (bindings.Delete bindings N)
  [23460] (24269/1) Normal[23460] return [? __x0__]
  [23461] Exit[23461]
Algo: ObjectEnvironmentRecord.GetBindingValue [2056]
  [23462] Entry[23462]
  [23463] (24271/0) Normal[23463] let bindings = envRec.BindingObject
  [23464] (24275/3) If[23464] (= S false)
  [23465] (24276/3) Normal[23465] return undefined
  [23466] (24277/3) Normal[23466] throw ReferenceError
  [23467] (24272/1) Call[23467] app __x0__ = (HasProperty bindings N)
  [23468] (24279/4) Call[23468] app __x1__ = (Get bindings N)
  [23469] (24280/4) Normal[23469] return [? __x1__]
  [23470] Exit[23470]
  [23471] (24273/1) Normal[23471] let value = [? __x0__]
  [23472] (24274/2) If[23472] (= value false)
Algo: ObjectEnvironmentRecord.HasBinding [2057]
  [23473] Entry[23473]
  [23474] (24282/0) Normal[23474] let bindings = envRec.BindingObject
  [23475] (24286/2) Normal[23475] return false
  [23476] (24288/3) If[23476] (= envRec.withEnvironment false)
  [23477] (24293/5) If[23477] (= (typeof unscopables) Object)
  [23478] (24295/6) Call[23478] app __x2__ = (Get unscopables N)
  [23479] (24302/8) Normal[23479] return true
  [23480] (24298/7) If[23480] (= blocked true)
  [23481] (24299/7) Normal[23481] return false
  [23482] (24283/1) Call[23482] app __x0__ = (HasProperty bindings N)
  [23483] (24289/3) Normal[23483] return true
  [23484] (24291/4) Call[23484] app __x1__ = (Get bindings SYMBOL_unscopables)
  [23485] (24292/4) Normal[23485] let unscopables = [? __x1__]
  [23486] (24297/6) Normal[23486] let blocked = [! __x3__]
  [23487] (24284/1) Normal[23487] let foundBinding = [? __x0__]
  [23488] (24296/6) Call[23488] app __x3__ = (ToBoolean [? __x2__])
  [23489] (24285/2) If[23489] (= foundBinding false)
  [23490] Exit[23490]
Algo: ObjectEnvironmentRecord.HasSuperBinding [2058]
  [23491] Entry[23491]
  [23492] (24303/0) Normal[23492] return false
  [23493] Exit[23493]
Algo: ObjectEnvironmentRecord.HasThisBinding [2059]
  [23494] Entry[23494]
  [23495] (24304/0) Normal[23495] return false
  [23496] Exit[23496]
Algo: ObjectEnvironmentRecord.InitializeBinding [2060]
  [23497] Entry[23497]
  [23498] (24306/0) Call[23498] app __x0__ = (envRec.SetMutableBinding envRec N V false)
  [23499] (24307/0) Normal[23499] return [? __x0__]
  [23500] Exit[23500]
Algo: ObjectEnvironmentRecord.SetMutableBinding [2061]
  [23501] Entry[23501]
  [23502] (24309/0) Normal[23502] let bindings = envRec.BindingObject
  [23503] (24313/2) Normal[23503] throw ReferenceError
  [23504] (24315/3) Call[23504] app __x1__ = (Set bindings N V S)
  [23505] (24310/1) Call[23505] app __x0__ = (HasProperty bindings N)
  [23506] (24316/3) Normal[23506] return [? __x1__]
  [23507] (24311/1) Normal[23507] let stillExists = [? __x0__]
  [23508] Exit[23508]
  [23509] (24312/2) If[23509] (&& (= stillExists false) (= S true))
Algo: ObjectEnvironmentRecord.WithBaseObject [2062]
  [23510] Entry[23510]
  [23511] (24317/0) If[23511] (= envRec.withEnvironment true)
  [23512] (24318/0) Normal[23512] return envRec.BindingObject
  [23513] (24319/0) Normal[23513] return undefined
  [23514] Exit[23514]
Algo: ObjectLiteral[0,0].Evaluation [2063]
  [23515] Entry[23515]
  [23516] (24321)Normal[23516] let ObjectLiteral = this
  [23517] (24322/0) Call[23517] app __x0__ = (OrdinaryObjectCreate INTRINSICS["%Object.prototype%"])
  [23518] (24323/0) Normal[23518] return [! __x0__]
  [23519] Exit[23519]
Algo: ObjectLiteral[1,0].Evaluation [2064]
  [23520] Entry[23520]
  [23521] (24325)Normal[23521] let ObjectLiteral = this
  [23522] (24329/1) Normal[23522] [? __x1__]
  [23523] (24330/2) Normal[23523] return obj
  [23524] (24326/0) Call[23524] app __x0__ = (OrdinaryObjectCreate INTRINSICS["%Object.prototype%"])
  [23525] Exit[23525]
  [23526] (24327/0) Normal[23526] let obj = [! __x0__]
  [23527] (24328/1) Call[23527] access __x1__ = (PropertyDefinitionList "PropertyDefinitionEvaluation" obj true)
Algo: ObjectLiteral[2,0].Evaluation [2065]
  [23528] Entry[23528]
  [23529] (24332)Normal[23529] let ObjectLiteral = this
  [23530] (24336/1) Normal[23530] [? __x1__]
  [23531] (24337/2) Normal[23531] return obj
  [23532] (24333/0) Call[23532] app __x0__ = (OrdinaryObjectCreate INTRINSICS["%Object.prototype%"])
  [23533] Exit[23533]
  [23534] (24334/0) Normal[23534] let obj = [! __x0__]
  [23535] (24335/1) Call[23535] access __x1__ = (PropertyDefinitionList "PropertyDefinitionEvaluation" obj true)
Algo: OptionalChain[0,0].ChainEvaluation [2066]
  [23536] Entry[23536]
  [23537] (24339)Normal[23537] let OptionalChain = this
  [23538] (24343/2) Call[23538] app __x1__ = (EvaluateCall baseValue baseReference Arguments tailCall)
  [23539] (24344/2) Normal[23539] return [? __x1__]
  [23540] (24340/0) Normal[23540] let thisChain = this
  [23541] Exit[23541]
  [23542] (24341/1) Call[23542] app __x0__ = (IsInTailPosition thisChain)
  [23543] (24342/1) Normal[23543] let tailCall = __x0__
Algo: OptionalChain[0,0].HasCallInTailPosition [2067]
  [23544] Entry[23544]
  [23545] (24346)Normal[23545] let OptionalChain = this
  [23546] (24347/0) If[23546] (= this call)
  [23547] (24348/0) Normal[23547] return true
  [23548] (24350/1) Normal[23548] return false
  [23549] Exit[23549]
Algo: OptionalChain[1,0].ChainEvaluation [2068]
  [23550] Entry[23550]
  [23551] (24352)Normal[23551] let OptionalChain = this
  [23552] (24356/1) Call[23552] app __x0__ = (EvaluatePropertyAccessWithExpressionKey baseValue Expression strict)
  [23553] (24357/1) Normal[23553] return [? __x0__]
  [23554] (24353/0) If[23554] true
  [23555] Exit[23555]
  [23556] (24354/0) Normal[23556] let strict = true
  [23557] (24355/0) Normal[23557] let strict = false
Algo: OptionalChain[1,0].HasCallInTailPosition [2069]
  [23558] Entry[23558]
  [23559] (24359)Normal[23559] let OptionalChain = this
  [23560] (24360/0) Normal[23560] return false
  [23561] Exit[23561]
Algo: OptionalChain[2,0].ChainEvaluation [2070]
  [23562] Entry[23562]
  [23563] (24362)Normal[23563] let OptionalChain = this
  [23564] (24366/1) Call[23564] app __x0__ = (EvaluatePropertyAccessWithIdentifierKey baseValue IdentifierName strict)
  [23565] (24367/1) Normal[23565] return [? __x0__]
  [23566] (24363/0) If[23566] true
  [23567] Exit[23567]
  [23568] (24364/0) Normal[23568] let strict = true
  [23569] (24365/0) Normal[23569] let strict = false
Algo: OptionalChain[2,0].Contains [2071]
  [23570] Entry[23570]
  [23571] (24369)Normal[23571] let OptionalChain = this
  [23572] (24370/0) Normal[23572] return false
  [23573] Exit[23573]
Algo: OptionalChain[2,0].HasCallInTailPosition [2072]
  [23574] Entry[23574]
  [23575] (24372)Normal[23575] let OptionalChain = this
  [23576] (24373/0) Normal[23576] return false
  [23577] Exit[23577]
Algo: OptionalChain[3,0].EarlyErrors [2073]
  [23578] Entry[23578]
  [23579] (24375)Normal[23579] let OptionalChain = this
  [23580] (24376/0) If[23580] true
  [23581] (24377/0) Normal[23581] throw SyntaxError
  [23582] Exit[23582]
Algo: OptionalChain[4,0].ChainEvaluation [2074]
  [23583] Entry[23583]
  [23584] (24380/0) Normal[23584] let optionalChain = OptionalChain
  [23585] (24384/2) Normal[23585] let newValue = [? __x1__]
  [23586] (24385/3) Normal[23586] let thisChain = this
  [23587] (24389/5) Normal[23587] return [? __x3__]
  [23588] Exit[23588]
  [23589] (24381/1) Call[23589] access __x0__ = (optionalChain "ChainEvaluation" baseValue baseReference)
  [23590] (24386/4) Call[23590] app __x2__ = (IsInTailPosition thisChain)
  [23591] (24388/5) Call[23591] app __x3__ = (EvaluateCall newValue newReference Arguments tailCall)
  [23592] (24382/1) Normal[23592] let newReference = [? __x0__]
  [23593] (24387/4) Normal[23593] let tailCall = __x2__
  [23594] (24383/2) Call[23594] app __x1__ = (GetValue newReference)
Algo: OptionalChain[4,0].HasCallInTailPosition [2075]
  [23595] Entry[23595]
  [23596] (24391/0) If[23596] (= this call)
  [23597] (24392/0) Normal[23597] return true
  [23598] (24394/1) Normal[23598] return false
  [23599] Exit[23599]
Algo: OptionalChain[5,0].ChainEvaluation [2076]
  [23600] Entry[23600]
  [23601] (24396/0) Normal[23601] let optionalChain = OptionalChain
  [23602] (24400/2) Normal[23602] let newValue = [? __x1__]
  [23603] (24401/3) If[23603] true
  [23604] (24405/4) Normal[23604] return [? __x2__]
  [23605] Exit[23605]
  [23606] (24397/1) Call[23606] access __x0__ = (optionalChain "ChainEvaluation" baseValue baseReference)
  [23607] (24402/3) Normal[23607] let strict = true
  [23608] (24403/3) Normal[23608] let strict = false
  [23609] (24404/4) Call[23609] app __x2__ = (EvaluatePropertyAccessWithExpressionKey newValue Expression strict)
  [23610] (24398/1) Normal[23610] let newReference = [? __x0__]
  [23611] (24399/2) Call[23611] app __x1__ = (GetValue newReference)
Algo: OptionalChain[5,0].HasCallInTailPosition [2077]
  [23612] Entry[23612]
  [23613] (24406/0) Normal[23613] return false
  [23614] Exit[23614]
Algo: OptionalChain[6,0].ChainEvaluation [2078]
  [23615] Entry[23615]
  [23616] (24408/0) Normal[23616] let optionalChain = OptionalChain
  [23617] (24412/2) Normal[23617] let newValue = [? __x1__]
  [23618] (24413/3) If[23618] true
  [23619] (24417/4) Normal[23619] return [? __x2__]
  [23620] Exit[23620]
  [23621] (24409/1) Call[23621] access __x0__ = (optionalChain "ChainEvaluation" baseValue baseReference)
  [23622] (24414/3) Normal[23622] let strict = true
  [23623] (24415/3) Normal[23623] let strict = false
  [23624] (24416/4) Call[23624] app __x2__ = (EvaluatePropertyAccessWithIdentifierKey newValue IdentifierName strict)
  [23625] (24410/1) Normal[23625] let newReference = [? __x0__]
  [23626] (24411/2) Call[23626] app __x1__ = (GetValue newReference)
Algo: OptionalChain[6,0].Contains [2079]
  [23627] Entry[23627]
  [23628] (24419/0) Call[23628] access __x0__ = (OptionalChain "Contains" symbol)
  [23629] (24420/0) If[23629] (= __x0__ true)
  [23630] (24421/0) Normal[23630] return true
  [23631] (24423/1) Normal[23631] return false
  [23632] Exit[23632]
Algo: OptionalChain[6,0].HasCallInTailPosition [2080]
  [23633] Entry[23633]
  [23634] (24424/0) Normal[23634] return false
  [23635] Exit[23635]
Algo: OptionalChain[7,0].EarlyErrors [2081]
  [23636] Entry[23636]
  [23637] (24425/0) If[23637] true
  [23638] (24426/0) Normal[23638] throw SyntaxError
  [23639] Exit[23639]
Algo: OptionalExpression[0,0].Evaluation [2082]
  [23640] Entry[23640]
  [23641] (24429)Normal[23641] let OptionalExpression = this
  [23642] (24433/1) Normal[23642] let baseValue = [? __x1__]
  [23643] (24434/2) If[23643] (|| (= baseValue undefined) (= baseValue null))
  [23644] (24430/0) Call[23644] access __x0__ = (MemberExpression "Evaluation")
  [23645] (24435/3) Normal[23645] return undefined
  [23646] (24437/4) Call[23646] access __x2__ = (OptionalChain "ChainEvaluation" baseValue baseReference)
  [23647] (24438/4) Normal[23647] return __x2__
  [23648] Exit[23648]
  [23649] (24431/0) Normal[23649] let baseReference = __x0__
  [23650] (24432/1) Call[23650] app __x1__ = (GetValue baseReference)
Algo: OptionalExpression[0,0].HasCallInTailPosition [2083]
  [23651] Entry[23651]
  [23652] (24440)Normal[23652] let OptionalExpression = this
  [23653] (24441/0) Call[23653] access __x0__ = (OptionalChain "HasCallInTailPosition" call)
  [23654] (24442/0) Normal[23654] return __x0__
  [23655] Exit[23655]
Algo: OptionalExpression[1,0].Evaluation [2084]
  [23656] Entry[23656]
  [23657] (24444)Normal[23657] let OptionalExpression = this
  [23658] (24448/1) Normal[23658] let baseValue = [? __x1__]
  [23659] (24449/2) If[23659] (|| (= baseValue undefined) (= baseValue null))
  [23660] (24445/0) Call[23660] access __x0__ = (CallExpression "Evaluation")
  [23661] (24450/3) Normal[23661] return undefined
  [23662] (24452/4) Call[23662] access __x2__ = (OptionalChain "ChainEvaluation" baseValue baseReference)
  [23663] (24453/4) Normal[23663] return __x2__
  [23664] Exit[23664]
  [23665] (24446/0) Normal[23665] let baseReference = __x0__
  [23666] (24447/1) Call[23666] app __x1__ = (GetValue baseReference)
Algo: OptionalExpression[1,0].HasCallInTailPosition [2085]
  [23667] Entry[23667]
  [23668] (24455)Normal[23668] let OptionalExpression = this
  [23669] (24456/0) Call[23669] access __x0__ = (OptionalChain "HasCallInTailPosition" call)
  [23670] (24457/0) Normal[23670] return __x0__
  [23671] Exit[23671]
Algo: OptionalExpression[2,0].Evaluation [2086]
  [23672] Entry[23672]
  [23673] (24459/0) Call[23673] access __x0__ = (OptionalExpression "Evaluation")
  [23674] (24463/2) If[23674] (|| (= baseValue undefined) (= baseValue null))
  [23675] (24464/3) Normal[23675] return undefined
  [23676] (24466/4) Call[23676] access __x2__ = (OptionalChain "ChainEvaluation" baseValue baseReference)
  [23677] (24460/0) Normal[23677] let baseReference = __x0__
  [23678] (24461/1) Call[23678] app __x1__ = (GetValue baseReference)
  [23679] (24467/4) Normal[23679] return __x2__
  [23680] (24462/1) Normal[23680] let baseValue = [? __x1__]
  [23681] Exit[23681]
Algo: OptionalExpression[2,0].HasCallInTailPosition [2087]
  [23682] Entry[23682]
  [23683] (24469/0) Call[23683] access __x0__ = (OptionalChain "HasCallInTailPosition" call)
  [23684] (24470/0) Normal[23684] return __x0__
  [23685] Exit[23685]
Algo: OrdinaryCallBindThis [2088]
  [23686] Entry[23686]
  [23687] (24472/0) Normal[23687] let thisMode = F.ThisMode
  [23688] (24477/3) Call[23688] access __x0__ = (calleeContext "LexicalEnvironment")
  [23689] (24478/3) Normal[23689] let localEnv = __x0__
  [23690] (24483/7) Normal[23690] let globalEnv = calleeRealm.GlobalEnv
  [23691] (24484/8) Normal[23691] assert (is-instance-of globalEnv GlobalEnvironmentRecord)
  [23692] (24488/11) Normal[23692] let thisValue = [! __x1__]
  [23693] (24489/13) Normal[23693] assert (is-instance-of localEnv FunctionEnvironmentRecord)
  [23694] (24473/1) If[23694] (= thisMode ~lexical~)
  [23695] (24479/4) If[23695] (= thisMode ~strict~)
  [23696] (24481/4) If[23696] (|| (= thisArgument undefined) (= thisArgument null))
  [23697] (24487/11) Call[23697] app __x1__ = (ToObject thisArgument)
  [23698] (24474/1) Normal[23698] return undefined
  [23699] (24476/2) Normal[23699] let calleeRealm = F.Realm
  [23700] (24491/15) Normal[23700] return __x2__
  [23701] Exit[23701]
  [23702] (24485/9) Normal[23702] let thisValue = globalEnv.GlobalThisValue
  [23703] (24480/4) Normal[23703] let thisValue = thisArgument
  [23704] (24490/15) Call[23704] app __x2__ = (localEnv.BindThisValue localEnv thisValue)
Algo: OrdinaryCallEvaluateBody [2089]
  [23705] Entry[23705]
  [23706] (24493/0) Call[23706] access __x0__ = (F.ECMAScriptCode "EvaluateBody" F argumentsList)
  [23707] (24494/0) Normal[23707] return __x0__
  [23708] Exit[23708]
Algo: OrdinaryCreateFromConstructor [2090]
  [23709] Entry[23709]
  [23710] (24496/1) Call[23710] app __x0__ = (GetPrototypeFromConstructor constructor intrinsicDefaultProto)
  [23711] (24497/1) Normal[23711] let proto = [? __x0__]
  [23712] (24498/2) Call[23712] app __x1__ = (OrdinaryObjectCreate proto internalSlotsList)
  [23713] (24499/2) Normal[23713] return [! __x1__]
  [23714] Exit[23714]
Algo: OrdinaryDefineOwnProperty [2091]
  [23715] Entry[23715]
  [23716] (24501/0) Call[23716] app __x0__ = (O.GetOwnProperty O P)
  [23717] (24505/2) Call[23717] app __x2__ = (ValidateAndApplyPropertyDescriptor O P extensible Desc current)
  [23718] (24506/2) Normal[23718] return __x2__
  [23719] (24502/0) Normal[23719] let current = [? __x0__]
  [23720] Exit[23720]
  [23721] (24503/1) Call[23721] app __x1__ = (IsExtensible O)
  [23722] (24504/1) Normal[23722] let extensible = [? __x1__]
Algo: OrdinaryDelete [2092]
  [23723] Entry[23723]
  [23724] (24508/0) Call[23724] app __x0__ = (IsPropertyKey P)
  [23725] (24512/2) If[23725] (= desc undefined)
  [23726] (24513/2) Normal[23726] return true
  [23727] (24515/3) If[23727] (= desc.Configurable true)
  [23728] (24520/6) Normal[23728] return false
  [23729] Exit[23729]
  [23730] (24509/0) Normal[23730] assert (= __x0__ true)
  [23731] (24518/5) Normal[23731] return true
  [23732] (24510/1) Call[23732] app __x1__ = (O.GetOwnProperty O P)
  [23733] (24517/4) Normal[23733] delete O.SubMap[P]
  [23734] (24511/1) Normal[23734] let desc = [? __x1__]
Algo: OrdinaryFunctionCreate [2093]
  [23735] Entry[23735]
  [23736] (24522/0) Normal[23736] assert (= (typeof functionPrototype) Object)
  [23737] (24526/3) Normal[23737] F.Call = ALGORITHM["ECMAScriptFunctionObject.Call"]
  [23738] (24527/4) Normal[23738] F.SourceText = sourceText
  [23739] (24531/7) Normal[23739] let Strict = true
  [23740] (24533/8) Normal[23740] F.Strict = Strict
  [23741] (24535/9) Normal[23741] F.ThisMode = ~lexical~
  [23742] (24539/12) Normal[23742] F.IsClassConstructor = false
  [23743] (24541/14) Call[23743] app __x1__ = (GetActiveScriptOrModule)
  [23744] (24542/14) Normal[23744] F.ScriptOrModule = __x1__
  [23745] (24523/1) Normal[23745] let internalSlotsList = (new ["Environment", "FormalParameters", "ECMAScriptCode", "ConstructorKind", "Realm", "ScriptOrModule", "ThisMode", "Strict", "HomeObject", "SourceText", "IsClassConstructor"])
  [23746] (24528/5) Normal[23746] F.FormalParameters = ParameterList
  [23747] (24530/7) If[23747] true
  [23748] (24532/7) Normal[23748] let Strict = false
  [23749] (24534/9) If[23749] (= thisMode ~lexical-this~)
  [23750] (24536/9) If[23750] (= Strict true)
  [23751] (24524/2) Call[23751] app __x0__ = (OrdinaryObjectCreate functionPrototype internalSlotsList)
  [23752] (24538/9) Normal[23752] F.ThisMode = ~global~
  [23753] (24529/6) Normal[23753] F.ECMAScriptCode = Body
  [23754] (24525/2) Normal[23754] let F = [! __x0__]
  [23755] (24540/13) Normal[23755] F.Environment = Scope
  [23756] (24537/10) Normal[23756] F.ThisMode = ~strict~
  [23757] (24545/17) Call[23757] access __x2__ = (ParameterList "ExpectedArgumentCount")
  [23758] (24546/17) Normal[23758] let len = __x2__
  [23759] (24547/18) Call[23759] app __x3__ = (SetFunctionLength F len)
  [23760] (24549/19) Normal[23760] return F
  [23761] Exit[23761]
  [23762] (24543/15) Normal[23762] F.Realm = REALM
  [23763] (24544/16) Normal[23763] F.HomeObject = undefined
  [23764] (24548/18) Normal[23764] [! __x3__]
Algo: OrdinaryGet [2094]
  [23765] Entry[23765]
  [23766] (24551/0) Call[23766] app __x0__ = (IsPropertyKey P)
  [23767] (24555/2) If[23767] (= desc undefined)
  [23768] (24557/3) Call[23768] app __x2__ = (O.GetPrototypeOf O)
  [23769] (24565/6) Call[23769] app __x4__ = (IsDataDescriptor desc)
  [23770] (24562/5) Call[23770] app __x3__ = (parent.Get parent P Receiver)
  [23771] (24563/5) Normal[23771] return [? __x3__]
  [23772] (24567/6) Normal[23772] return desc.Value
  [23773] (24569/7) Call[23773] app __x5__ = (IsAccessorDescriptor desc)
  [23774] (24575/10) Call[23774] app __x6__ = (Call getter Receiver)
  [23775] (24576/10) Normal[23775] return [? __x6__]
  [23776] (24552/0) Normal[23776] assert (= __x0__ true)
  [23777] (24558/3) Normal[23777] let parent = [? __x2__]
  [23778] Exit[23778]
  [23779] (24560/4) Normal[23779] return undefined
  [23780] (24566/6) If[23780] (= __x4__ true)
  [23781] (24553/1) Call[23781] app __x1__ = (O.GetOwnProperty O P)
  [23782] (24571/8) Normal[23782] let getter = desc.Get
  [23783] (24572/9) If[23783] (= getter undefined)
  [23784] (24559/4) If[23784] (= parent null)
  [23785] (24554/1) Normal[23785] let desc = [? __x1__]
  [23786] (24573/9) Normal[23786] return undefined
  [23787] (24570/7) Normal[23787] assert (= __x5__ true)
Algo: OrdinaryGetOwnProperty [2095]
  [23788] Entry[23788]
  [23789] (24578/0) Call[23789] app __x0__ = (IsPropertyKey P)
  [23790] (24583/2) Normal[23790] let D = (new PropertyDescriptor())
  [23791] (24584/3) Normal[23791] let X = O.SubMap[P]
  [23792] (24589/6) Normal[23792] D.Writable = X.Writable
  [23793] (24595/11) Normal[23793] D.Enumerable = X.Enumerable
  [23794] (24594/10) Normal[23794] D.Set = X.Set
  [23795] (24579/0) Normal[23795] assert (= __x0__ true)
  [23796] (24585/4) Call[23796] app __x1__ = (IsDataDescriptor X)
  [23797] (24588/5) Normal[23797] D.Value = X.Value
  [23798] (24593/9) Normal[23798] D.Get = X.Get
  [23799] (24580/1) If[23799] (= O.SubMap[P] absent)
  [23800] (24597/13) Normal[23800] return D
  [23801] Exit[23801]
  [23802] (24592/8) Normal[23802] assert __x2__
  [23803] (24586/4) If[23803] __x1__
  [23804] (24581/1) Normal[23804] return undefined
  [23805] (24596/12) Normal[23805] D.Configurable = X.Configurable
  [23806] (24591/8) Call[23806] app __x2__ = (IsAccessorDescriptor X)
Algo: OrdinaryGetPrototypeOf [2096]
  [23807] Entry[23807]
  [23808] (24598/0) Normal[23808] return O.Prototype
  [23809] Exit[23809]
Algo: OrdinaryHasInstance [2097]
  [23810] Entry[23810]
  [23811] (24600/0) Call[23811] app __x0__ = (IsCallable C)
  [23812] (24606/2) Normal[23812] let BC = C.BoundTargetFunction
  [23813] (24607/3) Call[23813] app __x1__ = (InstanceofOperator O BC)
  [23814] (24613/5) Call[23814] app __x2__ = (Get C "prototype")
  [23815] (24614/5) Normal[23815] let P = [? __x2__]
  [23816] (24618/7) Loop[23816] true
  [23817] (24620/8) Call[23817] app __x3__ = (O.GetPrototypeOf O)
  [23818] Exit[23818]
  [23819] (24626/10) If[23819] (= __x4__ true)
  [23820] (24627/10) Normal[23820] return true
  [23821] LoopCont[23821]
  [23822] (24601/0) If[23822] (= __x0__ false)
  [23823] (24608/3) Normal[23823] return [? __x1__]
  [23824] (24611/4) Normal[23824] return false
  [23825] (24616/6) Normal[23825] throw TypeError
  [23826] (24602/0) Normal[23826] return false
  [23827] (24604/1) If[23827] (! (= C.BoundTargetFunction absent))
  [23828] (24622/9) If[23828] (= O null)
  [23829] (24623/9) Normal[23829] return false
  [23830] (24625/10) Call[23830] app __x4__ = (SameValue P O)
  [23831] (24615/6) If[23831] (! (= (typeof P) Object))
  [23832] (24610/4) If[23832] (! (= (typeof O) Object))
  [23833] (24621/8) Normal[23833] O = [? __x3__]
Algo: OrdinaryHasProperty [2098]
  [23834] Entry[23834]
  [23835] (24630/0) Call[23835] app __x0__ = (IsPropertyKey P)
  [23836] (24634/2) If[23836] (! (= hasOwn undefined))
  [23837] (24635/2) Normal[23837] return true
  [23838] (24637/3) Call[23838] app __x2__ = (O.GetPrototypeOf O)
  [23839] (24641/5) Call[23839] app __x3__ = (parent.HasProperty parent P)
  [23840] (24642/5) Normal[23840] return [? __x3__]
  [23841] (24631/0) Normal[23841] assert (= __x0__ true)
  [23842] (24639/4) If[23842] (! (= parent null))
  [23843] (24644/6) Normal[23843] return false
  [23844] (24632/1) Call[23844] app __x1__ = (O.GetOwnProperty O P)
  [23845] Exit[23845]
  [23846] (24638/3) Normal[23846] let parent = [? __x2__]
  [23847] (24633/1) Normal[23847] let hasOwn = [? __x1__]
Algo: OrdinaryIsExtensible [2099]
  [23848] Entry[23848]
  [23849] (24645/0) Normal[23849] return O.Extensible
  [23850] Exit[23850]
Algo: OrdinaryObject.DefineOwnProperty [2100]
  [23851] Entry[23851]
  [23852] (24647/0) Call[23852] app __x0__ = (OrdinaryDefineOwnProperty O P Desc)
  [23853] (24648/0) Normal[23853] return [? __x0__]
  [23854] Exit[23854]
Algo: OrdinaryObject.Delete [2101]
  [23855] Entry[23855]
  [23856] (24650/0) Call[23856] app __x0__ = (OrdinaryDelete O P)
  [23857] (24651/0) Normal[23857] return [? __x0__]
  [23858] Exit[23858]
Algo: OrdinaryObject.Get [2102]
  [23859] Entry[23859]
  [23860] (24653/0) Call[23860] app __x0__ = (OrdinaryGet O P Receiver)
  [23861] (24654/0) Normal[23861] return [? __x0__]
  [23862] Exit[23862]
Algo: OrdinaryObject.GetOwnProperty [2103]
  [23863] Entry[23863]
  [23864] (24656/0) Call[23864] app __x0__ = (OrdinaryGetOwnProperty O P)
  [23865] (24657/0) Normal[23865] return [! __x0__]
  [23866] Exit[23866]
Algo: OrdinaryObject.GetPrototypeOf [2104]
  [23867] Entry[23867]
  [23868] (24659/0) Call[23868] app __x0__ = (OrdinaryGetPrototypeOf O)
  [23869] (24660/0) Normal[23869] return [! __x0__]
  [23870] Exit[23870]
Algo: OrdinaryObject.HasProperty [2105]
  [23871] Entry[23871]
  [23872] (24662/0) Call[23872] app __x0__ = (OrdinaryHasProperty O P)
  [23873] (24663/0) Normal[23873] return [? __x0__]
  [23874] Exit[23874]
Algo: OrdinaryObject.IsExtensible [2106]
  [23875] Entry[23875]
  [23876] (24665/0) Call[23876] app __x0__ = (OrdinaryIsExtensible O)
  [23877] (24666/0) Normal[23877] return [! __x0__]
  [23878] Exit[23878]
Algo: OrdinaryObject.OwnPropertyKeys [2107]
  [23879] Entry[23879]
  [23880] (24668/0) Call[23880] app __x0__ = (OrdinaryOwnPropertyKeys O)
  [23881] (24669/0) Normal[23881] return [! __x0__]
  [23882] Exit[23882]
Algo: OrdinaryObject.PreventExtensions [2108]
  [23883] Entry[23883]
  [23884] (24671/0) Call[23884] app __x0__ = (OrdinaryPreventExtensions O)
  [23885] (24672/0) Normal[23885] return [! __x0__]
  [23886] Exit[23886]
Algo: OrdinaryObject.Set [2109]
  [23887] Entry[23887]
  [23888] (24674/0) Call[23888] app __x0__ = (OrdinarySet O P V Receiver)
  [23889] (24675/0) Normal[23889] return [? __x0__]
  [23890] Exit[23890]
Algo: OrdinaryObject.SetPrototypeOf [2110]
  [23891] Entry[23891]
  [23892] (24677/0) Call[23892] app __x0__ = (OrdinarySetPrototypeOf O V)
  [23893] (24678/0) Normal[23893] return [! __x0__]
  [23894] Exit[23894]
Algo: OrdinaryObjectCreate [2111]
  [23895] Entry[23895]
  [23896] (24680/0) Normal[23896] let internalSlotsList = (new ["Prototype", "Extensible"])
  [23897] (24685/1) Loop[23897] (< __x1__ __x0__.length)
  [23898] (24687/1) Normal[23898] let __x2__ = __x0__[__x1__]
  [23899] (24691/2) Call[23899] app __x3__ = (MakeBasicObject internalSlotsList)
  [23900] (24692/2) Normal[23900] let O = [! __x3__]
  [23901] (24681/1) If[23901] (! (= additionalInternalSlotsList absent))
  [23902] (24688/1) Normal[23902] __x1__ = (+ __x1__ 1i)
  [23903] LoopCont[23903]
  [23904] (24694/4) Normal[23904] return O
  [23905] Exit[23905]
  [23906] (24683/1) Normal[23906] let __x0__ = additionalInternalSlotsList
  [23907] (24693/3) Normal[23907] O.Prototype = proto
  [23908] (24689/1) Normal[23908] append __x2__ -> internalSlotsList
  [23909] (24684/1) Normal[23909] let __x1__ = 0i
Algo: OrdinaryOwnPropertyKeys [2112]
  [23910] Entry[23910]
  [23911] (24696)Normal[23911] let keys = (new [])
  [23912] (24700)Loop[23912] (< i intKeys.length)
  [23913] (24702)Normal[23913] let P = intKeys[i]
  [23914] (24708)Normal[23914] i = 0i
  [23915] (24707)Normal[23915] i = (+ i 1i)
  [23916] LoopCont[23916]
  [23917] (24711)Normal[23917] let P = generalKeys[i]
  [23918] (24712)Call[23918] app c = (IsArrayIndex P)
  [23919] (24717)Normal[23919] i = 0i
  [23920] (24718)Loop[23920] (< i generalKeys.length)
  [23921] (24697)Normal[23921] let generalKeys = (map-keys O.SubMap)
  [23922] (24703)Call[23922] app c = (IsArrayIndex P)
  [23923] (24720)Normal[23923] let P = generalKeys[i]
  [23924] (24725)Normal[23924] return keys
  [23925] (24705)Normal[23925] append P -> keys
  [23926] (24709)Loop[23926] (< i generalKeys.length)
  [23927] (24698)Normal[23927] let intKeys = (map-keys O.SubMap [int-sorted])
  [23928] (24714)Normal[23928] append P -> keys
  [23929] (24716)Normal[23929] i = (+ i 1i)
  [23930] (24704)If[23930] c
  [23931] (24699)Normal[23931] let i = 0i
  [23932] LoopCont[23932]
  [23933] (24713)If[23933] (&& (= (typeof P) String) (! c))
  [23934] (24722)Normal[23934] append P -> keys
  [23935] (24724)Normal[23935] i = (+ i 1i)
  [23936] LoopCont[23936]
  [23937] (24721)If[23937] (= (typeof P) Symbol)
  [23938] Exit[23938]
Algo: OrdinaryPreventExtensions [2113]
  [23939] Entry[23939]
  [23940] (24727/0) Normal[23940] O.Extensible = false
  [23941] (24728/1) Normal[23941] return true
  [23942] Exit[23942]
Algo: OrdinarySet [2114]
  [23943] Entry[23943]
  [23944] (24730/0) Call[23944] app __x0__ = (IsPropertyKey P)
  [23945] (24734/2) Call[23945] app __x2__ = (OrdinarySetWithOwnDescriptor O P V Receiver ownDesc)
  [23946] (24735/2) Normal[23946] return __x2__
  [23947] (24731/0) Normal[23947] assert (= __x0__ true)
  [23948] Exit[23948]
  [23949] (24732/1) Call[23949] app __x1__ = (O.GetOwnProperty O P)
  [23950] (24733/1) Normal[23950] let ownDesc = [? __x1__]
Algo: OrdinarySetPrototypeOf [2115]
  [23951] Entry[23951]
  [23952] (24737/1) Normal[23952] let current = O.Prototype
  [23953] (24742/3) Normal[23953] let extensible = O.Extensible
  [23954] (24743/4) If[23954] (= extensible false)
  [23955] (24748/7) Loop[23955] (= done false)
  [23956] (24749/8) If[23956] (= p null)
  [23957] (24758/13) Normal[23957] O.Prototype = V
  [23958] (24753/9) If[23958] (= __x1__ true)
  [23959] (24754/9) Normal[23959] return false
  [23960] (24755/9) If[23960] (! (= p.GetPrototypeOf ALGORITHM["OrdinaryObject.GetPrototypeOf"]))
  [23961] (24759/14) Normal[23961] return true
  [23962] (24738/2) Call[23962] app __x0__ = (SameValue V current)
  [23963] (24744/4) Normal[23963] return false
  [23964] (24746/5) Normal[23964] let p = V
  [23965] Exit[23965]
  [23966] (24747/6) Normal[23966] let done = false
  [23967] (24752/9) Call[23967] app __x1__ = (SameValue p O)
  [23968] (24739/2) If[23968] (= __x0__ true)
  [23969] (24756/11) Normal[23969] done = true
  [23970] LoopCont[23970]
  [23971] (24750/8) Normal[23971] done = true
  [23972] (24740/2) Normal[23972] return true
  [23973] (24757/9) Normal[23973] p = p.Prototype
Algo: OrdinarySetWithOwnDescriptor [2116]
  [23974] Entry[23974]
  [23975] (24761/0) Call[23975] app __x0__ = (IsPropertyKey P)
  [23976] (24766/2) Normal[23976] let parent = [? __x1__]
  [23977] (24767/3) If[23977] (! (= parent null))
  [23978] (24773/7) Call[23978] app __x3__ = (IsDataDescriptor ownDesc)
  [23979] (24774/7) If[23979] (= __x3__ true)
  [23980] (24779/9) If[23980] (! (= (typeof Receiver) Object))
  [23981] (24780/9) Normal[23981] return false
  [23982] (24782/10) Call[23982] app __x4__ = (Receiver.GetOwnProperty Receiver P)
  [23983] (24762/0) Normal[23983] assert (= __x0__ true)
  [23984] (24769/4) Call[23984] app __x2__ = (parent.Set parent P V Receiver)
  [23985] (24771/3) Normal[23985] ownDesc = (new PropertyDescriptor("Value" -> undefined, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true))
  [23986] (24777/8) Normal[23986] return false
  [23987] (24763/1) If[23987] (= ownDesc undefined)
  [23988] (24776/8) If[23988] (= ownDesc.Writable false)
  [23989] (24770/4) Normal[23989] return [? __x2__]
  [23990] (24784/11) If[23990] (! (= existingDescriptor undefined))
  [23991] (24786/12) Call[23991] app __x5__ = (IsAccessorDescriptor existingDescriptor)
  [23992] (24797/18) Call[23992] app __x7__ = (CreateDataProperty Receiver P V)
  [23993] (24800/19) Call[23993] app __x8__ = (IsAccessorDescriptor ownDesc)
  [23994] (24765/2) Call[23994] app __x1__ = (O.GetPrototypeOf O)
  [23995] (24793/14) Normal[23995] let valueDesc = (new PropertyDescriptor("Value" -> V))
  [23996] (24794/15) Call[23996] app __x6__ = (Receiver.DefineOwnProperty Receiver P valueDesc)
  [23997] (24795/15) Normal[23997] return [? __x6__]
  [23998] (24787/12) If[23998] (= __x5__ true)
  [23999] (24788/12) Normal[23999] return false
  [24000] (24790/13) If[24000] (= existingDescriptor.Writable false)
  [24001] (24801/19) Normal[24001] assert (= __x8__ true)
  [24002] (24798/18) Normal[24002] return [? __x7__]
  [24003] (24804/21) Normal[24003] return false
  [24004] (24806/22) Call[24004] app __x9__ = (Call setter Receiver (new [V]))
  [24005] (24783/10) Normal[24005] let existingDescriptor = [? __x4__]
  [24006] (24803/21) If[24006] (= setter undefined)
  [24007] (24807/22) Normal[24007] [? __x9__]
  [24008] (24791/13) Normal[24008] return false
  [24009] (24808/23) Normal[24009] return true
  [24010] (24802/20) Normal[24010] let setter = ownDesc.Set
  [24011] Exit[24011]
Algo: OrdinaryToPrimitive [2117]
  [24012] Entry[24012]
  [24013] (24810/0) Normal[24013] assert (= (typeof O) Object)
  [24014] (24814/2) Normal[24014] let methodNames = (new ["valueOf", "toString"])
  [24015] (24815/6) Normal[24015] let __x0__ = methodNames
  [24016] (24820/6) Normal[24016] __x1__ = (+ __x1__ 1i)
  [24017] (24821/7) Call[24017] app __x2__ = (Get O name)
  [24018] (24824/8) If[24018] (= __x3__ true)
  [24019] (24826/9) Call[24019] app __x4__ = (Call method O)
  [24020] LoopCont[24020]
  [24021] (24832/11) Normal[24021] throw TypeError
  [24022] Exit[24022]
  [24023] (24811/1) Normal[24023] assert (|| (= hint ~string~) (= hint ~number~))
  [24024] (24816/6) Normal[24024] let __x1__ = 0i
  [24025] (24819/6) Normal[24025] let name = __x0__[__x1__]
  [24026] (24823/8) Call[24026] app __x3__ = (IsCallable method)
  [24027] (24812/2) If[24027] (= hint ~string~)
  [24028] (24828/10) If[24028] (! (= (typeof result) Object))
  [24029] (24829/10) Normal[24029] return result
  [24030] (24822/7) Normal[24030] let method = [? __x2__]
  [24031] (24817/6) Loop[24031] (< __x1__ __x0__.length)
  [24032] (24813/3) Normal[24032] let methodNames = (new ["toString", "valueOf"])
  [24033] (24827/9) Normal[24033] let result = [? __x4__]
Algo: ParenthesizedExpression[0,0].Evaluation [2118]
  [24034] Entry[24034]
  [24035] (24834)Normal[24035] let ParenthesizedExpression = this
  [24036] (24835/0) Call[24036] access __x0__ = (Expression "Evaluation")
  [24037] (24836/0) Normal[24037] return __x0__
  [24038] Exit[24038]
Algo: ParenthesizedExpression[0,0].HasCallInTailPosition [2119]
  [24039] Entry[24039]
  [24040] (24838)Normal[24040] let ParenthesizedExpression = this
  [24041] (24839/0) Call[24041] access __x0__ = (Expression "HasCallInTailPosition" call)
  [24042] (24840/0) Normal[24042] return __x0__
  [24043] Exit[24043]
Algo: ParenthesizedExpression[0,0].NamedEvaluation [2120]
  [24044] Entry[24044]
  [24045] (24842)Normal[24045] let ParenthesizedExpression = this
  [24046] (24846/1) Normal[24046] return __x1__
  [24047] Exit[24047]
  [24048] (24843/0) Call[24048] app __x0__ = (IsAnonymousFunctionDefinition Expression)
  [24049] (24844/0) Normal[24049] assert (= __x0__ true)
  [24050] (24845/1) Call[24050] access __x1__ = (Expression "NamedEvaluation" name)
Algo: ParseModule [2121]
  [24051] Entry[24051]
  [24052] (24848/1) Normal[24052] let body = sourceText
  [24053] (24852/4) Normal[24053] let importEntries = __x1__
  [24054] (24853/5) Call[24054] app __x2__ = (ImportedLocalNames importEntries)
  [24055] (24857/8) Normal[24055] let starExportEntries = (new [])
  [24056] (24858/9) Call[24056] access __x3__ = (body "ExportEntries")
  [24057] (24861/10) Normal[24057] let __x5__ = 0i
  [24058] (24862/10) Loop[24058] (< __x5__ __x4__.length)
  [24059] (24849/3) Call[24059] access __x0__ = (body "ModuleRequests")
  [24060] (24854/5) Normal[24060] let importedBoundNames = __x2__
  [24061] (24856/7) Normal[24061] let localExportEntries = (new [])
  [24062] (24860/10) Normal[24062] let __x4__ = exportEntries
  [24063] (24850/3) Normal[24063] let requestedModules = __x0__
  [24064] (24865/10) Normal[24064] __x5__ = (+ __x5__ 1i)
  [24065] (24866/11) If[24065] (= ee.ModuleRequest null)
  [24066] (24859/9) Normal[24066] let exportEntries = __x3__
  [24067] (24855/6) Normal[24067] let indirectExportEntries = (new [])
  [24068] (24851/4) Call[24068] access __x1__ = (body "ImportEntries")
  [24069] (24867/12) If[24069] (! (contains importedBoundNames ee.LocalName))
  [24070] (24874/11) If[24070] (&& (= ee.ImportName "*") (= ee.ExportName null))
  [24071] (24864/10) Normal[24071] let ee = __x4__[__x5__]
  [24072] (24868/13) Normal[24072] append ee -> localExportEntries
  [24073] (24870/15) Normal[24073] ??? "Let id:{ie} be the element of id:{importEntries} whose [ [ LocalName ] ] is the same as id:{ee} . [ [ LocalName ] ] ."
  [24074] (24877/26) Normal[24074] return (new SourceTextModuleRecord("Realm" -> realm, "Environment" -> undefined, "Namespace" -> undefined, "Status" -> ~unlinked~, "EvaluationError" -> undefined, "HostDefined" -> hostDefined, "ECMAScriptCode" -> body, "Context" -> ~empty~, "ImportMeta" -> ~empty~, "RequestedModules" -> requestedModules, "ImportEntries" -> importEntries, "LocalExportEntries" -> localExportEntries, "IndirectExportEntries" -> indirectExportEntries, "StarExportEntries" -> starExportEntries, "DFSIndex" -> undefined, "DFSAncestorIndex" -> undefined))
  [24075] (24873/16) Normal[24075] append (new ExportEntryRecord("ModuleRequest" -> ie.ModuleRequest, "ImportName" -> ie.ImportName, "LocalName" -> null, "ExportName" -> ee.ExportName)) -> indirectExportEntries
  [24076] LoopCont[24076]
  [24077] (24875/23) Normal[24077] append ee -> starExportEntries
  [24078] (24876/11) Normal[24078] append ee -> indirectExportEntries
  [24079] Exit[24079]
  [24080] (24871/16) If[24080] (= ie.ImportName "*")
  [24081] (24872/18) Normal[24081] append ee -> localExportEntries
Algo: ParsePattern [2122]
  [24082] Entry[24082]
  [24083] (24879/0) If[24083] (= u true)
  [24084] (24884/6) Normal[24084] return parseResult
  [24085] Exit[24085]
  [24086] (24880/1) Normal[24086] let parseResult = (parse-syntax patternText "Pattern" true true)
  [24087] (24882/3) Normal[24087] let parseResult = (parse-syntax patternText "Pattern" false false)
  [24088] (24883/4) Normal[24088] parseResult = (parse-syntax patternText "Pattern" false true)
Algo: ParseScript [2123]
  [24089] Entry[24089]
  [24090] (24886/1) Normal[24090] let body = sourceText
  [24091] (24887/3) Normal[24091] return (new ScriptRecord("Realm" -> realm, "Environment" -> undefined, "ECMAScriptCode" -> body, "HostDefined" -> hostDefined))
  [24092] Exit[24092]
Algo: ParseText [2124]
  [24093] Entry[24093]
  [24094] (24889/0) Normal[24094] ??? "Attempt to parse id:{sourceText} using id:{goalSymbol} as the goal symbol , and analyse the parse result for any early error conditions . Parsing and early error detection may be interleaved in an implementation - defined manner ."
  [24095] (24890/1) Normal[24095] ??? "If the parse succeeded and no early errors were found , return the Parse Node ( an instance of id:{goalSymbol} ) at the root of the parse tree resulting from the parse ."
  [24096] (24891/2) Normal[24096] ??? "Otherwise , return a List of one or more value:{SyntaxError} objects representing the parsing errors and / or early errors . If more than one parsing error or early error is present , the number and ordering of error objects in the list is implementation - defined , but at least one must be present ."
  [24097] Exit[24097]
Algo: Pattern[0,0].EarlyErrors [2125]
  [24098] Entry[24098]
  [24099] (24893)Normal[24099] let Pattern = this
  [24100] (24894/0) If[24100] (! (< NcapturingParens (- (** 2i 32i) 1i)))
  [24101] (24895/0) Normal[24101] throw SyntaxError
  [24102] (24897/1) Normal[24102] ??? "It is a Syntax Error if nt:{Pattern} contains multiple nt:{GroupSpecifier} s whose enclosed nt:{RegExpIdentifierName} s have the same CapturingGroupName ."
  [24103] Exit[24103]
Algo: Pattern[0,0].Evaluation [2127]
  [24115] Entry[24115]
  [24116] (24899)Normal[24116] let Pattern = this
  [24117] (24913/1) Normal[24117] return __x1__
  [24118] Exit[24118]
  [24119] (24900/0) Call[24119] access __x0__ = (Disjunction "Evaluation" 1i)
  [24120] (24901/0) Normal[24120] let m = __x0__
  [24121] (24902/1) Arrow[24121] clo __x1__ = (str, index)[m] => {
  assert (= (typeof str) String)
  ??? "If id:{Unicode} is value:{true} , let id:{Input} be ! StringToCodePoints ( id:{str} ) . Otherwise , let id:{Input} be a List whose elements are the code units that are the elements of id:{str} . id:{Input} will be used throughout the algorithms in link:{sec-pattern-semantics} . Each element of id:{Input} is considered to be a character ."
  ??? "Let id:{InputLength} be the number of characters contained in id:{Input} . This alias will be used throughout the algorithms in link:{sec-pattern-semantics} ."
  ??? "Let id:{listIndex} be the index into id:{Input} of the character that was obtained from element id:{index} of id:{str} ."
  ??? "Let id:{c} be a new Continuation with parameters ( id:{y} ) that captures nothing and performs the following steps when called : in:{} out:{}"
  ??? "Let id:{cap} be a List of id:{NcapturingParens} value:{undefined} values , indexed 1 through id:{NcapturingParens} ."
  let x = (new [listIndex, cap])
  app __x2__ = (m x c)
  return __x2__
} [fid: 2126]
Algo: Pattern[0,0].Evaluation:1 [2126]
  [24104] Entry[24104]
  [24105] (24904/2) Normal[24105] assert (= (typeof str) String)
  [24106] (24908/7) Normal[24106] ??? "Let id:{c} be a new Continuation with parameters ( id:{y} ) that captures nothing and performs the following steps when called : in:{} out:{}"
  [24107] (24909/10) Normal[24107] ??? "Let id:{cap} be a List of id:{NcapturingParens} value:{undefined} values , indexed 1 through id:{NcapturingParens} ."
  [24108] (24905/4) Normal[24108] ??? "If id:{Unicode} is value:{true} , let id:{Input} be ! StringToCodePoints ( id:{str} ) . Otherwise , let id:{Input} be a List whose elements are the code units that are the elements of id:{str} . id:{Input} will be used throughout the algorithms in link:{sec-pattern-semantics} . Each element of id:{Input} is considered to be a character ."
  [24109] (24910/11) Normal[24109] let x = (new [listIndex, cap])
  [24110] (24912/12) Normal[24110] return __x2__
  [24111] Exit[24111]
  [24112] (24906/5) Normal[24112] ??? "Let id:{InputLength} be the number of characters contained in id:{Input} . This alias will be used throughout the algorithms in link:{sec-pattern-semantics} ."
  [24113] (24911/12) Call[24113] app __x2__ = (m x c)
  [24114] (24907/6) Normal[24114] ??? "Let id:{listIndex} be the index into id:{Input} of the character that was obtained from element id:{index} of id:{str} ."
Algo: PerformEval [2128]
  [24122] (24920/3) Normal[24122] [? __x0__]
  [24123] (24921/4) Normal[24123] let inFunction = false
  [24124] (24998/45) Call[24124] app __x8__ = (NormalCompletion undefined)
  [24125] (24999/45) Normal[24125] result = __x8__
  [24126] (24916/1) Normal[24126] return x
  [24127] (24918/2) Normal[24127] let evalRealm = REALM
  [24128] (25001/46) Normal[24128] CONTEXT = null
  [24129] (24919/3) Call[24129] app __x0__ = (HostEnsureCanCompileStrings callerRealm evalRealm)
  [24130] (25003/46) Normal[24130] (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i))
  [24131] (25005/47) Normal[24131] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [24132] Entry[24132]
  [24133] (24915/1) If[24133] (! (= (typeof x) String))
  [24134] (24926/8) Call[24134] app __x1__ = (GetThisEnvironment)
  [24135] (24927/8) Normal[24135] let thisEnvRec = [! __x1__]
  [24136] (24986/39) Normal[24136] evalContext.LexicalEnvironment = lexEnv
  [24137] (24987/40) Normal[24137] append evalContext -> EXECUTION_STACK
  [24138] (24969/27) Normal[24138] let lexEnv = __x4__
  [24139] (24970/28) Normal[24139] let varEnv = runningContext.VariableEnvironment
  [24140] (24945/17) Normal[24140] return undefined
  [24141] (24947/18) Call[24141] access body = (script "ScriptBody")
  [24142] (24963/23) Call[24142] access __x3__ = (script "IsStrict")
  [24143] (24964/23) Normal[24143] let strictEval = __x3__
  [24144] (24948/19) Call[24144] access check = (body "Contains" "NewTarget")
  [24145] (24982/35) Normal[24145] evalContext.Function = null
  [24146] (24983/36) Normal[24146] evalContext.Realm = evalRealm
  [24147] (24931/11) Normal[24147] inFunction = true
  [24148] (24932/12) Call[24148] app __x2__ = (thisEnvRec.HasSuperBinding thisEnvRec)
  [24149] (24940/16) If[24149] (= script absent)
  [24150] (24941/16) Normal[24150] throw SyntaxError
  [24151] (24943/17) Call[24151] access check = (script "Contains" "ScriptBody")
  [24152] (24974/31) Normal[24152] let varEnv = evalRealm.GlobalEnv
  [24153] (24975/32) If[24153] (= strictEval true)
  [24154] (24988/40) Normal[24154] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [24155] (24952/20) Call[24155] access check = (body "Contains" "SuperProperty")
  [24156] (24953/20) If[24156] (&& (! inMethod) check)
  [24157] (24991/42) If[24157] (= result.Type ~normal~)
  [24158] (24993/43) Call[24158] access __x7__ = (body "Evaluation")
  [24159] (24996/44) If[24159] (&& (= result.Type ~normal~) (= result.Value ~empty~))
  [24160] (24922/5) Normal[24160] let inMethod = false
  [24161] (24990/41) Normal[24161] let result = __x6__
  [24162] (25006/48) Normal[24162] return result
  [24163] (24957/21) If[24163] (&& (! inDerivedConstructor) check)
  [24164] (24958/21) Normal[24164] throw SyntaxError
  [24165] (24960/22) If[24165] (= strictCaller true)
  [24166] (24950/19) Normal[24166] throw SyntaxError
  [24167] (24965/24) Normal[24167] let runningContext = CONTEXT
  [24168] (24924/7) If[24168] (= direct true)
  [24169] (24939/15) Normal[24169] let script = (parse-syntax x "Script")
  [24170] (24984/37) Normal[24170] evalContext.ScriptOrModule = runningContext.ScriptOrModule
  [24171] (24930/10) Normal[24171] let F = thisEnvRec.FunctionObject
  [24172] (24968/27) Call[24172] app __x4__ = (NewDeclarativeEnvironment runningContext.LexicalEnvironment)
  [24173] (24973/30) Normal[24173] let lexEnv = __x5__
  [24174] (24934/13) If[24174] (= F.ConstructorKind ~derived~)
  [24175] (24935)Normal[24175] inDerivedConstructor = true
  [24176] (24956/21) Call[24176] access check = (body "Contains" "SuperCall")
  [24177] (24944/17) If[24177] (! check)
  [24178] (24972/30) Call[24178] app __x5__ = (NewDeclarativeEnvironment evalRealm.GlobalEnv)
  [24179] (24989/41) Call[24179] app __x6__ = (EvalDeclarationInstantiation body varEnv lexEnv strictEval)
  [24180] (24949/19) If[24180] (&& (! inFunction) check)
  [24181] Exit[24181]
  [24182] (24928/9) If[24182] (is-instance-of thisEnvRec FunctionEnvironmentRecord)
  [24183] (24985/38) Normal[24183] evalContext.VariableEnvironment = varEnv
  [24184] (24978/33) If[24184] (= runningContext null)
  [24185] (24979/33) Normal[24185] CONTEXT = null
  [24186] (24981/34) Normal[24186] let evalContext = (new ExecutionContext())
  [24187] (24923/6) Normal[24187] let inDerivedConstructor = false
  [24188] (24966/26) If[24188] (= direct true)
  [24189] (24961/22) Normal[24189] let strictEval = true
  [24190] (24976/32) Normal[24190] varEnv = lexEnv
  [24191] (24994/43) Normal[24191] result = __x7__
  [24192] (25002/46) If[24192] (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] evalContext)
  [24193] (24933/12) Normal[24193] inMethod = __x2__
  [24194] (24954/20) Normal[24194] throw SyntaxError
Algo: PerformPromiseAll [2129]
  [24195] Entry[24195]
  [24196] (25008/0) Call[24196] app __x0__ = (IsConstructor constructor)
  [24197] (25012/2) Normal[24197] let values = (new [])
  [24198] (25013/3) Normal[24198] let remainingElementsCount = (new Record("Value" -> 1i))
  [24199] (25018/6) Normal[24199] let next = __x2__
  [24200] (25019/7) Call[24200] app __x3__ = (IsAbruptCompletion next)
  [24201] (25023/8) Normal[24201] [? next]
  [24202] (25024/9) If[24202] (= next false)
  [24203] (25009/0) Normal[24203] assert (= __x0__ true)
  [24204] (25014/4) Normal[24204] let index = 0i
  [24205] (25017/6) Call[24205] app __x2__ = (IteratorStep iteratorRecord)
  [24206] (25010/1) Call[24206] app __x1__ = (IsCallable promiseResolve)
  [24207] (25020/7) If[24207] __x3__
  [24208] (25021/7) Normal[24208] iteratorRecord.Done = true
  [24209] (25028/12) If[24209] (= remainingElementsCount.Value 0i)
  [24210] (25030/13) Call[24210] app __x4__ = (CreateArrayFromList values)
  [24211] (25035/15) Normal[24211] return resultCapability.Promise
  [24212] (25015/5) Loop[24212] true
  [24213] Exit[24213]
  [24214] (25011/1) Normal[24214] assert (= __x1__ true)
  [24215] (25026/10) Normal[24215] iteratorRecord.Done = true
  [24216] (25037/16) Call[24216] app __x6__ = (IteratorValue next)
  [24217] (25056/29) Normal[24217] remainingElementsCount.Value = (+ remainingElementsCount.Value 1i)
  [24218] (25057/30) Call[24218] app __x10__ = (Invoke nextPromise "then" (new [onFulfilled, resultCapability.Reject]))
  [24219] (25038/16) Normal[24219] let nextValue = __x6__
  [24220] (25051/24) Normal[24220] onFulfilled.AlreadyCalled = false
  [24221] (25052/25) Normal[24221] onFulfilled.Index = index
  [24222] (25039/17) Call[24222] app __x7__ = (IsAbruptCompletion nextValue)
  [24223] (25031/13) Normal[24223] let valuesArray = [! __x4__]
  [24224] (25032/14) Call[24224] app __x5__ = (Call resultCapability.Resolve undefined (new [valuesArray]))
  [24225] LoopCont[24225]
  [24226] (25043/18) Normal[24226] [? nextValue]
  [24227] (25044/19) Normal[24227] append undefined -> values
  [24228] (25033/14) Normal[24228] [? __x5__]
  [24229] (25047/21) Normal[24229] ??? "Let id:{steps} be the algorithm steps defined in link:{sec-promise.all-resolve-element-functions} ."
  [24230] (25048/22) Normal[24230] ??? "Let id:{length} be the number of non - optional parameters of the function definition in link:{sec-promise.all-resolve-element-functions} ."
  [24231] (25041/17) Normal[24231] iteratorRecord.Done = true
  [24232] (25053/26) Normal[24232] onFulfilled.Values = values
  [24233] (25055/28) Normal[24233] onFulfilled.RemainingElements = remainingElementsCount
  [24234] (25059/31) Normal[24234] index = (+ index 1i)
  [24235] (25027/11) Normal[24235] remainingElementsCount.Value = (- remainingElementsCount.Value 1i)
  [24236] (25046/20) Normal[24236] let nextPromise = [? __x8__]
  [24237] (25049/23) Call[24237] app __x9__ = (CreateBuiltinFunction steps length "" (new ["AlreadyCalled", "Index", "Values", "Capability", "RemainingElements"]))
  [24238] (25058/30) Normal[24238] [? __x10__]
  [24239] (25040/17) If[24239] __x7__
  [24240] (25054/27) Normal[24240] onFulfilled.Capability = resultCapability
  [24241] (25050/23) Normal[24241] let onFulfilled = [! __x9__]
  [24242] (25045/20) Call[24242] app __x8__ = (Call promiseResolve constructor (new [nextValue]))
Algo: PerformPromiseAllSettled [2130]
  [24243] Entry[24243]
  [24244] (25061/0) Call[24244] app __x0__ = (IsConstructor constructor)
  [24245] (25065/2) Normal[24245] let values = (new [])
  [24246] (25066/3) Normal[24246] let remainingElementsCount = (new Record("Value" -> 1i))
  [24247] (25062/0) Normal[24247] assert (= [! __x0__] true)
  [24248] (25067/4) Normal[24248] let index = 0i
  [24249] (25063/1) Call[24249] app __x1__ = (IsCallable promiseResolve)
  [24250] (25068/5) Loop[24250] true
  [24251] (25070/6) Call[24251] app __x2__ = (IteratorStep iteratorRecord)
  [24252] Exit[24252]
  [24253] (25064/1) Normal[24253] assert (= __x1__ true)
  [24254] (25071/6) Normal[24254] let next = __x2__
  [24255] (25072/7) Call[24255] app __x3__ = (IsAbruptCompletion next)
  [24256] LoopCont[24256]
  [24257] (25109/29) Normal[24257] onFulfilled.RemainingElements = remainingElementsCount
  [24258] (25110/30) Normal[24258] ??? "Let id:{stepsRejected} be the algorithm steps defined in link:{sec-promise.allsettled-reject-element-functions} ."
  [24259] (25090/16) Call[24259] app __x6__ = (IteratorValue next)
  [24260] (25091/16) Normal[24260] let nextValue = __x6__
  [24261] (25104/24) Normal[24261] let alreadyCalled = (new Record("Value" -> false))
  [24262] (25105/25) Normal[24262] onFulfilled.AlreadyCalled = alreadyCalled
  [24263] (25092/17) Call[24263] app __x7__ = (IsAbruptCompletion nextValue)
  [24264] (25119/38) Normal[24264] remainingElementsCount.Value = (+ remainingElementsCount.Value 1i)
  [24265] (25120/39) Call[24265] app __x11__ = (Invoke nextPromise "then" (new [onFulfilled, onRejected]))
  [24266] (25076/8) Normal[24266] [? next]
  [24267] (25077/9) If[24267] (= next false)
  [24268] (25084/13) Normal[24268] let valuesArray = [! __x4__]
  [24269] (25085/14) Call[24269] app __x5__ = (Call resultCapability.Resolve undefined (new [valuesArray]))
  [24270] (25113/32) Normal[24270] let onRejected = [! __x10__]
  [24271] (25114/33) Normal[24271] onRejected.AlreadyCalled = alreadyCalled
  [24272] (25096/18) Normal[24272] [? nextValue]
  [24273] (25097/19) Normal[24273] append undefined -> values
  [24274] (25086/14) Normal[24274] [? __x5__]
  [24275] (25100/21) Normal[24275] ??? "Let id:{stepsFulfilled} be the algorithm steps defined in link:{sec-promise.allsettled-resolve-element-functions} ."
  [24276] (25101/22) Normal[24276] ??? "Let id:{lengthFulfilled} be the number of non - optional parameters of the function definition in link:{sec-promise.allsettled-resolve-element-functions} ."
  [24277] (25094/17) Normal[24277] iteratorRecord.Done = true
  [24278] (25106/26) Normal[24278] onFulfilled.Index = index
  [24279] (25121/39) Normal[24279] [? __x11__]
  [24280] (25074/7) Normal[24280] iteratorRecord.Done = true
  [24281] (25108/28) Normal[24281] onFulfilled.Capability = resultCapability
  [24282] (25112/32) Call[24282] app __x10__ = (CreateBuiltinFunction stepsRejected lengthRejected "" (new ["AlreadyCalled", "Index", "Values", "Capability", "RemainingElements"]))
  [24283] (25080/11) Normal[24283] remainingElementsCount.Value = (- remainingElementsCount.Value 1i)
  [24284] (25081/12) If[24284] (= remainingElementsCount.Value 0i)
  [24285] (25099/20) Normal[24285] let nextPromise = [? __x8__]
  [24286] (25102/23) Call[24286] app __x9__ = (CreateBuiltinFunction stepsFulfilled lengthFulfilled "" (new ["AlreadyCalled", "Index", "Values", "Capability", "RemainingElements"]))
  [24287] (25088/15) Normal[24287] return resultCapability.Promise
  [24288] (25111/31) Normal[24288] ??? "Let id:{lengthRejected} be the number of non - optional parameters of the function definition in link:{sec-promise.allsettled-reject-element-functions} ."
  [24289] (25093/17) If[24289] __x7__
  [24290] (25073/7) If[24290] __x3__
  [24291] (25122/40) Normal[24291] index = (+ index 1i)
  [24292] (25116/35) Normal[24292] onRejected.Values = values
  [24293] (25117/36) Normal[24293] onRejected.Capability = resultCapability
  [24294] (25107/27) Normal[24294] onFulfilled.Values = values
  [24295] (25103/23) Normal[24295] let onFulfilled = [! __x9__]
  [24296] (25115/34) Normal[24296] onRejected.Index = index
  [24297] (25083/13) Call[24297] app __x4__ = (CreateArrayFromList values)
  [24298] (25118/37) Normal[24298] onRejected.RemainingElements = remainingElementsCount
  [24299] (25079/10) Normal[24299] iteratorRecord.Done = true
  [24300] (25098/20) Call[24300] app __x8__ = (Call promiseResolve constructor (new [nextValue]))
Algo: PerformPromiseAny [2131]
  [24301] Entry[24301]
  [24302] (25124/0) Call[24302] app __x0__ = (IsConstructor constructor)
  [24303] (25128/2) Normal[24303] let errors = (new [])
  [24304] (25129/3) Normal[24304] let remainingElementsCount = (new Record("Value" -> 1i))
  [24305] (25134/6) Normal[24305] let next = __x2__
  [24306] (25135/7) Call[24306] app __x3__ = (IsAbruptCompletion next)
  [24307] (25139/8) Normal[24307] [? next]
  [24308] (25140/9) If[24308] (= next false)
  [24309] (25125/0) Normal[24309] assert (= [! __x0__] true)
  [24310] (25130/4) Normal[24310] let index = 0i
  [24311] (25133/6) Call[24311] app __x2__ = (IteratorStep iteratorRecord)
  [24312] (25126/1) Call[24312] app __x1__ = (IsCallable promiseResolve)
  [24313] (25136/7) If[24313] __x3__
  [24314] (25137/7) Normal[24314] iteratorRecord.Done = true
  [24315] (25131/5) Loop[24315] true
  [24316] Exit[24316]
  [24317] (25127/1) Normal[24317] assert (= [! __x1__] true)
  [24318] (25172/28) Normal[24318] onRejected.Capability = resultCapability
  [24319] (25173/29) Normal[24319] onRejected.RemainingElements = remainingElementsCount
  [24320] (25151/15) Normal[24320] return __x6__
  [24321] (25153/16) Normal[24321] return resultCapability.Promise
  [24322] (25167/24) Call[24322] app __x10__ = (CreateBuiltinFunction stepsRejected lengthRejected "" (new ["AlreadyCalled", "Index", "Errors", "Capability", "RemainingElements"]))
  [24323] (25168/24) Normal[24323] let onRejected = [! __x10__]
  [24324] (25155/17) Call[24324] app __x7__ = (IteratorValue next)
  [24325] (25147/14) Call[24325] app __x4__ = (CreateArrayFromList errors)
  [24326] (25148/14) Call[24326] app __x5__ = (DefinePropertyOrThrow error "errors" (new PropertyDescriptor("Configurable" -> true, "Enumerable" -> false, "Writable" -> true, "Value" -> [! __x4__])))
  [24327] (25176/31) Normal[24327] [? __x11__]
  [24328] (25177/32) Normal[24328] index = (+ index 1i)
  [24329] (25158/18) If[24329] __x8__
  [24330] (25159/18) Normal[24330] iteratorRecord.Done = true
  [24331] (25161/19) Normal[24331] [? nextValue]
  [24332] (25149/14) Normal[24332] [! __x5__]
  [24333] (25163/21) Call[24333] app __x9__ = (Call promiseResolve constructor (new [nextValue]))
  [24334] (25164/21) Normal[24334] let nextPromise = [? __x9__]
  [24335] (25157/18) Call[24335] app __x8__ = (IsAbruptCompletion nextValue)
  [24336] (25169/25) Normal[24336] onRejected.AlreadyCalled = false
  [24337] (25171/27) Normal[24337] onRejected.Errors = errors
  [24338] (25175/31) Call[24338] app __x11__ = (Invoke nextPromise "then" (new [resultCapability.Resolve, onRejected]))
  [24339] (25143/11) Normal[24339] remainingElementsCount.Value = (- remainingElementsCount.Value 1i)
  [24340] (25144/12) If[24340] (= remainingElementsCount.Value 0i)
  [24341] (25162/20) Normal[24341] append undefined -> errors
  [24342] (25165/22) Normal[24342] ??? "Let id:{stepsRejected} be the algorithm steps defined in link:{sec-promise.any-reject-element-functions} ."
  [24343] (25150/15) Call[24343] app __x6__ = (ThrowCompletion error)
  [24344] (25174/30) Normal[24344] remainingElementsCount.Value = (+ remainingElementsCount.Value 1i)
  [24345] (25156/17) Normal[24345] let nextValue = __x7__
  [24346] (25170/26) Normal[24346] onRejected.Index = index
  [24347] (25166/23) Normal[24347] ??? "Let id:{lengthRejected} be the number of non - optional parameters of the function definition in link:{sec-promise.any-reject-element-functions} ."
  [24348] LoopCont[24348]
  [24349] (25146/13) Normal[24349] ??? "Let id:{error} be a newly created code:{AggregateError} object ."
  [24350] (25142/10) Normal[24350] iteratorRecord.Done = true
Algo: PerformPromiseRace [2132]
  [24351] Entry[24351]
  [24352] (25179/0) Call[24352] app __x0__ = (IsConstructor constructor)
  [24353] (25183/2) Loop[24353] true
  [24354] (25185/3) Call[24354] app __x2__ = (IteratorStep iteratorRecord)
  [24355] Exit[24355]
  [24356] (25189/4) Normal[24356] iteratorRecord.Done = true
  [24357] (25191/5) Normal[24357] [? next]
  [24358] (25195/8) Normal[24358] return resultCapability.Promise
  [24359] (25197/9) Call[24359] app __x4__ = (IteratorValue next)
  [24360] (25203/11) Normal[24360] [? nextValue]
  [24361] (25204/12) Call[24361] app __x6__ = (Call promiseResolve constructor (new [nextValue]))
  [24362] (25180/0) Normal[24362] assert (= __x0__ true)
  [24363] (25186/3) Normal[24363] let next = __x2__
  [24364] (25205/12) Normal[24364] let nextPromise = [? __x6__]
  [24365] (25188/4) If[24365] __x3__
  [24366] (25194/7) Normal[24366] iteratorRecord.Done = true
  [24367] (25181/1) Call[24367] app __x1__ = (IsCallable promiseResolve)
  [24368] (25199/10) Call[24368] app __x5__ = (IsAbruptCompletion nextValue)
  [24369] (25200/10) If[24369] __x5__
  [24370] (25206/13) Call[24370] app __x7__ = (Invoke nextPromise "then" (new [resultCapability.Resolve, resultCapability.Reject]))
  [24371] (25192/6) If[24371] (= next false)
  [24372] (25187/4) Call[24372] app __x3__ = (IsAbruptCompletion next)
  [24373] (25182/1) Normal[24373] assert (= __x1__ true)
  [24374] (25201/10) Normal[24374] iteratorRecord.Done = true
  [24375] (25198/9) Normal[24375] let nextValue = __x4__
  [24376] (25207/13) Normal[24376] [? __x7__]
  [24377] LoopCont[24377]
Algo: PerformPromiseThen [2133]
  [24378] Entry[24378]
  [24379] (25209/0) Call[24379] app __x0__ = (IsPromise promise)
  [24380] (25214/3) Call[24380] app __x1__ = (IsCallable onFulfilled)
  [24381] (25215/3) If[24381] (= __x1__ false)
  [24382] (25220/7) Call[24382] app __x3__ = (IsCallable onRejected)
  [24383] (25221/7) If[24383] (= __x3__ false)
  [24384] (25225/10) Normal[24384] let onRejectedJobCallback = __x4__
  [24385] (25226/11) Normal[24385] let fulfillReaction = (new PromiseReaction("Capability" -> resultCapability, "Type" -> ~Fulfill~, "Handler" -> onFulfilledJobCallback))
  [24386] (25210/0) Normal[24386] assert (= __x0__ true)
  [24387] (25216/4) Normal[24387] let onFulfilledJobCallback = ~empty~
  [24388] (25218/6) Call[24388] app __x2__ = (HostMakeJobCallback onFulfilled)
  [24389] (25219/6) Normal[24389] let onFulfilledJobCallback = __x2__
  [24390] (25224/10) Call[24390] app __x4__ = (HostMakeJobCallback onRejected)
  [24391] (25211/1) If[24391] (= resultCapability absent)
  [24392] (25222/8) Normal[24392] let onRejectedJobCallback = ~empty~
  [24393] (25230/14) Normal[24393] append fulfillReaction -> promise.PromiseFulfillReactions
  [24394] (25231/15) Normal[24394] append rejectReaction -> promise.PromiseRejectReactions
  [24395] (25212/2) Normal[24395] resultCapability = undefined
  [24396] (25227/12) Normal[24396] let rejectReaction = (new PromiseReaction("Capability" -> resultCapability, "Type" -> ~Reject~, "Handler" -> onRejectedJobCallback))
  [24397] (25237/19) Call[24397] app __x6__ = (HostEnqueuePromiseJob fulfillJob.Job fulfillJob.Realm)
  [24398] (25238/19) Normal[24398] __x6__
  [24399] (25253/28) Normal[24399] return undefined
  [24400] Exit[24400]
  [24401] (25251/26) Normal[24401] promise.PromiseIsHandled = true
  [24402] (25232/13) If[24402] (= promise.PromiseState ~fulfilled~)
  [24403] (25234/17) Normal[24403] let value = promise.PromiseResult
  [24404] (25240/21) Normal[24404] assert (= promise.PromiseState ~rejected~)
  [24405] (25244/23) Call[24405] app __x7__ = (HostPromiseRejectionTracker promise "handle")
  [24406] (25245/23) Normal[24406] __x7__
  [24407] (25235/18) Call[24407] app __x5__ = (NewPromiseReactionJob fulfillReaction value)
  [24408] (25249/25) Call[24408] app __x9__ = (HostEnqueuePromiseJob rejectJob.Job rejectJob.Realm)
  [24409] (25250/25) Normal[24409] __x9__
  [24410] (25242/23) If[24410] (= promise.PromiseIsHandled false)
  [24411] (25247/24) Call[24411] app __x8__ = (NewPromiseReactionJob rejectReaction reason)
  [24412] (25254/27) Normal[24412] return resultCapability.Promise
  [24413] (25228/13) If[24413] (= promise.PromiseState ~pending~)
  [24414] (25248/24) Normal[24414] let rejectJob = __x8__
  [24415] (25236/18) Normal[24415] let fulfillJob = __x5__
  [24416] (25241/22) Normal[24416] let reason = promise.PromiseResult
  [24417] (25252/27) If[24417] (= resultCapability undefined)
Algo: PrepareForOrdinaryCall [2134]
  [24418] Entry[24418]
  [24419] (25256/0) Normal[24419] assert (|| (= (typeof newTarget) Undefined) (= (typeof newTarget) Object))
  [24420] (25260/4) Normal[24420] let calleeRealm = F.Realm
  [24421] (25261/5) Normal[24421] calleeContext.Realm = calleeRealm
  [24422] (25265/8) Normal[24422] calleeContext.LexicalEnvironment = localEnv
  [24423] (25266/9) Normal[24423] calleeContext.VariableEnvironment = localEnv
  [24424] (25270/11) Normal[24424] append calleeContext -> EXECUTION_STACK
  [24425] (25271/11) Normal[24425] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [24426] (25257/1) Normal[24426] let callerContext = CONTEXT
  [24427] (25262/6) Normal[24427] calleeContext.ScriptOrModule = F.ScriptOrModule
  [24428] (25264/7) Normal[24428] let localEnv = __x0__
  [24429] (25268/10) Normal[24429] CONTEXT = null
  [24430] (25258/2) Normal[24430] let calleeContext = (new ExecutionContext())
  [24431] (25267/10) If[24431] (= callerContext null)
  [24432] (25263/7) Call[24432] app __x0__ = (NewFunctionEnvironment F newTarget)
  [24433] (25259/3) Normal[24433] calleeContext.Function = F
  [24434] (25272/13) Normal[24434] return calleeContext
  [24435] Exit[24435]
Algo: PrepareForTailCall [2135]
  [24436] Entry[24436]
  [24437] (25274/0) Normal[24437] let leafContext = CONTEXT
  [24438] (25279/2) Normal[24438] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [24439] Exit[24439]
  [24440] (25275/1) Normal[24440] CONTEXT = null
  [24441] (25276/2) If[24441] (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] leafContext)
  [24442] (25277/2) Normal[24442] (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i))
Algo: PrimaryExpression[0,0].AssignmentTargetType [2136]
  [24443] Entry[24443]
  [24444] (25281)Normal[24444] let PrimaryExpression = this
  [24445] (25282/0) Normal[24445] return ~invalid~
  [24446] Exit[24446]
Algo: PrimaryExpression[0,0].Evaluation [2137]
  [24447] Entry[24447]
  [24448] (25284)Normal[24448] let PrimaryExpression = this
  [24449] (25285/0) Call[24449] app __x0__ = (ResolveThisBinding)
  [24450] (25286/0) Normal[24450] return [? __x0__]
  [24451] Exit[24451]
Algo: PrimaryExpression[0,0].HasCallInTailPosition [2138]
  [24452] Entry[24452]
  [24453] (25288)Normal[24453] let PrimaryExpression = this
  [24454] (25289/0) Normal[24454] return false
  [24455] Exit[24455]
Algo: PrimaryExpression[0,0].IsFunctionDefinition [2139]
  [24456] Entry[24456]
  [24457] (25291)Normal[24457] let PrimaryExpression = this
  [24458] (25292/0) Normal[24458] return false
  [24459] Exit[24459]
Algo: PrimaryExpression[0,0].IsIdentifierRef [2140]
  [24460] Entry[24460]
  [24461] (25294)Normal[24461] let PrimaryExpression = this
  [24462] (25295/0) Normal[24462] return false
  [24463] Exit[24463]
Algo: PrimaryExpression[1,0].HasCallInTailPosition [2141]
  [24464] Entry[24464]
  [24465] (25297)Normal[24465] let PrimaryExpression = this
  [24466] (25298/0) Normal[24466] return false
  [24467] Exit[24467]
Algo: PrimaryExpression[1,0].IsFunctionDefinition [2142]
  [24468] Entry[24468]
  [24469] (25300)Normal[24469] let PrimaryExpression = this
  [24470] (25301/0) Normal[24470] return false
  [24471] Exit[24471]
Algo: PrimaryExpression[1,0].IsIdentifierRef [2143]
  [24472] Entry[24472]
  [24473] (25303)Normal[24473] let PrimaryExpression = this
  [24474] (25304/0) Normal[24474] return true
  [24475] Exit[24475]
Algo: PrimaryExpression[10,0].AssignmentTargetType [2144]
  [24476] Entry[24476]
  [24477] (25306)Normal[24477] let PrimaryExpression = this
  [24478] (25307/0) Normal[24478] return ~invalid~
  [24479] Exit[24479]
Algo: PrimaryExpression[10,0].EarlyErrors [2145]
  [24480] Entry[24480]
  [24481] (25309)Normal[24481] let PrimaryExpression = this
  [24482] (25310/0) Call[24482] app __x0__ = (IsValidRegularExpressionLiteral RegularExpressionLiteral)
  [24483] (25311/0) If[24483] (= __x0__ false)
  [24484] (25312/0) Normal[24484] throw SyntaxError
  [24485] Exit[24485]
Algo: PrimaryExpression[10,0].Evaluation [2146]
  [24486] Entry[24486]
  [24487] (25315)Normal[24487] let PrimaryExpression = this
  [24488] (25319/1) Call[24488] access __x2__ = (RegularExpressionLiteral "FlagText")
  [24489] (25320/1) Call[24489] app __x3__ = (CodePointsToString __x2__)
  [24490] (25316/0) Call[24490] access __x0__ = (RegularExpressionLiteral "BodyText")
  [24491] (25321/1) Normal[24491] let flags = [! __x3__]
  [24492] (25323/2) Normal[24492] return __x4__
  [24493] Exit[24493]
  [24494] (25317/0) Call[24494] app __x1__ = (CodePointsToString __x0__)
  [24495] (25322/2) Call[24495] app __x4__ = (RegExpCreate pattern flags)
  [24496] (25318/0) Normal[24496] let pattern = [! __x1__]
Algo: PrimaryExpression[10,0].HasCallInTailPosition [2147]
  [24497] Entry[24497]
  [24498] (25325)Normal[24498] let PrimaryExpression = this
  [24499] (25326/0) Normal[24499] return false
  [24500] Exit[24500]
Algo: PrimaryExpression[10,0].IsFunctionDefinition [2148]
  [24501] Entry[24501]
  [24502] (25328)Normal[24502] let PrimaryExpression = this
  [24503] (25329/0) Normal[24503] return false
  [24504] Exit[24504]
Algo: PrimaryExpression[10,0].IsIdentifierRef [2149]
  [24505] Entry[24505]
  [24506] (25331)Normal[24506] let PrimaryExpression = this
  [24507] (25332/0) Normal[24507] return false
  [24508] Exit[24508]
Algo: PrimaryExpression[11,0].AssignmentTargetType [2150]
  [24509] Entry[24509]
  [24510] (25334)Normal[24510] let PrimaryExpression = this
  [24511] (25335/0) Normal[24511] return ~invalid~
  [24512] Exit[24512]
Algo: PrimaryExpression[11,0].HasCallInTailPosition [2151]
  [24513] Entry[24513]
  [24514] (25337)Normal[24514] let PrimaryExpression = this
  [24515] (25338/0) Normal[24515] return false
  [24516] Exit[24516]
Algo: PrimaryExpression[11,0].IsFunctionDefinition [2152]
  [24517] Entry[24517]
  [24518] (25340)Normal[24518] let PrimaryExpression = this
  [24519] (25341/0) Normal[24519] return false
  [24520] Exit[24520]
Algo: PrimaryExpression[11,0].IsIdentifierRef [2153]
  [24521] Entry[24521]
  [24522] (25343)Normal[24522] let PrimaryExpression = this
  [24523] (25344/0) Normal[24523] return false
  [24524] Exit[24524]
Algo: PrimaryExpression[12,0].AssignmentTargetType [2154]
  [24525] Entry[24525]
  [24526] (25346)Normal[24526] let PrimaryExpression = this
  [24527] (25350/1) Normal[24527] return __x1__
  [24528] Exit[24528]
  [24529] (25347/0) Call[24529] access __x0__ = (CoverParenthesizedExpressionAndArrowParameterList "CoveredParenthesizedExpression")
  [24530] (25348/0) Normal[24530] let expr = __x0__
  [24531] (25349/1) Call[24531] access __x1__ = (expr "AssignmentTargetType")
Algo: PrimaryExpression[12,0].EarlyErrors [2155]
  [24532] Entry[24532]
  [24533] (25352)Normal[24533] let PrimaryExpression = this
  [24534] (25357/0) If[24534] __x0__
  [24535] (25358/0) Normal[24535] throw SyntaxError
  [24536] (25360/1) Normal[24536] ??? "All Early Error rules for nt:{ParenthesizedExpression} and its derived productions also apply to CoveredParenthesizedExpression of nt:{CoverParenthesizedExpressionAndArrowParameterList} ."
  [24537] (25353/0) Normal[24537] let __x0__ = false
  [24538] (25354/0) If[24538] (= absent (parse-syntax CoverParenthesizedExpressionAndArrowParameterList "ParenthesizedExpression"))
  [24539] Exit[24539]
  [24540] (25355/0) Normal[24540] __x0__ = true
Algo: PrimaryExpression[12,0].Evaluation [2156]
  [24541] Entry[24541]
  [24542] (25362)Normal[24542] let PrimaryExpression = this
  [24543] (25366/1) Normal[24543] return __x1__
  [24544] Exit[24544]
  [24545] (25363/0) Call[24545] access __x0__ = (CoverParenthesizedExpressionAndArrowParameterList "CoveredParenthesizedExpression")
  [24546] (25364/0) Normal[24546] let expr = __x0__
  [24547] (25365/1) Call[24547] access __x1__ = (expr "Evaluation")
Algo: PrimaryExpression[12,0].HasCallInTailPosition [2157]
  [24548] Entry[24548]
  [24549] (25368)Normal[24549] let PrimaryExpression = this
  [24550] (25372/1) Normal[24550] return __x1__
  [24551] Exit[24551]
  [24552] (25369/0) Call[24552] access __x0__ = (CoverParenthesizedExpressionAndArrowParameterList "CoveredParenthesizedExpression")
  [24553] (25370/0) Normal[24553] let expr = __x0__
  [24554] (25371/1) Call[24554] access __x1__ = (expr "HasCallInTailPosition" call)
Algo: PrimaryExpression[12,0].HasName [2158]
  [24555] Entry[24555]
  [24556] (25374)Normal[24556] let PrimaryExpression = this
  [24557] (25378/1) If[24557] (= __x1__ false)
  [24558] (25379/1) Normal[24558] return false
  [24559] (25381/2) Call[24559] access __x2__ = (expr "HasName")
  [24560] (25375/0) Call[24560] access __x0__ = (CoverParenthesizedExpressionAndArrowParameterList "CoveredParenthesizedExpression")
  [24561] (25376/0) Normal[24561] let expr = __x0__
  [24562] (25382/2) Normal[24562] return __x2__
  [24563] (25377/1) Call[24563] access __x1__ = (expr "IsFunctionDefinition")
  [24564] Exit[24564]
Algo: PrimaryExpression[12,0].IsFunctionDefinition [2159]
  [24565] Entry[24565]
  [24566] (25384)Normal[24566] let PrimaryExpression = this
  [24567] (25388/1) Normal[24567] return __x1__
  [24568] Exit[24568]
  [24569] (25385/0) Call[24569] access __x0__ = (CoverParenthesizedExpressionAndArrowParameterList "CoveredParenthesizedExpression")
  [24570] (25386/0) Normal[24570] let expr = __x0__
  [24571] (25387/1) Call[24571] access __x1__ = (expr "IsFunctionDefinition")
Algo: PrimaryExpression[12,0].IsIdentifierRef [2160]
  [24572] Entry[24572]
  [24573] (25390)Normal[24573] let PrimaryExpression = this
  [24574] (25391/0) Normal[24574] return false
  [24575] Exit[24575]
Algo: PrimaryExpression[12,0].NamedEvaluation [2161]
  [24576] Entry[24576]
  [24577] (25393)Normal[24577] let PrimaryExpression = this
  [24578] (25397/1) Normal[24578] return __x1__
  [24579] Exit[24579]
  [24580] (25394/0) Call[24580] access __x0__ = (CoverParenthesizedExpressionAndArrowParameterList "CoveredParenthesizedExpression")
  [24581] (25395/0) Normal[24581] let expr = __x0__
  [24582] (25396/1) Call[24582] access __x1__ = (expr "NamedEvaluation" name)
Algo: PrimaryExpression[2,0].AssignmentTargetType [2162]
  [24583] Entry[24583]
  [24584] (25399)Normal[24584] let PrimaryExpression = this
  [24585] (25400/0) Normal[24585] return ~invalid~
  [24586] Exit[24586]
Algo: PrimaryExpression[2,0].HasCallInTailPosition [2163]
  [24587] Entry[24587]
  [24588] (25402)Normal[24588] let PrimaryExpression = this
  [24589] (25403/0) Normal[24589] return false
  [24590] Exit[24590]
Algo: PrimaryExpression[2,0].IsFunctionDefinition [2164]
  [24591] Entry[24591]
  [24592] (25405)Normal[24592] let PrimaryExpression = this
  [24593] (25406/0) Normal[24593] return false
  [24594] Exit[24594]
Algo: PrimaryExpression[2,0].IsIdentifierRef [2165]
  [24595] Entry[24595]
  [24596] (25408)Normal[24596] let PrimaryExpression = this
  [24597] (25409/0) Normal[24597] return false
  [24598] Exit[24598]
Algo: PrimaryExpression[3,0].AssignmentTargetType [2166]
  [24599] Entry[24599]
  [24600] (25411)Normal[24600] let PrimaryExpression = this
  [24601] (25412/0) Normal[24601] return ~invalid~
  [24602] Exit[24602]
Algo: PrimaryExpression[3,0].HasCallInTailPosition [2167]
  [24603] Entry[24603]
  [24604] (25414)Normal[24604] let PrimaryExpression = this
  [24605] (25415/0) Normal[24605] return false
  [24606] Exit[24606]
Algo: PrimaryExpression[3,0].IsFunctionDefinition [2168]
  [24607] Entry[24607]
  [24608] (25417)Normal[24608] let PrimaryExpression = this
  [24609] (25418/0) Normal[24609] return false
  [24610] Exit[24610]
Algo: PrimaryExpression[3,0].IsIdentifierRef [2169]
  [24611] Entry[24611]
  [24612] (25420)Normal[24612] let PrimaryExpression = this
  [24613] (25421/0) Normal[24613] return false
  [24614] Exit[24614]
Algo: PrimaryExpression[4,0].AssignmentTargetType [2170]
  [24615] Entry[24615]
  [24616] (25423)Normal[24616] let PrimaryExpression = this
  [24617] (25424/0) Normal[24617] return ~invalid~
  [24618] Exit[24618]
Algo: PrimaryExpression[4,0].HasCallInTailPosition [2171]
  [24619] Entry[24619]
  [24620] (25426)Normal[24620] let PrimaryExpression = this
  [24621] (25427/0) Normal[24621] return false
  [24622] Exit[24622]
Algo: PrimaryExpression[4,0].IsFunctionDefinition [2172]
  [24623] Entry[24623]
  [24624] (25429)Normal[24624] let PrimaryExpression = this
  [24625] (25430/0) Normal[24625] return false
  [24626] Exit[24626]
Algo: PrimaryExpression[4,0].IsIdentifierRef [2173]
  [24627] Entry[24627]
  [24628] (25432)Normal[24628] let PrimaryExpression = this
  [24629] (25433/0) Normal[24629] return false
  [24630] Exit[24630]
Algo: PrimaryExpression[5,0].AssignmentTargetType [2174]
  [24631] Entry[24631]
  [24632] (25435)Normal[24632] let PrimaryExpression = this
  [24633] (25436/0) Normal[24633] return ~invalid~
  [24634] Exit[24634]
Algo: PrimaryExpression[5,0].HasCallInTailPosition [2175]
  [24635] Entry[24635]
  [24636] (25438)Normal[24636] let PrimaryExpression = this
  [24637] (25439/0) Normal[24637] return false
  [24638] Exit[24638]
Algo: PrimaryExpression[5,0].IsIdentifierRef [2176]
  [24639] Entry[24639]
  [24640] (25441)Normal[24640] let PrimaryExpression = this
  [24641] (25442/0) Normal[24641] return false
  [24642] Exit[24642]
Algo: PrimaryExpression[6,0].AssignmentTargetType [2177]
  [24643] Entry[24643]
  [24644] (25444)Normal[24644] let PrimaryExpression = this
  [24645] (25445/0) Normal[24645] return ~invalid~
  [24646] Exit[24646]
Algo: PrimaryExpression[6,0].HasCallInTailPosition [2178]
  [24647] Entry[24647]
  [24648] (25447)Normal[24648] let PrimaryExpression = this
  [24649] (25448/0) Normal[24649] return false
  [24650] Exit[24650]
Algo: PrimaryExpression[6,0].IsIdentifierRef [2179]
  [24651] Entry[24651]
  [24652] (25450)Normal[24652] let PrimaryExpression = this
  [24653] (25451/0) Normal[24653] return false
  [24654] Exit[24654]
Algo: PrimaryExpression[7,0].AssignmentTargetType [2180]
  [24655] Entry[24655]
  [24656] (25453)Normal[24656] let PrimaryExpression = this
  [24657] (25454/0) Normal[24657] return ~invalid~
  [24658] Exit[24658]
Algo: PrimaryExpression[7,0].HasCallInTailPosition [2181]
  [24659] Entry[24659]
  [24660] (25456)Normal[24660] let PrimaryExpression = this
  [24661] (25457/0) Normal[24661] return false
  [24662] Exit[24662]
Algo: PrimaryExpression[7,0].IsIdentifierRef [2182]
  [24663] Entry[24663]
  [24664] (25459)Normal[24664] let PrimaryExpression = this
  [24665] (25460/0) Normal[24665] return false
  [24666] Exit[24666]
Algo: PrimaryExpression[8,0].AssignmentTargetType [2183]
  [24667] Entry[24667]
  [24668] (25462)Normal[24668] let PrimaryExpression = this
  [24669] (25463/0) Normal[24669] return ~invalid~
  [24670] Exit[24670]
Algo: PrimaryExpression[8,0].HasCallInTailPosition [2184]
  [24671] Entry[24671]
  [24672] (25465)Normal[24672] let PrimaryExpression = this
  [24673] (25466/0) Normal[24673] return false
  [24674] Exit[24674]
Algo: PrimaryExpression[8,0].IsIdentifierRef [2185]
  [24675] Entry[24675]
  [24676] (25468)Normal[24676] let PrimaryExpression = this
  [24677] (25469/0) Normal[24677] return false
  [24678] Exit[24678]
Algo: PrimaryExpression[9,0].AssignmentTargetType [2186]
  [24679] Entry[24679]
  [24680] (25471)Normal[24680] let PrimaryExpression = this
  [24681] (25472/0) Normal[24681] return ~invalid~
  [24682] Exit[24682]
Algo: PrimaryExpression[9,0].HasCallInTailPosition [2187]
  [24683] Entry[24683]
  [24684] (25474)Normal[24684] let PrimaryExpression = this
  [24685] (25475/0) Normal[24685] return false
  [24686] Exit[24686]
Algo: PrimaryExpression[9,0].IsIdentifierRef [2188]
  [24687] Entry[24687]
  [24688] (25477)Normal[24688] let PrimaryExpression = this
  [24689] (25478/0) Normal[24689] return false
  [24690] Exit[24690]
Algo: PromiseResolve [2189]
  [24691] Entry[24691]
  [24692] (25480/0) Normal[24692] assert (= (typeof C) Object)
  [24693] (25485/2) Normal[24693] let xConstructor = [? __x1__]
  [24694] (25486/3) Call[24694] app __x2__ = (SameValue xConstructor C)
  [24695] (25492/4) Normal[24695] let promiseCapability = [? __x3__]
  [24696] (25493/5) Call[24696] app __x4__ = (Call promiseCapability.Resolve undefined (new [x]))
  [24697] (25481/1) Call[24697] app __x0__ = (IsPromise x)
  [24698] (25487/3) If[24698] (= __x2__ true)
  [24699] (25491/4) Call[24699] app __x3__ = (NewPromiseCapability C)
  [24700] (25495/6) Normal[24700] return promiseCapability.Promise
  [24701] Exit[24701]
  [24702] (25482/1) If[24702] (= __x0__ true)
  [24703] (25494/5) Normal[24703] [? __x4__]
  [24704] (25488/3) Normal[24704] return x
  [24705] (25484/2) Call[24705] app __x1__ = (Get x "constructor")
Algo: PropertyDefinitionList[0,0].PropertyNameList [2190]
  [24706] Entry[24706]
  [24707] (25497)Normal[24707] let PropertyDefinitionList = this
  [24708] (25502/1) Call[24708] access __x1__ = (PropertyDefinition "PropName")
  [24709] (25503/1) Normal[24709] return (new [__x1__])
  [24710] (25498/0) Call[24710] access __x0__ = (PropertyDefinition "PropName")
  [24711] Exit[24711]
  [24712] (25499/0) If[24712] (= __x0__ ~empty~)
  [24713] (25500/0) Normal[24713] return (new [])
Algo: PropertyDefinitionList[1,0].PropertyDefinitionEvaluation [2191]
  [24714] Entry[24714]
  [24715] (25505/0) Call[24715] access __x0__ = (PropertyDefinitionList "PropertyDefinitionEvaluation" object enumerable)
  [24716] (25506/0) Normal[24716] [? __x0__]
  [24717] (25507/1) Call[24717] access __x1__ = (PropertyDefinition "PropertyDefinitionEvaluation" object enumerable)
  [24718] (25508/1) Normal[24718] return __x1__
  [24719] Exit[24719]
Algo: PropertyDefinitionList[1,0].PropertyNameList [2192]
  [24720] Entry[24720]
  [24721] (25510/0) Call[24721] access __x0__ = (PropertyDefinitionList "PropertyNameList")
  [24722] (25514/1) Normal[24722] return list
  [24723] (25516/2) Call[24723] access __x2__ = (PropertyDefinition "PropName")
  [24724] (25511/0) Normal[24724] let list = __x0__
  [24725] (25517/2) Normal[24725] append __x2__ -> list
  [24726] (25512/1) Call[24726] access __x1__ = (PropertyDefinition "PropName")
  [24727] (25518/3) Normal[24727] return list
  [24728] (25513/1) If[24728] (= __x1__ ~empty~)
  [24729] Exit[24729]
Algo: PropertyDefinition[0,0].PropName [2193]
  [24730] Entry[24730]
  [24731] (25520)Normal[24731] let PropertyDefinition = this
  [24732] (25521/0) Call[24732] access __x0__ = (IdentifierReference "StringValue")
  [24733] (25522/0) Normal[24733] return __x0__
  [24734] Exit[24734]
Algo: PropertyDefinition[0,0].PropertyDefinitionEvaluation [2194]
  [24735] Entry[24735]
  [24736] (25524)Normal[24736] let PropertyDefinition = this
  [24737] (25528/1) Normal[24737] let exprValue = __x1__
  [24738] (25529/2) Call[24738] app __x2__ = (GetValue exprValue)
  [24739] (25533/5) Normal[24739] return [! __x3__]
  [24740] Exit[24740]
  [24741] (25525/0) Call[24741] access __x0__ = (IdentifierReference "StringValue")
  [24742] (25530/2) Normal[24742] let propValue = [? __x2__]
  [24743] (25532/5) Call[24743] app __x3__ = (CreateDataPropertyOrThrow object propName propValue)
  [24744] (25526/0) Normal[24744] let propName = __x0__
  [24745] (25531/3) Normal[24745] assert (= enumerable true)
  [24746] (25527/1) Call[24746] access __x1__ = (IdentifierReference "Evaluation")
Algo: PropertyDefinition[1,0].EarlyErrors [2195]
  [24747] Entry[24747]
  [24748] (25535)Normal[24748] let PropertyDefinition = this
  [24749] (25536/0) If[24749] true
  [24750] (25537/0) Normal[24750] throw SyntaxError
  [24751] Exit[24751]
Algo: PropertyDefinition[2,0].PropName [2196]
  [24752] Entry[24752]
  [24753] (25540)Normal[24753] let PropertyDefinition = this
  [24754] (25541/0) Call[24754] access __x0__ = (PropertyName "PropName")
  [24755] (25542/0) Normal[24755] return __x0__
  [24756] Exit[24756]
Algo: PropertyDefinition[2,0].PropertyDefinitionEvaluation [2197]
  [24757] Entry[24757]
  [24758] (25544)Normal[24758] let PropertyDefinition = this
  [24759] (25548/2) Call[24759] app __x1__ = (IsAnonymousFunctionDefinition AssignmentExpression)
  [24760] (25549/2) If[24760] (= __x1__ true)
  [24761] (25555/5) Normal[24761] let exprValueRef = __x3__
  [24762] (25556/6) Call[24762] app __x4__ = (GetValue exprValueRef)
  [24763] (25559/9) Call[24763] app __x5__ = (CreateDataPropertyOrThrow object propKey propValue)
  [24764] (25560/9) Normal[24764] return [! __x5__]
  [24765] (25545/0) Call[24765] access __x0__ = (PropertyName "Evaluation")
  [24766] (25551/3) Call[24766] access __x2__ = (AssignmentExpression "NamedEvaluation" propKey)
  [24767] (25554/5) Call[24767] access __x3__ = (AssignmentExpression "Evaluation")
  [24768] (25558/7) Normal[24768] assert (= enumerable true)
  [24769] (25546/0) Normal[24769] let propKey = __x0__
  [24770] (25557/6) Normal[24770] let propValue = [? __x4__]
  [24771] (25552/3) Normal[24771] let propValue = [? __x2__]
  [24772] (25547/1) Normal[24772] [? propKey]
  [24773] Exit[24773]
Algo: PropertyDefinition[3,0].Contains [2198]
  [24774] Entry[24774]
  [24775] (25562)Normal[24775] let PropertyDefinition = this
  [24776] (25567/1) Normal[24776] return __x0__
  [24777] Exit[24777]
  [24778] (25563/0) If[24778] (is-instance-of symbol MethodDefinition)
  [24779] (25564/0) Normal[24779] return true
  [24780] (25566/1) Call[24780] access __x0__ = (MethodDefinition "ComputedPropertyContains" symbol)
Algo: PropertyDefinition[3,0].EarlyErrors [2199]
  [24781] Entry[24781]
  [24782] (25569)Normal[24782] let PropertyDefinition = this
  [24783] (25570/0) Call[24783] access __x0__ = (MethodDefinition "HasDirectSuper")
  [24784] (25571/0) If[24784] (= __x0__ true)
  [24785] (25572/0) Normal[24785] throw SyntaxError
  [24786] Exit[24786]
Algo: PropertyDefinition[4,0].PropName [2200]
  [24787] Entry[24787]
  [24788] (25575)Normal[24788] let PropertyDefinition = this
  [24789] (25576/0) Normal[24789] return ~empty~
  [24790] Exit[24790]
Algo: PropertyDefinition[4,0].PropertyDefinitionEvaluation [2201]
  [24791] Entry[24791]
  [24792] (25578)Normal[24792] let PropertyDefinition = this
  [24793] (25582/1) Normal[24793] let fromValue = [? __x1__]
  [24794] (25583/2) Normal[24794] let excludedNames = (new [])
  [24795] (25579/0) Call[24795] access __x0__ = (AssignmentExpression "Evaluation")
  [24796] (25584/3) Call[24796] app __x2__ = (CopyDataProperties object fromValue excludedNames)
  [24797] (25580/0) Normal[24797] let exprValue = __x0__
  [24798] (25585/3) Normal[24798] return [? __x2__]
  [24799] (25581/1) Call[24799] app __x1__ = (GetValue exprValue)
  [24800] Exit[24800]
Algo: PropertyName[0,0].ComputedPropertyContains [2202]
  [24801] Entry[24801]
  [24802] (25587)Normal[24802] let PropertyName = this
  [24803] (25588/0) Normal[24803] return false
  [24804] Exit[24804]
Algo: PropertyName[0,0].IsComputedPropertyKey [2203]
  [24805] Entry[24805]
  [24806] (25590)Normal[24806] let PropertyName = this
  [24807] (25591/0) Normal[24807] return false
  [24808] Exit[24808]
Algo: PropertyName[1,0].ComputedPropertyContains [2204]
  [24809] Entry[24809]
  [24810] (25593)Normal[24810] let PropertyName = this
  [24811] (25594/0) Call[24811] access __x0__ = (ComputedPropertyName "Contains" symbol)
  [24812] (25595/0) Normal[24812] return __x0__
  [24813] Exit[24813]
Algo: PropertyName[1,0].IsComputedPropertyKey [2205]
  [24814] Entry[24814]
  [24815] (25597)Normal[24815] let PropertyName = this
  [24816] (25598/0) Normal[24816] return true
  [24817] Exit[24817]
Algo: PropertySetParameterList[0,0].ExpectedArgumentCount [2206]
  [24818] Entry[24818]
  [24819] (25600)Normal[24819] let PropertySetParameterList = this
  [24820] (25605/1) Normal[24820] return 1i
  [24821] Exit[24821]
  [24822] (25601/0) Call[24822] access __x0__ = (FormalParameter "HasInitializer")
  [24823] (25602/0) If[24823] (= __x0__ true)
  [24824] (25603/0) Normal[24824] return 0i
Algo: ProxyCreate [2207]
  [24825] Entry[24825]
  [24826] (25607/0) If[24826] (! (= (typeof target) Object))
  [24827] (25613/2) Call[24827] app __x0__ = (MakeBasicObject (new ["ProxyHandler", "ProxyTarget"]))
  [24828] (25614/2) Normal[24828] let P = [! __x0__]
  [24829] (25619/6) Call[24829] app __x2__ = (IsConstructor target)
  [24830] (25620/6) If[24830] (= __x2__ true)
  [24831] (25625/9) Normal[24831] P.ProxyHandler = handler
  [24832] (25626/10) Normal[24832] return P
  [24833] (25608/0) Normal[24833] throw TypeError
  [24834] (25610/1) If[24834] (! (= (typeof handler) Object))
  [24835] (25615/4) Call[24835] app __x1__ = (IsCallable target)
  [24836] (25618/5) Normal[24836] P.Call = ALGORITHM["ProxyObject.Call"]
  [24837] (25624/8) Normal[24837] P.ProxyTarget = target
  [24838] (25621/7) Normal[24838] P.Construct = ALGORITHM["ProxyObject.Construct"]
  [24839] (25616/4) If[24839] (= __x1__ true)
  [24840] (25611/1) Normal[24840] throw TypeError
  [24841] Exit[24841]
Algo: ProxyObject.Call [2208]
  [24842] Entry[24842]
  [24843] (25628/0) Normal[24843] let handler = O.ProxyHandler
  [24844] (25633/3) Normal[24844] let target = O.ProxyTarget
  [24845] (25634/4) Call[24845] app __x0__ = (GetMethod handler "apply")
  [24846] (25639/6) Normal[24846] return [? __x1__]
  [24847] (25641/7) Call[24847] app __x2__ = (CreateArrayFromList argumentsList)
  [24848] (25644/8) Normal[24848] return [? __x3__]
  [24849] Exit[24849]
  [24850] (25629/1) If[24850] (= handler null)
  [24851] (25635/4) Normal[24851] let trap = [? __x0__]
  [24852] (25638/6) Call[24852] app __x1__ = (Call target thisArgument argumentsList)
  [24853] (25643/8) Call[24853] app __x3__ = (Call trap handler (new [target, thisArgument, argArray]))
  [24854] (25630/1) Normal[24854] throw TypeError
  [24855] (25632/2) Normal[24855] assert (= (typeof handler) Object)
  [24856] (25642/7) Normal[24856] let argArray = [! __x2__]
  [24857] (25636/5) If[24857] (= trap undefined)
Algo: ProxyObject.Construct [2209]
  [24858] Entry[24858]
  [24859] (25646/0) Normal[24859] let handler = O.ProxyHandler
  [24860] (25651/3) Normal[24860] let target = O.ProxyTarget
  [24861] (25652/4) Call[24861] app __x0__ = (IsConstructor target)
  [24862] (25656/6) If[24862] (= trap undefined)
  [24863] (25658/7) Call[24863] app __x2__ = (Construct target argumentsList newTarget)
  [24864] (25661/8) Call[24864] app __x3__ = (CreateArrayFromList argumentsList)
  [24865] (25662/8) Normal[24865] let argArray = [! __x3__]
  [24866] (25663/9) Call[24866] app __x4__ = (Call trap handler (new [target, argArray, newTarget]))
  [24867] (25647/1) If[24867] (= handler null)
  [24868] (25653/4) Normal[24868] assert (= __x0__ true)
  [24869] (25655/5) Normal[24869] let trap = [? __x1__]
  [24870] (25648/1) Normal[24870] throw TypeError
  [24871] (25650/2) Normal[24871] assert (= (typeof handler) Object)
  [24872] (25665/10) If[24872] (! (= (typeof newObj) Object))
  [24873] (25666/10) Normal[24873] throw TypeError
  [24874] (25668/11) Normal[24874] return newObj
  [24875] (25659/7) Normal[24875] return [? __x2__]
  [24876] (25654/5) Call[24876] app __x1__ = (GetMethod handler "construct")
  [24877] (25664/9) Normal[24877] let newObj = [? __x4__]
  [24878] Exit[24878]
Algo: ProxyObject.DefineOwnProperty [2210]
  [24879] Entry[24879]
  [24880] (25670/0) Call[24880] app __x0__ = (IsPropertyKey P)
  [24881] (25674/2) Normal[24881] throw TypeError
  [24882] (25676/3) Normal[24882] assert (= (typeof handler) Object)
  [24883] (25680/6) If[24883] (= trap undefined)
  [24884] (25682/7) Call[24884] app __x2__ = (target.DefineOwnProperty target P Desc)
  [24885] (25685/8) Call[24885] app __x3__ = (FromPropertyDescriptor Desc)
  [24886] (25686/8) Normal[24886] let descObj = __x3__
  [24887] (25687/9) Call[24887] app __x4__ = (Call trap handler (new [target, P, descObj]))
  [24888] (25671/0) Normal[24888] assert (= __x0__ true)
  [24889] (25677/4) Normal[24889] let target = O.ProxyTarget
  [24890] (25679/5) Normal[24890] let trap = [? __x1__]
  [24891] (25672/1) Normal[24891] let handler = O.ProxyHandler
  [24892] (25683/7) Normal[24892] return [? __x2__]
  [24893] (25690/10) If[24893] (= booleanTrapResult false)
  [24894] (25691/10) Normal[24894] return false
  [24895] (25693/11) Call[24895] app __x6__ = (target.GetOwnProperty target P)
  [24896] (25678/5) Call[24896] app __x1__ = (GetMethod handler "defineProperty")
  [24897] (25673/2) If[24897] (= handler null)
  [24898] (25688/9) Call[24898] app __x5__ = (ToBoolean [? __x4__])
  [24899] (25697/13) If[24899] (&& (! (= Desc.Configurable absent)) (= Desc.Configurable false))
  [24900] (25698/14) Normal[24900] let settingConfigFalse = true
  [24901] (25699/13) Normal[24901] let settingConfigFalse = false
  [24902] (25716/22) Call[24902] app __x9__ = (IsDataDescriptor targetDesc)
  [24903] (25717/22) If[24903] (&& (&& (= __x9__ true) (= targetDesc.Configurable false)) (= targetDesc.Writable true))
  [24904] (25700/16) If[24904] (= targetDesc undefined)
  [24905] (25694/11) Normal[24905] let targetDesc = [? __x6__]
  [24906] (25703/17) Normal[24906] throw TypeError
  [24907] (25705/18) If[24907] (= settingConfigFalse true)
  [24908] (25695/12) Call[24908] app __x7__ = (IsExtensible target)
  [24909] (25710/20) If[24909] (= __x8__ false)
  [24910] (25711/20) Normal[24910] throw TypeError
  [24911] (25713/21) If[24911] (&& (= settingConfigFalse true) (= targetDesc.Configurable true))
  [24912] (25702/17) If[24912] (= extensibleTarget false)
  [24913] (25718/23) If[24913] (&& (! (= Desc.Writable absent)) (= Desc.Writable false))
  [24914] (25722/24) Normal[24914] return true
  [24915] Exit[24915]
  [24916] (25689/9) Normal[24916] let booleanTrapResult = [! __x5__]
  [24917] (25709/20) Call[24917] app __x8__ = (IsCompatiblePropertyDescriptor extensibleTarget Desc targetDesc)
  [24918] (25696/12) Normal[24918] let extensibleTarget = [? __x7__]
  [24919] (25719/23) Normal[24919] throw TypeError
  [24920] (25714/21) Normal[24920] throw TypeError
  [24921] (25706/18) Normal[24921] throw TypeError
Algo: ProxyObject.Delete [2211]
  [24922] Entry[24922]
  [24923] (25724/0) Call[24923] app __x0__ = (IsPropertyKey P)
  [24924] (25728/2) Normal[24924] throw TypeError
  [24925] (25730/3) Normal[24925] assert (= (typeof handler) Object)
  [24926] (25734/6) If[24926] (= trap undefined)
  [24927] (25736/7) Call[24927] app __x2__ = (target.Delete target P)
  [24928] (25739/8) Call[24928] app __x3__ = (Call trap handler (new [target, P]))
  [24929] (25740/8) Call[24929] app __x4__ = (ToBoolean [? __x3__])
  [24930] (25741/8) Normal[24930] let booleanTrapResult = [! __x4__]
  [24931] (25747/11) If[24931] (= targetDesc undefined)
  [24932] (25748/11) Normal[24932] return true
  [24933] (25750/12) If[24933] (= targetDesc.Configurable false)
  [24934] (25725/0) Normal[24934] assert (= __x0__ true)
  [24935] (25731/4) Normal[24935] let target = O.ProxyTarget
  [24936] (25733/5) Normal[24936] let trap = [? __x1__]
  [24937] (25726/1) Normal[24937] let handler = O.ProxyHandler
  [24938] (25743/9) Normal[24938] return false
  [24939] (25745/10) Call[24939] app __x5__ = (target.GetOwnProperty target P)
  [24940] (25737/7) Normal[24940] return [? __x2__]
  [24941] (25732/5) Call[24941] app __x1__ = (GetMethod handler "deleteProperty")
  [24942] (25727/2) If[24942] (= handler null)
  [24943] (25746/10) Normal[24943] let targetDesc = [? __x5__]
  [24944] (25742/9) If[24944] (= booleanTrapResult false)
  [24945] (25753/13) Call[24945] app __x6__ = (IsExtensible target)
  [24946] (25754/13) Normal[24946] let extensibleTarget = [? __x6__]
  [24947] (25755/14) If[24947] (= extensibleTarget false)
  [24948] (25758/15) Normal[24948] return true
  [24949] Exit[24949]
  [24950] (25751/12) Normal[24950] throw TypeError
  [24951] (25756/14) Normal[24951] throw TypeError
Algo: ProxyObject.Get [2212]
  [24952] Entry[24952]
  [24953] (25760/0) Call[24953] app __x0__ = (IsPropertyKey P)
  [24954] (25764/2) Normal[24954] throw TypeError
  [24955] (25766/3) Normal[24955] assert (= (typeof handler) Object)
  [24956] (25770/6) If[24956] (= trap undefined)
  [24957] (25772/7) Call[24957] app __x2__ = (target.Get target P Receiver)
  [24958] (25775/8) Call[24958] app __x3__ = (Call trap handler (new [target, P, Receiver]))
  [24959] (25776/8) Normal[24959] let trapResult = [? __x3__]
  [24960] (25777/9) Call[24960] app __x4__ = (target.GetOwnProperty target P)
  [24961] (25784/12) Call[24961] app __x6__ = (SameValue trapResult targetDesc.Value)
  [24962] (25785/12) If[24962] (= __x6__ false)
  [24963] (25761/0) Normal[24963] assert (= __x0__ true)
  [24964] (25767/4) Normal[24964] let target = O.ProxyTarget
  [24965] (25786/12) Normal[24965] throw TypeError
  [24966] (25789/13) Call[24966] app __x7__ = (IsAccessorDescriptor targetDesc)
  [24967] (25769/5) Normal[24967] let trap = [? __x1__]
  [24968] (25762/1) Normal[24968] let handler = O.ProxyHandler
  [24969] (25779/10) If[24969] (&& (! (= targetDesc undefined)) (= targetDesc.Configurable false))
  [24970] (25781/11) Call[24970] app __x5__ = (IsDataDescriptor targetDesc)
  [24971] (25796/15) Normal[24971] return trapResult
  [24972] (25773/7) Normal[24972] return [? __x2__]
  [24973] (25768/5) Call[24973] app __x1__ = (GetMethod handler "get")
  [24974] (25763/2) If[24974] (= handler null)
  [24975] (25782/11) If[24975] (&& (= __x5__ true) (= targetDesc.Writable false))
  [24976] (25778/9) Normal[24976] let targetDesc = [? __x4__]
  [24977] (25790/13) If[24977] (&& (= __x7__ true) (= targetDesc.Get undefined))
  [24978] (25791/14) If[24978] (! (= trapResult undefined))
  [24979] (25792/14) Normal[24979] throw TypeError
  [24980] Exit[24980]
Algo: ProxyObject.GetOwnProperty [2213]
  [24981] Entry[24981]
  [24982] (25798/0) Call[24982] app __x0__ = (IsPropertyKey P)
  [24983] (25802/2) Normal[24983] throw TypeError
  [24984] (25804/3) Normal[24984] assert (= (typeof handler) Object)
  [24985] (25808/6) If[24985] (= trap undefined)
  [24986] (25810/7) Call[24986] app __x2__ = (target.GetOwnProperty target P)
  [24987] (25813/8) Call[24987] app __x3__ = (Call trap handler (new [target, P]))
  [24988] (25814/8) Normal[24988] let trapResultObj = [? __x3__]
  [24989] (25815/9) If[24989] (! (|| (= (typeof trapResultObj) Object) (= (typeof trapResultObj) Undefined)))
  [24990] (25799/0) Normal[24990] assert (= __x0__ true)
  [24991] (25805/4) Normal[24991] let target = O.ProxyTarget
  [24992] (25807/5) Normal[24992] let trap = [? __x1__]
  [24993] (25800/1) Normal[24993] let handler = O.ProxyHandler
  [24994] (25811/7) Normal[24994] return [? __x2__]
  [24995] (25819/10) Normal[24995] let targetDesc = [? __x4__]
  [24996] (25820/11) If[24996] (= trapResultObj undefined)
  [24997] (25806/5) Call[24997] app __x1__ = (GetMethod handler "getOwnPropertyDescriptor")
  [24998] (25801/2) If[24998] (= handler null)
  [24999] (25816/9) Normal[24999] throw TypeError
  [25000] (25818/10) Call[25000] app __x4__ = (target.GetOwnProperty target P)
  [25001] (25851/25) If[25001] (&& (! (= resultDesc.Writable absent)) (= resultDesc.Writable false))
  [25002] (25852/26) If[25002] (= targetDesc.Writable true)
  [25003] (25857/27) Normal[25003] return resultDesc
  [25004] (25828/14) Call[25004] app __x5__ = (IsExtensible target)
  [25005] (25829/14) Normal[25005] let extensibleTarget = [? __x5__]
  [25006] (25843/21) If[25006] (= valid false)
  [25007] (25844/21) Normal[25007] throw TypeError
  [25008] (25846/22) If[25008] (= resultDesc.Configurable false)
  [25009] (25830/15) If[25009] (= extensibleTarget false)
  [25010] (25822/12) If[25010] (= targetDesc undefined)
  [25011] (25823/12) Normal[25011] return undefined
  [25012] (25825/13) If[25012] (= targetDesc.Configurable false)
  [25013] (25835/17) Call[25013] app __x6__ = (IsExtensible target)
  [25014] (25836/17) Normal[25014] let extensibleTarget = [? __x6__]
  [25015] (25839/19) Call[25015] app __x8__ = (CompletePropertyDescriptor resultDesc)
  [25016] (25840/19) Normal[25016] __x8__
  [25017] (25833/16) Normal[25017] return undefined
  [25018] (25849/24) Normal[25018] throw TypeError
  [25019] Exit[25019]
  [25020] (25838/18) Normal[25020] let resultDesc = [? __x7__]
  [25021] (25841/20) Call[25021] app __x9__ = (IsCompatiblePropertyDescriptor extensibleTarget resultDesc targetDesc)
  [25022] (25826/13) Normal[25022] throw TypeError
  [25023] (25853/26) Normal[25023] throw TypeError
  [25024] (25831/15) Normal[25024] throw TypeError
  [25025] (25848/23) If[25025] (|| (= targetDesc undefined) (= targetDesc.Configurable true))
  [25026] (25842/20) Normal[25026] let valid = __x9__
  [25027] (25837/18) Call[25027] app __x7__ = (ToPropertyDescriptor trapResultObj)
Algo: ProxyObject.GetPrototypeOf [2214]
  [25028] Entry[25028]
  [25029] (25859/0) Normal[25029] let handler = O.ProxyHandler
  [25030] (25864/3) Normal[25030] let target = O.ProxyTarget
  [25031] (25865/4) Call[25031] app __x0__ = (GetMethod handler "getPrototypeOf")
  [25032] (25870/6) Normal[25032] return [? __x1__]
  [25033] (25872/7) Call[25033] app __x2__ = (Call trap handler (new [target]))
  [25034] (25888/13) Normal[25034] return handlerProto
  [25035] Exit[25035]
  [25036] (25875/8) Normal[25036] throw TypeError
  [25037] (25877/9) Call[25037] app __x3__ = (IsExtensible target)
  [25038] (25883/11) Normal[25038] let targetProto = [? __x4__]
  [25039] (25884/12) Call[25039] app __x5__ = (SameValue handlerProto targetProto)
  [25040] (25860/1) If[25040] (= handler null)
  [25041] (25866/4) Normal[25041] let trap = [? __x0__]
  [25042] (25885/12) If[25042] (= __x5__ false)
  [25043] (25869/6) Call[25043] app __x1__ = (target.GetPrototypeOf target)
  [25044] (25874/8) If[25044] (! (|| (= (typeof handlerProto) Object) (= (typeof handlerProto) Null)))
  [25045] (25861/1) Normal[25045] throw TypeError
  [25046] (25863/2) Normal[25046] assert (= (typeof handler) Object)
  [25047] (25879/10) If[25047] (= extensibleTarget true)
  [25048] (25880/10) Normal[25048] return handlerProto
  [25049] (25882/11) Call[25049] app __x4__ = (target.GetPrototypeOf target)
  [25050] (25886/12) Normal[25050] throw TypeError
  [25051] (25873/7) Normal[25051] let handlerProto = [? __x2__]
  [25052] (25867/5) If[25052] (= trap undefined)
  [25053] (25878/9) Normal[25053] let extensibleTarget = [? __x3__]
Algo: ProxyObject.HasProperty [2215]
  [25054] Entry[25054]
  [25055] (25890/0) Call[25055] app __x0__ = (IsPropertyKey P)
  [25056] (25894/2) Normal[25056] throw TypeError
  [25057] (25896/3) Normal[25057] assert (= (typeof handler) Object)
  [25058] (25900/6) If[25058] (= trap undefined)
  [25059] (25902/7) Call[25059] app __x2__ = (target.HasProperty target P)
  [25060] (25905/8) Call[25060] app __x3__ = (Call trap handler (new [target, P]))
  [25061] (25906/8) Call[25061] app __x4__ = (ToBoolean [? __x3__])
  [25062] (25907/8) Normal[25062] let booleanTrapResult = [! __x4__]
  [25063] (25914/12) If[25063] (= targetDesc.Configurable false)
  [25064] (25915/12) Normal[25064] throw TypeError
  [25065] (25917/13) Call[25065] app __x6__ = (IsExtensible target)
  [25066] (25891/0) Normal[25066] assert (= __x0__ true)
  [25067] (25897/4) Normal[25067] let target = O.ProxyTarget
  [25068] (25899/5) Normal[25068] let trap = [? __x1__]
  [25069] (25892/1) Normal[25069] let handler = O.ProxyHandler
  [25070] (25910/10) Call[25070] app __x5__ = (target.GetOwnProperty target P)
  [25071] (25911/10) Normal[25071] let targetDesc = [? __x5__]
  [25072] (25918/13) Normal[25072] let extensibleTarget = [? __x6__]
  [25073] (25903/7) Normal[25073] return [? __x2__]
  [25074] (25898/5) Call[25074] app __x1__ = (GetMethod handler "has")
  [25075] (25893/2) If[25075] (= handler null)
  [25076] (25912/11) If[25076] (! (= targetDesc undefined))
  [25077] (25908/9) If[25077] (= booleanTrapResult false)
  [25078] (25924/15) Normal[25078] return booleanTrapResult
  [25079] (25919/14) If[25079] (= extensibleTarget false)
  [25080] (25920/14) Normal[25080] throw TypeError
  [25081] Exit[25081]
Algo: ProxyObject.IsExtensible [2216]
  [25082] Entry[25082]
  [25083] (25926/0) Normal[25083] let handler = O.ProxyHandler
  [25084] (25931/3) Normal[25084] let target = O.ProxyTarget
  [25085] (25932/4) Call[25085] app __x0__ = (GetMethod handler "isExtensible")
  [25086] (25937/6) Normal[25086] return [? __x1__]
  [25087] (25939/7) Call[25087] app __x2__ = (Call trap handler (new [target]))
  [25088] (25942/8) Call[25088] app __x4__ = (IsExtensible target)
  [25089] (25943/8) Normal[25089] let targetResult = [? __x4__]
  [25090] (25927/1) If[25090] (= handler null)
  [25091] (25933/4) Normal[25091] let trap = [? __x0__]
  [25092] (25936/6) Call[25092] app __x1__ = (IsExtensible target)
  [25093] (25941/7) Normal[25093] let booleanTrapResult = [! __x3__]
  [25094] (25928/1) Normal[25094] throw TypeError
  [25095] (25930/2) Normal[25095] assert (= (typeof handler) Object)
  [25096] (25945/9) If[25096] (= __x5__ false)
  [25097] (25946/9) Normal[25097] throw TypeError
  [25098] (25948/10) Normal[25098] return booleanTrapResult
  [25099] (25940/7) Call[25099] app __x3__ = (ToBoolean [? __x2__])
  [25100] (25934/5) If[25100] (= trap undefined)
  [25101] (25944/9) Call[25101] app __x5__ = (SameValue booleanTrapResult targetResult)
  [25102] Exit[25102]
Algo: ProxyObject.OwnPropertyKeys [2217]
  [25103] (25955/3) Normal[25103] let target = O.ProxyTarget
  [25104] (25956/4) Call[25104] app __x0__ = (GetMethod handler "ownKeys")
  [25105] (26022/31) Normal[25105] __x15__ = (+ __x15__ 1i)
  [25106] LoopCont[25106]
  [25107] (25951/1) If[25107] (= handler null)
  [25108] (25952/1) Normal[25108] throw TypeError
  [25109] (25954/2) Normal[25109] assert (= (typeof handler) Object)
  [25110] (26019/31) Loop[25110] (< __x15__ uncheckedResultKeys.length)
  [25111] (26024/32) Normal[25111] throw TypeError
  [25112] (26026/33) Normal[25112] return trapResult
  [25113] Entry[25113]
  [25114] (25950/0) Normal[25114] let handler = O.ProxyHandler
  [25115] (25961/6) Normal[25115] return [? __x1__]
  [25116] (25963/7) Call[25116] app __x2__ = (Call trap handler (new [target]))
  [25117] (26011/29) Loop[25117] (< __x14__ __x13__.length)
  [25118] (26013/29) Normal[25118] let key = __x13__[__x14__]
  [25119] (26023/32) If[25119] (< 0i uncheckedResultKeys.length)
  [25120] (25997/25) Normal[25120] __x11__ = (+ __x11__ 1i)
  [25121] (25998/26) If[25121] (! (contains uncheckedResultKeys key))
  [25122] (25977/16) Normal[25122] let __x7__ = targetKeys
  [25123] (25978/16) Normal[25123] let __x8__ = 0i
  [25124] (25991/24) Normal[25124] let uncheckedResultKeys = (copy-obj trapResult)
  [25125] (25992/25) Normal[25125] let __x10__ = targetNonconfigurableKeys
  [25126] (25979/16) Loop[25126] (< __x8__ __x7__.length)
  [25127] (26006/28) If[25127] (= extensibleTarget true)
  [25128] (26007/28) Normal[25128] return trapResult
  [25129] (26009/29) Normal[25129] let __x13__ = targetConfigurableKeys
  [25130] (25966/8) Normal[25130] let trapResult = [? __x3__]
  [25131] (25967/9) Call[25131] app __x4__ = (IsDuplicate trapResult)
  [25132] (25973/11) Call[25132] app __x6__ = (target.OwnPropertyKeys target)
  [25133] (25974/11) Normal[25133] let targetKeys = [? __x6__]
  [25134] (26002/27) Loop[25134] (< __x12__ uncheckedResultKeys.length)
  [25135] (26003/27) If[25135] (= uncheckedResultKeys[__x12__] key)
  [25136] LoopCont[25136]
  [25137] (26014/29) Normal[25137] __x14__ = (+ __x14__ 1i)
  [25138] (25983/17) Call[25138] app __x9__ = (target.GetOwnProperty target key)
  [25139] (25984/17) Normal[25139] let desc = [? __x9__]
  [25140] (26018/31) Normal[25140] let __x15__ = 0i
  [25141] (25957/4) Normal[25141] let trap = [? __x0__]
  [25142] (26016/30) Normal[25142] throw TypeError
  [25143] Exit[25143]
  [25144] (25975/14) Normal[25144] let targetConfigurableKeys = (new [])
  [25145] (25987/18) Normal[25145] append key -> targetConfigurableKeys
  [25146] LoopCont[25146]
  [25147] (25982/16) Normal[25147] __x8__ = (+ __x8__ 1i)
  [25148] (25993/25) Normal[25148] let __x11__ = 0i
  [25149] (25960/6) Call[25149] app __x1__ = (target.OwnPropertyKeys target)
  [25150] (25965/8) Call[25150] app __x3__ = (CreateListFromArrayLike trapResultArray (new [String, Symbol]))
  [25151] (25996/25) Normal[25151] let key = __x10__[__x11__]
  [25152] (26001/27) Normal[25152] let __x12__ = 0i
  [25153] (26021/31) Normal[25153] (pop uncheckedResultKeys __x15__)
  [25154] (25969/9) Normal[25154] throw TypeError
  [25155] (25971/10) Call[25155] app __x5__ = (IsExtensible target)
  [25156] (25986/19) Normal[25156] append key -> targetNonconfigurableKeys
  [25157] (25976/15) Normal[25157] let targetNonconfigurableKeys = (new [])
  [25158] (25999/26) Normal[25158] throw TypeError
  [25159] (26015/30) If[25159] (! (contains uncheckedResultKeys key))
  [25160] (25981/16) Normal[25160] let key = __x7__[__x8__]
  [25161] (25964/7) Normal[25161] let trapResultArray = [? __x2__]
  [25162] (26010/29) Normal[25162] let __x14__ = 0i
  [25163] (26005/27) Normal[25163] __x12__ = (+ __x12__ 1i)
  [25164] LoopCont[25164]
  [25165] (25958/5) If[25165] (= trap undefined)
  [25166] (25994/25) Loop[25166] (< __x11__ __x10__.length)
  [25167] (25988/22) If[25167] (&& (= extensibleTarget true) (= targetNonconfigurableKeys.length 0i))
  [25168] (25989/23) Normal[25168] return trapResult
  [25169] (26004/27) Normal[25169] (pop uncheckedResultKeys __x12__)
  [25170] (26020/31) If[25170] (= uncheckedResultKeys[__x15__] key)
  [25171] (25972/10) Normal[25171] let extensibleTarget = [? __x5__]
  [25172] LoopCont[25172]
  [25173] (25968/9) If[25173] __x4__
  [25174] (25985/18) If[25174] (&& (! (= desc undefined)) (= desc.Configurable false))
Algo: ProxyObject.PreventExtensions [2218]
  [25175] Entry[25175]
  [25176] (26028/0) Normal[25176] let handler = O.ProxyHandler
  [25177] (26033/3) Normal[25177] let target = O.ProxyTarget
  [25178] (26034/4) Call[25178] app __x0__ = (GetMethod handler "preventExtensions")
  [25179] (26039/6) Normal[25179] return [? __x1__]
  [25180] (26041/7) Call[25180] app __x2__ = (Call trap handler (new [target]))
  [25181] (26044/8) If[25181] (= booleanTrapResult true)
  [25182] (26046/9) Call[25182] app __x4__ = (IsExtensible target)
  [25183] (26052/11) Normal[25183] return booleanTrapResult
  [25184] (26029/1) If[25184] (= handler null)
  [25185] (26035/4) Normal[25185] let trap = [? __x0__]
  [25186] (26038/6) Call[25186] app __x1__ = (target.PreventExtensions target)
  [25187] (26043/7) Normal[25187] let booleanTrapResult = [! __x3__]
  [25188] (26030/1) Normal[25188] throw TypeError
  [25189] (26032/2) Normal[25189] assert (= (typeof handler) Object)
  [25190] (26048/10) If[25190] (= extensibleTarget true)
  [25191] (26049/10) Normal[25191] throw TypeError
  [25192] (26042/7) Call[25192] app __x3__ = (ToBoolean [? __x2__])
  [25193] (26036/5) If[25193] (= trap undefined)
  [25194] (26047/9) Normal[25194] let extensibleTarget = [? __x4__]
  [25195] Exit[25195]
Algo: ProxyObject.Set [2219]
  [25196] Entry[25196]
  [25197] (26054/0) Call[25197] app __x0__ = (IsPropertyKey P)
  [25198] (26058/2) Normal[25198] throw TypeError
  [25199] (26060/3) Normal[25199] assert (= (typeof handler) Object)
  [25200] (26064/6) If[25200] (= trap undefined)
  [25201] (26066/7) Call[25201] app __x2__ = (target.Set target P V Receiver)
  [25202] (26069/8) Call[25202] app __x3__ = (Call trap handler (new [target, P, V, Receiver]))
  [25203] (26070/8) Call[25203] app __x4__ = (ToBoolean [? __x3__])
  [25204] (26071/8) Normal[25204] let booleanTrapResult = [! __x4__]
  [25205] (26055/0) Normal[25205] assert (= __x0__ true)
  [25206] (26061/4) Normal[25206] let target = O.ProxyTarget
  [25207] (26063/5) Normal[25207] let trap = [? __x1__]
  [25208] (26056/1) Normal[25208] let handler = O.ProxyHandler
  [25209] (26073/9) Normal[25209] return false
  [25210] (26075/10) Call[25210] app __x5__ = (target.GetOwnProperty target P)
  [25211] (26067/7) Normal[25211] return [? __x2__]
  [25212] (26062/5) Call[25212] app __x1__ = (GetMethod handler "set")
  [25213] (26057/2) If[25213] (= handler null)
  [25214] (26076/10) Normal[25214] let targetDesc = [? __x5__]
  [25215] (26072/9) If[25215] (= booleanTrapResult false)
  [25216] (26083/13) If[25216] (= __x7__ false)
  [25217] (26084/13) Normal[25217] throw TypeError
  [25218] (26087/14) Call[25218] app __x8__ = (IsAccessorDescriptor targetDesc)
  [25219] (26077/11) If[25219] (&& (! (= targetDesc undefined)) (= targetDesc.Configurable false))
  [25220] (26079/12) Call[25220] app __x6__ = (IsDataDescriptor targetDesc)
  [25221] (26094/16) Normal[25221] return true
  [25222] (26090/15) Normal[25222] throw TypeError
  [25223] (26089/15) If[25223] (= targetDesc.Set undefined)
  [25224] (26080/12) If[25224] (&& (= __x6__ true) (= targetDesc.Writable false))
  [25225] (26082/13) Call[25225] app __x7__ = (SameValue V targetDesc.Value)
  [25226] (26088/14) If[25226] (= __x8__ true)
  [25227] Exit[25227]
Algo: ProxyObject.SetPrototypeOf [2220]
  [25228] Entry[25228]
  [25229] (26096/1) Normal[25229] let handler = O.ProxyHandler
  [25230] (26101/4) Normal[25230] let target = O.ProxyTarget
  [25231] (26102/5) Call[25231] app __x0__ = (GetMethod handler "setPrototypeOf")
  [25232] (26107/7) Normal[25232] return [? __x1__]
  [25233] (26109/8) Call[25233] app __x2__ = (Call trap handler (new [target, V]))
  [25234] (26112/9) If[25234] (= booleanTrapResult false)
  [25235] (26113/9) Normal[25235] return false
  [25236] (26115/10) Call[25236] app __x4__ = (IsExtensible target)
  [25237] (26120/12) Call[25237] app __x5__ = (target.GetPrototypeOf target)
  [25238] (26121/12) Normal[25238] let targetProto = [? __x5__]
  [25239] (26097/2) If[25239] (= handler null)
  [25240] (26103/5) Normal[25240] let trap = [? __x0__]
  [25241] (26122/13) Call[25241] app __x6__ = (SameValue V targetProto)
  [25242] (26106/7) Call[25242] app __x1__ = (target.SetPrototypeOf target V)
  [25243] (26111/8) Normal[25243] let booleanTrapResult = [! __x3__]
  [25244] (26098/2) Normal[25244] throw TypeError
  [25245] (26100/3) Normal[25245] assert (= (typeof handler) Object)
  [25246] (26116/10) Normal[25246] let extensibleTarget = [? __x4__]
  [25247] (26117/11) If[25247] (= extensibleTarget true)
  [25248] (26123/13) If[25248] (= __x6__ false)
  [25249] (26110/8) Call[25249] app __x3__ = (ToBoolean [? __x2__])
  [25250] (26104/6) If[25250] (= trap undefined)
  [25251] (26118/11) Normal[25251] return true
  [25252] (26124/13) Normal[25252] throw TypeError
  [25253] (26126/14) Normal[25253] return true
  [25254] Exit[25254]
Algo: ProxyRevocationFunctions [2221]
  [25255] Entry[25255]
  [25256] (26128)Normal[25256] return undefined
  [25257] Exit[25257]
Algo: PutValue [2222]
  [25258] Entry[25258]
  [25259] (26130/0) Normal[25259] [? V]
  [25260] (26135/3) Call[25260] app __x0__ = (IsUnresolvableReference V)
  [25261] (26136/3) If[25261] (= __x0__ true)
  [25262] (26142/5) Normal[25262] let globalObj = __x1__
  [25263] (26143/6) Call[25263] app __x2__ = (Set globalObj V.ReferencedName W false)
  [25264] (26147/7) If[25264] (= __x3__ true)
  [25265] (26149/8) Call[25265] app __x4__ = (ToObject V.Base)
  [25266] (26159/13) Normal[25266] let base = V.Base
  [25267] (26154/10) If[25267] (&& (= succeeded false) (= V.Strict true))
  [25268] (26155/10) Normal[25268] throw TypeError
  [25269] (26157/11) Normal[25269] return undefined
  [25270] (26131/1) Normal[25270] [? W]
  [25271] (26138/4) If[25271] (= V.Strict true)
  [25272] (26146/7) Call[25272] app __x3__ = (IsPropertyReference V)
  [25273] (26141/5) Call[25273] app __x1__ = (GetGlobalObject)
  [25274] (26132/2) If[25274] (! (is-instance-of V ReferenceRecord))
  [25275] (26151/9) Call[25275] app __x5__ = (GetThisValue V)
  [25276] (26152/9) Call[25276] app __x6__ = (baseObj.Set baseObj V.ReferencedName W __x5__)
  [25277] Exit[25277]
  [25278] (26144/6) Normal[25278] return [? __x2__]
  [25279] (26139/4) Normal[25279] throw ReferenceError
  [25280] (26133/2) Normal[25280] throw ReferenceError
  [25281] (26153/9) Normal[25281] let succeeded = [? __x6__]
  [25282] (26150/8) Normal[25282] let baseObj = [! __x4__]
  [25283] (26160/14) Normal[25283] assert (is-instance-of base EnvironmentRecord)
  [25284] (26161/15) Call[25284] app __x7__ = (base.SetMutableBinding base V.ReferencedName W V.Strict)
  [25285] (26162/15) Normal[25285] return [? __x7__]
Algo: QuantifierPrefix[0,0].Evaluation [2223]
  [25286] Entry[25286]
  [25287] (26164)Normal[25287] let QuantifierPrefix = this
  [25288] (26165/0) Normal[25288] return (new [0i, Infinity])
  [25289] Exit[25289]
Algo: QuantifierPrefix[1,0].Evaluation [2224]
  [25290] Entry[25290]
  [25291] (26167)Normal[25291] let QuantifierPrefix = this
  [25292] (26168/0) Normal[25292] return (new [1i, Infinity])
  [25293] Exit[25293]
Algo: QuantifierPrefix[2,0].Evaluation [2225]
  [25294] Entry[25294]
  [25295] (26170)Normal[25295] let QuantifierPrefix = this
  [25296] (26171/0) Normal[25296] return (new [0i, 1i])
  [25297] Exit[25297]
Algo: QuantifierPrefix[3,0].Evaluation [2226]
  [25298] Entry[25298]
  [25299] (26173)Normal[25299] let QuantifierPrefix = this
  [25300] (26174/0) Call[25300] access __x0__ = (DecimalDigits "MV")
  [25301] (26175/0) Normal[25301] let i = __x0__
  [25302] (26176/1) Normal[25302] return (new [i, i])
  [25303] Exit[25303]
Algo: QuantifierPrefix[4,0].Evaluation [2227]
  [25304] Entry[25304]
  [25305] (26178)Normal[25305] let QuantifierPrefix = this
  [25306] (26179/0) Call[25306] access __x0__ = (DecimalDigits "MV")
  [25307] (26180/0) Normal[25307] let i = __x0__
  [25308] (26181/1) Normal[25308] return (new [i, Infinity])
  [25309] Exit[25309]
Algo: QuantifierPrefix[5,0].EarlyErrors [2228]
  [25310] Entry[25310]
  [25311] (26183)Normal[25311] let QuantifierPrefix = this
  [25312] (26187/0) Normal[25312] throw SyntaxError
  [25313] Exit[25313]
  [25314] (26184/0) Call[25314] access __x0__ = (DecimalDigits0 "MV")
  [25315] (26185/0) Call[25315] access __x1__ = (DecimalDigits1 "MV")
  [25316] (26186/0) If[25316] (< __x1__ __x0__)
Algo: QuantifierPrefix[5,0].Evaluation [2229]
  [25317] Entry[25317]
  [25318] (26190)Normal[25318] let QuantifierPrefix = this
  [25319] (26194/1) Normal[25319] let j = __x1__
  [25320] (26195/2) Normal[25320] return (new [i, j])
  [25321] (26191/0) Call[25321] access __x0__ = (DecimalDigits0 "MV")
  [25322] Exit[25322]
  [25323] (26192/0) Normal[25323] let i = __x0__
  [25324] (26193/1) Call[25324] access __x1__ = (DecimalDigits1 "MV")
Algo: Quantifier[0,0].Evaluation [2230]
  [25325] Entry[25325]
  [25326] (26197)Normal[25326] let Quantifier = this
  [25327] (26201/1) Normal[25327] return (new [min, max, true])
  [25328] Exit[25328]
  [25329] (26198/0) Call[25329] access __x0__ = (QuantifierPrefix "Evaluation")
  [25330] (26199/0) Normal[25330] let min = __x0__[0i]
  [25331] (26200/0) Normal[25331] let max = __x0__[1i]
Algo: Quantifier[1,0].Evaluation [2231]
  [25332] Entry[25332]
  [25333] (26203)Normal[25333] let Quantifier = this
  [25334] (26207/1) Normal[25334] return (new [min, max, false])
  [25335] Exit[25335]
  [25336] (26204/0) Call[25336] access __x0__ = (QuantifierPrefix "Evaluation")
  [25337] (26205/0) Normal[25337] let min = __x0__[0i]
  [25338] (26206/0) Normal[25338] let max = __x0__[1i]
Algo: QuoteJSONString [2232]
  [25339] Entry[25339]
  [25340] (26209/0) Normal[25340] let product = "\""
  [25341] (26213/1) Loop[25341] (< __x2__ __x1__.length)
  [25342] (26215/1) Normal[25342] let C = __x1__[__x2__]
  [25343] (26220/9) Normal[25343] product = (+ product "\"")
  [25344] (26219/7) Normal[25344] ??? "Else , in:{} out:{}"
  [25345] LoopCont[25345]
  [25346] (26210/1) Call[25346] app __x0__ = (StringToCodePoints value)
  [25347] (26216/1) Normal[25347] __x2__ = (+ __x2__ 1i)
  [25348] (26218/4) Normal[25348] ??? "Else if id:{C} has a numeric value less than 0x0020 ( SPACE ) , or if id:{C} has the same numeric value as a link:{leading-surrogate} or link:{trailing-surrogate} , then in:{} out:{}"
  [25349] (26221/10) Normal[25349] return product
  [25350] Exit[25350]
  [25351] (26211/1) Normal[25351] let __x1__ = [! __x0__]
  [25352] (26217/2) Normal[25352] ??? "If id:{C} is listed in the “ Code Point ” column of link:{table-json-single-character-escapes} , then in:{} out:{}"
  [25353] (26212/1) Normal[25353] let __x2__ = 0i
Algo: Races [2233]
  [25354] Entry[25354]
  [25355] (26223/0) If[25355] (! (= E D))
  [25356] (26224/1) Normal[25356] ??? "If the pairs ( id:{E} , id:{D} ) and ( id:{D} , id:{E} ) are not in id:{execution} . [ [ HappensBefore ] ] , then in:{} out:{}"
  [25357] (26226/6) Normal[25357] return false
  [25358] Exit[25358]
Algo: RawBytesToNumeric [2234]
  [25359] Entry[25359]
  [25360] (26228/0) Normal[25360] ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for Element Type id:{type} ."
  [25361] (26233/4) Normal[25361] ??? "If id:{value} is an IEEE 754 - 2019 binary32 NaN value , return the value:{NaN} Number value ."
  [25362] (26234/5) Normal[25362] return value
  [25363] (26240/9) Normal[25363] return value
  [25364] (26242/10) Call[25364] app __x0__ = (IsUnsignedElementType type)
  [25365] (26245/10) Normal[25365] ??? "Let id:{intValue} be the byte elements of id:{rawBytes} concatenated and interpreted as a bit string encoding of a binary little - endian two ' s complement number of bit length id:{elementSize} × 8 ."
  [25366] (26246/14) Normal[25366] ??? "If ! IsBigIntElementType ( id:{type} ) is value:{true} , return the BigInt value that corresponds to id:{intValue} ."
  [25367] (26229/1) Normal[25367] ??? "If id:{isLittleEndian} is value:{false} , reverse the order of the elements of id:{rawBytes} ."
  [25368] (26236/6) If[25368] (= type ~Float64~)
  [25369] (26239/8) Normal[25369] ??? "If id:{value} is an IEEE 754 - 2019 binary64 NaN value , return the value:{NaN} Number value ."
  [25370] (26244/11) Normal[25370] ??? "Let id:{intValue} be the byte elements of id:{rawBytes} concatenated and interpreted as a bit string encoding of an unsigned little - endian binary number ."
  [25371] (26230/2) If[25371] (= type ~Float32~)
  [25372] (26243/10) If[25372] (= [! __x0__] true)
  [25373] (26238/7) Normal[25373] ??? "Let id:{value} be the byte elements of id:{rawBytes} concatenated and interpreted as a little - endian bit string encoding of an IEEE 754 - 2019 binary64 value ."
  [25374] (26232/3) Normal[25374] ??? "Let id:{value} be the byte elements of id:{rawBytes} concatenated and interpreted as a little - endian bit string encoding of an IEEE 754 - 2019 binary32 value ."
  [25375] (26247/15) Normal[25375] ??? "Otherwise , return the Number value that corresponds to id:{intValue} ."
  [25376] Exit[25376]
Algo: RegExpAlloc [2235]
  [25377] Entry[25377]
  [25378] (26249/0) Call[25378] app __x0__ = (OrdinaryCreateFromConstructor newTarget "%RegExp.prototype%" (new ["RegExpMatcher", "OriginalSource", "OriginalFlags"]))
  [25379] (26253/2) Normal[25379] return obj
  [25380] Exit[25380]
  [25381] (26250/0) Normal[25381] let obj = [? __x0__]
  [25382] (26251/1) Call[25382] app __x1__ = (DefinePropertyOrThrow obj "lastIndex" (new PropertyDescriptor("Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [25383] (26252/1) Normal[25383] [! __x1__]
Algo: RegExpBuiltinExec [2236]
  [25384] Entry[25384]
  [25385] (26255/1) Normal[25385] assert (= (typeof S) String)
  [25386] (26259/3) Normal[25386] let lastIndex = [? __x1__]
  [25387] (26260/4) Normal[25387] let flags = R.OriginalFlags
  [25388] (26331/43) Normal[25388] [! __x14__]
  [25389] (26332/44) Normal[25389] ??? "For each integer id:{i} such that id:{i} ≥ 1 and id:{i} ≤ id:{n} , do in:{} out:{}"
  [25390] (26256/2) Normal[25390] let length = S.length
  [25391] (26257/3) Call[25391] app __x0__ = (Get R "lastIndex")
  [25392] (26333/58) Normal[25392] return A
  [25393] (26258/3) Call[25393] app __x1__ = (ToLength [? __x0__])
  [25394] (26264/6) If[25394] (contains flags "y")
  [25395] (26265/6) Normal[25395] let sticky = true
  [25396] (26266/6) Normal[25396] let sticky = false
  [25397] (26323/37) Normal[25397] __x10__ = (+ __x10__ __x12__)
  [25398] (26324/37) Normal[25398] __x11__ = (+ __x11__ 1i)
  [25399] (26307/30) Call[25399] app __x6__ = (Set R "lastIndex" e true)
  [25400] (26308/30) Normal[25400] [? __x6__]
  [25401] (26282/14) Normal[25401] [? __x2__]
  [25402] (26284/15) Normal[25402] return null
  [25403] (26299/25) Normal[25403] let e = r.endIndex
  [25404] (26300/26) If[25404] (= fullUnicode true)
  [25405] (26286/16) Call[25405] app __x3__ = (matcher S lastIndex)
  [25406] (26318/37) Normal[25406] let __x10__ = ""
  [25407] (26319/37) Normal[25407] let __x11__ = lastIndex
  [25408] (26268/7) Normal[25408] lastIndex = 0i
  [25409] (26270/8) Normal[25409] let matcher = R.RegExpMatcher
  [25410] (26275/11) Loop[25410] (= matchSucceeded false)
  [25411] (26277/12) If[25411] (< length lastIndex)
  [25412] (26312/33) Call[25412] app __x7__ = (ArrayCreate (+ n 1i))
  [25413] (26313/33) Normal[25413] let A = [! __x7__]
  [25414] LoopCont[25414]
  [25415] (26290/18) If[25415] (= sticky true)
  [25416] (26292/19) Call[25416] app __x4__ = (Set R "lastIndex" 0i true)
  [25417] (26296/21) Call[25417] app __x5__ = (AdvanceStringIndex S lastIndex fullUnicode)
  [25418] (26327/38) Normal[25418] [! __x13__]
  [25419] (26328/39) Normal[25419] ??? "If id:{R} contains any nt:{GroupName} , then in:{} out:{}"
  [25420] (26261/5) If[25420] (contains flags "g")
  [25421] (26326/38) Call[25421] app __x13__ = (CreateDataPropertyOrThrow A "0" matchedSubstr)
  [25422] (26279/13) If[25422] (|| (= global true) (= sticky true))
  [25423] (26297/21) Normal[25423] lastIndex = __x5__
  [25424] (26288/17) If[25424] (= r ~failure~)
  [25425] (26298/17) Normal[25425] matchSucceeded = true
  [25426] (26302/27) Normal[25426] ??? "id:{e} is an index into the id:{Input} character list , derived from id:{S} , matched by id:{matcher} . Let id:{eUTF} be the smallest index into id:{S} that corresponds to the character at element id:{e} of id:{Input} . If id:{e} is greater than or equal to the number of elements in id:{Input} , then id:{eUTF} is the number of code units in id:{S} ."
  [25427] (26305/29) If[25427] (|| (= global true) (= sticky true))
  [25428] (26263/5) Normal[25428] let global = false
  [25429] (26320/37) Loop[25429] (< __x11__ e)
  [25430] (26267/7) If[25430] (&& (= global false) (= sticky false))
  [25431] (26310/31) Normal[25431] ??? "Let id:{n} be the number of elements in id:{r} ' s id:{captures} List . ( This is the same value as link:{sec-notation} ' s id:{NcapturingParens} . )"
  [25432] (26311/32) Normal[25432] assert (< n (- (** 2i 32i) 1i))
  [25433] (26330/43) Call[25433] app __x14__ = (CreateDataPropertyOrThrow A "groups" groups)
  [25434] (26272/9) Normal[25434] let fullUnicode = true
  [25435] (26274/10) Normal[25435] let matchSucceeded = false
  [25436] (26294/20) Normal[25436] return null
  [25437] LoopCont[25437]
  [25438] (26281/14) Call[25438] app __x2__ = (Set R "lastIndex" 0i true)
  [25439] (26325/37) Normal[25439] let matchedSubstr = __x10__
  [25440] (26287/16) Normal[25440] let r = __x3__
  [25441] (26322/37) Call[25441] access __x12__ = (S __x11__)
  [25442] (26315/35) Normal[25442] [! __x8__]
  [25443] (26316/36) Call[25443] app __x9__ = (CreateDataPropertyOrThrow A "input" S)
  [25444] (26262/5) Normal[25444] let global = true
  [25445] (26303/28) Normal[25445] e = eUTF
  [25446] (26314/35) Call[25446] app __x8__ = (CreateDataPropertyOrThrow A "index" lastIndex)
  [25447] (26329/41) Normal[25447] ??? "Else , in:{} out:{}"
  [25448] (26273/9) Normal[25448] let fullUnicode = false
  [25449] (26317/36) Normal[25449] [! __x9__]
  [25450] Exit[25450]
  [25451] (26271/9) If[25451] (contains flags "u")
  [25452] (26293/19) Normal[25452] [? __x4__]
Algo: RegExpCreate [2237]
  [25453] Entry[25453]
  [25454] (26335/0) Call[25454] app __x0__ = (RegExpAlloc INTRINSICS["%RegExp%"])
  [25455] (26336/0) Normal[25455] let obj = [? __x0__]
  [25456] (26337/1) Call[25456] app __x1__ = (RegExpInitialize obj P F)
  [25457] (26338/1) Normal[25457] return [? __x1__]
  [25458] Exit[25458]
Algo: RegExpExec [2238]
  [25459] Entry[25459]
  [25460] (26340/0) Normal[25460] assert (= (typeof R) Object)
  [25461] (26344/3) Call[25461] app __x1__ = (IsCallable exec)
  [25462] (26345/3) If[25462] (= __x1__ true)
  [25463] (26350/5) Normal[25463] throw TypeError
  [25464] (26352/6) Normal[25464] return result
  [25465] (26356/8) Call[25465] app __x4__ = (RegExpBuiltinExec R S)
  [25466] (26357/8) Normal[25466] return [? __x4__]
  [25467] (26341/1) Normal[25467] assert (= (typeof S) String)
  [25468] (26347/4) Call[25468] app __x2__ = (Call exec R (new [S]))
  [25469] (26354/7) Call[25469] app __x3__ = (RequireInternalSlot R "RegExpMatcher")
  [25470] (26349/5) If[25470] (! (|| (= (typeof result) Object) (= (typeof result) Null)))
  [25471] (26355/7) Normal[25471] [? __x3__]
  [25472] (26342/2) Call[25472] app __x0__ = (Get R "exec")
  [25473] (26348/4) Normal[25473] let result = [? __x2__]
  [25474] (26343/2) Normal[25474] let exec = [? __x0__]
  [25475] Exit[25475]
Algo: RegExpIdentifierName[0,0].CapturingGroupName [2239]
  [25476] Entry[25476]
  [25477] (26359)Normal[25477] let RegExpIdentifierName = this
  [25478] (26363/2) Normal[25478] return [! __x0__]
  [25479] Exit[25479]
  [25480] (26360/0) Normal[25480] let idText = (get-syntax RegExpIdentifierName)
  [25481] (26361/1) Normal[25481] ??? "Let id:{idTextUnescaped} be the result of replacing any occurrences of code:{\\\\} nt:{RegExpUnicodeEscapeSequence} in id:{idText} with the code point represented by the nt:{RegExpUnicodeEscapeSequence} ."
  [25482] (26362/2) Call[25482] app __x0__ = (CodePointsToString idTextUnescaped)
Algo: RegExpIdentifierName[1,0].CapturingGroupName [2240]
  [25483] Entry[25483]
  [25484] (26365/0) Normal[25484] let idText = (get-syntax RegExpIdentifierName)
  [25485] (26366/1) Normal[25485] ??? "Let id:{idTextUnescaped} be the result of replacing any occurrences of code:{\\\\} nt:{RegExpUnicodeEscapeSequence} in id:{idText} with the code point represented by the nt:{RegExpUnicodeEscapeSequence} ."
  [25486] (26367/2) Call[25486] app __x0__ = (CodePointsToString idTextUnescaped)
  [25487] (26368/2) Normal[25487] return [! __x0__]
  [25488] Exit[25488]
Algo: RegExpIdentifierPart[2,0].EarlyErrors [2241]
  [25489] Entry[25489]
  [25490] (26370)Normal[25490] let RegExpIdentifierPart = this
  [25491] (26371/0) Normal[25491] ??? "It is a Syntax Error if the CharacterValue of nt:{RegExpUnicodeEscapeSequence} is not the code point value of value:{\"$\"} , value:{\"_\"} , < ZWNJ > , < ZWJ > , or some code point matched by the nt:{UnicodeIDContinue} lexical grammar production ."
  [25492] Exit[25492]
Algo: RegExpIdentifierPart[3,0].EarlyErrors [2242]
  [25493] Entry[25493]
  [25494] (26373)Normal[25494] let RegExpIdentifierPart = this
  [25495] (26374/0) Normal[25495] ??? "It is a Syntax Error if the result of performing UTF16SurrogatePairToCodePoint on the two code points matched by nt:{UnicodeLeadSurrogate} and nt:{UnicodeTrailSurrogate} respectively is not matched by the nt:{UnicodeIDContinue} lexical grammar production ."
  [25496] Exit[25496]
Algo: RegExpIdentifierStart[3,0].EarlyErrors [2243]
  [25497] Entry[25497]
  [25498] (26376)Normal[25498] let RegExpIdentifierStart = this
  [25499] (26377/0) Normal[25499] ??? "It is a Syntax Error if the CharacterValue of nt:{RegExpUnicodeEscapeSequence} is not the code point value of value:{\"$\"} , value:{\"_\"} , or some code point matched by the nt:{UnicodeIDStart} lexical grammar production ."
  [25500] Exit[25500]
Algo: RegExpIdentifierStart[4,0].EarlyErrors [2244]
  [25501] Entry[25501]
  [25502] (26379)Normal[25502] let RegExpIdentifierStart = this
  [25503] (26380/0) Normal[25503] ??? "It is a Syntax Error if the result of performing UTF16SurrogatePairToCodePoint on the two code points matched by nt:{UnicodeLeadSurrogate} and nt:{UnicodeTrailSurrogate} respectively is not matched by the nt:{UnicodeIDStart} lexical grammar production ."
  [25504] Exit[25504]
Algo: RegExpInitialize [2245]
  [25505] Entry[25505]
  [25506] (26382/0) If[25506] (= pattern undefined)
  [25507] (26387/2) If[25507] (= flags undefined)
  [25508] (26388/2) Normal[25508] let F = ""
  [25509] (26390/3) Call[25509] app __x1__ = (ToString flags)
  [25510] (26393/5) If[25510] (contains F "u")
  [25511] (26394/5) Normal[25511] let u = true
  [25512] (26395/5) Normal[25512] let u = false
  [25513] (26398/7) Call[25513] app __x2__ = (StringToCodePoints P)
  [25514] (26399/7) Normal[25514] let patternText = [! __x2__]
  [25515] (26405/12) Normal[25515] let parseResult = __x3__
  [25516] (26406/13) Normal[25516] ??? "If id:{parseResult} is a non - empty List of value:{SyntaxError} objects , throw a value:{SyntaxError} exception ."
  [25517] (26383/0) Normal[25517] let P = ""
  [25518] (26385/1) Call[25518] app __x0__ = (ToString pattern)
  [25519] (26392/4) Normal[25519] ??? "If id:{F} contains any code unit other than value:{\"g\"} , value:{\"i\"} , value:{\"m\"} , value:{\"s\"} , value:{\"u\"} , or value:{\"y\"} or if it contains the same code unit more than once , throw a value:{SyntaxError} exception ."
  [25520] (26407/15) Normal[25520] obj.OriginalSource = P
  [25521] (26396/6) If[25521] (= u true)
  [25522] (26402/10) Normal[25522] ??? "Let id:{patternText} be the result of interpreting each of id:{P} ' s 16 - bit elements as a Unicode BMP code point . UTF - 16 decoding is not applied to the elements ."
  [25523] (26403/11) Normal[25523] ??? "Let id:{patternCharacters} be a List whose elements are the code unit elements of id:{P} ."
  [25524] (26391/3) Normal[25524] let F = [? __x1__]
  [25525] (26386/1) Normal[25525] let P = [? __x0__]
  [25526] (26404/12) Call[25526] app __x3__ = (ParsePattern patternText u)
  [25527] (26400/8) Normal[25527] ??? "Let id:{patternCharacters} be a List whose elements are the code points of id:{patternText} ."
  [25528] (26409/17) Normal[25528] obj.RegExpMatcher = null
  [25529] (26410/18) Call[25529] app __x4__ = (Set obj "lastIndex" 0i true)
  [25530] (26411/18) Normal[25530] [? __x4__]
  [25531] (26408/16) Normal[25531] obj.OriginalFlags = F
  [25532] (26412/19) Normal[25532] return obj
  [25533] Exit[25533]
Algo: RegExpUnicodeEscapeSequence[0,0].CharacterValue [2246]
  [25534] Entry[25534]
  [25535] (26414)Normal[25535] let RegExpUnicodeEscapeSequence = this
  [25536] (26418/1) Normal[25536] let trail = __x1__
  [25537] (26419/2) Call[25537] app __x2__ = (UTF16SurrogatePairToCodePoint lead trail)
  [25538] (26415/0) Call[25538] access __x0__ = (HexLeadSurrogate "CharacterValue")
  [25539] (26420/2) Normal[25539] let cp = __x2__
  [25540] (26416/0) Normal[25540] let lead = __x0__
  [25541] (26421/3) Normal[25541] return cp
  [25542] (26417/1) Call[25542] access __x1__ = (HexTrailSurrogate "CharacterValue")
  [25543] Exit[25543]
Algo: RegExpUnicodeEscapeSequence[4,0].CharacterValue [2247]
  [25544] Entry[25544]
  [25545] (26423)Normal[25545] let RegExpUnicodeEscapeSequence = this
  [25546] (26424/0) Call[25546] access __x0__ = (Hex4Digits "MV")
  [25547] (26425/0) Normal[25547] return __x0__
  [25548] Exit[25548]
Algo: RegExpUnicodeEscapeSequence[5,0].CharacterValue [2248]
  [25549] Entry[25549]
  [25550] (26427)Normal[25550] let RegExpUnicodeEscapeSequence = this
  [25551] (26428/0) Call[25551] access __x0__ = (CodePoint "MV")
  [25552] (26429/0) Normal[25552] return __x0__
  [25553] Exit[25553]
Algo: RegularExpressionFlags[1,0].EarlyErrors [2249]
  [25554] Entry[25554]
  [25555] (26430/0) Normal[25555] ??? "It is a Syntax Error if nt:{IdentifierPart} contains a Unicode escape sequence ."
  [25556] Exit[25556]
Algo: RegularExpressionLiteral[0,0].BodyText [2250]
  [25557] Entry[25557]
  [25558] (26432)Normal[25558] let RegularExpressionLiteral = this
  [25559] (26433/0) Normal[25559] ??? "Return the source text that was recognized as nt:{RegularExpressionBody} ."
  [25560] Exit[25560]
Algo: RegularExpressionLiteral[0,0].FlagText [2251]
  [25561] Entry[25561]
  [25562] (26435)Normal[25562] let RegularExpressionLiteral = this
  [25563] (26436/0) Normal[25563] ??? "Return the source text that was recognized as nt:{RegularExpressionFlags} ."
  [25564] Exit[25564]
Algo: RejectPromise [2252]
  [25565] Entry[25565]
  [25566] (26438/0) Normal[25566] assert (= promise.PromiseState ~pending~)
  [25567] (26442/4) Normal[25567] promise.PromiseRejectReactions = undefined
  [25568] (26443/5) Normal[25568] promise.PromiseState = ~rejected~
  [25569] (26449/7) Call[25569] app __x1__ = (TriggerPromiseReactions reactions reason)
  [25570] (26450/7) Normal[25570] return __x1__
  [25571] (26439/1) Normal[25571] let reactions = promise.PromiseRejectReactions
  [25572] (26444/6) If[25572] (= promise.PromiseIsHandled false)
  [25573] (26447/6) Normal[25573] __x0__
  [25574] (26440/2) Normal[25574] promise.PromiseResult = reason
  [25575] (26446/6) Call[25575] app __x0__ = (HostPromiseRejectionTracker promise "reject")
  [25576] (26441/3) Normal[25576] promise.PromiseFulfillReactions = undefined
  [25577] Exit[25577]
Algo: RelationalExpression[1,0].AssignmentTargetType [2253]
  [25578] Entry[25578]
  [25579] (26451/0) Normal[25579] return ~invalid~
  [25580] Exit[25580]
Algo: RelationalExpression[1,0].Evaluation [2254]
  [25581] Entry[25581]
  [25582] (26453/0) Call[25582] access __x0__ = (RelationalExpression "Evaluation")
  [25583] (26457/2) Call[25583] access __x2__ = (ShiftExpression "Evaluation")
  [25584] (26458/2) Normal[25584] let rref = __x2__
  [25585] (26462/4) Normal[25585] let r = __x4__
  [25586] (26463/5) Normal[25586] [? r]
  [25587] (26466/6) Normal[25587] return r
  [25588] Exit[25588]
  [25589] (26454/0) Normal[25589] let lref = __x0__
  [25590] (26459/3) Call[25590] app __x3__ = (GetValue rref)
  [25591] (26461/4) Call[25591] app __x4__ = (AbstractRelationalComparison lval rval)
  [25592] (26465/6) Normal[25592] return false
  [25593] (26455/1) Call[25593] app __x1__ = (GetValue lref)
  [25594] (26464/6) If[25594] (= r undefined)
  [25595] (26460/3) Normal[25595] let rval = [? __x3__]
  [25596] (26456/1) Normal[25596] let lval = [? __x1__]
Algo: RelationalExpression[1,0].HasCallInTailPosition [2255]
  [25597] Entry[25597]
  [25598] (26467/0) Normal[25598] return false
  [25599] Exit[25599]
Algo: RelationalExpression[1,0].IsFunctionDefinition [2256]
  [25600] Entry[25600]
  [25601] (26468/0) Normal[25601] return false
  [25602] Exit[25602]
Algo: RelationalExpression[2,0].AssignmentTargetType [2257]
  [25603] Entry[25603]
  [25604] (26469/0) Normal[25604] return ~invalid~
  [25605] Exit[25605]
Algo: RelationalExpression[2,0].Evaluation [2258]
  [25606] Entry[25606]
  [25607] (26471/0) Call[25607] access __x0__ = (RelationalExpression "Evaluation")
  [25608] (26475/2) Call[25608] access __x2__ = (ShiftExpression "Evaluation")
  [25609] (26476/2) Normal[25609] let rref = __x2__
  [25610] (26480/4) Normal[25610] let r = __x4__
  [25611] (26481/5) Normal[25611] [? r]
  [25612] (26484/6) Normal[25612] return r
  [25613] Exit[25613]
  [25614] (26472/0) Normal[25614] let lref = __x0__
  [25615] (26477/3) Call[25615] app __x3__ = (GetValue rref)
  [25616] (26479/4) Call[25616] app __x4__ = (AbstractRelationalComparison rval lval false)
  [25617] (26483/6) Normal[25617] return false
  [25618] (26473/1) Call[25618] app __x1__ = (GetValue lref)
  [25619] (26482/6) If[25619] (= r undefined)
  [25620] (26478/3) Normal[25620] let rval = [? __x3__]
  [25621] (26474/1) Normal[25621] let lval = [? __x1__]
Algo: RelationalExpression[2,0].HasCallInTailPosition [2259]
  [25622] Entry[25622]
  [25623] (26485/0) Normal[25623] return false
  [25624] Exit[25624]
Algo: RelationalExpression[2,0].IsFunctionDefinition [2260]
  [25625] Entry[25625]
  [25626] (26486/0) Normal[25626] return false
  [25627] Exit[25627]
Algo: RelationalExpression[3,0].AssignmentTargetType [2261]
  [25628] Entry[25628]
  [25629] (26487/0) Normal[25629] return ~invalid~
  [25630] Exit[25630]
Algo: RelationalExpression[3,0].Evaluation [2262]
  [25631] Entry[25631]
  [25632] (26489/0) Call[25632] access __x0__ = (RelationalExpression "Evaluation")
  [25633] (26493/2) Call[25633] access __x2__ = (ShiftExpression "Evaluation")
  [25634] (26494/2) Normal[25634] let rref = __x2__
  [25635] (26498/4) Normal[25635] let r = __x4__
  [25636] (26499/5) Normal[25636] [? r]
  [25637] (26502/6) Normal[25637] return true
  [25638] Exit[25638]
  [25639] (26490/0) Normal[25639] let lref = __x0__
  [25640] (26495/3) Call[25640] app __x3__ = (GetValue rref)
  [25641] (26497/4) Call[25641] app __x4__ = (AbstractRelationalComparison rval lval false)
  [25642] (26501/6) Normal[25642] return false
  [25643] (26491/1) Call[25643] app __x1__ = (GetValue lref)
  [25644] (26500/6) If[25644] (|| (= r true) (= r undefined))
  [25645] (26496/3) Normal[25645] let rval = [? __x3__]
  [25646] (26492/1) Normal[25646] let lval = [? __x1__]
Algo: RelationalExpression[3,0].HasCallInTailPosition [2263]
  [25647] Entry[25647]
  [25648] (26503/0) Normal[25648] return false
  [25649] Exit[25649]
Algo: RelationalExpression[3,0].IsFunctionDefinition [2264]
  [25650] Entry[25650]
  [25651] (26504/0) Normal[25651] return false
  [25652] Exit[25652]
Algo: RelationalExpression[4,0].AssignmentTargetType [2265]
  [25653] Entry[25653]
  [25654] (26505/0) Normal[25654] return ~invalid~
  [25655] Exit[25655]
Algo: RelationalExpression[4,0].Evaluation [2266]
  [25656] Entry[25656]
  [25657] (26507/0) Call[25657] access __x0__ = (RelationalExpression "Evaluation")
  [25658] (26511/2) Call[25658] access __x2__ = (ShiftExpression "Evaluation")
  [25659] (26512/2) Normal[25659] let rref = __x2__
  [25660] (26516/4) Normal[25660] let r = __x4__
  [25661] (26517/5) Normal[25661] [? r]
  [25662] (26520/6) Normal[25662] return true
  [25663] Exit[25663]
  [25664] (26508/0) Normal[25664] let lref = __x0__
  [25665] (26513/3) Call[25665] app __x3__ = (GetValue rref)
  [25666] (26515/4) Call[25666] app __x4__ = (AbstractRelationalComparison lval rval)
  [25667] (26519/6) Normal[25667] return false
  [25668] (26509/1) Call[25668] app __x1__ = (GetValue lref)
  [25669] (26518/6) If[25669] (|| (= r true) (= r undefined))
  [25670] (26514/3) Normal[25670] let rval = [? __x3__]
  [25671] (26510/1) Normal[25671] let lval = [? __x1__]
Algo: RelationalExpression[4,0].HasCallInTailPosition [2267]
  [25672] Entry[25672]
  [25673] (26521/0) Normal[25673] return false
  [25674] Exit[25674]
Algo: RelationalExpression[4,0].IsFunctionDefinition [2268]
  [25675] Entry[25675]
  [25676] (26522/0) Normal[25676] return false
  [25677] Exit[25677]
Algo: RelationalExpression[5,0].AssignmentTargetType [2269]
  [25678] Entry[25678]
  [25679] (26523/0) Normal[25679] return ~invalid~
  [25680] Exit[25680]
Algo: RelationalExpression[5,0].Evaluation [2270]
  [25681] Entry[25681]
  [25682] (26525/0) Call[25682] access __x0__ = (RelationalExpression "Evaluation")
  [25683] (26529/2) Call[25683] access __x2__ = (ShiftExpression "Evaluation")
  [25684] (26530/2) Normal[25684] let rref = __x2__
  [25685] (26534/4) Normal[25685] return [? __x4__]
  [25686] Exit[25686]
  [25687] (26526/0) Normal[25687] let lref = __x0__
  [25688] (26531/3) Call[25688] app __x3__ = (GetValue rref)
  [25689] (26533/4) Call[25689] app __x4__ = (InstanceofOperator lval rval)
  [25690] (26527/1) Call[25690] app __x1__ = (GetValue lref)
  [25691] (26532/3) Normal[25691] let rval = [? __x3__]
  [25692] (26528/1) Normal[25692] let lval = [? __x1__]
Algo: RelationalExpression[5,0].HasCallInTailPosition [2271]
  [25693] Entry[25693]
  [25694] (26535/0) Normal[25694] return false
  [25695] Exit[25695]
Algo: RelationalExpression[5,0].IsFunctionDefinition [2272]
  [25696] Entry[25696]
  [25697] (26536/0) Normal[25697] return false
  [25698] Exit[25698]
Algo: RelationalExpression[6,0].AssignmentTargetType [2273]
  [25699] Entry[25699]
  [25700] (26537/0) Normal[25700] return ~invalid~
  [25701] Exit[25701]
Algo: RelationalExpression[6,0].Evaluation [2274]
  [25702] Entry[25702]
  [25703] (26539/0) Call[25703] access __x0__ = (RelationalExpression "Evaluation")
  [25704] (26543/2) Call[25704] access __x2__ = (ShiftExpression "Evaluation")
  [25705] (26544/2) Normal[25705] let rref = __x2__
  [25706] (26548/4) Normal[25706] throw TypeError
  [25707] (26550/5) Call[25707] app __x4__ = (ToPropertyKey lval)
  [25708] (26540/0) Normal[25708] let lref = __x0__
  [25709] (26545/3) Call[25709] app __x3__ = (GetValue rref)
  [25710] (26547/4) If[25710] (! (= (typeof rval) Object))
  [25711] (26552/5) Normal[25711] return [? __x5__]
  [25712] Exit[25712]
  [25713] (26541/1) Call[25713] app __x1__ = (GetValue lref)
  [25714] (26551/5) Call[25714] app __x5__ = (HasProperty rval [? __x4__])
  [25715] (26546/3) Normal[25715] let rval = [? __x3__]
  [25716] (26542/1) Normal[25716] let lval = [? __x1__]
Algo: RelationalExpression[6,0].HasCallInTailPosition [2275]
  [25717] Entry[25717]
  [25718] (26553/0) Normal[25718] return false
  [25719] Exit[25719]
Algo: RelationalExpression[6,0].IsFunctionDefinition [2276]
  [25720] Entry[25720]
  [25721] (26554/0) Normal[25721] return false
  [25722] Exit[25722]
Algo: RemoveWaiter [2277]
  [25723] Entry[25723]
  [25724] (26556/2) Normal[25724] let __x0__ = 0i
  [25725] (26560/2) Normal[25725] __x0__ = (+ __x0__ 1i)
  [25726] LoopCont[25726]
  [25727] (26557/2) Loop[25727] (< __x0__ WL.length)
  [25728] (26558/2) If[25728] (= WL[__x0__] W)
  [25729] Exit[25729]
  [25730] (26559/2) Normal[25730] (pop WL __x0__)
Algo: RemoveWaiters [2278]
  [25731] Entry[25731]
  [25732] (26562/1) Normal[25732] let L = (new [])
  [25733] (26567/5) Normal[25733] append W -> L
  [25734] (26568/6) Normal[25734] let __x0__ = 0i
  [25735] (26572/6) Normal[25735] __x0__ = (+ __x0__ 1i)
  [25736] LoopCont[25736]
  [25737] LoopCont[25737]
  [25738] (26564/3) Loop[25738] (&& (< 0i c) (< 0i S.length))
  [25739] (26563/2) Normal[25739] ??? "Let id:{S} be a reference to the list of waiters in id:{WL} ."
  [25740] (26569/6) Loop[25740] (< __x0__ S.length)
  [25741] (26571/6) Normal[25741] (pop S __x0__)
  [25742] (26574/7) Normal[25742] c = (- c 1i)
  [25743] (26573/7) If[25743] (! (|| (|| (= c Infinity) (= c -Infinity)) (= c NaN)))
  [25744] (26570/6) If[25744] (= S[__x0__] W)
  [25745] (26566/4) Normal[25745] let W = S[0i]
  [25746] (26576/8) Normal[25746] return L
  [25747] Exit[25747]
Algo: RepeatMatcher [2279]
  [25748] Entry[25748]
  [25749] (26578/0) If[25749] (== max 0i)
  [25750] (26584/7) Normal[25750] let cap = (copy-obj x.captures)
  [25751] (26585/8) Normal[25751] ??? "For each integer id:{k} such that id:{parenIndex} < id:{k} and id:{k} ≤ id:{parenIndex} + id:{parenCount} , set id:{cap} [ id:{k} ] to value:{undefined} ."
  [25752] (26590/11) Call[25752] app __x1__ = (m xr d)
  [25753] (26591/11) Normal[25753] return __x1__
  [25754] (26609/18) Normal[25754] return __x5__
  [25755] Exit[25755]
  [25756] (26596/13) Normal[25756] let z = __x2__
  [25757] (26597/14) If[25757] (! (= z ~failure~))
  [25758] (26604/16) Normal[25758] let z = __x4__
  [25759] (26605/17) If[25759] (! (= z ~failure~))
  [25760] (26580/0) Call[25760] app __x0__ = (c x)
  [25761] (26583/1) Normal[25761] ??? "Let id:{d} be a new Continuation with parameters ( id:{y} ) that captures id:{m} , id:{min} , id:{max} , id:{greedy} , id:{x} , id:{c} , id:{parenIndex} , and id:{parenCount} and performs the following steps when called : in:{} out:{}"
  [25762] (26586/9) Normal[25762] let e = x.endIndex
  [25763] (26606/17) Normal[25763] return z
  [25764] (26608/18) Call[25764] app __x5__ = (c x)
  [25765] (26588/11) If[25765] (! (== min 0i))
  [25766] (26593/12) If[25766] (= greedy false)
  [25767] (26595/13) Call[25767] app __x2__ = (c x)
  [25768] (26581/0) Normal[25768] return __x0__
  [25769] (26600/15) Call[25769] app __x3__ = (m xr d)
  [25770] (26601/15) Normal[25770] return __x3__
  [25771] (26603/16) Call[25771] app __x4__ = (m xr d)
  [25772] (26587/10) Normal[25772] let xr = (new [e, cap])
  [25773] (26598/14) Normal[25773] return z
Algo: RequireInternalSlot [2280]
  [25774] Entry[25774]
  [25775] (26611/0) If[25775] (! (= (typeof O) Object))
  [25776] (26612/0) Normal[25776] throw TypeError
  [25777] (26614/1) If[25777] (= O[internalSlot] absent)
  [25778] (26615/1) Normal[25778] throw TypeError
  [25779] Exit[25779]
Algo: RequireObjectCoercible [2281]
  [25780] Entry[25780]
  [25781] (26618/1) If[25781] (= (typeof argument) Undefined)
  [25782] (26624/5) If[25782] (= (typeof argument) Boolean)
  [25783] (26625/4) Normal[25783] return argument
  [25784] (26627/7) If[25784] (= (typeof argument) Number)
  [25785] (26631/8) Normal[25785] return argument
  [25786] (26633/11) If[25786] (= (typeof argument) Symbol)
  [25787] (26637/12) Normal[25787] return argument
  [25788] (26639/15) If[25788] (= (typeof argument) Object)
  [25789] (26619/0) Normal[25789] throw TypeError
  [25790] (26621/3) If[25790] (= (typeof argument) Null)
  [25791] (26630/9) If[25791] (= (typeof argument) String)
  [25792] (26636/13) If[25792] (= (typeof argument) BigInt)
  [25793] (26642/16) Normal[25793] assert false
  [25794] Exit[25794]
  [25795] (26634/10) Normal[25795] return argument
  [25796] (26628/6) Normal[25796] return argument
  [25797] (26622/2) Normal[25797] throw TypeError
  [25798] (26640/14) Normal[25798] return argument
Algo: ResolveBinding [2282]
  [25799] Entry[25799]
  [25800] (26644/0) If[25800] (|| (= env absent) (= env undefined))
  [25801] (26649/3) Normal[25801] let strict = true
  [25802] (26651/4) Call[25802] app __x0__ = (GetIdentifierReference env name strict)
  [25803] (26645/1) Normal[25803] env = CONTEXT.LexicalEnvironment
  [25804] (26647/2) Normal[25804] assert (is-instance-of env EnvironmentRecord)
  [25805] (26650/3) Normal[25805] let strict = false
  [25806] (26652/4) Normal[25806] return [? __x0__]
  [25807] (26648/3) If[25807] true
  [25808] Exit[25808]
Algo: ResolveExport [2283]
  [25809] Entry[25809]
  [25810] (26654/0) If[25810] (= resolveSet absent)
  [25811] (26659/2) Loop[25811] (< __x1__ __x0__.length)
  [25812] (26661/2) Normal[25812] let r = __x0__[__x1__]
  [25813] (26673/6) Normal[25813] append (new Record("Module" -> module, "ExportName" -> exportName)) -> resolveSet
  [25814] (26733/34) Normal[25814] return "ambiguous"
  [25815] LoopCont[25815]
  [25816] (26655/0) Normal[25816] resolveSet = (new [])
  [25817] (26657/2) Normal[25817] let __x0__ = resolveSet
  [25818] (26708/25) Loop[25818] (< __x14__ __x13__.length)
  [25819] (26658/2) Normal[25819] let __x1__ = 0i
  [25820] (26665/3) If[25820] __x2__
  [25821] (26667/3) Call[25821] app __x3__ = (SameValue exportName r.ExportName)
  [25822] (26670/3) If[25822] __x2__
  [25823] (26721/30) Normal[25823] assert (is-instance-of resolution ResolvedBindingRecord)
  [25824] (26722/31) If[25824] (= starResolution null)
  [25825] (26703/22) Normal[25825] return null
  [25826] (26705/24) Normal[25826] let starResolution = null
  [25827] (26682/10) Normal[25827] return (new ResolvedBindingRecord("Module" -> module, "BindingName" -> e.LocalName))
  [25828] LoopCont[25828]
  [25829] (26698/19) Call[25829] app __x11__ = (importedModule.ResolveExport importedModule e.ImportName resolveSet)
  [25830] (26699/19) Normal[25830] return __x11__
  [25831] (26676/7) Loop[25831] (< __x5__ __x4__.length)
  [25832] (26715/27) Normal[25832] let resolution = [? __x16__]
  [25833] (26716/28) If[25833] (= resolution "ambiguous")
  [25834] (26671/5) Normal[25834] return null
  [25835] LoopCont[25835]
  [25836] (26678/7) Normal[25836] let e = __x4__[__x5__]
  [25837] (26679/7) Normal[25837] __x5__ = (+ __x5__ 1i)
  [25838] (26710/25) Normal[25838] let e = __x13__[__x14__]
  [25839] (26736/35) Normal[25839] return starResolution
  [25840] (26723/31) Normal[25840] starResolution = resolution
  [25841] (26725/34) Normal[25841] let __x17__ = true
  [25842] (26688/11) Normal[25842] let e = __x7__[__x8__]
  [25843] (26689/11) Normal[25843] __x8__ = (+ __x8__ 1i)
  [25844] (26727/34) If[25844] __x17__
  [25845] (26732/34) If[25845] __x17__
  [25846] (26730/36) Call[25846] app __x18__ = (SameValue resolution.BindingName starResolution.BindingName)
  [25847] (26662/2) Normal[25847] __x1__ = (+ __x1__ 1i)
  [25848] (26726/34) Normal[25848] __x17__ = (! (= resolution.Module starResolution.Module))
  [25849] (26680/8) Call[25849] app __x6__ = (SameValue exportName e.ExportName)
  [25850] (26693/13) Call[25850] app __x10__ = (HostResolveImportedModule module e.ModuleRequest)
  [25851] (26694/13) Normal[25851] let importedModule = [? __x10__]
  [25852] (26686/11) Loop[25852] (< __x8__ __x7__.length)
  [25853] (26701/20) Call[25853] app __x12__ = (SameValue exportName "default")
  [25854] LoopCont[25854]
  [25855] (26664/3) Normal[25855] __x2__ = (= module r.Module)
  [25856] (26717/28) Normal[25856] return "ambiguous"
  [25857] (26719/29) If[25857] (! (= resolution null))
  [25858] (26702/20) If[25858] (= __x12__ true)
  [25859] (26707/25) Normal[25859] let __x14__ = 0i
  [25860] (26674/7) Normal[25860] let __x4__ = module.LocalExportEntries
  [25861] (26675/7) Normal[25861] let __x5__ = 0i
  [25862] (26691/12) If[25862] (= __x9__ true)
  [25863] (26695/14) If[25863] (= e.ImportName "*")
  [25864] (26681/8) If[25864] (= __x6__ true)
  [25865] (26706/25) Normal[25865] let __x13__ = module.StarExportEntries
  [25866] (26685/11) Normal[25866] let __x8__ = 0i
  [25867] (26668/3) Normal[25867] __x2__ = (= __x3__ true)
  [25868] (26712/26) Call[25868] app __x15__ = (HostResolveImportedModule module e.ModuleRequest)
  [25869] (26713/26) Normal[25869] let importedModule = [? __x15__]
  [25870] (26663/3) Normal[25870] let __x2__ = true
  [25871] (26696/16) Normal[25871] return (new ResolvedBindingRecord("Module" -> importedModule, "BindingName" -> "*namespace*"))
  [25872] (26711/25) Normal[25872] __x14__ = (+ __x14__ 1i)
  [25873] (26731/36) Normal[25873] __x17__ = (= __x18__ false)
  [25874] (26714/27) Call[25874] app __x16__ = (importedModule.ResolveExport importedModule exportName resolveSet)
  [25875] Exit[25875]
  [25876] (26690/12) Call[25876] app __x9__ = (SameValue exportName e.ExportName)
  [25877] (26684/11) Normal[25877] let __x7__ = module.IndirectExportEntries
Algo: ResolveThisBinding [2284]
  [25878] Entry[25878]
  [25879] (26738/0) Call[25879] app __x0__ = (GetThisEnvironment)
  [25880] (26739/0) Normal[25880] let envRec = __x0__
  [25881] (26740/1) Call[25881] app __x1__ = (envRec.GetThisBinding envRec)
  [25882] (26741/1) Normal[25882] return [? __x1__]
  [25883] Exit[25883]
Algo: ReturnStatement[0,0].Evaluation [2285]
  [25884] Entry[25884]
  [25885] (26743)Normal[25885] let ReturnStatement = this
  [25886] (26744/0) Normal[25886] return (comp[~return~] undefined => ~empty~)
  [25887] Exit[25887]
Algo: ReturnStatement[0,0].HasCallInTailPosition [2286]
  [25888] Entry[25888]
  [25889] (26746)Normal[25889] let ReturnStatement = this
  [25890] (26747/0) Normal[25890] return false
  [25891] Exit[25891]
Algo: ReturnStatement[1,0].Evaluation [2287]
  [25892] Entry[25892]
  [25893] (26749)Normal[25893] let ReturnStatement = this
  [25894] (26753/1) Normal[25894] let exprValue = [? __x1__]
  [25895] (26754/2) Call[25895] app __x2__ = (GetGeneratorKind)
  [25896] (26760/3) Normal[25896] return (comp[~return~] exprValue => ~empty~)
  [25897] Exit[25897]
  [25898] (26750/0) Call[25898] access __x0__ = (Expression "Evaluation")
  [25899] (26755/2) If[25899] (= [! __x2__] ~async~)
  [25900] (26758/2) Normal[25900] exprValue = [? __x3__]
  [25901] (26751/0) Normal[25901] let exprRef = __x0__
  [25902] (26757/2) Call[25902] app __x3__ = (Await exprValue)
  [25903] (26752/1) Call[25903] app __x1__ = (GetValue exprRef)
Algo: ReturnStatement[1,0].HasCallInTailPosition [2288]
  [25904] Entry[25904]
  [25905] (26762)Normal[25905] let ReturnStatement = this
  [25906] (26763/0) Call[25906] access __x0__ = (Expression "HasCallInTailPosition" call)
  [25907] (26764/0) Normal[25907] return __x0__
  [25908] Exit[25908]
Algo: RunJobs [2289]
  [25909] Entry[25909]
  [25910] (26766)Call[25910] app __x0__ = (InitializeHostDefinedRealm)
  [25911] (26771)If[25911] (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] CONTEXT)
  [25912] (26773)Normal[25912] let __x2__ = (- EXECUTION_STACK.length 1i)
  [25913] (26778)Normal[25913] CONTEXT = null
  [25914] (26777)Normal[25914] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [25915] (26779)If[25915] (= JOB_QUEUE.length 0.0)
  [25916] (26782)Normal[25916] let nextQueue = JOB_QUEUE
  [25917] (26783)Normal[25917] let nextPending = (pop nextQueue 0i)
  [25918] (26767)Normal[25918] [? __x0__]
  [25919] (26774)Normal[25919] (pop EXECUTION_STACK __x2__)
  [25920] (26776)Normal[25920] CONTEXT = null
  [25921] (26780)Normal[25921] return undefined
  [25922] (26768)Call[25922] app __x1__ = (EnqueueJob "ScriptJobs" ScriptEvaluationJob (new [SCRIPT_BODY, HOST_DEFINED]))
  [25923] (26775)If[25923] (= EXECUTION_STACK.length 0i)
  [25924] (26786)Normal[25924] newContext.Realm = nextPending.Realm
  [25925] (26787)Normal[25925] newContext.ScriptOrModule = nextPending.ScriptOrModule
  [25926] (26769)Loop[25926] true
  [25927] Exit[25927]
  [25928] (26784)Normal[25928] let newContext = (new ExecutionContext("SubMap" -> (new SubMap())))
  [25929] (26792)If[25929] (= args absent)
  [25930] (26793)Call[25930] app __x3__ = (job)
  [25931] (26794)If[25931] (= args.length 1i)
  [25932] (26799)Normal[25932] let result = __x3__
  [25933] (26788)Normal[25933] append newContext -> EXECUTION_STACK
  [25934] (26789)Normal[25934] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [25935] (26797)Call[25935] app __x3__ = (job args[0i] args[1i])
  [25936] (26796)If[25936] (= args.length 2i)
  [25937] (26798)Call[25937] app __x3__ = (job args[0i] args[1i] args[2i])
  [25938] (26790)Normal[25938] let job = nextPending.Job
  [25939] (26801)If[25939] __x4__
  [25940] (26802)Normal[25940] return result
  [25941] LoopCont[25941]
  [25942] (26785)Normal[25942] newContext.Function = null
  [25943] (26800)Call[25943] app __x4__ = (IsAbruptCompletion result)
  [25944] (26791)Normal[25944] let args = nextPending.Arguments
  [25945] (26795)Call[25945] app __x3__ = (job args[0i])
Algo: SameValue [2290]
  [25946] Entry[25946]
  [25947] (26805/0) If[25947] (! (= (typeof x) (typeof y)))
  [25948] (26811/2) Normal[25948] return [! __x0__]
  [25949] (26813/3) Call[25949] app __x1__ = (SameValueNonNumeric x y)
  [25950] (26806/0) Normal[25950] return false
  [25951] (26808/1) If[25951] (|| (= (typeof x) Number) (= (typeof x) BigInt))
  [25952] (26814/3) Normal[25952] return [! __x1__]
  [25953] Exit[25953]
  [25954] (26810/2) Call[25954] app __x0__ = (PRIMITIVE[(typeof x)].sameValue x y)
Algo: SameValueNonNumeric [2291]
  [25955] Entry[25955]
  [25956] (26816/0) Normal[25956] assert (! (|| (= (typeof x) Number) (= (typeof x) BigInt)))
  [25957] (26821/3) If[25957] (= (typeof x) Null)
  [25958] (26822/3) Normal[25958] return true
  [25959] (26824/4) If[25959] (= (typeof x) String)
  [25960] (26828/7) If[25960] (|| (&& (= x true) (= y true)) (&& (= x false) (= y false)))
  [25961] (26829/7) Normal[25961] return true
  [25962] (26830/7) Normal[25962] return false
  [25963] (26833/9) If[25963] (= x y)
  [25964] (26834/9) Normal[25964] return true
  [25965] (26835/9) Normal[25965] return false
  [25966] (26817/1) Normal[25966] assert (= (typeof x) (typeof y))
  [25967] (26827/6) If[25967] (= (typeof x) Boolean)
  [25968] (26832/8) If[25968] (= (typeof x) Symbol)
  [25969] (26837/10) If[25969] (= x y)
  [25970] (26818/2) If[25970] (= (typeof x) Undefined)
  [25971] (26838/10) Normal[25971] return true
  [25972] (26839/10) Normal[25972] return false
  [25973] (26825/5) Normal[25973] return (= x y)
  [25974] (26819/2) Normal[25974] return true
  [25975] Exit[25975]
Algo: SameValueZero [2292]
  [25976] Entry[25976]
  [25977] (26841/0) If[25977] (! (= (typeof x) (typeof y)))
  [25978] (26847/2) Normal[25978] return [! __x0__]
  [25979] (26849/3) Call[25979] app __x1__ = (SameValueNonNumeric x y)
  [25980] (26842/0) Normal[25980] return false
  [25981] (26844/1) If[25981] (|| (= (typeof x) Number) (= (typeof x) BigInt))
  [25982] (26850/3) Normal[25982] return [! __x1__]
  [25983] Exit[25983]
  [25984] (26846/2) Call[25984] app __x0__ = (PRIMITIVE[(typeof x)].sameValueZero x y)
Algo: ScriptBody[0,0].EarlyErrors [2293]
  [25985] Entry[25985]
  [25986] (26852)Normal[25986] let ScriptBody = this
  [25987] (26856/2) If[25987] (= __x0__ true)
  [25988] (26857/2) Normal[25988] throw SyntaxError
  [25989] (26859/3) Call[25989] access __x1__ = (StatementList "ContainsUndefinedBreakTarget" (new []))
  [25990] (26863/4) Call[25990] access __x2__ = (StatementList "ContainsUndefinedContinueTarget" (new []) (new []))
  [25991] (26864/4) If[25991] (= __x2__ true)
  [25992] (26853/0) Normal[25992] ??? "It is a Syntax Error if nt:{StatementList} Contains code:{super} unless the source code containing code:{super} is eval code that is being processed by a direct eval . Additional early error rules for code:{super} within direct eval are defined in link:{sec-performeval} ."
  [25993] (26861/3) Normal[25993] throw SyntaxError
  [25994] (26854/1) Normal[25994] ??? "It is a Syntax Error if nt:{StatementList} Contains nt:{NewTarget} unless the source code containing nt:{NewTarget} is eval code that is being processed by a direct eval . Additional early error rules for nt:{NewTarget} in direct eval are defined in link:{sec-performeval} ."
  [25995] (26865/4) Normal[25995] throw SyntaxError
  [25996] Exit[25996]
  [25997] (26860/3) If[25997] (= __x1__ true)
  [25998] (26855/2) Call[25998] access __x0__ = (StatementList "ContainsDuplicateLabels" (new []))
Algo: ScriptBody[0,0].LexicallyDeclaredNames [2294]
  [25999] Entry[25999]
  [26000] (26868)Normal[26000] let ScriptBody = this
  [26001] (26869/0) Call[26001] access __x0__ = (StatementList "TopLevelLexicallyDeclaredNames")
  [26002] (26870/0) Normal[26002] return __x0__
  [26003] Exit[26003]
Algo: ScriptBody[0,0].LexicallyScopedDeclarations [2295]
  [26004] Entry[26004]
  [26005] (26872)Normal[26005] let ScriptBody = this
  [26006] (26873/0) Call[26006] access __x0__ = (StatementList "TopLevelLexicallyScopedDeclarations")
  [26007] (26874/0) Normal[26007] return __x0__
  [26008] Exit[26008]
Algo: ScriptBody[0,0].VarDeclaredNames [2296]
  [26009] Entry[26009]
  [26010] (26876)Normal[26010] let ScriptBody = this
  [26011] (26877/0) Call[26011] access __x0__ = (StatementList "TopLevelVarDeclaredNames")
  [26012] (26878/0) Normal[26012] return __x0__
  [26013] Exit[26013]
Algo: ScriptBody[0,0].VarScopedDeclarations [2297]
  [26014] Entry[26014]
  [26015] (26880)Normal[26015] let ScriptBody = this
  [26016] (26881/0) Call[26016] access __x0__ = (StatementList "TopLevelVarScopedDeclarations")
  [26017] (26882/0) Normal[26017] return __x0__
  [26018] Exit[26018]
Algo: ScriptEvaluation [2298]
  [26019] Entry[26019]
  [26020] (26884/0) Normal[26020] let globalEnv = scriptRecord.Realm.GlobalEnv
  [26021] (26888/4) Normal[26021] scriptContext.ScriptOrModule = scriptRecord
  [26022] (26889/5) Normal[26022] scriptContext.VariableEnvironment = globalEnv
  [26023] (26893/8) Normal[26023] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [26024] (26894/9) Normal[26024] let scriptBody = scriptRecord.ECMAScriptCode
  [26025] (26897/11) If[26025] (= result.Type ~normal~)
  [26026] (26899/12) Call[26026] access __x1__ = (scriptBody "Evaluation")
  [26027] (26902/13) If[26027] (&& (= result.Type ~normal~) (= result.Value ~empty~))
  [26028] (26907/15) Normal[26028] CONTEXT = null
  [26029] (26908/15) If[26029] (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] scriptContext)
  [26030] (26885/1) Normal[26030] let scriptContext = (new ExecutionContext())
  [26031] (26890/6) Normal[26031] scriptContext.LexicalEnvironment = globalEnv
  [26032] (26909/15) Normal[26032] (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i))
  [26033] (26911/16) Normal[26033] assert (< 0i EXECUTION_STACK.length)
  [26034] (26892/8) Normal[26034] append scriptContext -> EXECUTION_STACK
  [26035] (26896/10) Normal[26035] let result = __x0__
  [26036] (26886/2) Normal[26036] scriptContext.Function = null
  [26037] (26904/14) Call[26037] app __x2__ = (NormalCompletion undefined)
  [26038] (26895/10) Call[26038] app __x0__ = (GlobalDeclarationInstantiation scriptBody globalEnv)
  [26039] (26891/7) Normal[26039] CONTEXT = null
  [26040] (26887/3) Normal[26040] scriptContext.Realm = scriptRecord.Realm
  [26041] (26905/14) Normal[26041] result = __x2__
  [26042] (26900/12) Normal[26042] result = __x1__
  [26043] (26912/17) Normal[26043] CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  [26044] (26913/18) Normal[26044] return result
  [26045] Exit[26045]
Algo: ScriptEvaluationJob [2299]
  [26046] Entry[26046]
  [26047] (26915)Normal[26047] let realm = REALM
  [26048] (26919)Normal[26048] return undefined
  [26049] Exit[26049]
  [26050] (26916)Call[26050] app scriptRecord = (ParseScript sourceText realm hostDefined)
  [26051] (26917)Call[26051] app __x1__ = (ScriptEvaluation scriptRecord)
  [26052] (26918)Normal[26052] [? __x1__]
Algo: Script[0,0].Evaluation [2300]
  [26053] Entry[26053]
  [26054] (26921)Normal[26054] let Script = this
  [26055] (26922/0) Normal[26055] return undefined
  [26056] Exit[26056]
Algo: Script[0,0].IsStrict [2301]
  [26057] Entry[26057]
  [26058] (26924)Normal[26058] let Script = this
  [26059] (26925/0) Normal[26059] return true
  [26060] Exit[26060]
Algo: Script[0,1].EarlyErrors [2302]
  [26061] Entry[26061]
  [26062] (26927)Normal[26062] let Script = this
  [26063] (26931/0) Normal[26063] throw SyntaxError
  [26064] (26933/1) Call[26064] access __x2__ = (ScriptBody "LexicallyDeclaredNames")
  [26065] (26937/1) Normal[26065] let __x6__ = 0i
  [26066] (26938/1) Normal[26066] let __x7__ = 0i
  [26067] (26942/1) Normal[26067] __x7__ = 0i
  [26068] (26943/1) Loop[26068] (< __x7__ __x5__.length)
  [26069] (26947/1) If[26069] __x8__
  [26070] (26948/1) Normal[26070] throw SyntaxError
  [26071] Exit[26071]
  [26072] (26928/0) Call[26072] access __x0__ = (ScriptBody "LexicallyDeclaredNames")
  [26073] (26934/1) Call[26073] access __x3__ = (ScriptBody "VarDeclaredNames")
  [26074] (26936/1) Normal[26074] let __x5__ = __x3__
  [26075] (26940/1) Loop[26075] (< __x6__ __x4__.length)
  [26076] (26929/0) Call[26076] app __x1__ = (IsDuplicate __x0__)
  [26077] (26945/1) Normal[26077] __x8__ = true
  [26078] LoopCont[26078]
  [26079] (26939/1) Normal[26079] let __x8__ = false
  [26080] (26935/1) Normal[26080] let __x4__ = __x2__
  [26081] (26930/0) If[26081] __x1__
  [26082] (26944/1) If[26082] (= __x4__[__x6__] __x5__[__x7__])
  [26083] LoopCont[26083]
Algo: Script[0,1].IsStrict [2303]
  [26084] Entry[26084]
  [26085] (26951)Normal[26085] let Script = this
  [26086] (26952/0) Normal[26086] return true
  [26087] Exit[26087]
Algo: SecFromTime [2304]
  [26088] Entry[26088]
  [26089] (26954/0) Call[26089] app __x0__ = (floor (/ t 1000.0))
  [26090] (26955/0) Normal[26090] return (%% __x0__ SecondsPerMinute)
  [26091] Exit[26091]
Algo: SecondsPerMinute [2305]
  [26092] Entry[26092]
  [26093] (26956/0) Normal[26093] return 60i
  [26094] Exit[26094]
Algo: SerializeJSONArray [2306]
  [26095] Entry[26095]
  [26096] (26958/0) If[26096] (contains state.Stack value)
  [26097] (26963/3) Normal[26097] state.Indent = (+ state.Indent state.Gap)
  [26098] (26964/4) Normal[26098] let partial = (new [])
  [26099] (26968/7) Loop[26099] (< index len)
  [26100] (26970/8) Call[26100] app __x1__ = (ToString index)
  [26101] (26977/14) If[26101] (= partial.length 0i)
  [26102] (26973/9) If[26102] (= strP undefined)
  [26103] (26974/10) Normal[26103] append "null" -> partial
  [26104] (26975/9) Normal[26104] append strP -> partial
  [26105] (26959/0) Normal[26105] throw TypeError
  [26106] (26961/1) Normal[26106] append value -> state.Stack
  [26107] (26965/5) Call[26107] app __x0__ = (LengthOfArrayLike value)
  [26108] (26967/6) Normal[26108] let index = 0i
  [26109] (26972/8) Normal[26109] let strP = [? __x2__]
  [26110] (26976/13) Normal[26110] index = (+ index 1i)
  [26111] LoopCont[26111]
  [26112] (26971/8) Call[26112] app __x2__ = (SerializeJSONProperty state [! __x1__] value)
  [26113] (26966/5) Normal[26113] let len = [? __x0__]
  [26114] (26962/2) Normal[26114] let stepback = state.Indent
  [26115] (26978/15) Normal[26115] let final = "[]"
  [26116] (26979/14) If[26116] (= state.Gap "")
  [26117] (26984/21) Normal[26117] let separator = (+ (+ "," "\n") state.Indent)
  [26118] (26985/22) Normal[26118] ??? "Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String ."
  [26119] (26986/23) Normal[26119] let final = (+ (+ (+ (+ (+ (+ "[" "\n") state.Indent) properties) "\n") stepback) "]")
  [26120] (26987/24) Normal[26120] ??? "Remove the last element of id:{state} . [ [ Stack ] ] ."
  [26121] (26989/26) Normal[26121] return final
  [26122] Exit[26122]
  [26123] (26988/25) Normal[26123] state.Indent = stepback
  [26124] (26981/18) Normal[26124] ??? "Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with the code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String ."
  [26125] (26982/19) Normal[26125] let final = (+ (+ "[" properties) "]")
Algo: SerializeJSONObject [2307]
  [26126] Entry[26126]
  [26127] (26991/0) If[26127] (contains state.Stack value)
  [26128] (26996/3) Normal[26128] state.Indent = (+ state.Indent state.Gap)
  [26129] (26997/4) If[26129] (! (= state.PropertyList undefined))
  [26130] (27002/8) Normal[26130] let partial = (new [])
  [26131] (27003/9) Normal[26131] let __x1__ = K
  [26132] (27007/9) Normal[26132] let P = __x1__[__x2__]
  [26133] (27008/9) Normal[26133] __x2__ = (+ __x2__ 1i)
  [26134] (26992/0) Normal[26134] throw TypeError
  [26135] (26994/1) Normal[26135] append value -> state.Stack
  [26136] (26998/5) Normal[26136] let K = state.PropertyList
  [26137] (27000/7) Call[26137] app __x0__ = (EnumerableOwnPropertyNames value ~key~)
  [26138] (27001/7) Normal[26138] let K = [? __x0__]
  [26139] (27005/9) Loop[26139] (< __x2__ __x1__.length)
  [26140] (27022/18) If[26140] (= partial.length 0i)
  [26141] (27004/9) Normal[26141] let __x2__ = 0i
  [26142] (27011/11) If[26142] (! (= strP undefined))
  [26143] (27013/12) Call[26143] app __x4__ = (QuoteJSONString P)
  [26144] LoopCont[26144]
  [26145] (26995/2) Normal[26145] let stepback = state.Indent
  [26146] (27009/10) Call[26146] app __x3__ = (SerializeJSONProperty state P value)
  [26147] (27019/16) Normal[26147] member = (+ member strP)
  [26148] (27020/17) Normal[26148] append member -> partial
  [26149] (27034/30) Normal[26149] return final
  [26150] Exit[26150]
  [26151] (27014/12) Normal[26151] let member = __x4__
  [26152] (27015/13) Normal[26152] member = (+ member ":")
  [26153] (27024/18) If[26153] (= state.Gap "")
  [26154] (27026/22) Normal[26154] ??? "Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with the code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String ."
  [26155] (27029/25) Normal[26155] let separator = (+ (+ "," "\n") state.Indent)
  [26156] (27023/19) Normal[26156] let final = "{}"
  [26157] (27032/28) Normal[26157] ??? "Remove the last element of id:{state} . [ [ Stack ] ] ."
  [26158] (27016/14) If[26158] (! (= state.Gap ""))
  [26159] (27030/26) Normal[26159] ??? "Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String ."
  [26160] (27031/27) Normal[26160] let final = (+ (+ (+ (+ (+ (+ "{" "\n") state.Indent) properties) "\n") stepback) "}")
  [26161] (27010/10) Normal[26161] let strP = [? __x3__]
  [26162] (27017/15) Normal[26162] member = (+ member " ")
  [26163] (27033/29) Normal[26163] state.Indent = stepback
  [26164] (27027/23) Normal[26164] let final = (+ (+ "{" properties) "}")
Algo: SerializeJSONProperty [2308]
  [26165] Entry[26165]
  [26166] (27036/0) Call[26166] app __x0__ = (Get holder key)
  [26167] (27041/2) Normal[26167] let toJSON = [? __x1__]
  [26168] (27042/3) Call[26168] app __x2__ = (IsCallable toJSON)
  [26169] (27049/5) If[26169] (! (= state.ReplacerFunction undefined))
  [26170] (27051/6) Call[26170] app __x4__ = (Call state.ReplacerFunction holder (new [key, value]))
  [26171] (27054/7) If[26171] (= (typeof value) Object)
  [26172] (27037/0) Normal[26172] let value = [? __x0__]
  [26173] (27043/3) If[26173] (= __x2__ true)
  [26174] (27038/1) If[26174] (|| (= (typeof value) Object) (= (typeof value) BigInt))
  [26175] (27045/4) Call[26175] app __x3__ = (Call toJSON value (new [key]))
  [26176] (27046/4) Normal[26176] value = [? __x3__]
  [26177] (27040/2) Call[26177] app __x1__ = (GetV value "toJSON")
  [26178] (27097/24) If[26178] __x9__
  [26179] (27099/24) Call[26179] app __x10__ = (IsCallable value)
  [26180] (27102/24) If[26180] __x9__
  [26181] (27069/16) If[26181] (= value null)
  [26182] (27070/16) Normal[26182] return "null"
  [26183] (27072/17) If[26183] (= value true)
  [26184] (27090/22) Normal[26184] return "null"
  [26185] (27092/23) If[26185] (= (typeof value) BigInt)
  [26186] (27112/27) Normal[26186] return [? __x13__]
  [26187] (27114/28) Normal[26187] return undefined
  [26188] (27055/8) If[26188] (! (= value.NumberData absent))
  [26189] (27057/9) Call[26189] app __x5__ = (ToNumber value)
  [26190] (27059/8) If[26190] (! (= value.StringData absent))
  [26191] (27063/8) If[26191] (! (= value.BooleanData absent))
  [26192] (27064/13) Normal[26192] value = value.BooleanData
  [26193] (27065/8) If[26193] (! (= value.BigIntData absent))
  [26194] (27104/25) Call[26194] app __x11__ = (IsArray value)
  [26195] (27105/25) Normal[26195] let isArray = [? __x11__]
  [26196] (27076/18) Normal[26196] return "false"
  [26197] (27078/19) If[26197] (= (typeof value) String)
  [26198] (27083/20) If[26198] (= (typeof value) Number)
  [26199] (27085/21) If[26199] (! (|| (|| (= value Infinity) (= value -Infinity)) (= value NaN)))
  [26200] (27075/18) If[26200] (= value false)
  [26201] (27093/23) Normal[26201] throw TypeError
  [26202] (27095/24) Normal[26202] let __x9__ = true
  [26203] Exit[26203]
  [26204] (27096/24) Normal[26204] __x9__ = (= (typeof value) Object)
  [26205] (27061/11) Call[26205] app __x6__ = (ToString value)
  [26206] (27081/19) Normal[26206] return __x7__
  [26207] (27087/21) Call[26207] app __x8__ = (ToString value)
  [26208] (27066/15) Normal[26208] value = value.BigIntData
  [26209] (27100/24) Normal[26209] __x9__ = (= __x10__ false)
  [26210] (27073/17) Normal[26210] return "true"
  [26211] (27052/6) Normal[26211] value = [? __x4__]
  [26212] (27108/26) Call[26212] app __x12__ = (SerializeJSONArray state value)
  [26213] (27109/26) Normal[26213] return [? __x12__]
  [26214] (27088/21) Normal[26214] return [! __x8__]
  [26215] (27106/26) If[26215] (= isArray true)
  [26216] (27111/27) Call[26216] app __x13__ = (SerializeJSONObject state value)
  [26217] (27062/11) Normal[26217] value = [? __x6__]
  [26218] (27058/9) Normal[26218] value = [? __x5__]
  [26219] (27080/19) Call[26219] app __x7__ = (QuoteJSONString value)
Algo: Set [2309]
  [26220] Entry[26220]
  [26221] (27116/0) Normal[26221] assert (= (typeof O) Object)
  [26222] (27120/3) Call[26222] app __x1__ = (O.Set O P V O)
  [26223] (27121/3) Normal[26223] let success = [? __x1__]
  [26224] (27117/1) Call[26224] app __x0__ = (IsPropertyKey P)
  [26225] (27122/4) If[26225] (&& (= success false) (= Throw true))
  [26226] (27125/5) Normal[26226] return success
  [26227] Exit[26227]
  [26228] (27118/1) Normal[26228] assert (= __x0__ true)
  [26229] (27123/4) Normal[26229] throw TypeError
  [26230] (27119/2) Normal[26230] assert (= (typeof Throw) Boolean)
Algo: SetDefaultGlobalBindings [2310]
  [26231] Entry[26231]
  [26232] (27127/0) Normal[26232] let global = realmRec.GlobalObject
  [26233] (27132/1) Normal[26233] let name = __keys__[__i__]
  [26234] (27133/1) Normal[26234] let desc = GLOBAL.SubMap[name]
  [26235] (27136/1) Normal[26235] global.SubMap.globalThis.Value = global
  [26236] (27137/5) Normal[26236] return global
  [26237] (27128/1) Normal[26237] let __keys__ = (map-keys GLOBAL.SubMap)
  [26238] (27134/1) Normal[26238] global.SubMap[name] = GLOBAL.SubMap[name]
  [26239] LoopCont[26239]
  [26240] (27130/1) Loop[26240] (< __i__ __keys__.length)
  [26241] (27129/1) Normal[26241] let __i__ = 0i
  [26242] (27135/1) Normal[26242] __i__ = (+ __i__ 1i)
  [26243] Exit[26243]
Algo: SetFunctionLength [2311]
  [26244] Entry[26244]
  [26245] (27139/1) Call[26245] app __x0__ = (DefinePropertyOrThrow F "length" (new PropertyDescriptor("Value" -> length, "Writable" -> false, "Enumerable" -> false, "Configurable" -> true)))
  [26246] (27140/1) Normal[26246] return [! __x0__]
  [26247] Exit[26247]
Algo: SetFunctionName [2312]
  [26248] Entry[26248]
  [26249] (27142/1) Normal[26249] assert (|| (= (typeof name) Symbol) (= (typeof name) String))
  [26250] (27147/5) Normal[26250] name = ""
  [26251] (27150/7) If[26251] (! (= F.InitialName absent))
  [26252] (27155/10) Normal[26252] name = (+ (+ prefix " ") name)
  [26253] (27156/11) If[26253] (! (= F.InitialName absent))
  [26254] (27143/3) If[26254] (= (typeof name) Symbol)
  [26255] (27148/5) Normal[26255] name = (+ (+ "[" description) "]")
  [26256] (27153/9) If[26256] (! (= prefix absent))
  [26257] (27160/13) Call[26257] app __x0__ = (DefinePropertyOrThrow F "name" (new PropertyDescriptor("Value" -> name, "Writable" -> false, "Enumerable" -> false, "Configurable" -> true)))
  [26258] (27161/13) Normal[26258] return [! __x0__]
  [26259] Exit[26259]
  [26260] (27145/4) Normal[26260] let description = name.Description
  [26261] (27151/8) Normal[26261] F.InitialName = name
  [26262] (27146/5) If[26262] (= description undefined)
Algo: SetImmutablePrototype [2313]
  [26263] Entry[26263]
  [26264] (27163/1) Call[26264] app __x0__ = (O.GetPrototypeOf O)
  [26265] (27167/2) Normal[26265] return true
  [26266] (27169/3) Normal[26266] return false
  [26267] (27164/1) Normal[26267] let current = [? __x0__]
  [26268] Exit[26268]
  [26269] (27165/2) Call[26269] app __x1__ = (SameValue V current)
  [26270] (27166/2) If[26270] (= __x1__ true)
Algo: SetIntegrityLevel [2314]
  [26271] Entry[26271]
  [26272] (27171/0) Normal[26272] assert (= (typeof O) Object)
  [26273] (27175/3) If[26273] (= status false)
  [26274] (27176/3) Normal[26274] return false
  [26275] (27178/4) Call[26275] app __x1__ = (O.OwnPropertyKeys O)
  [26276] (27182/6) Normal[26276] let __x2__ = keys
  [26277] (27183/6) Normal[26277] let __x3__ = 0i
  [26278] (27187/6) Normal[26278] __x3__ = (+ __x3__ 1i)
  [26279] (27188/7) Call[26279] app __x4__ = (DefinePropertyOrThrow O k (new PropertyDescriptor("Configurable" -> false)))
  [26280] (27172/1) Normal[26280] assert (|| (= level ~sealed~) (= level ~frozen~))
  [26281] (27180/5) If[26281] (= level ~sealed~)
  [26282] (27191/9) Normal[26282] assert (= level ~frozen~)
  [26283] (27186/6) Normal[26283] let k = __x2__[__x3__]
  [26284] (27173/2) Call[26284] app __x0__ = (O.PreventExtensions O)
  [26285] (27184/6) Loop[26285] (< __x3__ __x2__.length)
  [26286] (27209/18) Normal[26286] return true
  [26287] (27179/4) Normal[26287] let keys = [? __x1__]
  [26288] (27174/2) Normal[26288] let status = [? __x0__]
  [26289] (27192/10) Normal[26289] let __x5__ = keys
  [26290] (27189/7) Normal[26290] [? __x4__]
  [26291] (27198/11) Call[26291] app __x7__ = (O.GetOwnProperty O k)
  [26292] (27199/11) Normal[26292] let currentDesc = [? __x7__]
  [26293] (27200/12) If[26293] (! (= currentDesc undefined))
  [26294] (27193/10) Normal[26294] let __x6__ = 0i
  [26295] (27194/10) Loop[26295] (< __x6__ __x5__.length)
  [26296] (27204/14) Normal[26296] let desc = (new PropertyDescriptor("Configurable" -> false))
  [26297] (27206/17) Call[26297] app __x9__ = (DefinePropertyOrThrow O k desc)
  [26298] (27203/13) If[26298] (= __x8__ true)
  [26299] (27205/13) Normal[26299] let desc = (new PropertyDescriptor("Configurable" -> false, "Writable" -> false))
  [26300] (27196/10) Normal[26300] let k = __x5__[__x6__]
  [26301] LoopCont[26301]
  [26302] LoopCont[26302]
  [26303] (27207/17) Normal[26303] [? __x9__]
  [26304] Exit[26304]
  [26305] (27197/10) Normal[26305] __x6__ = (+ __x6__ 1i)
  [26306] (27202/13) Call[26306] app __x8__ = (IsAccessorDescriptor currentDesc)
Algo: SetRealmGlobalObject [2315]
  [26307] Entry[26307]
  [26308] (27211/0) If[26308] (= globalObj undefined)
  [26309] (27217/3) Normal[26309] assert (= (typeof globalObj) Object)
  [26310] (27218/4) If[26310] (= thisValue undefined)
  [26311] (27223/6) Normal[26311] let newGlobalEnv = __x1__
  [26312] (27224/7) Normal[26312] realmRec.GlobalEnv = newGlobalEnv
  [26313] (27213/1) Normal[26313] let intrinsics = realmRec.Intrinsics
  [26314] (27219/4) Normal[26314] thisValue = globalObj
  [26315] (27221/5) Normal[26315] realmRec.GlobalObject = globalObj
  [26316] (27222/6) Call[26316] app __x1__ = (NewGlobalEnvironment globalObj thisValue)
  [26317] (27214/2) Call[26317] app __x0__ = (OrdinaryObjectCreate intrinsics["%Object.prototype%"])
  [26318] (27225/8) Normal[26318] return realmRec
  [26319] Exit[26319]
  [26320] (27215/2) Normal[26320] globalObj = [! __x0__]
Algo: SetTypedArrayFromArrayLike [2316]
  [26321] Entry[26321]
  [26322] (27227/1) Normal[26322] let targetBuffer = target.ViewedArrayBuffer
  [26323] (27232/3) Normal[26323] let targetLength = target.ArrayLength
  [26324] (27233/4) Normal[26324] let targetName = target.TypedArrayName
  [26325] (27237/8) Call[26325] app __x1__ = (ToObject source)
  [26326] (27238/8) Normal[26326] let src = [? __x1__]
  [26327] (27241/10) If[26327] (= targetOffset Infinity)
  [26328] (27242/10) Normal[26328] throw RangeError
  [26329] (27244/11) If[26329] (< targetLength (+ srcLength targetOffset))
  [26330] (27228/2) Call[26330] app __x0__ = (IsDetachedBuffer targetBuffer)
  [26331] (27234/5) Normal[26331] ??? "Let id:{targetElementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for id:{targetName} ."
  [26332] (27236/7) Normal[26332] let targetByteOffset = target.ByteOffset
  [26333] (27240/9) Normal[26333] let srcLength = [? __x2__]
  [26334] (27229/2) If[26334] (= __x0__ true)
  [26335] (27239/9) Call[26335] app __x2__ = (LengthOfArrayLike src)
  [26336] (27235/6) Normal[26336] ??? "Let id:{targetType} be the Element Type value in link:{table-the-typedarray-constructors} for id:{targetName} ."
  [26337] (27247/12) Normal[26337] let targetByteIndex = (+ (* targetOffset targetElementSize) targetByteOffset)
  [26338] (27248/13) Normal[26338] let k = 0i
  [26339] (27230/2) Normal[26339] throw TypeError
  [26340] (27254/17) Call[26340] app __x4__ = (Get src Pk)
  [26341] (27255/17) Normal[26341] let value = [? __x4__]
  [26342] (27270/23) Normal[26342] targetByteIndex = (+ targetByteIndex targetElementSize)
  [26343] LoopCont[26343]
  [26344] (27256/18) If[26344] (= target.ContentType ~BigInt~)
  [26345] (27249/14) Normal[26345] let limit = (* (+ targetByteIndex targetElementSize) srcLength)
  [26346] (27250/15) Loop[26346] (< targetByteIndex limit)
  [26347] (27261/19) Call[26347] app __x6__ = (ToNumber value)
  [26348] (27262/19) Normal[26348] value = [? __x6__]
  [26349] (27252/16) Call[26349] app __x3__ = (ToString k)
  [26350] Exit[26350]
  [26351] (27265/20) Normal[26351] throw TypeError
  [26352] (27267/21) Call[26352] app __x8__ = (SetValueInBuffer targetBuffer targetByteIndex targetType value true ~Unordered~)
  [26353] (27259/18) Normal[26353] value = [? __x5__]
  [26354] (27263/20) Call[26354] app __x7__ = (IsDetachedBuffer targetBuffer)
  [26355] (27245/11) Normal[26355] throw RangeError
  [26356] (27264/20) If[26356] (= __x7__ true)
  [26357] (27268/21) Normal[26357] __x8__
  [26358] (27253/16) Normal[26358] let Pk = [! __x3__]
  [26359] (27258/18) Call[26359] app __x5__ = (ToBigInt value)
  [26360] (27269/22) Normal[26360] k = (+ k 1i)
Algo: SetTypedArrayFromTypedArray [2317]
  [26361] Entry[26361]
  [26362] (27272/1) Normal[26362] let targetBuffer = target.ViewedArrayBuffer
  [26363] (27277/3) Normal[26363] let targetLength = target.ArrayLength
  [26364] (27278/4) Normal[26364] let srcBuffer = source.ViewedArrayBuffer
  [26365] (27273/2) Call[26365] app __x0__ = (IsDetachedBuffer targetBuffer)
  [26366] (27279/5) Call[26366] app __x1__ = (IsDetachedBuffer srcBuffer)
  [26367] (27274/2) If[26367] (= __x0__ true)
  [26368] (27280/5) If[26368] (= __x1__ true)
  [26369] (27281/5) Normal[26369] throw TypeError
  [26370] (27283/6) Normal[26370] let targetName = target.TypedArrayName
  [26371] (27275/2) Normal[26371] throw TypeError
  [26372] (27284/7) Normal[26372] ??? "Let id:{targetType} be the Element Type value in link:{table-the-typedarray-constructors} for id:{targetName} ."
  [26373] (27335/41) Normal[26373] targetByteIndex = (+ targetByteIndex targetElementSize)
  [26374] LoopCont[26374]
  [26375] (27320/31) Loop[26375] (< targetByteIndex limit)
  [26376] (27322/32) Call[26376] app __x6__ = (GetValueFromBuffer srcBuffer srcByteIndex ~Uint8~ true ~Unordered~)
  [26377] Exit[26377]
  [26378] (27299/17) Normal[26378] throw TypeError
  [26379] (27301/18) Call[26379] app __x2__ = (IsSharedArrayBuffer srcBuffer)
  [26380] (27315/25) Normal[26380] let srcByteIndex = 0i
  [26381] (27317/27) Normal[26381] let targetByteIndex = (+ (* targetOffset targetElementSize) targetByteOffset)
  [26382] (27302/18) Call[26382] app __x3__ = (IsSharedArrayBuffer targetBuffer)
  [26383] (27331/38) Normal[26383] let value = __x8__
  [26384] (27332/39) Call[26384] app __x9__ = (SetValueInBuffer targetBuffer targetByteIndex targetType value true ~Unordered~)
  [26385] (27287/10) Normal[26385] let srcName = source.TypedArrayName
  [26386] (27288/11) Normal[26386] ??? "Let id:{srcType} be the Element Type value in link:{table-the-typedarray-constructors} for id:{srcName} ."
  [26387] (27293/15) Normal[26387] throw RangeError
  [26388] (27295/16) If[26388] (< targetLength (+ srcLength targetOffset))
  [26389] (27325/33) Normal[26389] __x7__
  [26390] (27326/34) Normal[26390] srcByteIndex = (+ srcByteIndex 1i)
  [26391] (27328/29) Loop[26391] (< targetByteIndex limit)
  [26392] (27305/19) Normal[26392] let same = true
  [26393] (27310/21) If[26393] (= same true)
  [26394] (27296/16) Normal[26394] throw RangeError
  [26395] (27298/17) If[26395] (! (== target.ContentType source.ContentType))
  [26396] (27312/22) Normal[26396] let srcByteLength = source.ByteLength
  [26397] (27316/21) Normal[26397] let srcByteIndex = srcByteOffset
  [26398] (27304/19) If[26398] (= srcBuffer.ArrayBufferData targetBuffer.ArrayBufferData)
  [26399] (27306/19) Normal[26399] let same = false
  [26400] (27333/39) Normal[26400] __x9__
  [26401] (27286/9) Normal[26401] let targetByteOffset = target.ByteOffset
  [26402] (27319/29) If[26402] (= srcType targetType)
  [26403] (27324/33) Call[26403] app __x7__ = (SetValueInBuffer targetBuffer targetByteIndex ~Uint8~ value true ~Unordered~)
  [26404] (27290/13) Normal[26404] let srcLength = source.ArrayLength
  [26405] (27291/14) Normal[26405] let srcByteOffset = source.ByteOffset
  [26406] (27309/20) Normal[26406] let same = __x4__
  [26407] (27313/23) Call[26407] app __x5__ = (CloneArrayBuffer srcBuffer srcByteOffset srcByteLength INTRINSICS["%ArrayBuffer%"])
  [26408] (27323/32) Normal[26408] let value = __x6__
  [26409] (27303/18) If[26409] (&& (= __x2__ true) (= __x3__ true))
  [26410] (27308/20) Call[26410] app __x4__ = (SameValue srcBuffer targetBuffer)
  [26411] (27285/8) Normal[26411] ??? "Let id:{targetElementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for id:{targetName} ."
  [26412] (27334/40) Normal[26412] srcByteIndex = (+ srcByteIndex srcElementSize)
  [26413] LoopCont[26413]
  [26414] (27318/28) Normal[26414] let limit = (* (+ targetByteIndex targetElementSize) srcLength)
  [26415] (27314/23) Normal[26415] srcBuffer = [? __x5__]
  [26416] (27327/35) Normal[26416] targetByteIndex = (+ targetByteIndex 1i)
  [26417] (27292/15) If[26417] (= targetOffset Infinity)
  [26418] (27330/38) Call[26418] app __x8__ = (GetValueFromBuffer srcBuffer srcByteIndex srcType true ~Unordered~)
  [26419] (27289/12) Normal[26419] ??? "Let id:{srcElementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for id:{srcName} ."
Algo: SetValueInBuffer [2318]
  [26420] Entry[26420]
  [26421] (27337/0) Call[26421] app __x0__ = (IsDetachedBuffer arrayBuffer)
  [26422] (27341/5) If[26422] (= isLittleEndian absent)
  [26423] (27342/5) Normal[26423] isLittleEndian = AGENT.LittleEndian
  [26424] (27344/6) Call[26424] app __x1__ = (NumericToRawBytes type value isLittleEndian)
  [26425] (27347/12) Normal[26425] ??? "Else , store the individual bytes of id:{rawBytes} into id:{block} , starting at id:{block} [ id:{byteIndex} ] ."
  [26426] (27348/13) Normal[26426] return undefined
  [26427] (27338/0) Normal[26427] assert (= __x0__ false)
  [26428] (27346/7) Normal[26428] ??? "If IsSharedArrayBuffer ( id:{arrayBuffer} ) is value:{true} , then in:{} out:{}"
  [26429] (27339/3) Normal[26429] let block = arrayBuffer.ArrayBufferData
  [26430] (27345/6) Normal[26430] let rawBytes = __x1__
  [26431] (27340/4) Normal[26431] ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for Element Type id:{type} ."
  [26432] Exit[26432]
Algo: SetViewValue [2319]
  [26433] Entry[26433]
  [26434] (27350/0) Call[26434] app __x0__ = (RequireInternalSlot view "DataView")
  [26435] (27354/2) Normal[26435] let getIndex = [? __x1__]
  [26436] (27355/3) Call[26436] app __x2__ = (IsBigIntElementType type)
  [26437] (27361/4) Call[26437] app __x4__ = (ToNumber value)
  [26438] (27362/4) Normal[26438] let numberValue = [? __x4__]
  [26439] (27365/6) Normal[26439] let buffer = view.ViewedArrayBuffer
  [26440] (27366/7) Call[26440] app __x6__ = (IsDetachedBuffer buffer)
  [26441] (27372/10) Normal[26441] ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for Element Type id:{type} ."
  [26442] (27373/11) If[26442] (< viewSize (+ getIndex elementSize))
  [26443] (27351/0) Normal[26443] [? __x0__]
  [26444] (27356/3) If[26444] (= [! __x2__] true)
  [26445] (27374/11) Normal[26445] throw RangeError
  [26446] (27376/12) Normal[26446] let bufferIndex = (+ getIndex viewOffset)
  [26447] (27359/3) Normal[26447] let numberValue = [? __x3__]
  [26448] (27363/5) Call[26448] app __x5__ = (ToBoolean isLittleEndian)
  [26449] (27364/5) Normal[26449] isLittleEndian = [! __x5__]
  [26450] (27352/1) Normal[26450] assert (! (= view.ViewedArrayBuffer absent))
  [26451] (27368/7) Normal[26451] throw TypeError
  [26452] (27370/8) Normal[26452] let viewOffset = view.ByteOffset
  [26453] (27358/3) Call[26453] app __x3__ = (ToBigInt value)
  [26454] (27353/2) Call[26454] app __x1__ = (ToIndex requestIndex)
  [26455] (27371/9) Normal[26455] let viewSize = view.ByteLength
  [26456] (27367/7) If[26456] (= __x6__ true)
  [26457] (27377/13) Call[26457] app __x7__ = (SetValueInBuffer buffer bufferIndex type numberValue false ~Unordered~ isLittleEndian)
  [26458] (27378/13) Normal[26458] return __x7__
  [26459] Exit[26459]
Algo: SharedDataBlockEventSet [2320]
  [26460] Entry[26460]
  [26461] (27380/0) Normal[26461] let events = (new [])
  [26462] (27384/1) Loop[26462] (< __x2__ __x1__.length)
  [26463] (27386/1) Normal[26463] let E = __x1__[__x2__]
  [26464] (27391/3) Normal[26464] return events
  [26465] LoopCont[26465]
  [26466] (27381/1) Call[26466] app __x0__ = (EventSet execution)
  [26467] (27387/1) Normal[26467] __x2__ = (+ __x2__ 1i)
  [26468] (27389/2) Normal[26468] append E -> events
  [26469] (27382/1) Normal[26469] let __x1__ = __x0__
  [26470] (27388/2) If[26470] (|| (|| (is-instance-of E ReadSharedMemory) (is-instance-of E WriteSharedMemory)) (is-instance-of E ReadModifyWriteSharedMemory))
  [26471] (27383/1) Normal[26471] let __x2__ = 0i
  [26472] Exit[26472]
Algo: ShiftExpression[1,0].AssignmentTargetType [2321]
  [26473] Entry[26473]
  [26474] (27392/0) Normal[26474] return ~invalid~
  [26475] Exit[26475]
Algo: ShiftExpression[1,0].Evaluation [2322]
  [26476] Entry[26476]
  [26477] (27394/0) Call[26477] app __x0__ = (EvaluateStringOrNumericBinaryExpression ShiftExpression "<<" AdditiveExpression)
  [26478] (27395/0) Normal[26478] return [? __x0__]
  [26479] Exit[26479]
Algo: ShiftExpression[1,0].HasCallInTailPosition [2323]
  [26480] Entry[26480]
  [26481] (27396/0) Normal[26481] return false
  [26482] Exit[26482]
Algo: ShiftExpression[1,0].IsFunctionDefinition [2324]
  [26483] Entry[26483]
  [26484] (27397/0) Normal[26484] return false
  [26485] Exit[26485]
Algo: ShiftExpression[2,0].AssignmentTargetType [2325]
  [26486] Entry[26486]
  [26487] (27398/0) Normal[26487] return ~invalid~
  [26488] Exit[26488]
Algo: ShiftExpression[2,0].Evaluation [2326]
  [26489] Entry[26489]
  [26490] (27400/0) Call[26490] app __x0__ = (EvaluateStringOrNumericBinaryExpression ShiftExpression ">>" AdditiveExpression)
  [26491] (27401/0) Normal[26491] return [? __x0__]
  [26492] Exit[26492]
Algo: ShiftExpression[2,0].HasCallInTailPosition [2327]
  [26493] Entry[26493]
  [26494] (27402/0) Normal[26494] return false
  [26495] Exit[26495]
Algo: ShiftExpression[2,0].IsFunctionDefinition [2328]
  [26496] Entry[26496]
  [26497] (27403/0) Normal[26497] return false
  [26498] Exit[26498]
Algo: ShiftExpression[3,0].AssignmentTargetType [2329]
  [26499] Entry[26499]
  [26500] (27404/0) Normal[26500] return ~invalid~
  [26501] Exit[26501]
Algo: ShiftExpression[3,0].Evaluation [2330]
  [26502] Entry[26502]
  [26503] (27406/0) Call[26503] app __x0__ = (EvaluateStringOrNumericBinaryExpression ShiftExpression ">>>" AdditiveExpression)
  [26504] (27407/0) Normal[26504] return [? __x0__]
  [26505] Exit[26505]
Algo: ShiftExpression[3,0].HasCallInTailPosition [2331]
  [26506] Entry[26506]
  [26507] (27408/0) Normal[26507] return false
  [26508] Exit[26508]
Algo: ShiftExpression[3,0].IsFunctionDefinition [2332]
  [26509] Entry[26509]
  [26510] (27409/0) Normal[26510] return false
  [26511] Exit[26511]
Algo: SingleNameBinding[0,0].BoundNames [2333]
  [26512] Entry[26512]
  [26513] (27411)Normal[26513] let SingleNameBinding = this
  [26514] (27412/0) Call[26514] access __x0__ = (BindingIdentifier "BoundNames")
  [26515] (27413/0) Normal[26515] return __x0__
  [26516] Exit[26516]
Algo: SingleNameBinding[0,0].ContainsExpression [2334]
  [26517] Entry[26517]
  [26518] (27415)Normal[26518] let SingleNameBinding = this
  [26519] (27416/0) Normal[26519] return false
  [26520] Exit[26520]
Algo: SingleNameBinding[0,0].HasInitializer [2335]
  [26521] Entry[26521]
  [26522] (27418)Normal[26522] let SingleNameBinding = this
  [26523] (27419/0) Normal[26523] return false
  [26524] Exit[26524]
Algo: SingleNameBinding[0,0].IsSimpleParameterList [2336]
  [26525] Entry[26525]
  [26526] (27421)Normal[26526] let SingleNameBinding = this
  [26527] (27422/0) Normal[26527] return true
  [26528] Exit[26528]
Algo: SingleNameBinding[0,0].IteratorBindingInitialization [2337]
  [26529] Entry[26529]
  [26530] (27424)Normal[26530] let SingleNameBinding = this
  [26531] (27428/1) Normal[26531] let lhs = [? __x1__]
  [26532] (27429/2) If[26532] (= iteratorRecord.Done false)
  [26533] (27434/4) If[26533] __x3__
  [26534] (27435/4) Normal[26534] iteratorRecord.Done = true
  [26535] (27437/5) Normal[26535] [? next]
  [26536] (27439/6) Normal[26536] iteratorRecord.Done = true
  [26537] (27449/11) If[26537] (= iteratorRecord.Done true)
  [26538] (27425/0) Call[26538] access __x0__ = (BindingIdentifier "StringValue")
  [26539] (27431/3) Call[26539] app __x2__ = (IteratorStep iteratorRecord)
  [26540] (27433/4) Call[26540] app __x3__ = (IsAbruptCompletion next)
  [26541] (27438/6) If[26541] (= next false)
  [26542] (27441/8) Call[26542] app __x4__ = (IteratorValue next)
  [26543] (27426/0) Normal[26543] let bindingId = __x0__
  [26544] (27432/3) Normal[26544] let next = __x2__
  [26545] (27444/9) If[26545] __x5__
  [26546] (27445/9) Normal[26546] iteratorRecord.Done = true
  [26547] (27447/10) Normal[26547] [? v]
  [26548] (27427/1) Call[26548] app __x1__ = (ResolveBinding bindingId environment)
  [26549] (27442/8) Normal[26549] let v = __x4__
  [26550] (27454/13) Call[26550] app __x6__ = (IsAnonymousFunctionDefinition Initializer)
  [26551] (27455/13) If[26551] (= __x6__ true)
  [26552] (27457/14) Call[26552] access __x7__ = (Initializer "NamedEvaluation" bindingId)
  [26553] (27460/16) Call[26553] access __x8__ = (Initializer "Evaluation")
  [26554] (27461/16) Normal[26554] let defaultValue = __x8__
  [26555] (27462/17) Call[26555] app __x9__ = (GetValue defaultValue)
  [26556] (27450/11) Normal[26556] let v = undefined
  [26557] (27452/12) If[26557] (&& (! (= Initializer absent)) (= v undefined))
  [26558] (27467/18) Call[26558] app __x10__ = (PutValue lhs v)
  [26559] (27468/18) Normal[26559] return [? __x10__]
  [26560] (27443/9) Call[26560] app __x5__ = (IsAbruptCompletion v)
  [26561] (27465/18) If[26561] (= environment undefined)
  [26562] (27470/19) Call[26562] app __x11__ = (InitializeReferencedBinding lhs v)
  [26563] (27458/14) Normal[26563] v = __x7__
  [26564] (27471/19) Normal[26564] return __x11__
  [26565] (27463/17) Normal[26565] v = [? __x9__]
  [26566] Exit[26566]
Algo: SingleNameBinding[0,0].KeyedBindingInitialization [2338]
  [26567] Entry[26567]
  [26568] (27473)Normal[26568] let SingleNameBinding = this
  [26569] (27477/1) Normal[26569] let lhs = [? __x1__]
  [26570] (27478/2) Call[26570] app __x2__ = (GetV value propertyName)
  [26571] (27483/4) If[26571] (= __x3__ true)
  [26572] (27485/5) Call[26572] access __x4__ = (Initializer "NamedEvaluation" bindingId)
  [26573] (27488/7) Call[26573] access __x5__ = (Initializer "Evaluation")
  [26574] (27489/7) Normal[26574] let defaultValue = __x5__
  [26575] (27490/8) Call[26575] app __x6__ = (GetValue defaultValue)
  [26576] (27498/10) Call[26576] app __x8__ = (InitializeReferencedBinding lhs v)
  [26577] (27499/10) Normal[26577] return __x8__
  [26578] (27474/0) Call[26578] access __x0__ = (BindingIdentifier "StringValue")
  [26579] (27479/2) Normal[26579] let v = [? __x2__]
  [26580] Exit[26580]
  [26581] (27482/4) Call[26581] app __x3__ = (IsAnonymousFunctionDefinition Initializer)
  [26582] (27475/0) Normal[26582] let bindingId = __x0__
  [26583] (27493/9) If[26583] (= environment undefined)
  [26584] (27495/9) Call[26584] app __x7__ = (PutValue lhs v)
  [26585] (27486/5) Normal[26585] v = __x4__
  [26586] (27480/3) If[26586] (&& (! (= Initializer absent)) (= v undefined))
  [26587] (27476/1) Call[26587] app __x1__ = (ResolveBinding bindingId environment)
  [26588] (27496/9) Normal[26588] return [? __x7__]
  [26589] (27491/8) Normal[26589] v = [? __x6__]
Algo: SingleNameBinding[0,1].BoundNames [2339]
  [26590] Entry[26590]
  [26591] (27501)Normal[26591] let SingleNameBinding = this
  [26592] (27502/0) Call[26592] access __x0__ = (BindingIdentifier "BoundNames")
  [26593] (27503/0) Normal[26593] return __x0__
  [26594] Exit[26594]
Algo: SingleNameBinding[0,1].ContainsExpression [2340]
  [26595] Entry[26595]
  [26596] (27505)Normal[26596] let SingleNameBinding = this
  [26597] (27506/0) Normal[26597] return true
  [26598] Exit[26598]
Algo: SingleNameBinding[0,1].HasInitializer [2341]
  [26599] Entry[26599]
  [26600] (27508)Normal[26600] let SingleNameBinding = this
  [26601] (27509/0) Normal[26601] return true
  [26602] Exit[26602]
Algo: SingleNameBinding[0,1].IsSimpleParameterList [2342]
  [26603] Entry[26603]
  [26604] (27511)Normal[26604] let SingleNameBinding = this
  [26605] (27512/0) Normal[26605] return false
  [26606] Exit[26606]
Algo: SingleNameBinding[0,1].IteratorBindingInitialization [2343]
  [26607] Entry[26607]
  [26608] (27514)Normal[26608] let SingleNameBinding = this
  [26609] (27518/1) Normal[26609] let lhs = [? __x1__]
  [26610] (27519/2) If[26610] (= iteratorRecord.Done false)
  [26611] (27524/4) If[26611] __x3__
  [26612] (27525/4) Normal[26612] iteratorRecord.Done = true
  [26613] (27527/5) Normal[26613] [? next]
  [26614] (27529/6) Normal[26614] iteratorRecord.Done = true
  [26615] (27539/11) If[26615] (= iteratorRecord.Done true)
  [26616] (27515/0) Call[26616] access __x0__ = (BindingIdentifier "StringValue")
  [26617] (27521/3) Call[26617] app __x2__ = (IteratorStep iteratorRecord)
  [26618] (27523/4) Call[26618] app __x3__ = (IsAbruptCompletion next)
  [26619] (27528/6) If[26619] (= next false)
  [26620] (27531/8) Call[26620] app __x4__ = (IteratorValue next)
  [26621] (27516/0) Normal[26621] let bindingId = __x0__
  [26622] (27522/3) Normal[26622] let next = __x2__
  [26623] (27534/9) If[26623] __x5__
  [26624] (27535/9) Normal[26624] iteratorRecord.Done = true
  [26625] (27537/10) Normal[26625] [? v]
  [26626] (27517/1) Call[26626] app __x1__ = (ResolveBinding bindingId environment)
  [26627] (27532/8) Normal[26627] let v = __x4__
  [26628] (27544/13) Call[26628] app __x6__ = (IsAnonymousFunctionDefinition Initializer)
  [26629] (27545/13) If[26629] (= __x6__ true)
  [26630] (27547/14) Call[26630] access __x7__ = (Initializer "NamedEvaluation" bindingId)
  [26631] (27550/16) Call[26631] access __x8__ = (Initializer "Evaluation")
  [26632] (27551/16) Normal[26632] let defaultValue = __x8__
  [26633] (27552/17) Call[26633] app __x9__ = (GetValue defaultValue)
  [26634] (27540/11) Normal[26634] let v = undefined
  [26635] (27542/12) If[26635] (&& (! (= Initializer absent)) (= v undefined))
  [26636] (27557/18) Call[26636] app __x10__ = (PutValue lhs v)
  [26637] (27558/18) Normal[26637] return [? __x10__]
  [26638] (27533/9) Call[26638] app __x5__ = (IsAbruptCompletion v)
  [26639] (27555/18) If[26639] (= environment undefined)
  [26640] (27560/19) Call[26640] app __x11__ = (InitializeReferencedBinding lhs v)
  [26641] (27548/14) Normal[26641] v = __x7__
  [26642] (27561/19) Normal[26642] return __x11__
  [26643] (27553/17) Normal[26643] v = [? __x9__]
  [26644] Exit[26644]
Algo: SingleNameBinding[0,1].KeyedBindingInitialization [2344]
  [26645] Entry[26645]
  [26646] (27563)Normal[26646] let SingleNameBinding = this
  [26647] (27567/1) Normal[26647] let lhs = [? __x1__]
  [26648] (27568/2) Call[26648] app __x2__ = (GetV value propertyName)
  [26649] (27573/4) If[26649] (= __x3__ true)
  [26650] (27575/5) Call[26650] access __x4__ = (Initializer "NamedEvaluation" bindingId)
  [26651] (27578/7) Call[26651] access __x5__ = (Initializer "Evaluation")
  [26652] (27579/7) Normal[26652] let defaultValue = __x5__
  [26653] (27580/8) Call[26653] app __x6__ = (GetValue defaultValue)
  [26654] (27588/10) Call[26654] app __x8__ = (InitializeReferencedBinding lhs v)
  [26655] (27589/10) Normal[26655] return __x8__
  [26656] (27564/0) Call[26656] access __x0__ = (BindingIdentifier "StringValue")
  [26657] (27569/2) Normal[26657] let v = [? __x2__]
  [26658] Exit[26658]
  [26659] (27572/4) Call[26659] app __x3__ = (IsAnonymousFunctionDefinition Initializer)
  [26660] (27565/0) Normal[26660] let bindingId = __x0__
  [26661] (27583/9) If[26661] (= environment undefined)
  [26662] (27585/9) Call[26662] app __x7__ = (PutValue lhs v)
  [26663] (27576/5) Normal[26663] v = __x4__
  [26664] (27570/3) If[26664] (&& (! (= Initializer absent)) (= v undefined))
  [26665] (27566/1) Call[26665] app __x1__ = (ResolveBinding bindingId environment)
  [26666] (27586/9) Normal[26666] return [? __x7__]
  [26667] (27581/8) Normal[26667] v = [? __x6__]
Algo: SortCompare [2345]
  [26668] Entry[26668]
  [26669] (27591/0) If[26669] (&& (= x undefined) (= y undefined))
  [26670] (27597/2) If[26670] (= y undefined)
  [26671] (27598/2) Normal[26671] return -1i
  [26672] (27600/3) If[26672] (! (= comparefn undefined))
  [26673] (27604/4) Normal[26673] let v = [? __x1__]
  [26674] (27605/5) If[26674] (= v NaN)
  [26675] (27610/7) Call[26675] app __x2__ = (ToString x)
  [26676] (27611/7) Normal[26676] let xString = [? __x2__]
  [26677] (27616/10) If[26677] (= xSmaller true)
  [26678] (27617/10) Normal[26678] return -1i
  [26679] (27619/11) Call[26679] app __x5__ = (AbstractRelationalComparison yString xString)
  [26680] (27592/0) Normal[26680] return 0i
  [26681] (27594/1) If[26681] (= x undefined)
  [26682] (27603/4) Call[26682] app __x1__ = (ToNumber [? __x0__])
  [26683] (27608/6) Normal[26683] return v
  [26684] (27613/8) Normal[26684] let yString = [? __x3__]
  [26685] (27614/9) Call[26685] app __x4__ = (AbstractRelationalComparison xString yString)
  [26686] (27620/11) Normal[26686] let ySmaller = __x5__
  [26687] (27606/5) Normal[26687] return 0i
  [26688] (27602/4) Call[26688] app __x0__ = (Call comparefn undefined (new [x, y]))
  [26689] (27595/1) Normal[26689] return 1i
  [26690] (27615/9) Normal[26690] let xSmaller = __x4__
  [26691] (27612/8) Call[26691] app __x3__ = (ToString y)
  [26692] (27621/12) If[26692] (= ySmaller true)
  [26693] (27622/12) Normal[26693] return 1i
  [26694] (27624/13) Normal[26694] return 0i
  [26695] Exit[26695]
Algo: SpeciesConstructor [2346]
  [26696] Entry[26696]
  [26697] (27626/0) Normal[26697] assert (= (typeof O) Object)
  [26698] (27630/2) Normal[26698] return defaultConstructor
  [26699] (27632/3) If[26699] (! (= (typeof C) Object))
  [26700] (27637/5) If[26700] (|| (= S undefined) (= S null))
  [26701] (27638/5) Normal[26701] return defaultConstructor
  [26702] (27640/6) Call[26702] app __x2__ = (IsConstructor S)
  [26703] (27642/6) Normal[26703] return S
  [26704] (27644/7) Normal[26704] throw TypeError
  [26705] (27627/1) Call[26705] app __x0__ = (Get O "constructor")
  [26706] (27633/3) Normal[26706] throw TypeError
  [26707] (27635/4) Call[26707] app __x1__ = (Get C SYMBOL_species)
  [26708] (27636/4) Normal[26708] let S = [? __x1__]
  [26709] (27641/6) If[26709] (= __x2__ true)
  [26710] (27628/1) Normal[26710] let C = [? __x0__]
  [26711] (27629/2) If[26711] (= C undefined)
  [26712] Exit[26712]
Algo: SplitMatch [2347]
  [26713] Entry[26713]
  [26714] (27646/0) Normal[26714] let r = R.length
  [26715] (27651/3) Normal[26715] ??? "If there exists an integer id:{i} between 0 ( inclusive ) and id:{r} ( exclusive ) such that the code unit at index id:{q} + id:{i} within id:{S} is different from the code unit at index id:{i} within id:{R} , return const:{not-matched} ."
  [26716] (27652/4) Normal[26716] return (+ q r)
  [26717] (27647/1) Normal[26717] let s = S.length
  [26718] Exit[26718]
  [26719] (27648/2) If[26719] (< s (+ q r))
  [26720] (27649/2) Normal[26720] return ~not-matched~
Algo: SpreadElement[0,0].ArrayAccumulation [2348]
  [26721] Entry[26721]
  [26722] (27654)Normal[26722] let SpreadElement = this
  [26723] (27658/1) Normal[26723] let spreadObj = [? __x1__]
  [26724] (27659/2) Call[26724] app __x2__ = (GetIterator spreadObj)
  [26725] (27664/4) Normal[26725] let next = [? __x3__]
  [26726] (27665/5) If[26726] (= next false)
  [26727] (27669/6) Normal[26727] let nextValue = [? __x4__]
  [26728] (27670/7) Call[26728] app __x5__ = (ToString nextIndex)
  [26729] (27655/0) Call[26729] access __x0__ = (AssignmentExpression "Evaluation")
  [26730] (27660/2) Normal[26730] let iteratorRecord = [? __x2__]
  [26731] (27663/4) Call[26731] app __x3__ = (IteratorStep iteratorRecord)
  [26732] (27668/6) Call[26732] app __x4__ = (IteratorValue next)
  [26733] (27656/0) Normal[26733] let spreadRef = __x0__
  [26734] (27672/7) Normal[26734] [! __x6__]
  [26735] (27673/8) Normal[26735] nextIndex = (+ nextIndex 1i)
  [26736] (27666/5) Normal[26736] return nextIndex
  [26737] (27661/3) Loop[26737] true
  [26738] (27657/1) Call[26738] app __x1__ = (GetValue spreadRef)
  [26739] LoopCont[26739]
  [26740] (27671/7) Call[26740] app __x6__ = (CreateDataPropertyOrThrow array [! __x5__] nextValue)
  [26741] Exit[26741]
Algo: StatementListItem[0,0].LexicallyDeclaredNames [2349]
  [26742] Entry[26742]
  [26743] (27675)Normal[26743] let StatementListItem = this
  [26744] (27680/0) Normal[26744] return __x0__
  [26745] (27682/1) Normal[26745] return (new [])
  [26746] (27676/0) If[26746] (is-instance-of Statement Statement10)
  [26747] Exit[26747]
  [26748] (27678/0) Call[26748] access LabelledStatement = (Statement "LabelledStatement")
  [26749] (27679/0) Call[26749] access __x0__ = (LabelledStatement "LexicallyDeclaredNames")
Algo: StatementListItem[0,0].LexicallyScopedDeclarations [2350]
  [26750] Entry[26750]
  [26751] (27684)Normal[26751] let StatementListItem = this
  [26752] (27689/0) Normal[26752] return __x0__
  [26753] (27691/1) Normal[26753] return (new [])
  [26754] (27685/0) If[26754] (is-instance-of Statement Statement10)
  [26755] Exit[26755]
  [26756] (27687/0) Call[26756] access LabelledStatement = (Statement "LabelledStatement")
  [26757] (27688/0) Call[26757] access __x0__ = (LabelledStatement "LexicallyScopedDeclarations")
Algo: StatementListItem[0,0].TopLevelLexicallyDeclaredNames [2351]
  [26758] Entry[26758]
  [26759] (27693)Normal[26759] let StatementListItem = this
  [26760] (27694/0) Normal[26760] return (new [])
  [26761] Exit[26761]
Algo: StatementListItem[0,0].TopLevelLexicallyScopedDeclarations [2352]
  [26762] Entry[26762]
  [26763] (27696)Normal[26763] let StatementListItem = this
  [26764] (27697/0) Normal[26764] return (new [])
  [26765] Exit[26765]
Algo: StatementListItem[0,0].TopLevelVarDeclaredNames [2353]
  [26766] Entry[26766]
  [26767] (27699)Normal[26767] let StatementListItem = this
  [26768] (27704/0) Normal[26768] return __x0__
  [26769] (27706/1) Call[26769] access __x1__ = (Statement "VarDeclaredNames")
  [26770] (27700/0) If[26770] (is-instance-of Statement Statement10)
  [26771] (27707/1) Normal[26771] return __x1__
  [26772] (27702/0) Call[26772] access LabelledStatement = (Statement "LabelledStatement")
  [26773] Exit[26773]
  [26774] (27703/0) Call[26774] access __x0__ = (Statement "TopLevelVarDeclaredNames")
Algo: StatementListItem[0,0].TopLevelVarScopedDeclarations [2354]
  [26775] Entry[26775]
  [26776] (27709)Normal[26776] let StatementListItem = this
  [26777] (27714/0) Normal[26777] return __x0__
  [26778] (27716/1) Call[26778] access __x1__ = (Statement "VarScopedDeclarations")
  [26779] (27710/0) If[26779] (is-instance-of Statement Statement10)
  [26780] (27717/1) Normal[26780] return __x1__
  [26781] (27712/0) Call[26781] access LabelledStatement = (Statement "LabelledStatement")
  [26782] Exit[26782]
  [26783] (27713/0) Call[26783] access __x0__ = (Statement "TopLevelVarScopedDeclarations")
Algo: StatementListItem[1,0].ContainsDuplicateLabels [2355]
  [26784] Entry[26784]
  [26785] (27719)Normal[26785] let StatementListItem = this
  [26786] (27720/0) Normal[26786] return false
  [26787] Exit[26787]
Algo: StatementListItem[1,0].ContainsUndefinedBreakTarget [2356]
  [26788] Entry[26788]
  [26789] (27722)Normal[26789] let StatementListItem = this
  [26790] (27723/0) Normal[26790] return false
  [26791] Exit[26791]
Algo: StatementListItem[1,0].ContainsUndefinedContinueTarget [2357]
  [26792] Entry[26792]
  [26793] (27725)Normal[26793] let StatementListItem = this
  [26794] (27726/0) Normal[26794] return false
  [26795] Exit[26795]
Algo: StatementListItem[1,0].HasCallInTailPosition [2358]
  [26796] Entry[26796]
  [26797] (27728)Normal[26797] let StatementListItem = this
  [26798] (27729/0) Normal[26798] return false
  [26799] Exit[26799]
Algo: StatementListItem[1,0].LexicallyDeclaredNames [2359]
  [26800] Entry[26800]
  [26801] (27731)Normal[26801] let StatementListItem = this
  [26802] (27732/0) Call[26802] access __x0__ = (Declaration "BoundNames")
  [26803] (27733/0) Normal[26803] return __x0__
  [26804] Exit[26804]
Algo: StatementListItem[1,0].LexicallyScopedDeclarations [2360]
  [26805] Entry[26805]
  [26806] (27735)Normal[26806] let StatementListItem = this
  [26807] (27736/0) Call[26807] access __x0__ = (Declaration "DeclarationPart")
  [26808] (27737/0) Normal[26808] return (new [__x0__])
  [26809] Exit[26809]
Algo: StatementListItem[1,0].TopLevelLexicallyDeclaredNames [2361]
  [26810] Entry[26810]
  [26811] (27739)Normal[26811] let StatementListItem = this
  [26812] (27745/2) Call[26812] access __x0__ = (Declaration "BoundNames")
  [26813] (27746/2) Normal[26813] return __x0__
  [26814] (27740/0) If[26814] (is-instance-of Declaration Declaration0)
  [26815] Exit[26815]
  [26816] (27742/0) Call[26816] access HoistableDeclaration = (Declaration "HoistableDeclaration")
  [26817] (27743/1) Normal[26817] return (new [])
Algo: StatementListItem[1,0].TopLevelLexicallyScopedDeclarations [2362]
  [26818] Entry[26818]
  [26819] (27748)Normal[26819] let StatementListItem = this
  [26820] (27754/2) Normal[26820] return (new [Declaration])
  [26821] Exit[26821]
  [26822] (27749/0) If[26822] (is-instance-of Declaration Declaration0)
  [26823] (27751/0) Call[26823] access HoistableDeclaration = (Declaration "HoistableDeclaration")
  [26824] (27752/1) Normal[26824] return (new [])
Algo: StatementListItem[1,0].TopLevelVarDeclaredNames [2363]
  [26825] Entry[26825]
  [26826] (27756)Normal[26826] let StatementListItem = this
  [26827] (27761/1) Normal[26827] return __x0__
  [26828] (27763/2) Normal[26828] return (new [])
  [26829] (27757/0) If[26829] (is-instance-of Declaration Declaration0)
  [26830] Exit[26830]
  [26831] (27759/0) Call[26831] access HoistableDeclaration = (Declaration "HoistableDeclaration")
  [26832] (27760/1) Call[26832] access __x0__ = (HoistableDeclaration "BoundNames")
Algo: StatementListItem[1,0].TopLevelVarScopedDeclarations [2364]
  [26833] Entry[26833]
  [26834] (27765)Normal[26834] let StatementListItem = this
  [26835] (27770/1) Normal[26835] let declaration = __x0__
  [26836] (27771/2) Normal[26836] return (new [declaration])
  [26837] (27766/0) If[26837] (is-instance-of Declaration Declaration0)
  [26838] (27773/3) Normal[26838] return (new [])
  [26839] (27768/0) Call[26839] access HoistableDeclaration = (Declaration "HoistableDeclaration")
  [26840] Exit[26840]
  [26841] (27769/1) Call[26841] access __x0__ = (HoistableDeclaration "DeclarationPart")
Algo: StatementListItem[1,0].VarDeclaredNames [2365]
  [26842] Entry[26842]
  [26843] (27775)Normal[26843] let StatementListItem = this
  [26844] (27776/0) Normal[26844] return (new [])
  [26845] Exit[26845]
Algo: StatementListItem[1,0].VarScopedDeclarations [2366]
  [26846] Entry[26846]
  [26847] (27778)Normal[26847] let StatementListItem = this
  [26848] (27779/0) Normal[26848] return (new [])
  [26849] Exit[26849]
Algo: StatementList[1,0].ContainsDuplicateLabels [2367]
  [26850] Entry[26850]
  [26851] (27781/0) Call[26851] access __x0__ = (StatementList "ContainsDuplicateLabels" labelSet)
  [26852] (27786/2) Call[26852] access __x1__ = (StatementListItem "ContainsDuplicateLabels" labelSet)
  [26853] (27787/2) Normal[26853] return __x1__
  [26854] (27782/0) Normal[26854] let hasDuplicates = __x0__
  [26855] Exit[26855]
  [26856] (27783/1) If[26856] (= hasDuplicates true)
  [26857] (27784/1) Normal[26857] return true
Algo: StatementList[1,0].ContainsUndefinedBreakTarget [2368]
  [26858] Entry[26858]
  [26859] (27789/0) Call[26859] access __x0__ = (StatementList "ContainsUndefinedBreakTarget" labelSet)
  [26860] (27794/2) Call[26860] access __x1__ = (StatementListItem "ContainsUndefinedBreakTarget" labelSet)
  [26861] (27795/2) Normal[26861] return __x1__
  [26862] (27790/0) Normal[26862] let hasUndefinedLabels = __x0__
  [26863] Exit[26863]
  [26864] (27791/1) If[26864] (= hasUndefinedLabels true)
  [26865] (27792/1) Normal[26865] return true
Algo: StatementList[1,0].ContainsUndefinedContinueTarget [2369]
  [26866] Entry[26866]
  [26867] (27797/0) Call[26867] access __x0__ = (StatementList "ContainsUndefinedContinueTarget" iterationSet (new []))
  [26868] (27802/2) Call[26868] access __x1__ = (StatementListItem "ContainsUndefinedContinueTarget" iterationSet (new []))
  [26869] (27803/2) Normal[26869] return __x1__
  [26870] (27798/0) Normal[26870] let hasUndefinedLabels = __x0__
  [26871] Exit[26871]
  [26872] (27799/1) If[26872] (= hasUndefinedLabels true)
  [26873] (27800/1) Normal[26873] return true
Algo: StatementList[1,0].Evaluation [2370]
  [26874] Entry[26874]
  [26875] (27805/0) Call[26875] access __x0__ = (StatementList "Evaluation")
  [26876] (27809/2) Normal[26876] let s = __x1__
  [26877] (27810/3) Call[26877] app __x2__ = (UpdateEmpty s sl)
  [26878] (27806/0) Normal[26878] let sl = __x0__
  [26879] (27811/3) Normal[26879] return __x2__
  [26880] (27807/1) Normal[26880] [? sl]
  [26881] Exit[26881]
  [26882] (27808/2) Call[26882] access __x1__ = (StatementListItem "Evaluation")
Algo: StatementList[1,0].HasCallInTailPosition [2371]
  [26883] Entry[26883]
  [26884] (27813/0) Call[26884] access __x0__ = (StatementList "HasCallInTailPosition" call)
  [26885] (27818/2) Call[26885] access __x1__ = (StatementListItem "HasCallInTailPosition" call)
  [26886] (27819/2) Normal[26886] return __x1__
  [26887] (27814/0) Normal[26887] let has = __x0__
  [26888] Exit[26888]
  [26889] (27815/1) If[26889] (= has true)
  [26890] (27816/1) Normal[26890] return true
Algo: StatementList[1,0].LexicallyDeclaredNames [2372]
  [26891] Entry[26891]
  [26892] (27821/0) Call[26892] access __x0__ = (StatementList "LexicallyDeclaredNames")
  [26893] (27825/1) Normal[26893] let __x3__ = 0i
  [26894] (27826/1) Loop[26894] (< __x3__ __x2__.length)
  [26895] LoopCont[26895]
  [26896] (27822/0) Normal[26896] let names = __x0__
  [26897] (27828/1) Normal[26897] let __x4__ = __x2__[__x3__]
  [26898] (27831/2) Normal[26898] return names
  [26899] (27830/1) Normal[26899] append __x4__ -> names
  [26900] (27823/1) Call[26900] access __x1__ = (StatementListItem "LexicallyDeclaredNames")
  [26901] (27829/1) Normal[26901] __x3__ = (+ __x3__ 1i)
  [26902] (27824/1) Normal[26902] let __x2__ = __x1__
  [26903] Exit[26903]
Algo: StatementList[1,0].LexicallyScopedDeclarations [2373]
  [26904] Entry[26904]
  [26905] (27833/0) Call[26905] access __x0__ = (StatementList "LexicallyScopedDeclarations")
  [26906] (27837/1) Normal[26906] let __x3__ = 0i
  [26907] (27838/1) Loop[26907] (< __x3__ __x2__.length)
  [26908] LoopCont[26908]
  [26909] (27834/0) Normal[26909] let declarations = __x0__
  [26910] (27840/1) Normal[26910] let __x4__ = __x2__[__x3__]
  [26911] (27843/2) Normal[26911] return declarations
  [26912] (27842/1) Normal[26912] append __x4__ -> declarations
  [26913] (27835/1) Call[26913] access __x1__ = (StatementListItem "LexicallyScopedDeclarations")
  [26914] (27841/1) Normal[26914] __x3__ = (+ __x3__ 1i)
  [26915] (27836/1) Normal[26915] let __x2__ = __x1__
  [26916] Exit[26916]
Algo: StatementList[1,0].TopLevelLexicallyDeclaredNames [2374]
  [26917] Entry[26917]
  [26918] (27845/0) Call[26918] access __x0__ = (StatementList "TopLevelLexicallyDeclaredNames")
  [26919] (27849/1) Normal[26919] let __x3__ = 0i
  [26920] (27850/1) Loop[26920] (< __x3__ __x2__.length)
  [26921] LoopCont[26921]
  [26922] (27846/0) Normal[26922] let names = __x0__
  [26923] (27852/1) Normal[26923] let __x4__ = __x2__[__x3__]
  [26924] (27855/2) Normal[26924] return names
  [26925] (27854/1) Normal[26925] append __x4__ -> names
  [26926] (27847/1) Call[26926] access __x1__ = (StatementListItem "TopLevelLexicallyDeclaredNames")
  [26927] (27853/1) Normal[26927] __x3__ = (+ __x3__ 1i)
  [26928] (27848/1) Normal[26928] let __x2__ = __x1__
  [26929] Exit[26929]
Algo: StatementList[1,0].TopLevelLexicallyScopedDeclarations [2375]
  [26930] Entry[26930]
  [26931] (27857/0) Call[26931] access __x0__ = (StatementList "TopLevelLexicallyScopedDeclarations")
  [26932] (27861/1) Normal[26932] let __x3__ = 0i
  [26933] (27862/1) Loop[26933] (< __x3__ __x2__.length)
  [26934] LoopCont[26934]
  [26935] (27858/0) Normal[26935] let declarations = __x0__
  [26936] (27864/1) Normal[26936] let __x4__ = __x2__[__x3__]
  [26937] (27867/2) Normal[26937] return declarations
  [26938] (27866/1) Normal[26938] append __x4__ -> declarations
  [26939] (27859/1) Call[26939] access __x1__ = (StatementListItem "TopLevelLexicallyScopedDeclarations")
  [26940] (27865/1) Normal[26940] __x3__ = (+ __x3__ 1i)
  [26941] (27860/1) Normal[26941] let __x2__ = __x1__
  [26942] Exit[26942]
Algo: StatementList[1,0].TopLevelVarDeclaredNames [2376]
  [26943] Entry[26943]
  [26944] (27869/0) Call[26944] access __x0__ = (StatementList "TopLevelVarDeclaredNames")
  [26945] (27873/1) Normal[26945] let __x3__ = 0i
  [26946] (27874/1) Loop[26946] (< __x3__ __x2__.length)
  [26947] LoopCont[26947]
  [26948] (27870/0) Normal[26948] let names = __x0__
  [26949] (27876/1) Normal[26949] let __x4__ = __x2__[__x3__]
  [26950] (27879/2) Normal[26950] return names
  [26951] (27878/1) Normal[26951] append __x4__ -> names
  [26952] (27871/1) Call[26952] access __x1__ = (StatementListItem "TopLevelVarDeclaredNames")
  [26953] (27877/1) Normal[26953] __x3__ = (+ __x3__ 1i)
  [26954] (27872/1) Normal[26954] let __x2__ = __x1__
  [26955] Exit[26955]
Algo: StatementList[1,0].TopLevelVarScopedDeclarations [2377]
  [26956] Entry[26956]
  [26957] (27881/0) Call[26957] access __x0__ = (StatementList "TopLevelVarScopedDeclarations")
  [26958] (27885/1) Normal[26958] let __x3__ = 0i
  [26959] (27886/1) Loop[26959] (< __x3__ __x2__.length)
  [26960] LoopCont[26960]
  [26961] (27882/0) Normal[26961] let declarations = __x0__
  [26962] (27888/1) Normal[26962] let __x4__ = __x2__[__x3__]
  [26963] (27891/2) Normal[26963] return declarations
  [26964] (27890/1) Normal[26964] append __x4__ -> declarations
  [26965] (27883/1) Call[26965] access __x1__ = (StatementListItem "TopLevelVarScopedDeclarations")
  [26966] (27889/1) Normal[26966] __x3__ = (+ __x3__ 1i)
  [26967] (27884/1) Normal[26967] let __x2__ = __x1__
  [26968] Exit[26968]
Algo: StatementList[1,0].VarDeclaredNames [2378]
  [26969] Entry[26969]
  [26970] (27893/0) Call[26970] access __x0__ = (StatementList "VarDeclaredNames")
  [26971] (27897/1) Normal[26971] let __x3__ = 0i
  [26972] (27898/1) Loop[26972] (< __x3__ __x2__.length)
  [26973] LoopCont[26973]
  [26974] (27894/0) Normal[26974] let names = __x0__
  [26975] (27900/1) Normal[26975] let __x4__ = __x2__[__x3__]
  [26976] (27903/2) Normal[26976] return names
  [26977] (27902/1) Normal[26977] append __x4__ -> names
  [26978] (27895/1) Call[26978] access __x1__ = (StatementListItem "VarDeclaredNames")
  [26979] (27901/1) Normal[26979] __x3__ = (+ __x3__ 1i)
  [26980] (27896/1) Normal[26980] let __x2__ = __x1__
  [26981] Exit[26981]
Algo: StatementList[1,0].VarScopedDeclarations [2379]
  [26982] Entry[26982]
  [26983] (27905/0) Call[26983] access __x0__ = (StatementList "VarScopedDeclarations")
  [26984] (27909/1) Normal[26984] let __x3__ = 0i
  [26985] (27910/1) Loop[26985] (< __x3__ __x2__.length)
  [26986] LoopCont[26986]
  [26987] (27906/0) Normal[26987] let declarations = __x0__
  [26988] (27912/1) Normal[26988] let __x4__ = __x2__[__x3__]
  [26989] (27915/2) Normal[26989] return declarations
  [26990] (27914/1) Normal[26990] append __x4__ -> declarations
  [26991] (27907/1) Call[26991] access __x1__ = (StatementListItem "VarScopedDeclarations")
  [26992] (27913/1) Normal[26992] __x3__ = (+ __x3__ 1i)
  [26993] (27908/1) Normal[26993] let __x2__ = __x1__
  [26994] Exit[26994]
Algo: Statement[0,0].LabelledEvaluation [2380]
  [26995] Entry[26995]
  [26996] (27917)Normal[26996] let Statement = this
  [26997] (27918/0) Call[26997] access __x0__ = (Statement "Evaluation")
  [26998] (27919/0) Normal[26998] return __x0__
  [26999] Exit[26999]
Algo: Statement[1,0].ContainsDuplicateLabels [2381]
  [27000] Entry[27000]
  [27001] (27921)Normal[27001] let Statement = this
  [27002] (27922/0) Normal[27002] return false
  [27003] Exit[27003]
Algo: Statement[1,0].ContainsUndefinedBreakTarget [2382]
  [27004] Entry[27004]
  [27005] (27924)Normal[27005] let Statement = this
  [27006] (27925/0) Normal[27006] return false
  [27007] Exit[27007]
Algo: Statement[1,0].ContainsUndefinedContinueTarget [2383]
  [27008] Entry[27008]
  [27009] (27927)Normal[27009] let Statement = this
  [27010] (27928/0) Normal[27010] return false
  [27011] Exit[27011]
Algo: Statement[1,0].HasCallInTailPosition [2384]
  [27012] Entry[27012]
  [27013] (27930)Normal[27013] let Statement = this
  [27014] (27931/0) Normal[27014] return false
  [27015] Exit[27015]
Algo: Statement[1,0].LabelledEvaluation [2385]
  [27016] Entry[27016]
  [27017] (27933)Normal[27017] let Statement = this
  [27018] (27934/0) Call[27018] access __x0__ = (Statement "Evaluation")
  [27019] (27935/0) Normal[27019] return __x0__
  [27020] Exit[27020]
Algo: Statement[11,0].ContainsDuplicateLabels [2386]
  [27021] Entry[27021]
  [27022] (27937)Normal[27022] let Statement = this
  [27023] (27938/0) Normal[27023] return false
  [27024] Exit[27024]
Algo: Statement[11,0].ContainsUndefinedBreakTarget [2387]
  [27025] Entry[27025]
  [27026] (27940)Normal[27026] let Statement = this
  [27027] (27941/0) Normal[27027] return false
  [27028] Exit[27028]
Algo: Statement[11,0].ContainsUndefinedContinueTarget [2388]
  [27029] Entry[27029]
  [27030] (27943)Normal[27030] let Statement = this
  [27031] (27944/0) Normal[27031] return false
  [27032] Exit[27032]
Algo: Statement[11,0].HasCallInTailPosition [2389]
  [27033] Entry[27033]
  [27034] (27946)Normal[27034] let Statement = this
  [27035] (27947/0) Normal[27035] return false
  [27036] Exit[27036]
Algo: Statement[11,0].LabelledEvaluation [2390]
  [27037] Entry[27037]
  [27038] (27949)Normal[27038] let Statement = this
  [27039] (27950/0) Call[27039] access __x0__ = (Statement "Evaluation")
  [27040] (27951/0) Normal[27040] return __x0__
  [27041] Exit[27041]
Algo: Statement[11,0].VarDeclaredNames [2391]
  [27042] Entry[27042]
  [27043] (27953)Normal[27043] let Statement = this
  [27044] (27954/0) Normal[27044] return (new [])
  [27045] Exit[27045]
Algo: Statement[11,0].VarScopedDeclarations [2392]
  [27046] Entry[27046]
  [27047] (27956)Normal[27047] let Statement = this
  [27048] (27957/0) Normal[27048] return (new [])
  [27049] Exit[27049]
Algo: Statement[12,0].LabelledEvaluation [2393]
  [27050] Entry[27050]
  [27051] (27959)Normal[27051] let Statement = this
  [27052] (27960/0) Call[27052] access __x0__ = (Statement "Evaluation")
  [27053] (27961/0) Normal[27053] return __x0__
  [27054] Exit[27054]
Algo: Statement[13,0].ContainsDuplicateLabels [2394]
  [27055] Entry[27055]
  [27056] (27963)Normal[27056] let Statement = this
  [27057] (27964/0) Normal[27057] return false
  [27058] Exit[27058]
Algo: Statement[13,0].ContainsUndefinedBreakTarget [2395]
  [27059] Entry[27059]
  [27060] (27966)Normal[27060] let Statement = this
  [27061] (27967/0) Normal[27061] return false
  [27062] Exit[27062]
Algo: Statement[13,0].ContainsUndefinedContinueTarget [2396]
  [27063] Entry[27063]
  [27064] (27969)Normal[27064] let Statement = this
  [27065] (27970/0) Normal[27065] return false
  [27066] Exit[27066]
Algo: Statement[13,0].HasCallInTailPosition [2397]
  [27067] Entry[27067]
  [27068] (27972)Normal[27068] let Statement = this
  [27069] (27973/0) Normal[27069] return false
  [27070] Exit[27070]
Algo: Statement[13,0].LabelledEvaluation [2398]
  [27071] Entry[27071]
  [27072] (27975)Normal[27072] let Statement = this
  [27073] (27976/0) Call[27073] access __x0__ = (Statement "Evaluation")
  [27074] (27977/0) Normal[27074] return __x0__
  [27075] Exit[27075]
Algo: Statement[13,0].VarDeclaredNames [2399]
  [27076] Entry[27076]
  [27077] (27979)Normal[27077] let Statement = this
  [27078] (27980/0) Normal[27078] return (new [])
  [27079] Exit[27079]
Algo: Statement[13,0].VarScopedDeclarations [2400]
  [27080] Entry[27080]
  [27081] (27982)Normal[27081] let Statement = this
  [27082] (27983/0) Normal[27082] return (new [])
  [27083] Exit[27083]
Algo: Statement[2,0].ContainsDuplicateLabels [2401]
  [27084] Entry[27084]
  [27085] (27985)Normal[27085] let Statement = this
  [27086] (27986/0) Normal[27086] return false
  [27087] Exit[27087]
Algo: Statement[2,0].ContainsUndefinedBreakTarget [2402]
  [27088] Entry[27088]
  [27089] (27988)Normal[27089] let Statement = this
  [27090] (27989/0) Normal[27090] return false
  [27091] Exit[27091]
Algo: Statement[2,0].ContainsUndefinedContinueTarget [2403]
  [27092] Entry[27092]
  [27093] (27991)Normal[27093] let Statement = this
  [27094] (27992/0) Normal[27094] return false
  [27095] Exit[27095]
Algo: Statement[2,0].HasCallInTailPosition [2404]
  [27096] Entry[27096]
  [27097] (27994)Normal[27097] let Statement = this
  [27098] (27995/0) Normal[27098] return false
  [27099] Exit[27099]
Algo: Statement[2,0].LabelledEvaluation [2405]
  [27100] Entry[27100]
  [27101] (27997)Normal[27101] let Statement = this
  [27102] (27998/0) Call[27102] access __x0__ = (Statement "Evaluation")
  [27103] (27999/0) Normal[27103] return __x0__
  [27104] Exit[27104]
Algo: Statement[2,0].VarDeclaredNames [2406]
  [27105] Entry[27105]
  [27106] (28001)Normal[27106] let Statement = this
  [27107] (28002/0) Normal[27107] return (new [])
  [27108] Exit[27108]
Algo: Statement[2,0].VarScopedDeclarations [2407]
  [27109] Entry[27109]
  [27110] (28004)Normal[27110] let Statement = this
  [27111] (28005/0) Normal[27111] return (new [])
  [27112] Exit[27112]
Algo: Statement[3,0].ContainsDuplicateLabels [2408]
  [27113] Entry[27113]
  [27114] (28007)Normal[27114] let Statement = this
  [27115] (28008/0) Normal[27115] return false
  [27116] Exit[27116]
Algo: Statement[3,0].ContainsUndefinedBreakTarget [2409]
  [27117] Entry[27117]
  [27118] (28010)Normal[27118] let Statement = this
  [27119] (28011/0) Normal[27119] return false
  [27120] Exit[27120]
Algo: Statement[3,0].ContainsUndefinedContinueTarget [2410]
  [27121] Entry[27121]
  [27122] (28013)Normal[27122] let Statement = this
  [27123] (28014/0) Normal[27123] return false
  [27124] Exit[27124]
Algo: Statement[3,0].HasCallInTailPosition [2411]
  [27125] Entry[27125]
  [27126] (28016)Normal[27126] let Statement = this
  [27127] (28017/0) Normal[27127] return false
  [27128] Exit[27128]
Algo: Statement[3,0].LabelledEvaluation [2412]
  [27129] Entry[27129]
  [27130] (28019)Normal[27130] let Statement = this
  [27131] (28020/0) Call[27131] access __x0__ = (Statement "Evaluation")
  [27132] (28021/0) Normal[27132] return __x0__
  [27133] Exit[27133]
Algo: Statement[3,0].VarDeclaredNames [2413]
  [27134] Entry[27134]
  [27135] (28023)Normal[27135] let Statement = this
  [27136] (28024/0) Normal[27136] return (new [])
  [27137] Exit[27137]
Algo: Statement[3,0].VarScopedDeclarations [2414]
  [27138] Entry[27138]
  [27139] (28026)Normal[27139] let Statement = this
  [27140] (28027/0) Normal[27140] return (new [])
  [27141] Exit[27141]
Algo: Statement[4,0].LabelledEvaluation [2415]
  [27142] Entry[27142]
  [27143] (28029)Normal[27143] let Statement = this
  [27144] (28030/0) Call[27144] access __x0__ = (Statement "Evaluation")
  [27145] (28031/0) Normal[27145] return __x0__
  [27146] Exit[27146]
Algo: Statement[6,0].ContainsDuplicateLabels [2416]
  [27147] Entry[27147]
  [27148] (28033)Normal[27148] let Statement = this
  [27149] (28034/0) Normal[27149] return false
  [27150] Exit[27150]
Algo: Statement[6,0].ContainsUndefinedBreakTarget [2417]
  [27151] Entry[27151]
  [27152] (28036)Normal[27152] let Statement = this
  [27153] (28037/0) Normal[27153] return false
  [27154] Exit[27154]
Algo: Statement[6,0].HasCallInTailPosition [2418]
  [27155] Entry[27155]
  [27156] (28039)Normal[27156] let Statement = this
  [27157] (28040/0) Normal[27157] return false
  [27158] Exit[27158]
Algo: Statement[6,0].LabelledEvaluation [2419]
  [27159] Entry[27159]
  [27160] (28042)Normal[27160] let Statement = this
  [27161] (28043/0) Call[27161] access __x0__ = (Statement "Evaluation")
  [27162] (28044/0) Normal[27162] return __x0__
  [27163] Exit[27163]
Algo: Statement[6,0].VarDeclaredNames [2420]
  [27164] Entry[27164]
  [27165] (28046)Normal[27165] let Statement = this
  [27166] (28047/0) Normal[27166] return (new [])
  [27167] Exit[27167]
Algo: Statement[6,0].VarScopedDeclarations [2421]
  [27168] Entry[27168]
  [27169] (28049)Normal[27169] let Statement = this
  [27170] (28050/0) Normal[27170] return (new [])
  [27171] Exit[27171]
Algo: Statement[7,0].ContainsDuplicateLabels [2422]
  [27172] Entry[27172]
  [27173] (28052)Normal[27173] let Statement = this
  [27174] (28053/0) Normal[27174] return false
  [27175] Exit[27175]
Algo: Statement[7,0].ContainsUndefinedContinueTarget [2423]
  [27176] Entry[27176]
  [27177] (28055)Normal[27177] let Statement = this
  [27178] (28056/0) Normal[27178] return false
  [27179] Exit[27179]
Algo: Statement[7,0].HasCallInTailPosition [2424]
  [27180] Entry[27180]
  [27181] (28058)Normal[27181] let Statement = this
  [27182] (28059/0) Normal[27182] return false
  [27183] Exit[27183]
Algo: Statement[7,0].LabelledEvaluation [2425]
  [27184] Entry[27184]
  [27185] (28061)Normal[27185] let Statement = this
  [27186] (28062/0) Call[27186] access __x0__ = (Statement "Evaluation")
  [27187] (28063/0) Normal[27187] return __x0__
  [27188] Exit[27188]
Algo: Statement[7,0].VarDeclaredNames [2426]
  [27189] Entry[27189]
  [27190] (28065)Normal[27190] let Statement = this
  [27191] (28066/0) Normal[27191] return (new [])
  [27192] Exit[27192]
Algo: Statement[7,0].VarScopedDeclarations [2427]
  [27193] Entry[27193]
  [27194] (28068)Normal[27194] let Statement = this
  [27195] (28069/0) Normal[27195] return (new [])
  [27196] Exit[27196]
Algo: Statement[8,0].ContainsDuplicateLabels [2428]
  [27197] Entry[27197]
  [27198] (28071)Normal[27198] let Statement = this
  [27199] (28072/0) Normal[27199] return false
  [27200] Exit[27200]
Algo: Statement[8,0].ContainsUndefinedBreakTarget [2429]
  [27201] Entry[27201]
  [27202] (28074)Normal[27202] let Statement = this
  [27203] (28075/0) Normal[27203] return false
  [27204] Exit[27204]
Algo: Statement[8,0].ContainsUndefinedContinueTarget [2430]
  [27205] Entry[27205]
  [27206] (28077)Normal[27206] let Statement = this
  [27207] (28078/0) Normal[27207] return false
  [27208] Exit[27208]
Algo: Statement[8,0].LabelledEvaluation [2431]
  [27209] Entry[27209]
  [27210] (28080)Normal[27210] let Statement = this
  [27211] (28081/0) Call[27211] access __x0__ = (Statement "Evaluation")
  [27212] (28082/0) Normal[27212] return __x0__
  [27213] Exit[27213]
Algo: Statement[8,0].VarDeclaredNames [2432]
  [27214] Entry[27214]
  [27215] (28084)Normal[27215] let Statement = this
  [27216] (28085/0) Normal[27216] return (new [])
  [27217] Exit[27217]
Algo: Statement[8,0].VarScopedDeclarations [2433]
  [27218] Entry[27218]
  [27219] (28087)Normal[27219] let Statement = this
  [27220] (28088/0) Normal[27220] return (new [])
  [27221] Exit[27221]
Algo: Statement[9,0].LabelledEvaluation [2434]
  [27222] Entry[27222]
  [27223] (28090)Normal[27223] let Statement = this
  [27224] (28091/0) Call[27224] access __x0__ = (Statement "Evaluation")
  [27225] (28092/0) Normal[27225] return __x0__
  [27226] Exit[27226]
Algo: StrictEqualityComparison [2435]
  [27227] Entry[27227]
  [27228] (28094/0) If[27228] (! (= (typeof x) (typeof y)))
  [27229] (28100/2) Normal[27229] return [! __x0__]
  [27230] (28102/3) Call[27230] app __x1__ = (SameValueNonNumeric x y)
  [27231] (28095/0) Normal[27231] return false
  [27232] (28097/1) If[27232] (|| (= (typeof x) Number) (= (typeof x) BigInt))
  [27233] (28103/3) Normal[27233] return [! __x1__]
  [27234] Exit[27234]
  [27235] (28099/2) Call[27235] app __x0__ = (PRIMITIVE[(typeof x)].equal x y)
Algo: StringCreate [2436]
  [27236] Entry[27236]
  [27237] (28105/0) Call[27237] app __x0__ = (MakeBasicObject (new ["Prototype", "Extensible", "StringData"]))
  [27238] (28109/3) Normal[27238] S.GetOwnProperty = ALGORITHM["StringExoticObject.GetOwnProperty"]
  [27239] (28110/4) Normal[27239] S.DefineOwnProperty = ALGORITHM["StringExoticObject.DefineOwnProperty"]
  [27240] (28114/7) Normal[27240] [! __x1__]
  [27241] (28115/8) Normal[27241] return S
  [27242] (28106/0) Normal[27242] let S = [! __x0__]
  [27243] (28111/5) Normal[27243] S.OwnPropertyKeys = ALGORITHM["StringExoticObject.OwnPropertyKeys"]
  [27244] (28113/7) Call[27244] app __x1__ = (DefinePropertyOrThrow S "length" (new PropertyDescriptor("Value" -> length, "Writable" -> false, "Enumerable" -> false, "Configurable" -> false)))
  [27245] (28107/1) Normal[27245] S.Prototype = prototype
  [27246] (28112/6) Normal[27246] let length = value.length
  [27247] (28108/2) Normal[27247] S.StringData = value
  [27248] Exit[27248]
Algo: StringExoticObject.DefineOwnProperty [2437]
  [27249] Entry[27249]
  [27250] (28117/0) Call[27250] app __x0__ = (IsPropertyKey P)
  [27251] (28121/2) If[27251] (! (= stringDesc undefined))
  [27252] (28123/3) Normal[27252] let extensible = S.Extensible
  [27253] (28127/5) Call[27253] app __x3__ = (OrdinaryDefineOwnProperty S P Desc)
  [27254] (28128/5) Normal[27254] return [! __x3__]
  [27255] Exit[27255]
  [27256] (28118/0) Normal[27256] assert (= __x0__ true)
  [27257] (28124/4) Call[27257] app __x2__ = (IsCompatiblePropertyDescriptor extensible Desc stringDesc)
  [27258] (28119/1) Call[27258] app __x1__ = (StringGetOwnProperty S P)
  [27259] (28125/4) Normal[27259] return [! __x2__]
  [27260] (28120/1) Normal[27260] let stringDesc = [! __x1__]
Algo: StringExoticObject.GetOwnProperty [2438]
  [27261] Entry[27261]
  [27262] (28130/0) Call[27262] app __x0__ = (IsPropertyKey P)
  [27263] (28134/2) If[27263] (! (= desc undefined))
  [27264] (28135/2) Normal[27264] return desc
  [27265] (28137/3) Call[27265] app __x2__ = (StringGetOwnProperty S P)
  [27266] (28131/0) Normal[27266] assert (= __x0__ true)
  [27267] (28132/1) Call[27267] app __x1__ = (OrdinaryGetOwnProperty S P)
  [27268] (28138/3) Normal[27268] return [! __x2__]
  [27269] (28133/1) Normal[27269] let desc = __x1__
  [27270] Exit[27270]
Algo: StringExoticObject.OwnPropertyKeys [2439]
  [27271] Entry[27271]
  [27272] (28140/0) Normal[27272] let keys = (new [])
  [27273] (28144/4) Normal[27273] let i = (+ 0i 0i)
  [27274] (28145/4) Normal[27274] let __x0__ = (+ len 0i)
  [27275] (28150/4) Normal[27275] i = (+ i 1i)
  [27276] LoopCont[27276]
  [27277] (28153/10) Normal[27277] ??? "For each own property key id:{P} of id:{O} such that Type ( id:{P} ) is Symbol , in ascending chronological order of property creation , do in:{} out:{}"
  [27278] (28154/12) Normal[27278] return keys
  [27279] (28141/1) Normal[27279] let str = O.StringData
  [27280] (28146/4) Loop[27280] (< i __x0__)
  [27281] (28149/4) Normal[27281] append [! __x1__] -> keys
  [27282] (28152/8) Normal[27282] ??? "For each own property key id:{P} of id:{O} such that Type ( id:{P} ) is String and id:{P} is not an array index , in ascending chronological order of property creation , do in:{} out:{}"
  [27283] (28142/2) Normal[27283] assert (= (typeof str) String)
  [27284] (28151/6) Normal[27284] ??? "For each own property key id:{P} of id:{O} such that id:{P} is an array index and ! ToIntegerOrInfinity ( id:{P} ) ≥ id:{len} , in ascending numeric index order , do in:{} out:{}"
  [27285] (28148/4) Call[27285] app __x1__ = (ToString i)
  [27286] (28143/3) Normal[27286] let len = str.length
  [27287] Exit[27287]
Algo: StringGetOwnProperty [2440]
  [27288] Entry[27288]
  [27289] (28156/1) Call[27289] app __x0__ = (IsPropertyKey P)
  [27290] (28161/3) Call[27290] app __x1__ = (CanonicalNumericIndexString P)
  [27291] (28162/3) Normal[27291] let index = [! __x1__]
  [27292] (28167/5) If[27292] (= __x2__ false)
  [27293] (28168/5) Normal[27293] return undefined
  [27294] (28170/6) If[27294] (= index -0.0)
  [27295] (28173/7) Normal[27295] let str = S.StringData
  [27296] (28174/8) Normal[27296] assert (= (typeof str) String)
  [27297] (28180/12) Normal[27297] return (new PropertyDescriptor("Value" -> resultStr, "Writable" -> false, "Enumerable" -> true, "Configurable" -> false))
  [27298] Exit[27298]
  [27299] (28157/1) Normal[27299] assert (= __x0__ true)
  [27300] (28163/4) If[27300] (= index undefined)
  [27301] (28166/5) Call[27301] app __x2__ = (IsIntegralNumber index)
  [27302] (28171/6) Normal[27302] return undefined
  [27303] (28158/2) If[27303] (! (= (typeof P) String))
  [27304] (28176/10) If[27304] (|| (< index 0i) (! (< index len)))
  [27305] (28177/10) Normal[27305] return undefined
  [27306] (28179/11) Normal[27306] let resultStr = str[index]
  [27307] (28164/4) Normal[27307] return undefined
  [27308] (28159/2) Normal[27308] return undefined
  [27309] (28175/9) Normal[27309] let len = str.length
Algo: StringIndexOf [2441]
  [27310] Entry[27310]
  [27311] (28182/0) Normal[27311] assert (= (typeof string) String)
  [27312] (28186/4) Normal[27312] return fromIndex
  [27313] (28188/5) Normal[27313] let searchLen = searchValue.length
  [27314] (28193/6) Normal[27314] let __x1__ = ""
  [27315] (28194/6) Normal[27315] let __x2__ = i
  [27316] (28198/6) Normal[27316] __x1__ = (+ __x1__ __x3__)
  [27317] (28199/6) Normal[27317] __x2__ = (+ __x2__ 1i)
  [27318] (28204/6) Normal[27318] i = (+ i 1i)
  [27319] LoopCont[27319]
  [27320] (28183/1) Normal[27320] assert (= (typeof searchValue) String)
  [27321] (28189/6) Normal[27321] let i = (+ fromIndex 0i)
  [27322] (28191/6) Loop[27322] (< i __x0__)
  [27323] (28205/9) Normal[27323] return -1i
  [27324] (28197/6) Call[27324] access __x3__ = (string __x2__)
  [27325] (28184/3) Normal[27325] let len = string.length
  [27326] (28200/6) Normal[27326] let candidate = __x1__
  [27327] (28201/6) If[27327] (= candidate searchValue)
  [27328] Exit[27328]
  [27329] (28195/6) Loop[27329] (< __x2__ (+ i searchLen))
  [27330] (28190/6) Normal[27330] let __x0__ = (+ (- len searchLen) 1i)
  [27331] (28185/4) If[27331] (&& (= searchValue "") (! (< len fromIndex)))
  [27332] (28202/6) Normal[27332] return i
  [27333] LoopCont[27333]
Algo: StringPad [2442]
  [27334] Entry[27334]
  [27335] (28207/0) Normal[27335] assert (|| (= placement ~start~) (= placement ~end~))
  [27336] (28211/2) Normal[27336] let intMaxLength = [? __x1__]
  [27337] (28212/3) Normal[27337] let stringLength = S.length
  [27338] (28217/5) Normal[27338] let filler = " "
  [27339] (28221/7) If[27339] (= filler "")
  [27340] (28222/7) Normal[27340] return S
  [27341] (28224/8) Normal[27341] let fillLen = (- intMaxLength stringLength)
  [27342] (28208/1) Call[27342] app __x0__ = (ToString O)
  [27343] (28213/4) If[27343] (! (< stringLength intMaxLength))
  [27344] (28216/5) If[27344] (= fillString undefined)
  [27345] (28219/6) Call[27345] app __x2__ = (ToString fillString)
  [27346] (28209/1) Normal[27346] let S = [? __x0__]
  [27347] (28226/10) If[27347] (= placement ~start~)
  [27348] (28227/10) Normal[27348] return (+ truncatedStringFiller S)
  [27349] (28228/10) Normal[27349] return (+ S truncatedStringFiller)
  [27350] (28220/6) Normal[27350] let filler = [? __x2__]
  [27351] (28214/4) Normal[27351] return S
  [27352] (28210/2) Call[27352] app __x1__ = (ToLength maxLength)
  [27353] Exit[27353]
  [27354] (28225/9) Normal[27354] ??? "Let id:{truncatedStringFiller} be the String value consisting of repeated concatenations of id:{filler} truncated to length id:{fillLen} ."
Algo: StringToBigInt [2443]
  [27355] Entry[27355]
  [27356] (28229)Normal[27356] return (convert argument str2bigint)
  [27357] Exit[27357]
Algo: StringToCodePoints [2444]
  [27358] Entry[27358]
  [27359] (28231/0) Normal[27359] let codePoints = (new [])
  [27360] (28236/4) Call[27360] app __x0__ = (CodePointAt string position)
  [27361] (28237/4) Normal[27361] let cp = [! __x0__]
  [27362] (28240/7) Normal[27362] return codePoints
  [27363] Exit[27363]
  [27364] (28232/1) Normal[27364] let size = string.length
  [27365] (28238/5) Normal[27365] append cp.CodePoint -> codePoints
  [27366] LoopCont[27366]
  [27367] (28234/3) Loop[27367] (< position size)
  [27368] (28233/2) Normal[27368] let position = 0i
  [27369] (28239/6) Normal[27369] position = (+ position cp.CodeUnitCount)
Algo: SubstitutionTemplate[0,0].ArgumentListEvaluation [2445]
  [27370] Entry[27370]
  [27371] (28242)Normal[27371] let SubstitutionTemplate = this
  [27372] (28246/1) Normal[27372] let firstSub = [? __x1__]
  [27373] (28247/2) Call[27373] access __x2__ = (TemplateSpans "SubstitutionEvaluation")
  [27374] (28243/0) Call[27374] access __x0__ = (Expression "Evaluation")
  [27375] (28248/2) Normal[27375] let restSub = [? __x2__]
  [27376] (28250/4) Normal[27376] return restSub
  [27377] Exit[27377]
  [27378] (28244/0) Normal[27378] let firstSubRef = __x0__
  [27379] (28249/4) Normal[27379] prepend firstSub -> restSub
  [27380] (28245/1) Call[27380] app __x1__ = (GetValue firstSubRef)
Algo: SubstitutionTemplate[0,0].EarlyErrors [2446]
  [27381] Entry[27381]
  [27382] (28252)Normal[27382] let SubstitutionTemplate = this
  [27383] (28253/0) Normal[27383] ??? "It is a Syntax Error if the sub:{[ Tagged ]} parameter was not set and nt:{TemplateHead} Contains nt:{NotEscapeSequence} ."
  [27384] Exit[27384]
Algo: SubstitutionTemplate[0,0].Evaluation [2447]
  [27385] Entry[27385]
  [27386] (28255)Normal[27386] let SubstitutionTemplate = this
  [27387] (28259/1) Normal[27387] let subRef = __x1__
  [27388] (28260/2) Call[27388] app __x2__ = (GetValue subRef)
  [27389] (28264/4) Call[27389] access __x4__ = (TemplateSpans "Evaluation")
  [27390] (28265/4) Normal[27390] let tail = __x4__
  [27391] (28256/0) Call[27391] access __x0__ = (TemplateHead "TV")
  [27392] (28261/2) Normal[27392] let sub = [? __x2__]
  [27393] (28263/3) Normal[27393] let middle = [? __x3__]
  [27394] (28267/6) Normal[27394] return (+ (+ head middle) tail)
  [27395] Exit[27395]
  [27396] (28257/0) Normal[27396] let head = __x0__
  [27397] (28266/5) Normal[27397] [? tail]
  [27398] (28262/3) Call[27398] app __x3__ = (ToString sub)
  [27399] (28258/1) Call[27399] access __x1__ = (Expression "Evaluation")
Algo: SubstitutionTemplate[0,0].TemplateStrings [2448]
  [27400] Entry[27400]
  [27401] (28269)Normal[27401] let SubstitutionTemplate = this
  [27402] (28275/3) Call[27402] access __x1__ = (TemplateHead "TRV")
  [27403] (28276/3) Normal[27403] let head = __x1__
  [27404] (28280/5) Normal[27404] prepend head -> list
  [27405] (28281/5) Normal[27405] return list
  [27406] (28270/0) If[27406] (= raw false)
  [27407] (28277/4) Call[27407] access __x2__ = (TemplateSpans "TemplateStrings" raw)
  [27408] (28279/5) Normal[27408] let list = (copy-obj tail)
  [27409] (28272/1) Call[27409] access __x0__ = (TemplateHead "TV")
  [27410] (28278/4) Normal[27410] let tail = __x2__
  [27411] (28273/1) Normal[27411] let head = __x0__
  [27412] Exit[27412]
Algo: SuperCall[0,0].Evaluation [2449]
  [27413] Entry[27413]
  [27414] (28283)Normal[27414] let SuperCall = this
  [27415] (28287/2) Call[27415] app __x1__ = (GetSuperConstructor)
  [27416] (28288/2) Normal[27416] let func = [! __x1__]
  [27417] (28292/4) If[27417] (= __x3__ false)
  [27418] (28293/4) Normal[27418] throw TypeError
  [27419] (28295/5) Call[27419] app __x4__ = (Construct func argList newTarget)
  [27420] (28297/6) Call[27420] app __x5__ = (GetThisEnvironment)
  [27421] (28298/6) Normal[27421] let thisER = __x5__
  [27422] (28284/0) Call[27422] app __x0__ = (GetNewTarget)
  [27423] (28289/3) Call[27423] access __x2__ = (Arguments "ArgumentListEvaluation")
  [27424] (28291/4) Call[27424] app __x3__ = (IsConstructor func)
  [27425] (28296/5) Normal[27425] let result = [? __x4__]
  [27426] (28285/0) Normal[27426] let newTarget = __x0__
  [27427] (28300/7) Normal[27427] return [? __x6__]
  [27428] Exit[27428]
  [27429] (28290/3) Normal[27429] let argList = [? __x2__]
  [27430] (28286/1) Normal[27430] assert (= (typeof newTarget) Object)
  [27431] (28299/7) Call[27431] app __x6__ = (thisER.BindThisValue thisER result)
Algo: SuperProperty[0,0].Evaluation [2450]
  [27432] Entry[27432]
  [27433] (28302)Normal[27433] let SuperProperty = this
  [27434] (28306/1) Normal[27434] let actualThis = [? __x1__]
  [27435] (28307/2) Call[27435] access __x2__ = (Expression "Evaluation")
  [27436] (28311/4) Call[27436] app __x4__ = (ToPropertyKey propertyNameValue)
  [27437] (28312/4) Normal[27437] let propertyKey = [? __x4__]
  [27438] (28315/5) Normal[27438] let strict = false
  [27439] (28316/6) Call[27439] app __x5__ = (MakeSuperPropertyReference actualThis propertyKey strict)
  [27440] (28303/0) Call[27440] app __x0__ = (GetThisEnvironment)
  [27441] (28308/2) Normal[27441] let propertyNameReference = __x2__
  [27442] (28310/3) Normal[27442] let propertyNameValue = [? __x3__]
  [27443] (28314/5) Normal[27443] let strict = true
  [27444] (28304/0) Normal[27444] let env = __x0__
  [27445] (28313/5) If[27445] true
  [27446] (28309/3) Call[27446] app __x3__ = (GetValue propertyNameReference)
  [27447] (28305/1) Call[27447] app __x1__ = (env.GetThisBinding env)
  [27448] (28317/6) Normal[27448] return [? __x5__]
  [27449] Exit[27449]
Algo: SuperProperty[1,0].Contains [2451]
  [27450] Entry[27450]
  [27451] (28319)Normal[27451] let SuperProperty = this
  [27452] (28320/0) Normal[27452] ??? "If id:{symbol} is the nt:{ReservedWord} code:{super} , return value:{true} ."
  [27453] (28321/1) Normal[27453] return false
  [27454] Exit[27454]
Algo: SuperProperty[1,0].Evaluation [2452]
  [27455] Entry[27455]
  [27456] (28323)Normal[27456] let SuperProperty = this
  [27457] (28327/1) Normal[27457] let actualThis = [? __x1__]
  [27458] (28328/2) Call[27458] access __x2__ = (IdentifierName "StringValue")
  [27459] (28332/3) Normal[27459] let strict = false
  [27460] (28333/4) Call[27460] app __x3__ = (MakeSuperPropertyReference actualThis propertyKey strict)
  [27461] (28324/0) Call[27461] app __x0__ = (GetThisEnvironment)
  [27462] (28329/2) Normal[27462] let propertyKey = __x2__
  [27463] (28331/3) Normal[27463] let strict = true
  [27464] (28325/0) Normal[27464] let env = __x0__
  [27465] (28334/4) Normal[27465] return [? __x3__]
  [27466] Exit[27466]
  [27467] (28330/3) If[27467] true
  [27468] (28326/1) Call[27468] app __x1__ = (env.GetThisBinding env)
Algo: SuspendAgent [2453]
  [27469] Entry[27469]
  [27470] (28336/3) Call[27470] app __x0__ = (AgentCanSuspend)
  [27471] (28340/5) Normal[27471] __x1__
  [27472] (28341/6) Normal[27472] ??? "If id:{W} was notified explicitly by another agent calling NotifyWaiter ( id:{WL} , id:{W} ) , return value:{true} ."
  [27473] (28337/3) Normal[27473] assert (= __x0__ true)
  [27474] (28342/7) Normal[27474] return false
  [27475] (28338/4) Normal[27475] ??? "Perform LeaveCriticalSection ( id:{WL} ) and suspend id:{W} for up to id:{timeout} milliseconds , performing the combined operation in such a way that a notification that arrives after the critical section is exited but before the suspension takes effect is not lost . id:{W} can notify either because the timeout expired or because it was notified explicitly by another agent calling NotifyWaiter ( id:{WL} , id:{W} ) , and not for any other reasons at all ."
  [27476] Exit[27476]
  [27477] (28339/5) Call[27477] app __x1__ = (EnterCriticalSection WL)
Algo: SwitchStatement[0,0].ContainsDuplicateLabels [2454]
  [27478] Entry[27478]
  [27479] (28344)Normal[27479] let SwitchStatement = this
  [27480] (28345/0) Call[27480] access __x0__ = (CaseBlock "ContainsDuplicateLabels" labelSet)
  [27481] (28346/0) Normal[27481] return __x0__
  [27482] Exit[27482]
Algo: SwitchStatement[0,0].ContainsUndefinedBreakTarget [2455]
  [27483] Entry[27483]
  [27484] (28348)Normal[27484] let SwitchStatement = this
  [27485] (28349/0) Call[27485] access __x0__ = (CaseBlock "ContainsUndefinedBreakTarget" labelSet)
  [27486] (28350/0) Normal[27486] return __x0__
  [27487] Exit[27487]
Algo: SwitchStatement[0,0].ContainsUndefinedContinueTarget [2456]
  [27488] Entry[27488]
  [27489] (28352)Normal[27489] let SwitchStatement = this
  [27490] (28353/0) Call[27490] access __x0__ = (CaseBlock "ContainsUndefinedContinueTarget" iterationSet (new []))
  [27491] (28354/0) Normal[27491] return __x0__
  [27492] Exit[27492]
Algo: SwitchStatement[0,0].EarlyErrors [2457]
  [27493] Entry[27493]
  [27494] (28356)Normal[27494] let SwitchStatement = this
  [27495] (28360/0) Normal[27495] throw SyntaxError
  [27496] (28362/1) Call[27496] access __x2__ = (CaseBlock "LexicallyDeclaredNames")
  [27497] (28366/1) Normal[27497] let __x6__ = 0i
  [27498] (28367/1) Normal[27498] let __x7__ = 0i
  [27499] (28371/1) Normal[27499] __x7__ = 0i
  [27500] (28372/1) Loop[27500] (< __x7__ __x5__.length)
  [27501] (28376/1) If[27501] __x8__
  [27502] (28377/1) Normal[27502] throw SyntaxError
  [27503] Exit[27503]
  [27504] (28357/0) Call[27504] access __x0__ = (CaseBlock "LexicallyDeclaredNames")
  [27505] (28363/1) Call[27505] access __x3__ = (CaseBlock "VarDeclaredNames")
  [27506] (28365/1) Normal[27506] let __x5__ = __x3__
  [27507] (28369/1) Loop[27507] (< __x6__ __x4__.length)
  [27508] (28358/0) Call[27508] app __x1__ = (IsDuplicate __x0__)
  [27509] (28374/1) Normal[27509] __x8__ = true
  [27510] LoopCont[27510]
  [27511] (28368/1) Normal[27511] let __x8__ = false
  [27512] (28364/1) Normal[27512] let __x4__ = __x2__
  [27513] (28359/0) If[27513] __x1__
  [27514] (28373/1) If[27514] (= __x4__[__x6__] __x5__[__x7__])
  [27515] LoopCont[27515]
Algo: SwitchStatement[0,0].Evaluation [2458]
  [27516] Entry[27516]
  [27517] (28380)Normal[27517] let SwitchStatement = this
  [27518] (28384/1) Normal[27518] let switchValue = [? __x1__]
  [27519] (28385/2) Normal[27519] let oldEnv = CONTEXT.LexicalEnvironment
  [27520] (28389/4) Normal[27520] __x3__
  [27521] (28390/5) Normal[27521] CONTEXT.LexicalEnvironment = blockEnv
  [27522] (28393/7) Normal[27522] CONTEXT.LexicalEnvironment = oldEnv
  [27523] (28394/8) Normal[27523] return R
  [27524] (28381/0) Call[27524] access __x0__ = (Expression "Evaluation")
  [27525] (28386/3) Call[27525] app __x2__ = (NewDeclarativeEnvironment oldEnv)
  [27526] (28388/4) Call[27526] app __x3__ = (BlockDeclarationInstantiation CaseBlock blockEnv)
  [27527] (28392/6) Normal[27527] let R = __x4__
  [27528] (28382/0) Normal[27528] let exprRef = __x0__
  [27529] (28391/6) Call[27529] access __x4__ = (CaseBlock "CaseBlockEvaluation" switchValue)
  [27530] (28387/3) Normal[27530] let blockEnv = __x2__
  [27531] (28383/1) Call[27531] app __x1__ = (GetValue exprRef)
  [27532] Exit[27532]
Algo: SwitchStatement[0,0].HasCallInTailPosition [2459]
  [27533] Entry[27533]
  [27534] (28396)Normal[27534] let SwitchStatement = this
  [27535] (28397/0) Call[27535] access __x0__ = (CaseBlock "HasCallInTailPosition" call)
  [27536] (28398/0) Normal[27536] return __x0__
  [27537] Exit[27537]
Algo: SwitchStatement[0,0].VarDeclaredNames [2460]
  [27538] Entry[27538]
  [27539] (28400)Normal[27539] let SwitchStatement = this
  [27540] (28401/0) Call[27540] access __x0__ = (CaseBlock "VarDeclaredNames")
  [27541] (28402/0) Normal[27541] return __x0__
  [27542] Exit[27542]
Algo: SwitchStatement[0,0].VarScopedDeclarations [2461]
  [27543] Entry[27543]
  [27544] (28404)Normal[27544] let SwitchStatement = this
  [27545] (28405/0) Call[27545] access __x0__ = (CaseBlock "VarScopedDeclarations")
  [27546] (28406/0) Normal[27546] return __x0__
  [27547] Exit[27547]
Algo: SymbolDescriptiveString [2462]
  [27548] Entry[27548]
  [27549] (28408/0) Normal[27549] assert (= (typeof sym) Symbol)
  [27550] (28413/3) Normal[27550] assert (= (typeof desc) String)
  [27551] (28414/4) Normal[27551] return (+ (+ "Symbol(" desc) ")")
  [27552] (28409/1) Normal[27552] let desc = sym.Description
  [27553] Exit[27553]
  [27554] (28410/2) If[27554] (= desc undefined)
  [27555] (28411/2) Normal[27555] desc = ""
Algo: TearFreeReads [2463]
  [27556] Entry[27556]
  [27557] (28416/0) Call[27557] app __x0__ = (SharedDataBlockEventSet execution)
  [27558] (28421/0) Normal[27558] let R = __x1__[__x2__]
  [27559] (28422/0) Normal[27559] __x2__ = (+ __x2__ 1i)
  [27560] LoopCont[27560]
  [27561] (28419/0) Loop[27561] (< __x2__ __x1__.length)
  [27562] (28417/0) Normal[27562] let __x1__ = __x0__
  [27563] (28423/1) If[27563] (= R.NoTear true)
  [27564] (28426/3) Normal[27564] ??? "For each event id:{W} such that ( id:{R} , id:{W} ) is in id:{execution} . [ [ ReadsFrom ] ] and id:{W} . [ [ NoTear ] ] is value:{true} , do in:{} out:{}"
  [27565] (28418/0) Normal[27565] let __x2__ = 0i
  [27566] (28425/2) Normal[27566] assert (= (% R.ByteIndex R.ElementSize) 0i)
  [27567] (28428/6) Normal[27567] return true
  [27568] Exit[27568]
Algo: TemplateLiteral[0,0].ArgumentListEvaluation [2464]
  [27569] Entry[27569]
  [27570] (28430)Normal[27570] let TemplateLiteral = this
  [27571] (28434/2) Normal[27571] return (new [siteObj])
  [27572] Exit[27572]
  [27573] (28431/0) Normal[27573] let templateLiteral = this
  [27574] (28432/1) Call[27574] app __x0__ = (GetTemplateObject templateLiteral)
  [27575] (28433/1) Normal[27575] let siteObj = __x0__
Algo: TemplateLiteral[0,0].EarlyErrors [2465]
  [27576] Entry[27576]
  [27577] (28436)Normal[27577] let TemplateLiteral = this
  [27578] (28437/0) Normal[27578] ??? "It is a Syntax Error if the sub:{[ Tagged ]} parameter was not set and nt:{NoSubstitutionTemplate} Contains nt:{NotEscapeSequence} ."
  [27579] Exit[27579]
Algo: TemplateLiteral[0,0].Evaluation [2466]
  [27580] Entry[27580]
  [27581] (28439)Normal[27581] let TemplateLiteral = this
  [27582] (28440/0) Call[27582] access __x0__ = (NoSubstitutionTemplate "TV")
  [27583] (28441/0) Normal[27583] return __x0__
  [27584] Exit[27584]
Algo: TemplateLiteral[0,0].TemplateStrings [2467]
  [27585] Entry[27585]
  [27586] (28443)Normal[27586] let TemplateLiteral = this
  [27587] (28449/3) Call[27587] access __x1__ = (NoSubstitutionTemplate "TRV")
  [27588] (28450/3) Normal[27588] let string = __x1__
  [27589] (28444/0) If[27589] (= raw false)
  [27590] (28451/4) Normal[27590] return (new [string])
  [27591] (28446/1) Call[27591] access __x0__ = (NoSubstitutionTemplate "TV")
  [27592] Exit[27592]
  [27593] (28447/1) Normal[27593] let string = __x0__
Algo: TemplateLiteral[1,0].ArgumentListEvaluation [2468]
  [27594] Entry[27594]
  [27595] (28453)Normal[27595] let TemplateLiteral = this
  [27596] (28457/2) Call[27596] access __x1__ = (SubstitutionTemplate "ArgumentListEvaluation")
  [27597] (28458/2) Normal[27597] let remaining = [? __x1__]
  [27598] (28454/0) Normal[27598] let templateLiteral = this
  [27599] (28459/3) Normal[27599] prepend siteObj -> remaining
  [27600] (28455/1) Call[27600] app __x0__ = (GetTemplateObject templateLiteral)
  [27601] (28460/3) Normal[27601] return remaining
  [27602] (28456/1) Normal[27602] let siteObj = __x0__
  [27603] Exit[27603]
Algo: TemplateLiteral[1,0].EarlyErrors [2469]
  [27604] Entry[27604]
  [27605] (28462)Normal[27605] let TemplateLiteral = this
  [27606] (28463/0) Normal[27606] ??? "It is a Syntax Error if the number of elements in the result of TemplateStrings of nt:{TemplateLiteral} with argument value:{false} is greater than 2 sup:{32} - 1 ."
  [27607] Exit[27607]
Algo: TemplateMiddleList[0,0].EarlyErrors [2470]
  [27608] Entry[27608]
  [27609] (28465)Normal[27609] let TemplateMiddleList = this
  [27610] (28466/0) Normal[27610] ??? "It is a Syntax Error if the sub:{[ Tagged ]} parameter was not set and nt:{TemplateMiddle} Contains nt:{NotEscapeSequence} ."
  [27611] Exit[27611]
Algo: TemplateMiddleList[0,0].Evaluation [2471]
  [27612] Entry[27612]
  [27613] (28468)Normal[27613] let TemplateMiddleList = this
  [27614] (28472/1) Normal[27614] let subRef = __x1__
  [27615] (28473/2) Call[27615] app __x2__ = (GetValue subRef)
  [27616] (28477/4) Normal[27616] return (+ head middle)
  [27617] Exit[27617]
  [27618] (28469/0) Call[27618] access __x0__ = (TemplateMiddle "TV")
  [27619] (28474/2) Normal[27619] let sub = [? __x2__]
  [27620] (28476/3) Normal[27620] let middle = [? __x3__]
  [27621] (28470/0) Normal[27621] let head = __x0__
  [27622] (28475/3) Call[27622] app __x3__ = (ToString sub)
  [27623] (28471/1) Call[27623] access __x1__ = (Expression "Evaluation")
Algo: TemplateMiddleList[0,0].SubstitutionEvaluation [2472]
  [27624] Entry[27624]
  [27625] (28479)Normal[27625] let TemplateMiddleList = this
  [27626] (28483/1) Normal[27626] let sub = [? __x1__]
  [27627] (28484/2) Normal[27627] return (new [sub])
  [27628] (28480/0) Call[27628] access __x0__ = (Expression "Evaluation")
  [27629] Exit[27629]
  [27630] (28481/0) Normal[27630] let subRef = __x0__
  [27631] (28482/1) Call[27631] app __x1__ = (GetValue subRef)
Algo: TemplateMiddleList[0,0].TemplateStrings [2473]
  [27632] Entry[27632]
  [27633] (28486)Normal[27633] let TemplateMiddleList = this
  [27634] (28492/3) Call[27634] access __x1__ = (TemplateMiddle "TRV")
  [27635] (28493/3) Normal[27635] let string = __x1__
  [27636] (28487/0) If[27636] (= raw false)
  [27637] (28494/4) Normal[27637] return (new [string])
  [27638] (28489/1) Call[27638] access __x0__ = (TemplateMiddle "TV")
  [27639] Exit[27639]
  [27640] (28490/1) Normal[27640] let string = __x0__
Algo: TemplateMiddleList[1,0].EarlyErrors [2474]
  [27641] Entry[27641]
  [27642] (28495/0) Normal[27642] ??? "It is a Syntax Error if the sub:{[ Tagged ]} parameter was not set and nt:{TemplateMiddle} Contains nt:{NotEscapeSequence} ."
  [27643] Exit[27643]
Algo: TemplateMiddleList[1,0].Evaluation [2475]
  [27644] Entry[27644]
  [27645] (28497/0) Call[27645] access __x0__ = (TemplateMiddleList "Evaluation")
  [27646] (28501/2) Normal[27646] let middle = __x1__
  [27647] (28502/3) Call[27647] access __x2__ = (Expression "Evaluation")
  [27648] (28506/5) Call[27648] app __x4__ = (ToString sub)
  [27649] (28507/5) Normal[27649] let last = [? __x4__]
  [27650] (28498/0) Normal[27650] let rest = __x0__
  [27651] (28503/3) Normal[27651] let subRef = __x2__
  [27652] (28505/4) Normal[27652] let sub = [? __x3__]
  [27653] (28499/1) Normal[27653] [? rest]
  [27654] (28508/6) Normal[27654] return (+ (+ rest middle) last)
  [27655] Exit[27655]
  [27656] (28504/4) Call[27656] app __x3__ = (GetValue subRef)
  [27657] (28500/2) Call[27657] access __x1__ = (TemplateMiddle "TV")
Algo: TemplateMiddleList[1,0].SubstitutionEvaluation [2476]
  [27658] Entry[27658]
  [27659] (28510/0) Call[27659] access __x0__ = (TemplateMiddleList "SubstitutionEvaluation")
  [27660] (28514/2) Call[27660] app __x2__ = (GetValue nextRef)
  [27661] (28515/2) Normal[27661] let next = [? __x2__]
  [27662] (28511/0) Normal[27662] let preceding = [? __x0__]
  [27663] (28516/3) Normal[27663] append next -> preceding
  [27664] (28512/1) Call[27664] access __x1__ = (Expression "Evaluation")
  [27665] (28517/4) Normal[27665] return preceding
  [27666] (28513/1) Normal[27666] let nextRef = __x1__
  [27667] Exit[27667]
Algo: TemplateMiddleList[1,0].TemplateStrings [2477]
  [27668] Entry[27668]
  [27669] (28519/0) Call[27669] access __x0__ = (TemplateMiddleList "TemplateStrings" raw)
  [27670] (28524/2) Normal[27670] let last = __x1__
  [27671] (28528/5) Normal[27671] append last -> front
  [27672] (28520/0) Normal[27672] let front = __x0__
  [27673] (28526/4) Call[27673] access __x2__ = (TemplateMiddle "TRV")
  [27674] (28527/4) Normal[27674] let last = __x2__
  [27675] (28529/6) Normal[27675] return front
  [27676] Exit[27676]
  [27677] (28521/1) If[27677] (= raw false)
  [27678] (28523/2) Call[27678] access __x1__ = (TemplateMiddle "TV")
Algo: TemplateSpans[0,0].EarlyErrors [2478]
  [27679] Entry[27679]
  [27680] (28531)Normal[27680] let TemplateSpans = this
  [27681] (28532/0) Normal[27681] ??? "It is a Syntax Error if the sub:{[ Tagged ]} parameter was not set and nt:{TemplateTail} Contains nt:{NotEscapeSequence} ."
  [27682] Exit[27682]
Algo: TemplateSpans[0,0].Evaluation [2479]
  [27683] Entry[27683]
  [27684] (28534)Normal[27684] let TemplateSpans = this
  [27685] (28535/0) Call[27685] access __x0__ = (TemplateTail "TV")
  [27686] (28536/0) Normal[27686] return __x0__
  [27687] Exit[27687]
Algo: TemplateSpans[0,0].SubstitutionEvaluation [2480]
  [27688] Entry[27688]
  [27689] (28538)Normal[27689] let TemplateSpans = this
  [27690] (28539/0) Normal[27690] return (new [])
  [27691] Exit[27691]
Algo: TemplateSpans[0,0].TemplateStrings [2481]
  [27692] Entry[27692]
  [27693] (28541)Normal[27693] let TemplateSpans = this
  [27694] (28547/3) Call[27694] access __x1__ = (TemplateTail "TRV")
  [27695] (28548/3) Normal[27695] let tail = __x1__
  [27696] (28542/0) If[27696] (= raw false)
  [27697] (28549/4) Normal[27697] return (new [tail])
  [27698] (28544/1) Call[27698] access __x0__ = (TemplateTail "TV")
  [27699] Exit[27699]
  [27700] (28545/1) Normal[27700] let tail = __x0__
Algo: TemplateSpans[1,0].Evaluation [2482]
  [27701] Entry[27701]
  [27702] (28551)Normal[27702] let TemplateSpans = this
  [27703] (28555/2) Call[27703] access __x1__ = (TemplateTail "TV")
  [27704] (28556/2) Normal[27704] let tail = __x1__
  [27705] (28552/0) Call[27705] access __x0__ = (TemplateMiddleList "Evaluation")
  [27706] (28557/3) Normal[27706] return (+ head tail)
  [27707] (28553/0) Normal[27707] let head = __x0__
  [27708] Exit[27708]
  [27709] (28554/1) Normal[27709] [? head]
Algo: TemplateSpans[1,0].SubstitutionEvaluation [2483]
  [27710] Entry[27710]
  [27711] (28559)Normal[27711] let TemplateSpans = this
  [27712] (28560/0) Call[27712] access __x0__ = (TemplateMiddleList "SubstitutionEvaluation")
  [27713] (28561/0) Normal[27713] return __x0__
  [27714] Exit[27714]
Algo: TemplateSpans[1,0].TemplateStrings [2484]
  [27715] Entry[27715]
  [27716] (28563)Normal[27716] let TemplateSpans = this
  [27717] (28568/2) Call[27717] access __x1__ = (TemplateTail "TV")
  [27718] (28569/2) Normal[27718] let tail = __x1__
  [27719] (28574/5) Normal[27719] return middle
  [27720] Exit[27720]
  [27721] (28564/0) Call[27721] access __x0__ = (TemplateMiddleList "TemplateStrings" raw)
  [27722] (28573/5) Normal[27722] append tail -> middle
  [27723] (28565/0) Normal[27723] let middle = __x0__
  [27724] (28571/4) Call[27724] access __x2__ = (TemplateTail "TRV")
  [27725] (28572/4) Normal[27725] let tail = __x2__
  [27726] (28566/1) If[27726] (= raw false)
Algo: Term[0,0].Evaluation [2485]
  [27727] Entry[27727]
  [27728] (28576)Normal[27728] let Term = this
  [27729] (28577/0) Normal[27729] ??? "Return the Matcher that is the result of evaluating nt:{Assertion} ."
  [27730] Exit[27730]
Algo: Term[1,0].Evaluation [2486]
  [27731] Entry[27731]
  [27732] (28579)Normal[27732] let Term = this
  [27733] (28580/0) Normal[27733] ??? "Return the Matcher that is the result of evaluating nt:{Atom} with argument id:{direction} ."
  [27734] Exit[27734]
Algo: Term[2,0].Evaluation [2487]
  [27735] Entry[27735]
  [27736] (28582)Normal[27736] let Term = this
  [27737] (28586/2) Normal[27737] assert (! (< max min))
  [27738] (28587/3) Normal[27738] ??? "Let id:{parenIndex} be the number of left - capturing parentheses in the entire regular expression that occur to the left of this nt:{Term} . This is the total number of grammar:{Atom4, [GroupSpecifier, Disjunction]} Parse Nodes prior to or enclosing this nt:{Term} ."
  [27739] (28583/0) Call[27739] access __x0__ = (Atom "Evaluation" direction)
  [27740] (28588/4) Normal[27740] ??? "Let id:{parenCount} be the number of left - capturing parentheses in nt:{Atom} . This is the total number of grammar:{Atom4, [GroupSpecifier, Disjunction]} Parse Nodes enclosed by nt:{Atom} ."
  [27741] (28584/0) Normal[27741] let m = __x0__
  [27742] (28589/5) Normal[27742] ??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{m} , id:{min} , id:{max} , id:{greedy} , id:{parenIndex} , and id:{parenCount} and performs the following steps when called : in:{} out:{}"
  [27743] (28585/1) Normal[27743] ??? "Evaluate nt:{Quantifier} to obtain the three results : a non - negative integer id:{min} , a non - negative integer ( or + ∞ ) id:{max} , and Boolean id:{greedy} ."
  [27744] Exit[27744]
Algo: TestIntegrityLevel [2488]
  [27745] Entry[27745]
  [27746] (28591/0) Normal[27746] assert (= (typeof O) Object)
  [27747] (28595/3) If[27747] (= extensible true)
  [27748] (28596/3) Normal[27748] return false
  [27749] (28598/5) Call[27749] app __x1__ = (O.OwnPropertyKeys O)
  [27750] (28601/6) Normal[27750] let __x3__ = 0i
  [27751] (28602/6) Loop[27751] (< __x3__ __x2__.length)
  [27752] (28606/7) Call[27752] app __x4__ = (O.GetOwnProperty O k)
  [27753] (28607/7) Normal[27753] let currentDesc = [? __x4__]
  [27754] (28614/10) Normal[27754] __x5__ = (= level ~frozen~)
  [27755] (28615/10) If[27755] __x5__
  [27756] (28592/1) Normal[27756] assert (|| (= level ~sealed~) (= level ~frozen~))
  [27757] (28600/6) Normal[27757] let __x2__ = keys
  [27758] (28605/6) Normal[27758] __x3__ = (+ __x3__ 1i)
  [27759] (28593/2) Call[27759] app __x0__ = (IsExtensible O)
  [27760] (28610/9) If[27760] (= currentDesc.Configurable true)
  [27761] (28611/9) Normal[27761] return false
  [27762] (28613/10) Normal[27762] let __x5__ = true
  [27763] (28604/6) Normal[27763] let k = __x2__[__x3__]
  [27764] (28599/5) Normal[27764] let keys = [? __x1__]
  [27765] (28594/2) Normal[27765] let extensible = [? __x0__]
  [27766] (28608/8) If[27766] (! (= currentDesc undefined))
  [27767] LoopCont[27767]
  [27768] (28626/12) Normal[27768] return true
  [27769] (28620/10) If[27769] __x5__
  [27770] (28621/11) If[27770] (= currentDesc.Writable true)
  [27771] (28622/11) Normal[27771] return false
  [27772] Exit[27772]
  [27773] (28617/10) Call[27773] app __x6__ = (IsDataDescriptor currentDesc)
  [27774] (28618/10) Normal[27774] __x5__ = (= __x6__ true)
Algo: TheAbstractClosureSpecificationType [2490]
  [27778] Entry[27778]
  [27779] (28628/0) Normal[27779] let addend = 41i
  [27780] (28633/3) Normal[27780] let val = __x1__
  [27781] (28634/4) Normal[27781] assert (= val 42i)
  [27782] (28629/1) Arrow[27782] clo __x0__ = (x)[addend] => return (+ x addend) [fid: 2489]
  [27783] Exit[27783]
  [27784] (28631/1) Normal[27784] let closure = __x0__
  [27785] (28632/3) Call[27785] app __x1__ = (closure 1i)
Algo: TheAbstractClosureSpecificationType:1 [2489]
  [27775] Entry[27775]
  [27776] (28630/2) Normal[27776] return (+ x addend)
  [27777] Exit[27777]
Algo: ThrowCompletion [2491]
  [27786] Entry[27786]
  [27787] (28635/0) Normal[27787] return (comp[~throw~] argument => ~empty~)
  [27788] Exit[27788]
Algo: ThrowStatement[0,0].Evaluation [2492]
  [27789] Entry[27789]
  [27790] (28637)Normal[27790] let ThrowStatement = this
  [27791] (28641/1) Normal[27791] let exprValue = [? __x1__]
  [27792] (28642/2) Call[27792] app __x2__ = (ThrowCompletion exprValue)
  [27793] (28638/0) Call[27793] access __x0__ = (Expression "Evaluation")
  [27794] (28643/2) Normal[27794] return __x2__
  [27795] (28639/0) Normal[27795] let exprRef = __x0__
  [27796] Exit[27796]
  [27797] (28640/1) Call[27797] app __x1__ = (GetValue exprRef)
Algo: TimeClip [2493]
  [27798] Entry[27798]
  [27799] (28645/0) If[27799] (|| (|| (= time Infinity) (= time -Infinity)) (= time NaN))
  [27800] (28650/1) Normal[27800] return NaN
  [27801] (28652/2) Call[27801] app __x1__ = (ToIntegerOrInfinity time)
  [27802] (28646/0) Normal[27802] return NaN
  [27803] (28648/1) Call[27803] app __x0__ = (abs time)
  [27804] (28653/2) Normal[27804] return [! __x1__]
  [27805] Exit[27805]
  [27806] (28649/1) If[27806] (< (* 8.64 (** 10i 15i)) __x0__)
Algo: TimeFromYear [2494]
  [27807] Entry[27807]
  [27808] (28655/0) Call[27808] app __x0__ = (DayFromYear y)
  [27809] (28656/0) Normal[27809] return (* 8.64E7 __x0__)
  [27810] Exit[27810]
Algo: TimeString [2495]
  [27811] Entry[27811]
  [27812] (28658/0) Normal[27812] assert (= (typeof tv) Number)
  [27813] (28662/4) Normal[27813] ??? "Let id:{second} be the String representation of SecFromTime ( id:{tv} ) , formatted as a two - digit decimal number , padded to the left with the code unit 0x0030 ( DIGIT ZERO ) if necessary ."
  [27814] (28663/5) Normal[27814] return (+ (+ (+ (+ (+ (+ hour ":") minute) ":") second) " ") "GMT")
  [27815] (28659/1) Normal[27815] assert (! (= tv NaN))
  [27816] Exit[27816]
  [27817] (28660/2) Normal[27817] ??? "Let id:{hour} be the String representation of HourFromTime ( id:{tv} ) , formatted as a two - digit decimal number , padded to the left with the code unit 0x0030 ( DIGIT ZERO ) if necessary ."
  [27818] (28661/3) Normal[27818] ??? "Let id:{minute} be the String representation of MinFromTime ( id:{tv} ) , formatted as a two - digit decimal number , padded to the left with the code unit 0x0030 ( DIGIT ZERO ) if necessary ."
Algo: TimeWithinDay [2496]
  [27819] Entry[27819]
  [27820] (28664/0) Normal[27820] return (%% t 8.64E7)
  [27821] Exit[27821]
Algo: TimeZoneString [2497]
  [27822] Entry[27822]
  [27823] (28666/0) Normal[27823] assert (= (typeof tv) Number)
  [27824] (28670/3) If[27824] (! (< offset 0i))
  [27825] (28672/4) Normal[27825] let offsetSign = "+"
  [27826] (28675/7) Normal[27826] let offsetSign = "-"
  [27827] (28677/9) Normal[27827] ??? "Let id:{offsetMin} be the String representation of MinFromTime ( id:{absOffset} ) , formatted as a two - digit decimal number , padded to the left with the code unit 0x0030 ( DIGIT ZERO ) if necessary ."
  [27828] (28678/10) Normal[27828] ??? "Let id:{offsetHour} be the String representation of HourFromTime ( id:{absOffset} ) , formatted as a two - digit decimal number , padded to the left with the code unit 0x0030 ( DIGIT ZERO ) if necessary ."
  [27829] (28667/1) Normal[27829] assert (! (= tv NaN))
  [27830] (28673/5) Normal[27830] let absOffset = offset
  [27831] (28676/8) Normal[27831] let absOffset = (- offset)
  [27832] (28680/12) Normal[27832] return (+ (+ (+ offsetSign offsetHour) offsetMin) tzName)
  [27833] Exit[27833]
  [27834] (28668/2) Call[27834] app __x0__ = (LocalTZA tv true)
  [27835] (28679/11) Normal[27835] ??? "Let id:{tzName} be an implementation - defined string that is either the empty String or the string - concatenation of the code unit 0x0020 ( SPACE ) , the code unit 0x0028 ( LEFT PARENTHESIS ) , an implementation - defined timezone name , and the code unit 0x0029 ( RIGHT PARENTHESIS ) ."
  [27836] (28669/2) Normal[27836] let offset = __x0__
Algo: ToBigInt [2498]
  [27837] Entry[27837]
  [27838] (28682)Call[27838] app __x0__ = (ToPrimitive argument ~number~)
  [27839] (28686)If[27839] (= (typeof prim) Null)
  [27840] (28687)Normal[27840] throw TypeError
  [27841] (28688)If[27841] (= (typeof prim) Boolean)
  [27842] (28691)Normal[27842] return 0n
  [27843] Exit[27843]
  [27844] (28695)Normal[27844] throw TypeError
  [27845] (28703)Normal[27845] return n
  [27846] (28683)Normal[27846] let prim = [? __x0__]
  [27847] (28704)If[27847] (= (typeof prim) Symbol)
  [27848] (28705)Normal[27848] throw TypeError
  [27849] (28690)Normal[27849] return 1n
  [27850] (28694)If[27850] (= (typeof prim) Number)
  [27851] (28696)If[27851] (= (typeof prim) String)
  [27852] (28684)If[27852] (= (typeof prim) Undefined)
  [27853] (28699)Normal[27853] let n = [! __x1__]
  [27854] (28700)If[27854] (= n NaN)
  [27855] (28693)Normal[27855] return prim
  [27856] (28689)If[27856] prim
  [27857] (28692)If[27857] (= (typeof prim) BigInt)
  [27858] (28685)Normal[27858] throw TypeError
  [27859] (28701)Normal[27859] throw SyntaxError
  [27860] (28698)Call[27860] app __x1__ = (StringToBigInt prim)
Algo: ToBigInt64 [2499]
  [27861] Entry[27861]
  [27862] (28708/0) Call[27862] app __x0__ = (ToBigInt argument)
  [27863] (28712/2) Normal[27863] return (convert (- int64bit (** 2i 64i)) num2bigint)
  [27864] Exit[27864]
  [27865] (28709/0) Normal[27865] let n = [? __x0__]
  [27866] (28713/2) Normal[27866] return (convert int64bit num2bigint)
  [27867] (28710/1) Normal[27867] let int64bit = (%% n (** 2i 64i))
  [27868] (28711/2) If[27868] (! (< int64bit (** 2i 63i)))
Algo: ToBigUint64 [2500]
  [27869] Entry[27869]
  [27870] (28715/0) Call[27870] app __x0__ = (ToBigInt argument)
  [27871] (28716/0) Normal[27871] let n = [? __x0__]
  [27872] (28717/1) Normal[27872] let int64bit = (%% n (** 2i 64i))
  [27873] (28718/2) Normal[27873] return (convert int64bit num2bigint)
  [27874] Exit[27874]
Algo: ToBoolean [2501]
  [27875] Entry[27875]
  [27876] (28720/1) If[27876] (= (typeof argument) Undefined)
  [27877] (28726/5) If[27877] (= (typeof argument) Boolean)
  [27878] (28727/4) Normal[27878] return argument
  [27879] (28729/7) If[27879] (= (typeof argument) Number)
  [27880] (28732/6) Normal[27880] return true
  [27881] (28734/9) If[27881] (= (typeof argument) String)
  [27882] (28737/8) Normal[27882] return true
  [27883] (28739/11) If[27883] (= (typeof argument) Symbol)
  [27884] (28745/12) Normal[27884] return true
  [27885] (28747/15) If[27885] (= (typeof argument) Object)
  [27886] (28721/0) Normal[27886] return false
  [27887] (28723/3) If[27887] (= (typeof argument) Null)
  [27888] (28748/14) Normal[27888] return true
  [27889] (28750/16) Normal[27889] assert false
  [27890] (28731/6) Normal[27890] return false
  [27891] (28736/8) Normal[27891] return false
  [27892] (28742/13) If[27892] (= (typeof argument) BigInt)
  [27893] (28743/12) If[27893] (= argument 0n)
  [27894] (28735/8) If[27894] (= argument "")
  [27895] (28730/6) If[27895] (|| (|| (= argument 0i) (= argument -0.0)) (= argument NaN))
  [27896] (28724/2) Normal[27896] return false
  [27897] (28744/12) Normal[27897] return false
  [27898] (28740/10) Normal[27898] return true
  [27899] Exit[27899]
Algo: ToDateString [2502]
  [27900] Entry[27900]
  [27901] (28752/0) Normal[27901] assert (= (typeof tv) Number)
  [27902] (28757/2) Normal[27902] let t = __x0__
  [27903] (28758/3) Call[27903] app __x1__ = (DateString t)
  [27904] (28753/1) If[27904] (= tv NaN)
  [27905] (28759/3) Call[27905] app __x2__ = (TimeString t)
  [27906] (28761/3) Normal[27906] return (+ (+ (+ __x1__ " ") __x2__) __x3__)
  [27907] Exit[27907]
  [27908] (28754/1) Normal[27908] return "Invalid Date"
  [27909] (28756/2) Call[27909] app __x0__ = (LocalTime tv)
  [27910] (28760/3) Call[27910] app __x3__ = (TimeZoneString tv)
Algo: ToIndex [2503]
  [27911] Entry[27911]
  [27912] (28762/0) If[27912] (= value undefined)
  [27913] (28767/4) If[27913] (< integerIndex 0i)
  [27914] (28768/4) Normal[27914] throw RangeError
  [27915] (28770/5) Call[27915] app __x1__ = (ToLength integerIndex)
  [27916] (28773/6) If[27916] (= [! __x2__] false)
  [27917] (28774/6) Normal[27917] throw RangeError
  [27918] (28776/7) Normal[27918] return index
  [27919] (28763/1) Normal[27919] return 0i
  [27920] (28765/3) Call[27920] app __x0__ = (ToIntegerOrInfinity value)
  [27921] (28772/6) Call[27921] app __x2__ = (SameValue integerIndex index)
  [27922] Exit[27922]
  [27923] (28771/5) Normal[27923] let index = [! __x1__]
  [27924] (28766/3) Normal[27924] let integerIndex = [? __x0__]
Algo: ToInt16 [2504]
  [27925] Entry[27925]
  [27926] (28778/0) Call[27926] app __x0__ = (ToNumber argument)
  [27927] (28783/2) Normal[27927] let int = (convert number num2int)
  [27928] (28784/3) Normal[27928] let int16bit = (%% int (** 2i 16i))
  [27929] (28779/0) Normal[27929] let number = [? __x0__]
  [27930] (28785/4) If[27930] (! (< int16bit (** 2i 15i)))
  [27931] (28787/4) Normal[27931] return int16bit
  [27932] Exit[27932]
  [27933] (28780/1) If[27933] (|| (|| (|| (|| (= number NaN) (= number 0i)) (= number -0.0)) (= number Infinity)) (= number -Infinity))
  [27934] (28786/4) Normal[27934] return (- int16bit (** 2i 16i))
  [27935] (28781/1) Normal[27935] return 0i
Algo: ToInt32 [2505]
  [27936] Entry[27936]
  [27937] (28789/0) Call[27937] app __x0__ = (ToNumber argument)
  [27938] (28794/2) Normal[27938] let int = (convert number num2int)
  [27939] (28795/3) Normal[27939] let int32bit = (%% int (** 2i 32i))
  [27940] (28790/0) Normal[27940] let number = [? __x0__]
  [27941] (28796/4) If[27941] (! (< int32bit (** 2i 31i)))
  [27942] (28798/4) Normal[27942] return int32bit
  [27943] Exit[27943]
  [27944] (28791/1) If[27944] (|| (|| (|| (|| (= number NaN) (= number 0i)) (= number -0.0)) (= number Infinity)) (= number -Infinity))
  [27945] (28797/4) Normal[27945] return (- int32bit (** 2i 32i))
  [27946] (28792/1) Normal[27946] return 0i
Algo: ToInt8 [2506]
  [27947] Entry[27947]
  [27948] (28800/0) Call[27948] app __x0__ = (ToNumber argument)
  [27949] (28805/2) Normal[27949] let int = (convert number num2int)
  [27950] (28806/3) Normal[27950] let int8bit = (%% int (** 2i 8i))
  [27951] (28801/0) Normal[27951] let number = [? __x0__]
  [27952] (28807/4) If[27952] (! (< int8bit (** 2i 7i)))
  [27953] (28809/4) Normal[27953] return int8bit
  [27954] Exit[27954]
  [27955] (28802/1) If[27955] (|| (|| (|| (|| (= number NaN) (= number 0i)) (= number -0.0)) (= number Infinity)) (= number -Infinity))
  [27956] (28808/4) Normal[27956] return (- int8bit (** 2i 8i))
  [27957] (28803/1) Normal[27957] return 0i
Algo: ToIntegerOrInfinity [2507]
  [27958] Entry[27958]
  [27959] (28811/0) Call[27959] app __x0__ = (ToNumber argument)
  [27960] (28816/2) If[27960] (= number Infinity)
  [27961] (28817/2) Normal[27961] return Infinity
  [27962] (28819/3) If[27962] (= number -Infinity)
  [27963] (28823/4) Call[27963] app __x2__ = (floor __x1__)
  [27964] (28824/4) Normal[27964] let integer = __x2__
  [27965] (28828/6) Normal[27965] return integer
  [27966] Exit[27966]
  [27967] (28812/0) Normal[27967] let number = [? __x0__]
  [27968] (28822/4) Call[27968] app __x1__ = (abs number)
  [27969] (28826/5) Normal[27969] integer = (- integer)
  [27970] (28813/1) If[27970] (|| (|| (= number NaN) (= number 0i)) (= number -0.0))
  [27971] (28825/5) If[27971] (< number 0i)
  [27972] (28820/3) Normal[27972] return -Infinity
  [27973] (28814/1) Normal[27973] return 0i
Algo: ToLength [2508]
  [27974] Entry[27974]
  [27975] (28830/0) Call[27975] app __x0__ = (ToIntegerOrInfinity argument)
  [27976] (28835/2) Call[27976] app __x1__ = (min len (- (** 2i 53i) 1i))
  [27977] (28836/2) Normal[27977] return __x1__
  [27978] (28831/0) Normal[27978] let len = [? __x0__]
  [27979] Exit[27979]
  [27980] (28832/1) If[27980] (! (< 0i len))
  [27981] (28833/1) Normal[27981] return 0i
Algo: ToNumber [2509]
  [27982] Entry[27982]
  [27983] (28838)If[27983] (= (typeof argument) Undefined)
  [27984] (28842)If[27984] (= (typeof argument) Boolean)
  [27985] (28843)If[27985] argument
  [27986] (28846)If[27986] (= (typeof argument) Number)
  [27987] (28847)Normal[27987] return argument
  [27988] Exit[27988]
  [27989] (28851)Normal[27989] throw TypeError
  [27990] (28858)Normal[27990] return [? __x1__]
  [27991] (28839)Normal[27991] return NaN
  [27992] (28840)If[27992] (= (typeof argument) Null)
  [27993] (28844)Normal[27993] return 1.0
  [27994] (28845)Normal[27994] return 0.0
  [27995] (28848)If[27995] (= (typeof argument) String)
  [27996] (28850)If[27996] (= (typeof argument) Symbol)
  [27997] (28852)If[27997] (= (typeof argument) BigInt)
  [27998] (28855)Call[27998] app __x0__ = (ToPrimitive argument ~number~)
  [27999] (28856)Normal[27999] let primValue = [? __x0__]
  [28000] (28849)Normal[28000] return (convert argument str2num)
  [28001] (28841)Normal[28001] return 0.0
  [28002] (28857)Call[28002] app __x1__ = (ToNumber primValue)
  [28003] (28853)Normal[28003] throw TypeError
Algo: ToNumeric [2510]
  [28004] Entry[28004]
  [28005] (28860/0) Call[28005] app __x0__ = (ToPrimitive value ~number~)
  [28006] (28865/2) Call[28006] app __x1__ = (ToNumber primValue)
  [28007] (28866/2) Normal[28007] return [? __x1__]
  [28008] (28861/0) Normal[28008] let primValue = [? __x0__]
  [28009] Exit[28009]
  [28010] (28862/1) If[28010] (= (typeof primValue) BigInt)
  [28011] (28863/1) Normal[28011] return primValue
Algo: ToObject [2511]
  [28012] Entry[28012]
  [28013] (28868/1) If[28013] (= (typeof argument) Undefined)
  [28014] (28874/5) If[28014] (= (typeof argument) Boolean)
  [28015] (28876/4) Normal[28015] let obj = (new OrdinaryObject("Prototype" -> INTRINSICS["%Boolean.prototype%"], "BooleanData" -> argument, "Extensible" -> true))
  [28016] (28879/7) If[28016] (= (typeof argument) Number)
  [28017] (28882/6) Normal[28017] return obj
  [28018] (28884/9) If[28018] (= (typeof argument) String)
  [28019] (28888/8) Normal[28019] return obj
  [28020] (28890/11) If[28020] (= (typeof argument) Symbol)
  [28021] (28898/12) Normal[28021] return obj
  [28022] (28900/15) If[28022] (= (typeof argument) Object)
  [28023] (28869/0) Normal[28023] throw TypeError
  [28024] (28871/3) If[28024] (= (typeof argument) Null)
  [28025] (28877/4) Normal[28025] return obj
  [28026] (28901/14) Normal[28026] return argument
  [28027] (28903/16) Normal[28027] assert false
  [28028] (28881/6) Normal[28028] let obj = (new OrdinaryObject("Prototype" -> INTRINSICS["%Number.prototype%"], "NumberData" -> argument, "Extensible" -> true))
  [28029] (28887/8) Normal[28029] obj.SubMap.length = (new DataProperty("Value" -> argument.length, "Writable" -> false, "Enumerable" -> false, "Configurable" -> false))
  [28030] (28893/10) Normal[28030] return obj
  [28031] (28895/13) If[28031] (= (typeof argument) BigInt)
  [28032] (28886/8) Normal[28032] let obj = (new StringExoticObject("Prototype" -> INTRINSICS["%String.prototype%"], "StringData" -> argument, "Extensible" -> true))
  [28033] (28872/2) Normal[28033] throw TypeError
  [28034] (28897/12) Normal[28034] let obj = (new OrdinaryObject("Prototype" -> INTRINSICS["%BigInt.prototype%"], "BigIntData" -> argument, "Extensible" -> true))
  [28035] (28892/10) Normal[28035] let obj = (new OrdinaryObject("Prototype" -> INTRINSICS["%Symbol.prototype%"], "SymbolData" -> argument, "Extensible" -> true))
  [28036] Exit[28036]
Algo: ToPrimitive [2512]
  [28037] Entry[28037]
  [28038] (28905/1) If[28038] (= (typeof input) Object)
  [28039] (28911/4) If[28039] (= preferredType absent)
  [28040] (28912/4) Normal[28040] let hint = "default"
  [28041] (28913/4) If[28041] (= preferredType ~string~)
  [28042] (28917/8) Normal[28042] let hint = "number"
  [28043] (28918/9) Call[28043] app __x1__ = (Call exoticToPrim input (new [hint]))
  [28044] (28921/10) Normal[28044] return result
  [28045] (28923/11) Normal[28045] throw TypeError
  [28046] (28931/14) Normal[28046] return input
  [28047] Exit[28047]
  [28048] (28907/2) Call[28048] app __x0__ = (GetMethod input SYMBOL_toPrimitive)
  [28049] (28916/7) Normal[28049] assert (= preferredType ~number~)
  [28050] (28920/10) If[28050] (! (= (typeof result) Object))
  [28051] (28908/2) Normal[28051] let exoticToPrim = [? __x0__]
  [28052] (28926/12) Normal[28052] let preferredType = ~number~
  [28053] (28928/13) Call[28053] app __x2__ = (OrdinaryToPrimitive input preferredType)
  [28054] (28919/9) Normal[28054] let result = [? __x1__]
  [28055] (28914/5) Normal[28055] let hint = "string"
  [28056] (28909/3) If[28056] (! (= exoticToPrim undefined))
  [28057] (28929/13) Normal[28057] return [? __x2__]
  [28058] (28925/12) If[28058] (= preferredType absent)
Algo: ToPropertyDescriptor [2513]
  [28059] Entry[28059]
  [28060] (28933/0) If[28060] (! (= (typeof Obj) Object))
  [28061] (28938/2) Normal[28061] let hasEnumerable = [? __x0__]
  [28062] (28939/3) If[28062] (= hasEnumerable true)
  [28063] (28944/5) Normal[28063] desc.Enumerable = enumerable
  [28064] (28946/6) Call[28064] app __x3__ = (HasProperty Obj "configurable")
  [28065] (28934/0) Normal[28065] throw TypeError
  [28066] (28936/1) Normal[28066] let desc = (new PropertyDescriptor())
  [28067] (28941/4) Call[28067] app __x1__ = (Get Obj "enumerable")
  [28068] (28943/4) Normal[28068] let enumerable = [! __x2__]
  [28069] (28942/4) Call[28069] app __x2__ = (ToBoolean [? __x1__])
  [28070] (28937/2) Call[28070] app __x0__ = (HasProperty Obj "enumerable")
  [28071] (28986/24) If[28071] (= hasSet true)
  [28072] (28988/25) Call[28072] app __x15__ = (Get Obj "set")
  [28073] (28996/28) If[28073] (|| (! (= desc.Get absent)) (! (= desc.Set absent)))
  [28074] (28963/14) Call[28074] app __x8__ = (HasProperty Obj "writable")
  [28075] (28964/14) Normal[28075] let hasWritable = [? __x8__]
  [28076] (28979/21) If[28076] (&& (= __x13__ false) (! (= getter undefined)))
  [28077] (28980/21) Normal[28077] throw TypeError
  [28078] (28982/22) Normal[28078] desc.Get = getter
  [28079] (28965/15) If[28079] (= hasWritable true)
  [28080] (29001/30) Normal[28080] return desc
  [28081] Exit[28081]
  [28082] (28950/8) Call[28082] app __x4__ = (Get Obj "configurable")
  [28083] (28951/8) Call[28083] app __x5__ = (ToBoolean [? __x4__])
  [28084] (28957/11) If[28084] (= hasValue true)
  [28085] (28959/12) Call[28085] app __x7__ = (Get Obj "value")
  [28086] (28991/26) If[28086] (&& (= __x16__ false) (! (= setter undefined)))
  [28087] (28992/26) Normal[28087] throw TypeError
  [28088] (28994/27) Normal[28088] desc.Set = setter
  [28089] (28969/16) Normal[28089] let writable = [! __x10__]
  [28090] (28970/17) Normal[28090] desc.Writable = writable
  [28091] (28960/12) Normal[28091] let value = [? __x7__]
  [28092] (28974/19) If[28092] (= hasGet true)
  [28093] (28976/20) Call[28093] app __x12__ = (Get Obj "get")
  [28094] (28984/23) Call[28094] app __x14__ = (HasProperty Obj "set")
  [28095] (28968/16) Call[28095] app __x10__ = (ToBoolean [? __x9__])
  [28096] (28948/7) If[28096] (= hasConfigurable true)
  [28097] (28955/10) Call[28097] app __x6__ = (HasProperty Obj "value")
  [28098] (28985/23) Normal[28098] let hasSet = [? __x14__]
  [28099] (28990/26) Call[28099] app __x16__ = (IsCallable setter)
  [28100] (28953/9) Normal[28100] desc.Configurable = configurable
  [28101] (28973/18) Normal[28101] let hasGet = [? __x11__]
  [28102] (28977/20) Normal[28102] let getter = [? __x12__]
  [28103] (28961/13) Normal[28103] desc.Value = value
  [28104] (28989/25) Normal[28104] let setter = [? __x15__]
  [28105] (28967/16) Call[28105] app __x9__ = (Get Obj "writable")
  [28106] (28947/6) Normal[28106] let hasConfigurable = [? __x3__]
  [28107] (28997/29) If[28107] (|| (! (= desc.Value absent)) (! (= desc.Writable absent)))
  [28108] (28978/21) Call[28108] app __x13__ = (IsCallable getter)
  [28109] (28956/10) Normal[28109] let hasValue = [? __x6__]
  [28110] (28998/29) Normal[28110] throw TypeError
  [28111] (28952/8) Normal[28111] let configurable = [! __x5__]
  [28112] (28972/18) Call[28112] app __x11__ = (HasProperty Obj "get")
Algo: ToPropertyKey [2514]
  [28113] Entry[28113]
  [28114] (29003/0) Call[28114] app __x0__ = (ToPrimitive argument ~string~)
  [28115] (29008/3) Call[28115] app __x1__ = (ToString key)
  [28116] (29009/3) Normal[28116] return [! __x1__]
  [28117] (29004/0) Normal[28117] let key = [? __x0__]
  [28118] Exit[28118]
  [28119] (29005/1) If[28119] (= (typeof key) Symbol)
  [28120] (29006/2) Normal[28120] return key
Algo: ToString [2515]
  [28121] Entry[28121]
  [28122] (29011/1) If[28122] (= (typeof argument) Undefined)
  [28123] (29017/6) If[28123] (= (typeof argument) Boolean)
  [28124] (29019/4) If[28124] (= argument true)
  [28125] (29026/8) If[28125] (= (typeof argument) Number)
  [28126] (29028/7) Call[28126] app __x0__ = (PRIMITIVE[Number].toString argument)
  [28127] (29031/10) If[28127] (= (typeof argument) String)
  [28128] (29032/9) Normal[28128] return argument
  [28129] (29034/12) If[28129] (= (typeof argument) Symbol)
  [28130] (29042/17) If[28130] (= (typeof argument) Object)
  [28131] (29044/15) Call[28131] app __x2__ = (ToPrimitive argument ~string~)
  [28132] (29049/18) Normal[28132] assert false
  [28133] (29012/0) Normal[28133] return "undefined"
  [28134] (29014/3) If[28134] (= (typeof argument) Null)
  [28135] (29020/4) Normal[28135] return "true"
  [28136] (29022/5) If[28136] (= argument false)
  [28137] (29045/15) Normal[28137] let primValue = [? __x2__]
  [28138] (29023/5) Normal[28138] return "false"
  [28139] (29037/14) If[28139] (= (typeof argument) BigInt)
  [28140] (29039/13) Call[28140] app __x1__ = (PRIMITIVE[BigInt].toString argument)
  [28141] (29046/16) Call[28141] app __x3__ = (ToString primValue)
  [28142] (29029/7) Normal[28142] return [! __x0__]
  [28143] (29015/2) Normal[28143] return "null"
  [28144] (29040/13) Normal[28144] return [! __x1__]
  [28145] (29035/11) Normal[28145] throw TypeError
  [28146] (29047/16) Normal[28146] return [? __x3__]
  [28147] Exit[28147]
Algo: ToUint16 [2516]
  [28148] Entry[28148]
  [28149] (29051/0) Call[28149] app __x0__ = (ToNumber argument)
  [28150] (29056/2) Normal[28150] let int = (convert number num2int)
  [28151] (29057/3) Normal[28151] let int16bit = (%% int (** 2i 16i))
  [28152] (29052/0) Normal[28152] let number = [? __x0__]
  [28153] (29058/4) Normal[28153] return int16bit
  [28154] (29053/1) If[28154] (|| (|| (|| (|| (= number NaN) (= number 0i)) (= number -0.0)) (= number Infinity)) (= number -Infinity))
  [28155] Exit[28155]
  [28156] (29054/1) Normal[28156] return 0i
Algo: ToUint32 [2517]
  [28157] Entry[28157]
  [28158] (29060/0) Call[28158] app __x0__ = (ToNumber argument)
  [28159] (29065/2) Normal[28159] let int = (convert number num2int)
  [28160] (29066/3) Normal[28160] let int32bit = (%% int (** 2i 32i))
  [28161] (29061/0) Normal[28161] let number = [? __x0__]
  [28162] (29067/4) Normal[28162] return int32bit
  [28163] (29062/1) If[28163] (|| (|| (|| (|| (= number NaN) (= number 0i)) (= number -0.0)) (= number Infinity)) (= number -Infinity))
  [28164] Exit[28164]
  [28165] (29063/1) Normal[28165] return 0i
Algo: ToUint8 [2518]
  [28166] Entry[28166]
  [28167] (29069/0) Call[28167] app __x0__ = (ToNumber argument)
  [28168] (29074/2) Normal[28168] let int = (convert number num2int)
  [28169] (29075/3) Normal[28169] let int8bit = (%% int (** 2i 8i))
  [28170] (29070/0) Normal[28170] let number = [? __x0__]
  [28171] (29076/4) Normal[28171] return int8bit
  [28172] (29071/1) If[28172] (|| (|| (|| (|| (= number NaN) (= number 0i)) (= number -0.0)) (= number Infinity)) (= number -Infinity))
  [28173] Exit[28173]
  [28174] (29072/1) Normal[28174] return 0i
Algo: ToUint8Clamp [2519]
  [28175] Entry[28175]
  [28176] (29078/0) Call[28176] app __x0__ = (ToNumber argument)
  [28177] (29083/2) If[28177] (! (< 0i number))
  [28178] (29084/2) Normal[28178] return 0i
  [28179] (29086/3) If[28179] (! (< number 255i))
  [28180] (29090/4) Normal[28180] let f = __x1__
  [28181] (29091/5) If[28181] (< (+ f 0.5) number)
  [28182] (29095/6) Normal[28182] return f
  [28183] (29097/7) If[28183] (= (% f 2i) 1i)
  [28184] (29079/0) Normal[28184] let number = [? __x0__]
  [28185] (29089/4) Call[28185] app __x1__ = (floor number)
  [28186] (29094/6) If[28186] (< number (+ f 0.5))
  [28187] (29080/1) If[28187] (= number NaN)
  [28188] (29100/8) Normal[28188] return f
  [28189] Exit[28189]
  [28190] (29092/5) Normal[28190] return (+ f 1i)
  [28191] (29087/3) Normal[28191] return 255i
  [28192] (29081/1) Normal[28192] return 0i
  [28193] (29098/7) Normal[28193] return (+ f 1i)
Algo: TriggerPromiseReactions [2520]
  [28194] Entry[28194]
  [28195] (29102/0) Normal[28195] let __x0__ = reactions
  [28196] (29107/0) Normal[28196] __x1__ = (+ __x1__ 1i)
  [28197] (29108/1) Call[28197] app __x2__ = (NewPromiseReactionJob reaction argument)
  [28198] LoopCont[28198]
  [28199] (29104/0) Loop[28199] (< __x1__ __x0__.length)
  [28200] (29103/0) Normal[28200] let __x1__ = 0i
  [28201] (29109/1) Normal[28201] let job = __x2__
  [28202] (29111/2) Normal[28202] __x3__
  [28203] (29110/2) Call[28203] app __x3__ = (HostEnqueuePromiseJob job.Job job.Realm)
  [28204] (29106/0) Normal[28204] let reaction = __x0__[__x1__]
  [28205] (29112/3) Normal[28205] return undefined
  [28206] Exit[28206]
Algo: TrimString [2521]
  [28207] Entry[28207]
  [28208] (29114/0) Call[28208] app __x0__ = (RequireObjectCoercible string)
  [28209] (29118/2) Normal[28209] ??? "If id:{where} is const:{start} , let id:{T} be the String value that is a copy of id:{S} with leading white space removed ."
  [28210] (29119/3) Normal[28210] ??? "Else if id:{where} is const:{end} , let id:{T} be the String value that is a copy of id:{S} with trailing white space removed ."
  [28211] (29115/0) Normal[28211] let str = [? __x0__]
  [28212] (29120/4) Normal[28212] ??? "Else , in:{} out:{}"
  [28213] (29116/1) Call[28213] app __x1__ = (ToString str)
  [28214] (29121/7) Normal[28214] return T
  [28215] (29117/1) Normal[28215] let S = [? __x1__]
  [28216] Exit[28216]
Algo: TryStatement[0,0].ContainsDuplicateLabels [2522]
  [28217] Entry[28217]
  [28218] (29123)Normal[28218] let TryStatement = this
  [28219] (29127/1) Normal[28219] return true
  [28220] (29129/2) Call[28220] access __x1__ = (Catch "ContainsDuplicateLabels" labelSet)
  [28221] (29124/0) Call[28221] access __x0__ = (Block "ContainsDuplicateLabels" labelSet)
  [28222] (29130/2) Normal[28222] return __x1__
  [28223] (29125/0) Normal[28223] let hasDuplicates = __x0__
  [28224] Exit[28224]
  [28225] (29126/1) If[28225] (= hasDuplicates true)
Algo: TryStatement[0,0].ContainsUndefinedBreakTarget [2523]
  [28226] Entry[28226]
  [28227] (29132)Normal[28227] let TryStatement = this
  [28228] (29136/1) Normal[28228] return true
  [28229] (29138/2) Call[28229] access __x1__ = (Catch "ContainsUndefinedBreakTarget" labelSet)
  [28230] (29133/0) Call[28230] access __x0__ = (Block "ContainsUndefinedBreakTarget" labelSet)
  [28231] (29139/2) Normal[28231] return __x1__
  [28232] (29134/0) Normal[28232] let hasUndefinedLabels = __x0__
  [28233] Exit[28233]
  [28234] (29135/1) If[28234] (= hasUndefinedLabels true)
Algo: TryStatement[0,0].ContainsUndefinedContinueTarget [2524]
  [28235] Entry[28235]
  [28236] (29141)Normal[28236] let TryStatement = this
  [28237] (29145/1) Normal[28237] return true
  [28238] (29147/2) Call[28238] access __x1__ = (Catch "ContainsUndefinedContinueTarget" iterationSet (new []))
  [28239] (29142/0) Call[28239] access __x0__ = (Block "ContainsUndefinedContinueTarget" iterationSet (new []))
  [28240] (29148/2) Normal[28240] return __x1__
  [28241] (29143/0) Normal[28241] let hasUndefinedLabels = __x0__
  [28242] Exit[28242]
  [28243] (29144/1) If[28243] (= hasUndefinedLabels true)
Algo: TryStatement[0,0].Evaluation [2525]
  [28244] Entry[28244]
  [28245] (29150)Normal[28245] let TryStatement = this
  [28246] (29155/1) Call[28246] access __x1__ = (Catch "CatchClauseEvaluation" B.Value)
  [28247] (29156/1) Normal[28247] let C = __x1__
  [28248] (29151/0) Call[28248] access __x0__ = (Block "Evaluation")
  [28249] (29158/3) Call[28249] app __x2__ = (UpdateEmpty C undefined)
  [28250] (29159/3) Normal[28250] return __x2__
  [28251] Exit[28251]
  [28252] (29152/0) Normal[28252] let B = __x0__
  [28253] (29157/1) Normal[28253] let C = B
  [28254] (29153/1) If[28254] (= B.Type ~throw~)
Algo: TryStatement[0,0].HasCallInTailPosition [2526]
  [28255] Entry[28255]
  [28256] (29161)Normal[28256] let TryStatement = this
  [28257] (29162/0) Call[28257] access __x0__ = (Catch "HasCallInTailPosition" call)
  [28258] (29163/0) Normal[28258] return __x0__
  [28259] Exit[28259]
Algo: TryStatement[0,0].VarDeclaredNames [2527]
  [28260] Entry[28260]
  [28261] (29165)Normal[28261] let TryStatement = this
  [28262] (29169/1) Normal[28262] let __x2__ = __x1__
  [28263] (29170/1) Normal[28263] let __x3__ = 0i
  [28264] (29175/1) Normal[28264] append __x4__ -> names
  [28265] LoopCont[28265]
  [28266] (29166/0) Call[28266] access __x0__ = (Block "VarDeclaredNames")
  [28267] (29171/1) Loop[28267] (< __x3__ __x2__.length)
  [28268] (29174/1) Normal[28268] __x3__ = (+ __x3__ 1i)
  [28269] (29167/0) Normal[28269] let names = __x0__
  [28270] (29176/2) Normal[28270] return names
  [28271] Exit[28271]
  [28272] (29173/1) Normal[28272] let __x4__ = __x2__[__x3__]
  [28273] (29168/1) Call[28273] access __x1__ = (Catch "VarDeclaredNames")
Algo: TryStatement[0,0].VarScopedDeclarations [2528]
  [28274] Entry[28274]
  [28275] (29178)Normal[28275] let TryStatement = this
  [28276] (29182/1) Normal[28276] let __x2__ = __x1__
  [28277] (29183/1) Normal[28277] let __x3__ = 0i
  [28278] (29188/1) Normal[28278] append __x4__ -> declarations
  [28279] LoopCont[28279]
  [28280] (29179/0) Call[28280] access __x0__ = (Block "VarScopedDeclarations")
  [28281] (29184/1) Loop[28281] (< __x3__ __x2__.length)
  [28282] (29187/1) Normal[28282] __x3__ = (+ __x3__ 1i)
  [28283] (29180/0) Normal[28283] let declarations = __x0__
  [28284] (29189/2) Normal[28284] return declarations
  [28285] Exit[28285]
  [28286] (29186/1) Normal[28286] let __x4__ = __x2__[__x3__]
  [28287] (29181/1) Call[28287] access __x1__ = (Catch "VarScopedDeclarations")
Algo: TryStatement[1,0].ContainsDuplicateLabels [2529]
  [28288] Entry[28288]
  [28289] (29191)Normal[28289] let TryStatement = this
  [28290] (29195/1) Normal[28290] return true
  [28291] (29197/2) Call[28291] access __x1__ = (Finally "ContainsDuplicateLabels" labelSet)
  [28292] (29192/0) Call[28292] access __x0__ = (Block "ContainsDuplicateLabels" labelSet)
  [28293] (29198/2) Normal[28293] return __x1__
  [28294] (29193/0) Normal[28294] let hasDuplicates = __x0__
  [28295] Exit[28295]
  [28296] (29194/1) If[28296] (= hasDuplicates true)
Algo: TryStatement[1,0].ContainsUndefinedBreakTarget [2530]
  [28297] Entry[28297]
  [28298] (29200)Normal[28298] let TryStatement = this
  [28299] (29204/1) Normal[28299] return true
  [28300] (29206/2) Call[28300] access __x1__ = (Finally "ContainsUndefinedBreakTarget" labelSet)
  [28301] (29201/0) Call[28301] access __x0__ = (Block "ContainsUndefinedBreakTarget" labelSet)
  [28302] (29207/2) Normal[28302] return __x1__
  [28303] (29202/0) Normal[28303] let hasUndefinedLabels = __x0__
  [28304] Exit[28304]
  [28305] (29203/1) If[28305] (= hasUndefinedLabels true)
Algo: TryStatement[1,0].ContainsUndefinedContinueTarget [2531]
  [28306] Entry[28306]
  [28307] (29209)Normal[28307] let TryStatement = this
  [28308] (29213/1) Normal[28308] return true
  [28309] (29215/2) Call[28309] access __x1__ = (Finally "ContainsUndefinedContinueTarget" iterationSet (new []))
  [28310] (29210/0) Call[28310] access __x0__ = (Block "ContainsUndefinedContinueTarget" iterationSet (new []))
  [28311] (29216/2) Normal[28311] return __x1__
  [28312] (29211/0) Normal[28312] let hasUndefinedLabels = __x0__
  [28313] Exit[28313]
  [28314] (29212/1) If[28314] (= hasUndefinedLabels true)
Algo: TryStatement[1,0].Evaluation [2532]
  [28315] Entry[28315]
  [28316] (29218)Normal[28316] let TryStatement = this
  [28317] (29222/1) Normal[28317] let F = __x1__
  [28318] (29223/2) If[28318] (= F.Type ~normal~)
  [28319] (29219/0) Call[28319] access __x0__ = (Block "Evaluation")
  [28320] (29224/2) Normal[28320] F = B
  [28321] (29226/3) Call[28321] app __x2__ = (UpdateEmpty F undefined)
  [28322] (29227/3) Normal[28322] return __x2__
  [28323] Exit[28323]
  [28324] (29220/0) Normal[28324] let B = __x0__
  [28325] (29221/1) Call[28325] access __x1__ = (Finally "Evaluation")
Algo: TryStatement[1,0].HasCallInTailPosition [2533]
  [28326] Entry[28326]
  [28327] (29229)Normal[28327] let TryStatement = this
  [28328] (29230/0) Call[28328] access __x0__ = (Finally "HasCallInTailPosition" call)
  [28329] (29231/0) Normal[28329] return __x0__
  [28330] Exit[28330]
Algo: TryStatement[1,0].VarDeclaredNames [2534]
  [28331] Entry[28331]
  [28332] (29233)Normal[28332] let TryStatement = this
  [28333] (29237/1) Normal[28333] let __x2__ = __x1__
  [28334] (29238/1) Normal[28334] let __x3__ = 0i
  [28335] (29243/1) Normal[28335] append __x4__ -> names
  [28336] LoopCont[28336]
  [28337] (29234/0) Call[28337] access __x0__ = (Block "VarDeclaredNames")
  [28338] (29239/1) Loop[28338] (< __x3__ __x2__.length)
  [28339] (29242/1) Normal[28339] __x3__ = (+ __x3__ 1i)
  [28340] (29235/0) Normal[28340] let names = __x0__
  [28341] (29244/2) Normal[28341] return names
  [28342] Exit[28342]
  [28343] (29241/1) Normal[28343] let __x4__ = __x2__[__x3__]
  [28344] (29236/1) Call[28344] access __x1__ = (Finally "VarDeclaredNames")
Algo: TryStatement[1,0].VarScopedDeclarations [2535]
  [28345] Entry[28345]
  [28346] (29246)Normal[28346] let TryStatement = this
  [28347] (29250/1) Normal[28347] let __x2__ = __x1__
  [28348] (29251/1) Normal[28348] let __x3__ = 0i
  [28349] (29256/1) Normal[28349] append __x4__ -> declarations
  [28350] LoopCont[28350]
  [28351] (29247/0) Call[28351] access __x0__ = (Block "VarScopedDeclarations")
  [28352] (29252/1) Loop[28352] (< __x3__ __x2__.length)
  [28353] (29255/1) Normal[28353] __x3__ = (+ __x3__ 1i)
  [28354] (29248/0) Normal[28354] let declarations = __x0__
  [28355] (29257/2) Normal[28355] return declarations
  [28356] Exit[28356]
  [28357] (29254/1) Normal[28357] let __x4__ = __x2__[__x3__]
  [28358] (29249/1) Call[28358] access __x1__ = (Finally "VarScopedDeclarations")
Algo: TryStatement[2,0].ContainsDuplicateLabels [2536]
  [28359] Entry[28359]
  [28360] (29259)Normal[28360] let TryStatement = this
  [28361] (29263/1) Normal[28361] return true
  [28362] (29265/2) Call[28362] access __x1__ = (Catch "ContainsDuplicateLabels" labelSet)
  [28363] (29270/4) Call[28363] access __x2__ = (Finally "ContainsDuplicateLabels" labelSet)
  [28364] (29271/4) Normal[28364] return __x2__
  [28365] (29260/0) Call[28365] access __x0__ = (Block "ContainsDuplicateLabels" labelSet)
  [28366] (29266/2) Normal[28366] let hasDuplicates = __x1__
  [28367] (29268/3) Normal[28367] return true
  [28368] (29261/0) Normal[28368] let hasDuplicates = __x0__
  [28369] (29267/3) If[28369] (= hasDuplicates true)
  [28370] (29262/1) If[28370] (= hasDuplicates true)
  [28371] Exit[28371]
Algo: TryStatement[2,0].ContainsUndefinedBreakTarget [2537]
  [28372] Entry[28372]
  [28373] (29273)Normal[28373] let TryStatement = this
  [28374] (29277/1) Normal[28374] return true
  [28375] (29279/2) Call[28375] access __x1__ = (Catch "ContainsUndefinedBreakTarget" labelSet)
  [28376] (29284/4) Call[28376] access __x2__ = (Finally "ContainsUndefinedBreakTarget" labelSet)
  [28377] (29285/4) Normal[28377] return __x2__
  [28378] (29274/0) Call[28378] access __x0__ = (Block "ContainsUndefinedBreakTarget" labelSet)
  [28379] (29280/2) Normal[28379] let hasUndefinedLabels = __x1__
  [28380] (29282/3) Normal[28380] return true
  [28381] (29275/0) Normal[28381] let hasUndefinedLabels = __x0__
  [28382] (29281/3) If[28382] (= hasUndefinedLabels true)
  [28383] (29276/1) If[28383] (= hasUndefinedLabels true)
  [28384] Exit[28384]
Algo: TryStatement[2,0].ContainsUndefinedContinueTarget [2538]
  [28385] Entry[28385]
  [28386] (29287)Normal[28386] let TryStatement = this
  [28387] (29291/1) Normal[28387] return true
  [28388] (29293/2) Call[28388] access __x1__ = (Catch "ContainsUndefinedContinueTarget" iterationSet (new []))
  [28389] (29298/4) Call[28389] access __x2__ = (Finally "ContainsUndefinedContinueTarget" iterationSet (new []))
  [28390] (29299/4) Normal[28390] return __x2__
  [28391] (29288/0) Call[28391] access __x0__ = (Block "ContainsUndefinedContinueTarget" iterationSet (new []))
  [28392] (29294/2) Normal[28392] let hasUndefinedLabels = __x1__
  [28393] (29296/3) Normal[28393] return true
  [28394] (29289/0) Normal[28394] let hasUndefinedLabels = __x0__
  [28395] (29295/3) If[28395] (= hasUndefinedLabels true)
  [28396] (29290/1) If[28396] (= hasUndefinedLabels true)
  [28397] Exit[28397]
Algo: TryStatement[2,0].Evaluation [2539]
  [28398] Entry[28398]
  [28399] (29301)Normal[28399] let TryStatement = this
  [28400] (29306/1) Call[28400] access __x1__ = (Catch "CatchClauseEvaluation" B.Value)
  [28401] (29307/1) Normal[28401] let C = __x1__
  [28402] (29311/4) If[28402] (= F.Type ~normal~)
  [28403] (29312/4) Normal[28403] F = C
  [28404] (29314/5) Call[28404] app __x3__ = (UpdateEmpty F undefined)
  [28405] (29302/0) Call[28405] access __x0__ = (Block "Evaluation")
  [28406] (29309/3) Call[28406] access __x2__ = (Finally "Evaluation")
  [28407] (29310/3) Normal[28407] let F = __x2__
  [28408] (29315/5) Normal[28408] return __x3__
  [28409] Exit[28409]
  [28410] (29303/0) Normal[28410] let B = __x0__
  [28411] (29308/1) Normal[28411] let C = B
  [28412] (29304/1) If[28412] (= B.Type ~throw~)
Algo: TryStatement[2,0].HasCallInTailPosition [2540]
  [28413] Entry[28413]
  [28414] (29317)Normal[28414] let TryStatement = this
  [28415] (29318/0) Call[28415] access __x0__ = (Finally "HasCallInTailPosition" call)
  [28416] (29319/0) Normal[28416] return __x0__
  [28417] Exit[28417]
Algo: TryStatement[2,0].VarDeclaredNames [2541]
  [28418] Entry[28418]
  [28419] (29321)Normal[28419] let TryStatement = this
  [28420] (29325/1) Normal[28420] let __x2__ = __x1__
  [28421] (29326/1) Normal[28421] let __x3__ = 0i
  [28422] (29331/1) Normal[28422] append __x4__ -> names
  [28423] LoopCont[28423]
  [28424] (29334/2) Normal[28424] let __x7__ = 0i
  [28425] (29335/2) Loop[28425] (< __x7__ __x6__.length)
  [28426] (29340/3) Normal[28426] return names
  [28427] Exit[28427]
  [28428] (29322/0) Call[28428] access __x0__ = (Block "VarDeclaredNames")
  [28429] (29327/1) Loop[28429] (< __x3__ __x2__.length)
  [28430] (29330/1) Normal[28430] __x3__ = (+ __x3__ 1i)
  [28431] (29333/2) Normal[28431] let __x6__ = __x5__
  [28432] (29323/0) Normal[28432] let names = __x0__
  [28433] (29338/2) Normal[28433] __x7__ = (+ __x7__ 1i)
  [28434] (29339/2) Normal[28434] append __x8__ -> names
  [28435] (29332/2) Call[28435] access __x5__ = (Finally "VarDeclaredNames")
  [28436] (29329/1) Normal[28436] let __x4__ = __x2__[__x3__]
  [28437] (29324/1) Call[28437] access __x1__ = (Catch "VarDeclaredNames")
  [28438] LoopCont[28438]
  [28439] (29337/2) Normal[28439] let __x8__ = __x6__[__x7__]
Algo: TryStatement[2,0].VarScopedDeclarations [2542]
  [28440] Entry[28440]
  [28441] (29342)Normal[28441] let TryStatement = this
  [28442] (29346/1) Normal[28442] let __x2__ = __x1__
  [28443] (29347/1) Normal[28443] let __x3__ = 0i
  [28444] (29352/1) Normal[28444] append __x4__ -> declarations
  [28445] LoopCont[28445]
  [28446] (29355/2) Normal[28446] let __x7__ = 0i
  [28447] (29356/2) Loop[28447] (< __x7__ __x6__.length)
  [28448] (29361/3) Normal[28448] return declarations
  [28449] Exit[28449]
  [28450] (29343/0) Call[28450] access __x0__ = (Block "VarScopedDeclarations")
  [28451] (29348/1) Loop[28451] (< __x3__ __x2__.length)
  [28452] (29351/1) Normal[28452] __x3__ = (+ __x3__ 1i)
  [28453] (29354/2) Normal[28453] let __x6__ = __x5__
  [28454] (29344/0) Normal[28454] let declarations = __x0__
  [28455] (29359/2) Normal[28455] __x7__ = (+ __x7__ 1i)
  [28456] (29360/2) Normal[28456] append __x8__ -> declarations
  [28457] (29353/2) Call[28457] access __x5__ = (Finally "VarScopedDeclarations")
  [28458] (29350/1) Normal[28458] let __x4__ = __x2__[__x3__]
  [28459] (29345/1) Call[28459] access __x1__ = (Catch "VarScopedDeclarations")
  [28460] LoopCont[28460]
  [28461] (29358/2) Normal[28461] let __x8__ = __x6__[__x7__]
Algo: TypedArrayCreate [2543]
  [28462] Entry[28462]
  [28463] (29363/0) Call[28463] app __x0__ = (Construct constructor argumentList)
  [28464] (29367/2) Normal[28464] ??? "If id:{argumentList} is a List of a single Number , then in:{} out:{}"
  [28465] (29368/4) Normal[28465] return newTypedArray
  [28466] (29364/0) Normal[28466] let newTypedArray = [? __x0__]
  [28467] Exit[28467]
  [28468] (29365/1) Call[28468] app __x1__ = (ValidateTypedArray newTypedArray)
  [28469] (29366/1) Normal[28469] [? __x1__]
Algo: TypedArraySpeciesCreate [2544]
  [28470] Entry[28470]
  [28471] (29370/1) Normal[28471] ??? "Let id:{defaultConstructor} be the intrinsic object listed in column one of link:{table-the-typedarray-constructors} for id:{exemplar} . [ [ TypedArrayName ] ] ."
  [28472] (29374/3) Normal[28472] let result = [? __x1__]
  [28473] (29375/5) If[28473] (! (== result.ContentType exemplar.ContentType))
  [28474] (29371/2) Call[28474] app __x0__ = (SpeciesConstructor exemplar defaultConstructor)
  [28475] (29376/5) Normal[28475] throw TypeError
  [28476] (29378/6) Normal[28476] return result
  [28477] (29372/2) Normal[28477] let constructor = [? __x0__]
  [28478] (29373/3) Call[28478] app __x1__ = (TypedArrayCreate constructor argumentList)
  [28479] Exit[28479]
Algo: UTC [2545]
  [28480] Entry[28480]
  [28481] (29380/0) Call[28481] app __x0__ = (LocalTZA t false)
  [28482] (29381/0) Normal[28482] return (- t __x0__)
  [28483] Exit[28483]
Algo: UTF16EncodeCodePoint [2546]
  [28484] Entry[28484]
  [28485] (29383/0) Normal[28485] assert (&& (! (< cp 0i)) (! (< 1114111i cp)))
  [28486] (29388/2) Normal[28486] let cu1 = (+ __x0__ 55296i)
  [28487] (29389/3) Normal[28487] let cu2 = (+ (%% (- cp 65536i) 1024i) 56320i)
  [28488] (29384/1) If[28488] (! (< 65535i cp))
  [28489] (29390/4) Normal[28489] return (+ cu1 cu2)
  [28490] (29385/1) Normal[28490] return cp
  [28491] (29387/2) Call[28491] app __x0__ = (floor (/ (- cp 65536i) 1024i))
  [28492] Exit[28492]
Algo: UTF16SurrogatePairToCodePoint [2547]
  [28493] Entry[28493]
  [28494] (29392/1) Normal[28494] let cp = (+ (+ (* (- lead 55296i) 1024i) (- trail 56320i)) 65536i)
  [28495] (29393/2) Normal[28495] return cp
  [28496] Exit[28496]
Algo: UnaryExpression[1,0].AssignmentTargetType [2548]
  [28497] Entry[28497]
  [28498] (29394/0) Normal[28498] return ~invalid~
  [28499] Exit[28499]
Algo: UnaryExpression[1,0].Evaluation [2549]
  [28500] Entry[28500]
  [28501] (29396/0) Call[28501] access __x0__ = (UnaryExpression "Evaluation")
  [28502] (29400/2) Normal[28502] return true
  [28503] (29402/3) Call[28503] app __x1__ = (IsUnresolvableReference ref)
  [28504] (29408/6) Call[28504] app __x2__ = (IsPropertyReference ref)
  [28505] (29409/6) If[28505] (= __x2__ true)
  [28506] (29413/7) Normal[28506] throw ReferenceError
  [28507] (29415/8) Call[28507] app __x4__ = (ToObject ref.Base)
  [28508] (29420/10) Normal[28508] throw TypeError
  [28509] (29422/11) Normal[28509] return deleteStatus
  [28510] (29397/0) Normal[28510] let ref = __x0__
  [28511] (29403/3) If[28511] (= __x1__ true)
  [28512] Exit[28512]
  [28513] (29406/5) Normal[28513] return true
  [28514] (29412/7) If[28514] (= __x3__ true)
  [28515] (29398/1) Normal[28515] [? ref]
  [28516] (29417/9) Call[28516] app __x5__ = (baseObj.Delete baseObj ref.ReferencedName)
  [28517] (29418/9) Normal[28517] let deleteStatus = [? __x5__]
  [28518] (29424/13) Normal[28518] let base = ref.Base
  [28519] (29425/14) Normal[28519] assert (is-instance-of base EnvironmentRecord)
  [28520] (29411/7) Call[28520] app __x3__ = (IsSuperReference ref)
  [28521] (29405/4) Normal[28521] assert (= ref.Strict false)
  [28522] (29399/2) If[28522] (! (is-instance-of ref ReferenceRecord))
  [28523] (29419/10) If[28523] (&& (= deleteStatus false) (= ref.Strict true))
  [28524] (29416/8) Normal[28524] let baseObj = [! __x4__]
  [28525] (29426/15) Call[28525] app __x6__ = (base.DeleteBinding base ref.ReferencedName)
  [28526] (29427/15) Normal[28526] return [? __x6__]
Algo: UnaryExpression[1,0].HasCallInTailPosition [2550]
  [28527] Entry[28527]
  [28528] (29428/0) Normal[28528] return false
  [28529] Exit[28529]
Algo: UnaryExpression[1,0].IsFunctionDefinition [2551]
  [28530] Entry[28530]
  [28531] (29429/0) Normal[28531] return false
  [28532] Exit[28532]
Algo: UnaryExpression[2,0].AssignmentTargetType [2552]
  [28533] Entry[28533]
  [28534] (29430/0) Normal[28534] return ~invalid~
  [28535] Exit[28535]
Algo: UnaryExpression[2,0].Evaluation [2553]
  [28536] Entry[28536]
  [28537] (29432/0) Call[28537] access __x0__ = (UnaryExpression "Evaluation")
  [28538] (29436/2) Normal[28538] return undefined
  [28539] Exit[28539]
  [28540] (29433/0) Normal[28540] let expr = __x0__
  [28541] (29434/1) Call[28541] app __x1__ = (GetValue expr)
  [28542] (29435/1) Normal[28542] [? __x1__]
Algo: UnaryExpression[2,0].HasCallInTailPosition [2554]
  [28543] Entry[28543]
  [28544] (29437/0) Normal[28544] return false
  [28545] Exit[28545]
Algo: UnaryExpression[2,0].IsFunctionDefinition [2555]
  [28546] Entry[28546]
  [28547] (29438/0) Normal[28547] return false
  [28548] Exit[28548]
Algo: UnaryExpression[3,0].AssignmentTargetType [2556]
  [28549] Entry[28549]
  [28550] (29439/0) Normal[28550] return ~invalid~
  [28551] Exit[28551]
Algo: UnaryExpression[3,0].Evaluation [2557]
  [28552] Entry[28552]
  [28553] (29441/0) Call[28553] access __x0__ = (UnaryExpression "Evaluation")
  [28554] (29446/2) If[28554] (= __x1__ true)
  [28555] (29447/2) Normal[28555] return "undefined"
  [28556] (29450/3) Call[28556] app __x2__ = (GetValue val)
  [28557] (29453/4) If[28557] (= t Undefined)
  [28558] (29454/4) Normal[28558] return "undefined"
  [28559] (29455/4) If[28559] (= t Null)
  [28560] (29457/4) If[28560] (= t Boolean)
  [28561] (29458/6) Normal[28561] return "boolean"
  [28562] (29459/4) If[28562] (= t Number)
  [28563] (29463/4) If[28563] (= t Symbol)
  [28564] (29464/9) Normal[28564] return "symbol"
  [28565] (29465/4) If[28565] (= t BigInt)
  [28566] (29442/0) Normal[28566] let val = __x0__
  [28567] (29452/4) Normal[28567] let t = (typeof val)
  [28568] (29456/5) Normal[28568] return "object"
  [28569] Exit[28569]
  [28570] (29443/1) If[28570] (is-instance-of val ReferenceRecord)
  [28571] (29460/7) Normal[28571] return "number"
  [28572] (29451/3) Normal[28572] val = [? __x2__]
  [28573] (29445/2) Call[28573] app __x1__ = (IsUnresolvableReference val)
  [28574] (29461/4) If[28574] (= t String)
  [28575] (29462/8) Normal[28575] return "string"
  [28576] (29467/4) If[28576] (= t Object)
  [28577] (29468/11) If[28577] (= val.Call absent)
  [28578] (29471/4) Normal[28578] ??? "invalid for `typeof` operator"
  [28579] (29469/11) Normal[28579] return "object"
  [28580] (29470/11) Normal[28580] return "function"
  [28581] (29466/10) Normal[28581] return "bigint"
Algo: UnaryExpression[3,0].HasCallInTailPosition [2558]
  [28582] Entry[28582]
  [28583] (29472/0) Normal[28583] return false
  [28584] Exit[28584]
Algo: UnaryExpression[3,0].IsFunctionDefinition [2559]
  [28585] Entry[28585]
  [28586] (29473/0) Normal[28586] return false
  [28587] Exit[28587]
Algo: UnaryExpression[4,0].AssignmentTargetType [2560]
  [28588] Entry[28588]
  [28589] (29474/0) Normal[28589] return ~invalid~
  [28590] Exit[28590]
Algo: UnaryExpression[4,0].Evaluation [2561]
  [28591] Entry[28591]
  [28592] (29476/0) Call[28592] access __x0__ = (UnaryExpression "Evaluation")
  [28593] (29480/1) Normal[28593] return [? __x2__]
  [28594] Exit[28594]
  [28595] (29477/0) Normal[28595] let expr = __x0__
  [28596] (29478/1) Call[28596] app __x1__ = (GetValue expr)
  [28597] (29479/1) Call[28597] app __x2__ = (ToNumber [? __x1__])
Algo: UnaryExpression[4,0].HasCallInTailPosition [2562]
  [28598] Entry[28598]
  [28599] (29481/0) Normal[28599] return false
  [28600] Exit[28600]
Algo: UnaryExpression[4,0].IsFunctionDefinition [2563]
  [28601] Entry[28601]
  [28602] (29482/0) Normal[28602] return false
  [28603] Exit[28603]
Algo: UnaryExpression[5,0].AssignmentTargetType [2564]
  [28604] Entry[28604]
  [28605] (29483/0) Normal[28605] return ~invalid~
  [28606] Exit[28606]
Algo: UnaryExpression[5,0].Evaluation [2565]
  [28607] Entry[28607]
  [28608] (29485/0) Call[28608] access __x0__ = (UnaryExpression "Evaluation")
  [28609] (29489/1) Normal[28609] let oldValue = [? __x2__]
  [28610] (29490/2) Normal[28610] let T = (typeof oldValue)
  [28611] (29486/0) Normal[28611] let expr = __x0__
  [28612] (29491/3) Call[28612] app __x3__ = (PRIMITIVE[T].unaryMinus oldValue)
  [28613] (29487/1) Call[28613] app __x1__ = (GetValue expr)
  [28614] (29492/3) Normal[28614] return [! __x3__]
  [28615] (29488/1) Call[28615] app __x2__ = (ToNumeric [? __x1__])
  [28616] Exit[28616]
Algo: UnaryExpression[5,0].HasCallInTailPosition [2566]
  [28617] Entry[28617]
  [28618] (29493/0) Normal[28618] return false
  [28619] Exit[28619]
Algo: UnaryExpression[5,0].IsFunctionDefinition [2567]
  [28620] Entry[28620]
  [28621] (29494/0) Normal[28621] return false
  [28622] Exit[28622]
Algo: UnaryExpression[6,0].AssignmentTargetType [2568]
  [28623] Entry[28623]
  [28624] (29495/0) Normal[28624] return ~invalid~
  [28625] Exit[28625]
Algo: UnaryExpression[6,0].Evaluation [2569]
  [28626] Entry[28626]
  [28627] (29497/0) Call[28627] access __x0__ = (UnaryExpression "Evaluation")
  [28628] (29501/1) Normal[28628] let oldValue = [? __x2__]
  [28629] (29502/2) Normal[28629] let T = (typeof oldValue)
  [28630] (29498/0) Normal[28630] let expr = __x0__
  [28631] (29503/3) Call[28631] app __x3__ = (PRIMITIVE[T].bitwiseNOT oldValue)
  [28632] (29499/1) Call[28632] app __x1__ = (GetValue expr)
  [28633] (29504/3) Normal[28633] return [! __x3__]
  [28634] (29500/1) Call[28634] app __x2__ = (ToNumeric [? __x1__])
  [28635] Exit[28635]
Algo: UnaryExpression[6,0].HasCallInTailPosition [2570]
  [28636] Entry[28636]
  [28637] (29505/0) Normal[28637] return false
  [28638] Exit[28638]
Algo: UnaryExpression[6,0].IsFunctionDefinition [2571]
  [28639] Entry[28639]
  [28640] (29506/0) Normal[28640] return false
  [28641] Exit[28641]
Algo: UnaryExpression[7,0].AssignmentTargetType [2572]
  [28642] Entry[28642]
  [28643] (29507/0) Normal[28643] return ~invalid~
  [28644] Exit[28644]
Algo: UnaryExpression[7,0].Evaluation [2573]
  [28645] Entry[28645]
  [28646] (29509/0) Call[28646] access __x0__ = (UnaryExpression "Evaluation")
  [28647] (29513/1) Normal[28647] let oldValue = [! __x2__]
  [28648] (29514/2) If[28648] (= oldValue true)
  [28649] (29510/0) Normal[28649] let expr = __x0__
  [28650] (29515/2) Normal[28650] return false
  [28651] (29517/3) Normal[28651] return true
  [28652] (29511/1) Call[28652] app __x1__ = (GetValue expr)
  [28653] (29512/1) Call[28653] app __x2__ = (ToBoolean [? __x1__])
  [28654] Exit[28654]
Algo: UnaryExpression[7,0].HasCallInTailPosition [2574]
  [28655] Entry[28655]
  [28656] (29518/0) Normal[28656] return false
  [28657] Exit[28657]
Algo: UnaryExpression[7,0].IsFunctionDefinition [2575]
  [28658] Entry[28658]
  [28659] (29519/0) Normal[28659] return false
  [28660] Exit[28660]
Algo: UnaryExpression[8,0].AssignmentTargetType [2576]
  [28661] Entry[28661]
  [28662] (29521)Normal[28662] let UnaryExpression = this
  [28663] (29522/0) Normal[28663] return ~invalid~
  [28664] Exit[28664]
Algo: UnaryExpression[8,0].HasCallInTailPosition [2577]
  [28665] Entry[28665]
  [28666] (29524)Normal[28666] let UnaryExpression = this
  [28667] (29525/0) Normal[28667] return false
  [28668] Exit[28668]
Algo: UnaryExpression[8,0].IsFunctionDefinition [2578]
  [28669] Entry[28669]
  [28670] (29527)Normal[28670] let UnaryExpression = this
  [28671] (29528/0) Normal[28671] return false
  [28672] Exit[28672]
Algo: UnicodeEscape [2579]
  [28673] Entry[28673]
  [28674] (29530/0) Normal[28674] ??? "Let id:{n} be the numeric value of id:{C} ."
  [28675] (29531/1) Normal[28675] assert (! (< 65535i n))
  [28676] (29532/2) Normal[28676] return (+ (+ "\\" "u") ??? "StringOp")
  [28677] Exit[28677]
Algo: UnicodeMatchProperty [2580]
  [28678] Entry[28678]
  [28679] (29534/1) Normal[28679] ??? "Let id:{c} be the canonical property name of id:{p} as given in the “ Canonical property name ” column of the corresponding row ."
  [28680] (29535/2) Normal[28680] ??? "Return the List of Unicode code points of id:{c} ."
  [28681] Exit[28681]
Algo: UnicodeMatchPropertyValue [2581]
  [28682] Entry[28682]
  [28683] (29537/2) Normal[28683] ??? "Let id:{value} be the canonical property value of id:{v} as given in the “ Canonical property value ” column of the corresponding row ."
  [28684] (29538/3) Normal[28684] ??? "Return the List of Unicode code points of id:{value} ."
  [28685] Exit[28685]
Algo: UnicodePropertyNameCharacters[0,0].SourceText [2582]
  [28686] Entry[28686]
  [28687] (29539/0) Normal[28687] ??? "Return the List , in source text order , of Unicode code points in the source text matched by this production ."
  [28688] Exit[28688]
Algo: UnicodePropertyNameCharacters[0,1].SourceText [2583]
  [28689] Entry[28689]
  [28690] (29540/0) Normal[28690] ??? "Return the List , in source text order , of Unicode code points in the source text matched by this production ."
  [28691] Exit[28691]
Algo: UnicodePropertyValueCharacters[0,0].SourceText [2584]
  [28692] Entry[28692]
  [28693] (29541/0) Normal[28693] ??? "Return the List , in source text order , of Unicode code points in the source text matched by this production ."
  [28694] Exit[28694]
Algo: UnicodePropertyValueCharacters[0,1].SourceText [2585]
  [28695] Entry[28695]
  [28696] (29542/0) Normal[28696] ??? "Return the List , in source text order , of Unicode code points in the source text matched by this production ."
  [28697] Exit[28697]
Algo: UnicodePropertyValueExpression[0,0].EarlyErrors [2586]
  [28698] Entry[28698]
  [28699] (29544)Normal[28699] let UnicodePropertyValueExpression = this
  [28700] (29545/0) Normal[28700] ??? "It is a Syntax Error if the List of Unicode code points that is SourceText of nt:{UnicodePropertyName} is not identical to a List of Unicode code points that is a Unicode property name or property alias listed in the “ Property name and aliases ” column of link:{table-nonbinary-unicode-properties} ."
  [28701] (29546/1) Normal[28701] ??? "It is a Syntax Error if the List of Unicode code points that is SourceText of nt:{UnicodePropertyValue} is not identical to a List of Unicode code points that is a value or value alias for the Unicode property or property alias given by SourceText of nt:{UnicodePropertyName} listed in the “ Property value and aliases ” column of the corresponding tables link:{table-unicode-general-category-values} or link:{table-unicode-script-values} ."
  [28702] Exit[28702]
Algo: UnicodePropertyValueExpression[0,0].Evaluation [2587]
  [28703] Entry[28703]
  [28704] (29548)Normal[28704] let UnicodePropertyValueExpression = this
  [28705] (29552/1) Normal[28705] let p = [! __x1__]
  [28706] (29553/3) Call[28706] access __x2__ = (UnicodePropertyValue "SourceText")
  [28707] (29557/5) Normal[28707] ??? "Return the CharSet containing all Unicode code points whose character database definition includes the property id:{p} with value id:{v} ."
  [28708] Exit[28708]
  [28709] (29549/0) Call[28709] access __x0__ = (UnicodePropertyName "SourceText")
  [28710] (29554/3) Normal[28710] let vs = __x2__
  [28711] (29556/4) Normal[28711] let v = [! __x3__]
  [28712] (29550/0) Normal[28712] let ps = __x0__
  [28713] (29555/4) Call[28713] app __x3__ = (UnicodeMatchPropertyValue p vs)
  [28714] (29551/1) Call[28714] app __x1__ = (UnicodeMatchProperty ps)
Algo: UnicodePropertyValueExpression[1,0].EarlyErrors [2588]
  [28715] Entry[28715]
  [28716] (29559)Normal[28716] let UnicodePropertyValueExpression = this
  [28717] (29560/0) Normal[28717] ??? "It is a Syntax Error if the List of Unicode code points that is SourceText of nt:{LoneUnicodePropertyNameOrValue} is not identical to a List of Unicode code points that is a Unicode general category or general category alias listed in the “ Property value and aliases ” column of link:{table-unicode-general-category-values} , nor a binary property or binary property alias listed in the “ Property name and aliases ” column of link:{table-binary-unicode-properties} ."
  [28718] Exit[28718]
Algo: UnicodePropertyValueExpression[1,0].Evaluation [2589]
  [28719] Entry[28719]
  [28720] (29562)Normal[28720] let UnicodePropertyValueExpression = this
  [28721] (29566/3) Call[28721] app __x1__ = (UnicodeMatchProperty s)
  [28722] (29567/3) Normal[28722] let p = [! __x1__]
  [28723] (29563/0) Call[28723] access __x0__ = (LoneUnicodePropertyNameOrValue "SourceText")
  [28724] (29568/5) Normal[28724] ??? "Return the CharSet containing all Unicode code points whose character database definition includes the property id:{p} with value “ True ” ."
  [28725] (29564/0) Normal[28725] let s = __x0__
  [28726] Exit[28726]
  [28727] (29565/1) Normal[28727] ??? "If ! UnicodeMatchPropertyValue ( code:{General_Category} , id:{s} ) is identical to a List of Unicode code points that is the name of a Unicode general category or general category alias listed in the “ Property value and aliases ” column of link:{table-unicode-general-category-values} , then in:{} out:{}"
Algo: UniqueFormalParameters[0,0].EarlyErrors [2590]
  [28728] Entry[28728]
  [28729] (29570)Normal[28729] let UniqueFormalParameters = this
  [28730] (29574/0) Normal[28730] throw SyntaxError
  [28731] Exit[28731]
  [28732] (29571/0) Call[28732] access __x0__ = (FormalParameters "BoundNames")
  [28733] (29572/0) Call[28733] app __x1__ = (IsDuplicate __x0__)
  [28734] (29573/0) If[28734] __x1__
Algo: UpdateEmpty [2591]
  [28735] Entry[28735]
  [28736] (29577/1) If[28736] (! (= completionRecord.Value ~empty~))
  [28737] (29578/1) Normal[28737] return completionRecord
  [28738] (29580/2) Normal[28738] return (comp[completionRecord.Type] value => completionRecord.Target)
  [28739] Exit[28739]
Algo: UpdateExpression[1,0].AssignmentTargetType [2592]
  [28740] Entry[28740]
  [28741] (29582)Normal[28741] let UpdateExpression = this
  [28742] (29583/0) Normal[28742] return ~invalid~
  [28743] Exit[28743]
Algo: UpdateExpression[1,0].EarlyErrors [2593]
  [28744] Entry[28744]
  [28745] (29585)Normal[28745] let UpdateExpression = this
  [28746] (29586/0) Call[28746] access __x0__ = (LeftHandSideExpression "AssignmentTargetType")
  [28747] (29587/0) If[28747] (! (= __x0__ ~simple~))
  [28748] (29588/0) Normal[28748] throw SyntaxError
  [28749] Exit[28749]
Algo: UpdateExpression[1,0].Evaluation [2594]
  [28750] Entry[28750]
  [28751] (29591)Normal[28751] let UpdateExpression = this
  [28752] (29595/1) Call[28752] app __x2__ = (ToNumeric [? __x1__])
  [28753] (29596/1) Normal[28753] let oldValue = [? __x2__]
  [28754] (29600/3) Normal[28754] [? __x4__]
  [28755] (29601/4) Normal[28755] return oldValue
  [28756] (29592/0) Call[28756] access __x0__ = (LeftHandSideExpression "Evaluation")
  [28757] (29597/2) Call[28757] app __x3__ = (PRIMITIVE[(typeof oldValue)].add oldValue PRIMITIVE[(typeof oldValue)].unit)
  [28758] (29599/3) Call[28758] app __x4__ = (PutValue lhs newValue)
  [28759] (29593/0) Normal[28759] let lhs = __x0__
  [28760] (29598/2) Normal[28760] let newValue = [! __x3__]
  [28761] (29594/1) Call[28761] app __x1__ = (GetValue lhs)
  [28762] Exit[28762]
Algo: UpdateExpression[1,0].HasCallInTailPosition [2595]
  [28763] Entry[28763]
  [28764] (29603)Normal[28764] let UpdateExpression = this
  [28765] (29604/0) Normal[28765] return false
  [28766] Exit[28766]
Algo: UpdateExpression[1,0].IsFunctionDefinition [2596]
  [28767] Entry[28767]
  [28768] (29606)Normal[28768] let UpdateExpression = this
  [28769] (29607/0) Normal[28769] return false
  [28770] Exit[28770]
Algo: UpdateExpression[2,0].AssignmentTargetType [2597]
  [28771] Entry[28771]
  [28772] (29609)Normal[28772] let UpdateExpression = this
  [28773] (29610/0) Normal[28773] return ~invalid~
  [28774] Exit[28774]
Algo: UpdateExpression[2,0].EarlyErrors [2598]
  [28775] Entry[28775]
  [28776] (29612)Normal[28776] let UpdateExpression = this
  [28777] (29613/0) Call[28777] access __x0__ = (LeftHandSideExpression "AssignmentTargetType")
  [28778] (29614/0) If[28778] (! (= __x0__ ~simple~))
  [28779] (29615/0) Normal[28779] throw SyntaxError
  [28780] Exit[28780]
Algo: UpdateExpression[2,0].Evaluation [2599]
  [28781] Entry[28781]
  [28782] (29618)Normal[28782] let UpdateExpression = this
  [28783] (29622/1) Call[28783] app __x2__ = (ToNumeric [? __x1__])
  [28784] (29623/1) Normal[28784] let oldValue = [? __x2__]
  [28785] (29627/3) Normal[28785] [? __x4__]
  [28786] (29628/4) Normal[28786] return oldValue
  [28787] (29619/0) Call[28787] access __x0__ = (LeftHandSideExpression "Evaluation")
  [28788] (29624/2) Call[28788] app __x3__ = (PRIMITIVE[(typeof oldValue)].subtract oldValue PRIMITIVE[(typeof oldValue)].unit)
  [28789] (29626/3) Call[28789] app __x4__ = (PutValue lhs newValue)
  [28790] (29620/0) Normal[28790] let lhs = __x0__
  [28791] (29625/2) Normal[28791] let newValue = [! __x3__]
  [28792] (29621/1) Call[28792] app __x1__ = (GetValue lhs)
  [28793] Exit[28793]
Algo: UpdateExpression[2,0].HasCallInTailPosition [2600]
  [28794] Entry[28794]
  [28795] (29630)Normal[28795] let UpdateExpression = this
  [28796] (29631/0) Normal[28796] return false
  [28797] Exit[28797]
Algo: UpdateExpression[2,0].IsFunctionDefinition [2601]
  [28798] Entry[28798]
  [28799] (29633)Normal[28799] let UpdateExpression = this
  [28800] (29634/0) Normal[28800] return false
  [28801] Exit[28801]
Algo: UpdateExpression[3,0].AssignmentTargetType [2602]
  [28802] Entry[28802]
  [28803] (29636)Normal[28803] let UpdateExpression = this
  [28804] (29637/0) Normal[28804] return ~invalid~
  [28805] Exit[28805]
Algo: UpdateExpression[3,0].EarlyErrors [2603]
  [28806] Entry[28806]
  [28807] (29639)Normal[28807] let UpdateExpression = this
  [28808] (29640/0) Call[28808] access __x0__ = (UnaryExpression "AssignmentTargetType")
  [28809] (29641/0) If[28809] (! (= __x0__ ~simple~))
  [28810] (29642/0) Normal[28810] throw SyntaxError
  [28811] Exit[28811]
Algo: UpdateExpression[3,0].Evaluation [2604]
  [28812] Entry[28812]
  [28813] (29645)Normal[28813] let UpdateExpression = this
  [28814] (29649/1) Call[28814] app __x2__ = (ToNumeric [? __x1__])
  [28815] (29650/1) Normal[28815] let oldValue = [? __x2__]
  [28816] (29654/3) Normal[28816] [? __x4__]
  [28817] (29655/4) Normal[28817] return newValue
  [28818] (29646/0) Call[28818] access __x0__ = (UnaryExpression "Evaluation")
  [28819] (29651/2) Call[28819] app __x3__ = (PRIMITIVE[(typeof oldValue)].add oldValue PRIMITIVE[(typeof oldValue)].unit)
  [28820] (29653/3) Call[28820] app __x4__ = (PutValue expr newValue)
  [28821] (29647/0) Normal[28821] let expr = __x0__
  [28822] (29652/2) Normal[28822] let newValue = [! __x3__]
  [28823] (29648/1) Call[28823] app __x1__ = (GetValue expr)
  [28824] Exit[28824]
Algo: UpdateExpression[3,0].HasCallInTailPosition [2605]
  [28825] Entry[28825]
  [28826] (29657)Normal[28826] let UpdateExpression = this
  [28827] (29658/0) Normal[28827] return false
  [28828] Exit[28828]
Algo: UpdateExpression[3,0].IsFunctionDefinition [2606]
  [28829] Entry[28829]
  [28830] (29660)Normal[28830] let UpdateExpression = this
  [28831] (29661/0) Normal[28831] return false
  [28832] Exit[28832]
Algo: UpdateExpression[4,0].AssignmentTargetType [2607]
  [28833] Entry[28833]
  [28834] (29663)Normal[28834] let UpdateExpression = this
  [28835] (29664/0) Normal[28835] return ~invalid~
  [28836] Exit[28836]
Algo: UpdateExpression[4,0].EarlyErrors [2608]
  [28837] Entry[28837]
  [28838] (29666)Normal[28838] let UpdateExpression = this
  [28839] (29667/0) Call[28839] access __x0__ = (UnaryExpression "AssignmentTargetType")
  [28840] (29668/0) If[28840] (! (= __x0__ ~simple~))
  [28841] (29669/0) Normal[28841] throw SyntaxError
  [28842] Exit[28842]
Algo: UpdateExpression[4,0].Evaluation [2609]
  [28843] Entry[28843]
  [28844] (29672)Normal[28844] let UpdateExpression = this
  [28845] (29676/1) Call[28845] app __x2__ = (ToNumeric [? __x1__])
  [28846] (29677/1) Normal[28846] let oldValue = [? __x2__]
  [28847] (29681/3) Normal[28847] [? __x4__]
  [28848] (29682/4) Normal[28848] return newValue
  [28849] (29673/0) Call[28849] access __x0__ = (UnaryExpression "Evaluation")
  [28850] (29678/2) Call[28850] app __x3__ = (PRIMITIVE[(typeof oldValue)].subtract oldValue PRIMITIVE[(typeof oldValue)].unit)
  [28851] (29680/3) Call[28851] app __x4__ = (PutValue expr newValue)
  [28852] (29674/0) Normal[28852] let expr = __x0__
  [28853] (29679/2) Normal[28853] let newValue = [! __x3__]
  [28854] (29675/1) Call[28854] app __x1__ = (GetValue expr)
  [28855] Exit[28855]
Algo: UpdateExpression[4,0].HasCallInTailPosition [2610]
  [28856] Entry[28856]
  [28857] (29684)Normal[28857] let UpdateExpression = this
  [28858] (29685/0) Normal[28858] return false
  [28859] Exit[28859]
Algo: UpdateExpression[4,0].IsFunctionDefinition [2611]
  [28860] Entry[28860]
  [28861] (29687)Normal[28861] let UpdateExpression = this
  [28862] (29688/0) Normal[28862] return false
  [28863] Exit[28863]
Algo: ValidChosenReads [2612]
  [28864] Entry[28864]
  [28865] (29690/0) Call[28865] app __x0__ = (SharedDataBlockEventSet execution)
  [28866] (29695/0) Normal[28866] let R = __x1__[__x2__]
  [28867] (29696/0) Normal[28867] __x2__ = (+ __x2__ 1i)
  [28868] (29700/3) Normal[28868] let readValue = __x3__
  [28869] (29701/4) Normal[28869] let chosenLen = chosenValue.length
  [28870] (29704/7) Normal[28870] return false
  [28871] (29706/8) Normal[28871] ??? "If id:{chosenValue} [ id:{i} ] ≠ id:{readValue} [ id:{i} ] for any integer value id:{i} in the range 0 through id:{chosenLen} , exclusive , then in:{} out:{}"
  [28872] (29691/0) Normal[28872] let __x1__ = __x0__
  [28873] (29697/1) Normal[28873] ??? "Let id:{chosenValueRecord} be the element of id:{execution} . [ [ ChosenValues ] ] whose [ [ Event ] ] field is id:{R} ."
  [28874] (29699/3) Call[28874] app __x3__ = (ValueOfReadEvent execution R)
  [28875] (29703/6) If[28875] (! (== chosenLen readLen))
  [28876] (29692/0) Normal[28876] let __x2__ = 0i
  [28877] (29707/10) Normal[28877] return true
  [28878] Exit[28878]
  [28879] (29702/5) Normal[28879] let readLen = readValue.length
  [28880] (29698/2) Normal[28880] let chosenValue = chosenValueRecord.ChosenValue
  [28881] (29693/0) Loop[28881] (< __x2__ __x1__.length)
  [28882] LoopCont[28882]
Algo: ValidateAndApplyPropertyDescriptor [2613]
  [28883] (29715/4) Normal[28883] let __x0__ = true
  [28884] (29716/4) Call[28884] app __x1__ = (IsGenericDescriptor Desc)
  [28885] (29863/34) Normal[28885] __i__ = (+ __i__ 1i)
  [28886] LoopCont[28886]
  [28887] (29799/19) Normal[28887] O.SubMap[P] = (new AccessorProperty("Get" -> undefined, "Set" -> undefined, "Configurable" -> dp.Configurable, "Enumerable" -> dp.Enumerable))
  [28888] (29855/33) If[28888] (! (= O undefined))
  [28889] (29847/31) Call[28889] app __x20__ = (SameValue Desc.Get current.Get)
  [28890] (29848/31) Normal[28890] __x19__ = (= __x20__ false)
  [28891] Entry[28891]
  [28892] (29709/1) If[28892] (= current undefined)
  [28893] (29829/28) Call[28893] app __x16__ = (IsAccessorDescriptor Desc)
  [28894] (29830/28) Normal[28894] assert (&& (= [! __x15__] true) (= [! __x16__] true))
  [28895] (29722/16) Normal[28895] __x0__ = (= __x2__ true)
  [28896] (29723/4) If[28896] __x0__
  [28897] (29779/13) Normal[28897] return false
  [28898] (29782/14) Call[28898] app __x6__ = (IsGenericDescriptor Desc)
  [28899] (29758/8) Normal[28899] ap.Configurable = Desc.Configurable
  [28900] (29759/8) Normal[28900] O.SubMap[P] = ap
  [28901] (29737/5) Normal[28901] dp.Configurable = Desc.Configurable
  [28902] (29739/5) Normal[28902] O.SubMap[P] = dp
  [28903] (29753/8) If[28903] (= Desc.Enumerable absent)
  [28904] (29754/8) Normal[28904] ap.Enumerable = false
  [28905] (29755/8) Normal[28905] ap.Enumerable = Desc.Enumerable
  [28906] (29738/5) Normal[28906] dp.Configurable = false
  [28907] (29773/13) If[28907] __x4__
  [28908] (29775/13) Call[28908] app __x5__ = (SameValue Desc.Enumerable current.Enumerable)
  [28909] (29778/13) If[28909] __x4__
  [28910] (29727/5) If[28910] (! (= absent Desc.Value))
  [28911] (29728/5) Normal[28911] dp.Value = Desc.Value
  [28912] (29729/5) Normal[28912] dp.Value = undefined
  [28913] (29861/34) Normal[28913] let __key__ = __keys__[__i__]
  [28914] (29862/34) Normal[28914] O.SubMap[P][__key__] = Desc[__key__]
  [28915] (29733/5) If[28915] (! (= absent Desc.Enumerable))
  [28916] (29734/5) Normal[28916] dp.Enumerable = Desc.Enumerable
  [28917] (29735/5) Normal[28917] dp.Enumerable = false
  [28918] (29764/10) Normal[28918] return true
  [28919] (29766/11) If[28919] (= current.Configurable false)
  [28920] (29835/30) If[28920] __x17__
  [28921] (29837/30) Call[28921] app __x18__ = (SameValue Desc.Set current.Set)
  [28922] (29840/30) If[28922] __x17__
  [28923] (29783/14) If[28923] (= [! __x6__] true)
  [28924] (29813/24) Normal[28924] return false
  [28925] (29815/25) Normal[28925] let __x13__ = true
  [28926] (29744/8) If[28926] (! (= O undefined))
  [28927] (29746/8) Normal[28927] let ap = (new AccessorProperty())
  [28928] (29761/9) Normal[28928] return true
  [28929] (29857/34) Normal[28929] let __keys__ = (map-keys Desc)
  [28930] (29865/35) Normal[28930] return true
  [28931] (29822/25) If[28931] __x13__
  [28932] (29823/25) Normal[28932] return false
  [28933] (29825/26) Normal[28933] return true
  [28934] (29788/16) Call[28934] app __x9__ = (SameValue [! __x7__] [! __x8__])
  [28935] (29789/16) If[28935] (= [! __x9__] false)
  [28936] (29831/29) If[28936] (= current.Configurable false)
  [28937] (29711/2) If[28937] (= extensible false)
  [28938] (29763/10) If[28938] (&& (= absent Desc.Value) (&& (= absent Desc.Writable) (&& (= absent Desc.Get) (&& (= absent Desc.Set) (&& (= absent Desc.Enumerable) (= absent Desc.Configurable))))))
  [28939] (29808/22) Call[28939] app __x12__ = (IsDataDescriptor Desc)
  [28940] (29809/22) If[28940] (&& (= __x11__ true) (= __x12__ true))
  [28941] (29717/4) Normal[28941] __x0__ = (= __x1__ true)
  [28942] (29787/16) Call[28942] app __x8__ = (IsDataDescriptor Desc)
  [28943] (29850/31) If[28943] __x19__
  [28944] (29801/18) If[28944] (! (= O undefined))
  [28945] (29803/21) Normal[28945] let ap = O.SubMap[P]
  [28946] (29736/5) If[28946] (! (= absent Desc.Configurable))
  [28947] (29749/8) Normal[28947] ap.Get = Desc.Get
  [28948] (29750/8) If[28948] (= Desc.Set absent)
  [28949] (29743/7) Normal[28949] assert (= [! __x3__] true)
  [28950] (29756/8) If[28950] (= Desc.Configurable absent)
  [28951] (29834/30) Normal[28951] __x17__ = (! (= Desc.Set absent))
  [28952] (29794/18) Call[28952] app __x10__ = (IsDataDescriptor current)
  [28953] (29795/18) If[28953] (= __x10__ true)
  [28954] (29841/30) Normal[28954] return false
  [28955] (29843/31) Normal[28955] let __x19__ = true
  [28956] (29721/16) Call[28956] app __x2__ = (IsDataDescriptor Desc)
  [28957] (29776/13) Normal[28957] __x4__ = (= [! __x5__] false)
  [28958] (29859/34) Loop[28958] (< __i__ __keys__.length)
  [28959] (29812/24) If[28959] (&& (! (= Desc.Writable absent)) (= Desc.Writable true))
  [28960] (29726/5) Normal[28960] let dp = (new DataProperty())
  [28961] (29757/8) Normal[28961] ap.Configurable = false
  [28962] (29807/22) Call[28962] app __x11__ = (IsDataDescriptor current)
  [28963] (29853/32) Normal[28963] return true
  [28964] (29712/2) Normal[28964] return false
  [28965] (29714/3) Normal[28965] assert (= extensible true)
  [28966] (29792/17) Normal[28966] return false
  [28967] (29730/5) If[28967] (! (= absent Desc.Writable))
  [28968] (29731/5) Normal[28968] dp.Writable = Desc.Writable
  [28969] (29732/5) Normal[28969] dp.Writable = false
  [28970] (29748/8) Normal[28970] ap.Get = undefined
  [28971] (29751/8) Normal[28971] ap.Set = undefined
  [28972] (29752/8) Normal[28972] ap.Set = Desc.Set
  [28973] (29786/16) Call[28973] app __x7__ = (IsDataDescriptor current)
  [28974] (29742/7) Call[28974] app __x3__ = (IsAccessorDescriptor Desc)
  [28975] (29804/21) Normal[28975] O.SubMap[P] = (new DataProperty("Value" -> undefined, "Writable" -> false, "Configurable" -> ap.Configurable, "Enumerable" -> ap.Enumerable))
  [28976] (29724/5) If[28976] (! (= O undefined))
  [28977] (29769/12) Normal[28977] return false
  [28978] (29771/13) Normal[28978] let __x4__ = true
  [28979] (29817/25) If[28979] __x13__
  [28980] (29819/25) Call[28980] app __x14__ = (SameValue Desc.Value current.Value)
  [28981] (29810/23) If[28981] (&& (= current.Configurable false) (= current.Writable false))
  [28982] (29718/4) If[28982] __x0__
  [28983] (29844/31) Normal[28983] __x19__ = (! (= Desc.Get absent))
  [28984] (29851/31) Normal[28984] return false
  [28985] (29833/30) Normal[28985] let __x17__ = true
  [28986] (29796/19) If[28986] (! (= O undefined))
  [28987] (29858/34) Normal[28987] let __i__ = 0i
  [28988] (29816/25) Normal[28988] __x13__ = (! (= Desc.Value absent))
  [28989] (29768/12) If[28989] (= Desc.Configurable true)
  [28990] (29791/17) If[28990] (= current.Configurable false)
  [28991] (29838/30) Normal[28991] __x17__ = (= __x18__ false)
  [28992] (29772/13) Normal[28992] __x4__ = (! (= Desc.Enumerable absent))
  [28993] (29798/19) Normal[28993] let dp = O.SubMap[P]
  [28994] (29747/8) If[28994] (= Desc.Get absent)
  [28995] (29845/31) If[28995] __x19__
  [28996] (29828/28) Call[28996] app __x15__ = (IsAccessorDescriptor current)
  [28997] Exit[28997]
  [28998] (29820/25) Normal[28998] __x13__ = (= __x14__ false)
Algo: ValidateAtomicAccess [2614]
  [28999] Entry[28999]
  [29000] (29867/1) Normal[29000] let length = typedArray.ArrayLength
  [29001] (29871/4) If[29001] (! (< accessIndex length))
  [29002] (29872/4) Normal[29002] throw RangeError
  [29003] (29874/5) Normal[29003] let arrayTypeName = typedArray.TypedArrayName
  [29004] (29877/8) Normal[29004] return (+ (* accessIndex elementSize) offset)
  [29005] Exit[29005]
  [29006] (29868/2) Call[29006] app __x0__ = (ToIndex requestIndex)
  [29007] (29876/7) Normal[29007] let offset = typedArray.ByteOffset
  [29008] (29869/2) Normal[29008] let accessIndex = [? __x0__]
  [29009] (29875/6) Normal[29009] ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for id:{arrayTypeName} ."
  [29010] (29870/3) Normal[29010] assert (! (< accessIndex 0i))
Algo: ValidateIntegerTypedArray [2615]
  [29011] Entry[29011]
  [29012] (29879/0) If[29012] (= waitable absent)
  [29013] (29884/2) Normal[29013] let typeName = typedArray.TypedArrayName
  [29014] (29885/3) Normal[29014] ??? "Let id:{type} be the Element Type value in link:{table-the-typedarray-constructors} for id:{typeName} ."
  [29015] (29891/7) Normal[29015] let __x1__ = true
  [29016] (29892/7) Call[29016] app __x2__ = (IsUnclampedIntegerElementType type)
  [29017] (29896/7) Call[29017] app __x3__ = (IsBigIntElementType type)
  [29018] (29897/7) Normal[29018] __x1__ = (= [! __x3__] false)
  [29019] (29880/0) Normal[29019] waitable = false
  [29020] (29882/1) Call[29020] app __x0__ = (ValidateTypedArray typedArray)
  [29021] (29886/4) If[29021] (= waitable true)
  [29022] (29888/5) Normal[29022] throw TypeError
  [29023] (29902/8) Normal[29023] return buffer
  [29024] (29894/7) If[29024] __x1__
  [29025] (29899/7) If[29025] __x1__
  [29026] (29900/7) Normal[29026] throw TypeError
  [29027] (29893/7) Normal[29027] __x1__ = (= [! __x2__] false)
  [29028] (29887/5) If[29028] (! (|| (= typeName "Int32Array") (= typeName "BigInt64Array")))
  [29029] (29883/1) Normal[29029] let buffer = [? __x0__]
  [29030] Exit[29030]
Algo: ValidateTypedArray [2616]
  [29031] Entry[29031]
  [29032] (29904/0) Call[29032] app __x0__ = (RequireInternalSlot O "TypedArrayName")
  [29033] (29908/3) Call[29033] app __x1__ = (IsDetachedBuffer buffer)
  [29034] (29909/3) If[29034] (= __x1__ true)
  [29035] (29905/0) Normal[29035] [? __x0__]
  [29036] (29910/3) Normal[29036] throw TypeError
  [29037] (29912/4) Normal[29037] return buffer
  [29038] (29906/1) Normal[29038] assert (! (= O.ViewedArrayBuffer absent))
  [29039] (29907/2) Normal[29039] let buffer = O.ViewedArrayBuffer
  [29040] Exit[29040]
Algo: ValueOfReadEvent [2617]
  [29041] Entry[29041]
  [29042] (29914/0) Normal[29042] assert (|| (is-instance-of R ReadSharedMemory) (is-instance-of R ReadModifyWriteSharedMemory))
  [29043] (29918/3) Normal[29043] return __x1__
  [29044] Exit[29044]
  [29045] (29915/1) Call[29045] app __x0__ = (execution.ReadsBytesFrom execution R)
  [29046] (29916/1) Normal[29046] let Ws = __x0__
  [29047] (29917/3) Call[29047] app __x1__ = (ComposeWriteEventBytes execution R.ByteIndex Ws)
Algo: VariableDeclarationList[0,0].VarScopedDeclarations [2618]
  [29048] Entry[29048]
  [29049] (29920)Normal[29049] let VariableDeclarationList = this
  [29050] (29921/0) Normal[29050] return (new [VariableDeclaration])
  [29051] Exit[29051]
Algo: VariableDeclarationList[1,0].BoundNames [2619]
  [29052] Entry[29052]
  [29053] (29923/0) Call[29053] access __x0__ = (VariableDeclarationList "BoundNames")
  [29054] (29927/1) Normal[29054] let __x3__ = 0i
  [29055] (29928/1) Loop[29055] (< __x3__ __x2__.length)
  [29056] LoopCont[29056]
  [29057] (29924/0) Normal[29057] let names = __x0__
  [29058] (29930/1) Normal[29058] let __x4__ = __x2__[__x3__]
  [29059] (29933/2) Normal[29059] return names
  [29060] (29932/1) Normal[29060] append __x4__ -> names
  [29061] (29925/1) Call[29061] access __x1__ = (VariableDeclaration "BoundNames")
  [29062] (29931/1) Normal[29062] __x3__ = (+ __x3__ 1i)
  [29063] (29926/1) Normal[29063] let __x2__ = __x1__
  [29064] Exit[29064]
Algo: VariableDeclarationList[1,0].Evaluation [2620]
  [29065] Entry[29065]
  [29066] (29935/0) Call[29066] access __x0__ = (VariableDeclarationList "Evaluation")
  [29067] (29939/2) Normal[29067] return __x1__
  [29068] Exit[29068]
  [29069] (29936/0) Normal[29069] let next = __x0__
  [29070] (29937/1) Normal[29070] [? next]
  [29071] (29938/2) Call[29071] access __x1__ = (VariableDeclaration "Evaluation")
Algo: VariableDeclarationList[1,0].VarScopedDeclarations [2621]
  [29072] Entry[29072]
  [29073] (29941/0) Call[29073] access __x0__ = (VariableDeclarationList "VarScopedDeclarations")
  [29074] (29942/0) Normal[29074] let declarations = __x0__
  [29075] (29943/1) Normal[29075] append VariableDeclaration -> declarations
  [29076] (29944/2) Normal[29076] return declarations
  [29077] Exit[29077]
Algo: VariableDeclaration[0,0].BoundNames [2622]
  [29078] Entry[29078]
  [29079] (29946)Normal[29079] let VariableDeclaration = this
  [29080] (29947/0) Call[29080] access __x0__ = (BindingIdentifier "BoundNames")
  [29081] (29948/0) Normal[29081] return __x0__
  [29082] Exit[29082]
Algo: VariableDeclaration[0,0].Evaluation [2623]
  [29083] Entry[29083]
  [29084] (29950)Normal[29084] let VariableDeclaration = this
  [29085] (29951/0) Normal[29085] return ~empty~
  [29086] Exit[29086]
Algo: VariableDeclaration[0,1].BoundNames [2624]
  [29087] Entry[29087]
  [29088] (29953)Normal[29088] let VariableDeclaration = this
  [29089] (29954/0) Call[29089] access __x0__ = (BindingIdentifier "BoundNames")
  [29090] (29955/0) Normal[29090] return __x0__
  [29091] Exit[29091]
Algo: VariableDeclaration[0,1].Evaluation [2625]
  [29092] Entry[29092]
  [29093] (29957)Normal[29093] let VariableDeclaration = this
  [29094] (29961/1) Normal[29094] let lhs = [? __x1__]
  [29095] (29962/2) Call[29095] app __x2__ = (IsAnonymousFunctionDefinition Initializer)
  [29096] (29968/5) Call[29096] access __x4__ = (Initializer "Evaluation")
  [29097] (29969/5) Normal[29097] let rhs = __x4__
  [29098] (29972/7) Call[29098] app __x6__ = (PutValue lhs value)
  [29099] (29973/7) Normal[29099] return [? __x6__]
  [29100] (29958/0) Call[29100] access __x0__ = (BindingIdentifier "StringValue")
  [29101] (29963/2) If[29101] (= __x2__ true)
  [29102] (29966/3) Normal[29102] let value = __x3__
  [29103] (29971/6) Normal[29103] let value = [? __x5__]
  [29104] (29959/0) Normal[29104] let bindingId = __x0__
  [29105] (29970/6) Call[29105] app __x5__ = (GetValue rhs)
  [29106] (29965/3) Call[29106] access __x3__ = (Initializer "NamedEvaluation" bindingId)
  [29107] (29960/1) Call[29107] app __x1__ = (ResolveBinding bindingId)
  [29108] Exit[29108]
Algo: VariableDeclaration[1,0].BoundNames [2626]
  [29109] Entry[29109]
  [29110] (29975)Normal[29110] let VariableDeclaration = this
  [29111] (29976/0) Call[29111] access __x0__ = (BindingPattern "BoundNames")
  [29112] (29977/0) Normal[29112] return __x0__
  [29113] Exit[29113]
Algo: VariableDeclaration[1,0].Evaluation [2627]
  [29114] Entry[29114]
  [29115] (29979)Normal[29115] let VariableDeclaration = this
  [29116] (29983/1) Normal[29116] let rval = [? __x1__]
  [29117] (29984/2) Call[29117] access __x2__ = (BindingPattern "BindingInitialization" rval undefined)
  [29118] (29980/0) Call[29118] access __x0__ = (Initializer "Evaluation")
  [29119] (29985/2) Normal[29119] return __x2__
  [29120] (29981/0) Normal[29120] let rhs = __x0__
  [29121] Exit[29121]
  [29122] (29982/1) Call[29122] app __x1__ = (GetValue rhs)
Algo: VariableStatement[0,0].Evaluation [2628]
  [29123] Entry[29123]
  [29124] (29987)Normal[29124] let VariableStatement = this
  [29125] (29991/2) Normal[29125] return ~empty~
  [29126] Exit[29126]
  [29127] (29988/0) Call[29127] access __x0__ = (VariableDeclarationList "Evaluation")
  [29128] (29989/0) Normal[29128] let next = __x0__
  [29129] (29990/1) Normal[29129] [? next]
Algo: VariableStatement[0,0].VarDeclaredNames [2629]
  [29130] Entry[29130]
  [29131] (29993)Normal[29131] let VariableStatement = this
  [29132] (29994/0) Call[29132] access __x0__ = (VariableDeclarationList "BoundNames")
  [29133] (29995/0) Normal[29133] return __x0__
  [29134] Exit[29134]
Algo: WeakRefDeref [2630]
  [29135] Entry[29135]
  [29136] (29997/0) Normal[29136] let target = weakRef.WeakRefTarget
  [29137] (30002/3) Normal[29137] return target
  [29138] (30004/4) Normal[29138] return undefined
  [29139] (29998/1) If[29139] (! (= target ~empty~))
  [29140] Exit[29140]
  [29141] (30000/2) Call[29141] app __x0__ = (AddToKeptObjects target)
  [29142] (30001/2) Normal[29142] [! __x0__]
Algo: WeekDay [2631]
  [29143] Entry[29143]
  [29144] (30006/0) Call[29144] app __x0__ = (Day t)
  [29145] (30007/0) Normal[29145] return (%% (+ __x0__ 4i) 7i)
  [29146] Exit[29146]
Algo: WhileStatement[0,0].ContainsDuplicateLabels [2632]
  [29147] Entry[29147]
  [29148] (30009)Normal[29148] let WhileStatement = this
  [29149] (30010/0) Call[29149] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [29150] (30011/0) Normal[29150] return __x0__
  [29151] Exit[29151]
Algo: WhileStatement[0,0].ContainsUndefinedBreakTarget [2633]
  [29152] Entry[29152]
  [29153] (30013)Normal[29153] let WhileStatement = this
  [29154] (30014/0) Call[29154] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [29155] (30015/0) Normal[29155] return __x0__
  [29156] Exit[29156]
Algo: WhileStatement[0,0].ContainsUndefinedContinueTarget [2634]
  [29157] Entry[29157]
  [29158] (30017)Normal[29158] let WhileStatement = this
  [29159] (30018/0) Call[29159] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [29160] (30019/0) Normal[29160] return __x0__
  [29161] Exit[29161]
Algo: WhileStatement[0,0].EarlyErrors [2635]
  [29162] Entry[29162]
  [29163] (30021)Normal[29163] let WhileStatement = this
  [29164] (30022/0) Call[29164] app __x0__ = (IsLabelledFunction Statement)
  [29165] (30023/0) If[29165] (= __x0__ true)
  [29166] (30024/0) Normal[29166] throw SyntaxError
  [29167] Exit[29167]
Algo: WhileStatement[0,0].HasCallInTailPosition [2636]
  [29168] Entry[29168]
  [29169] (30027)Normal[29169] let WhileStatement = this
  [29170] (30028/0) Call[29170] access __x0__ = (Statement "HasCallInTailPosition" call)
  [29171] (30029/0) Normal[29171] return __x0__
  [29172] Exit[29172]
Algo: WhileStatement[0,0].VarDeclaredNames [2637]
  [29173] Entry[29173]
  [29174] (30031)Normal[29174] let WhileStatement = this
  [29175] (30032/0) Call[29175] access __x0__ = (Statement "VarDeclaredNames")
  [29176] (30033/0) Normal[29176] return __x0__
  [29177] Exit[29177]
Algo: WhileStatement[0,0].VarScopedDeclarations [2638]
  [29178] Entry[29178]
  [29179] (30035)Normal[29179] let WhileStatement = this
  [29180] (30036/0) Call[29180] access __x0__ = (Statement "VarScopedDeclarations")
  [29181] (30037/0) Normal[29181] return __x0__
  [29182] Exit[29182]
Algo: WhileStatement[0,0].WhileLoopEvaluation [2639]
  [29183] Entry[29183]
  [29184] (30039)Normal[29184] let WhileStatement = this
  [29185] (30044/2) Normal[29185] let exprRef = __x0__
  [29186] (30045/3) Call[29186] app __x1__ = (GetValue exprRef)
  [29187] (30049/4) Normal[29187] return V
  [29188] (30051/5) Call[29188] access __x3__ = (Statement "Evaluation")
  [29189] (30054/6) If[29189] (= __x4__ false)
  [29190] (30056/6) Call[29190] app __x5__ = (UpdateEmpty stmtResult V)
  [29191] (30059/7) If[29191] (! (= stmtResult.Value ~empty~))
  [29192] (30040/0) Normal[29192] let V = undefined
  [29193] (30046/3) Normal[29193] let exprValue = [? __x1__]
  [29194] (30048/4) If[29194] (= [! __x2__] false)
  [29195] (30053/6) Call[29195] app __x4__ = (LoopContinues stmtResult labelSet)
  [29196] (30041/1) Loop[29196] true
  [29197] (30060/7) Normal[29197] V = stmtResult.Value
  [29198] LoopCont[29198]
  [29199] (30052/5) Normal[29199] let stmtResult = __x3__
  [29200] (30047/4) Call[29200] app __x2__ = (ToBoolean exprValue)
  [29201] (30043/2) Call[29201] access __x0__ = (Expression "Evaluation")
  [29202] Exit[29202]
  [29203] (30057/6) Normal[29203] return __x5__
Algo: WithStatement[0,0].ContainsDuplicateLabels [2640]
  [29204] Entry[29204]
  [29205] (30063)Normal[29205] let WithStatement = this
  [29206] (30064/0) Call[29206] access __x0__ = (Statement "ContainsDuplicateLabels" labelSet)
  [29207] (30065/0) Normal[29207] return __x0__
  [29208] Exit[29208]
Algo: WithStatement[0,0].ContainsUndefinedBreakTarget [2641]
  [29209] Entry[29209]
  [29210] (30067)Normal[29210] let WithStatement = this
  [29211] (30068/0) Call[29211] access __x0__ = (Statement "ContainsUndefinedBreakTarget" labelSet)
  [29212] (30069/0) Normal[29212] return __x0__
  [29213] Exit[29213]
Algo: WithStatement[0,0].ContainsUndefinedContinueTarget [2642]
  [29214] Entry[29214]
  [29215] (30071)Normal[29215] let WithStatement = this
  [29216] (30072/0) Call[29216] access __x0__ = (Statement "ContainsUndefinedContinueTarget" iterationSet (new []))
  [29217] (30073/0) Normal[29217] return __x0__
  [29218] Exit[29218]
Algo: WithStatement[0,0].EarlyErrors [2643]
  [29219] Entry[29219]
  [29220] (30075)Normal[29220] let WithStatement = this
  [29221] (30080/1) If[29221] (= __x0__ true)
  [29222] (30081/1) Normal[29222] throw SyntaxError
  [29223] Exit[29223]
  [29224] (30076/0) If[29224] true
  [29225] (30077/0) Normal[29225] throw SyntaxError
  [29226] (30079/1) Call[29226] app __x0__ = (IsLabelledFunction Statement)
Algo: WithStatement[0,0].Evaluation [2644]
  [29227] Entry[29227]
  [29228] (30084)Normal[29228] let WithStatement = this
  [29229] (30088/1) Call[29229] app __x2__ = (ToObject [? __x1__])
  [29230] (30089/1) Normal[29230] let obj = [? __x2__]
  [29231] (30093/4) Normal[29231] newEnv.withEnvironment = true
  [29232] (30094/5) Normal[29232] CONTEXT.LexicalEnvironment = newEnv
  [29233] (30097/7) Normal[29233] CONTEXT.LexicalEnvironment = oldEnv
  [29234] (30098/8) Call[29234] app __x5__ = (UpdateEmpty C undefined)
  [29235] (30085/0) Call[29235] access __x0__ = (Expression "Evaluation")
  [29236] (30090/2) Normal[29236] let oldEnv = CONTEXT.LexicalEnvironment
  [29237] (30092/3) Normal[29237] let newEnv = __x3__
  [29238] (30096/6) Normal[29238] let C = __x4__
  [29239] (30086/0) Normal[29239] let val = __x0__
  [29240] (30095/6) Call[29240] access __x4__ = (Statement "Evaluation")
  [29241] (30091/3) Call[29241] app __x3__ = (NewObjectEnvironment obj oldEnv)
  [29242] (30087/1) Call[29242] app __x1__ = (GetValue val)
  [29243] (30099/8) Normal[29243] return __x5__
  [29244] Exit[29244]
Algo: WithStatement[0,0].HasCallInTailPosition [2645]
  [29245] Entry[29245]
  [29246] (30101)Normal[29246] let WithStatement = this
  [29247] (30102/0) Call[29247] access __x0__ = (Statement "HasCallInTailPosition" call)
  [29248] (30103/0) Normal[29248] return __x0__
  [29249] Exit[29249]
Algo: WithStatement[0,0].VarDeclaredNames [2646]
  [29250] Entry[29250]
  [29251] (30105)Normal[29251] let WithStatement = this
  [29252] (30106/0) Call[29252] access __x0__ = (Statement "VarDeclaredNames")
  [29253] (30107/0) Normal[29253] return __x0__
  [29254] Exit[29254]
Algo: WithStatement[0,0].VarScopedDeclarations [2647]
  [29255] Entry[29255]
  [29256] (30109)Normal[29256] let WithStatement = this
  [29257] (30110/0) Call[29257] access __x0__ = (Statement "VarScopedDeclarations")
  [29258] (30111/0) Normal[29258] return __x0__
  [29259] Exit[29259]
Algo: YearFromTime [2648]
  [29260] Entry[29260]
  [29261] (30112/0) Normal[29261] ??? "YearFromTime ( id:{t} ) = the largest integral Number id:{y} ( closest to + ∞ ) such that TimeFromYear ( id:{y} ) ≤ id:{t}"
  [29262] Exit[29262]
Algo: Yield [2649]
  [29263] Entry[29263]
  [29264] (30114/0) Call[29264] app __x0__ = (GetGeneratorKind)
  [29265] (30119/1) Normal[29265] return [? __x1__]
  [29266] Exit[29266]
  [29267] (30115/0) Normal[29267] let generatorKind = [! __x0__]
  [29268] (30121/2) Call[29268] app __x2__ = (CreateIterResultObject value false)
  [29269] (30122/2) Call[29269] app __x3__ = (GeneratorYield [! __x2__])
  [29270] (30116/1) If[29270] (= generatorKind ~async~)
  [29271] (30123/2) Normal[29271] return [? __x3__]
  [29272] (30118/1) Call[29272] app __x1__ = (AsyncGeneratorYield value)
Algo: YieldExpression[0,0].Evaluation [2650]
  [29273] Entry[29273]
  [29274] (30125)Normal[29274] let YieldExpression = this
  [29275] (30126/0) Call[29275] app __x0__ = (Yield undefined)
  [29276] (30127/0) Normal[29276] return [? __x0__]
  [29277] Exit[29277]
Algo: YieldExpression[1,0].Evaluation [2651]
  [29278] Entry[29278]
  [29279] (30129)Normal[29279] let YieldExpression = this
  [29280] (30133/1) Normal[29280] let value = [? __x1__]
  [29281] (30134/2) Call[29281] app __x2__ = (Yield value)
  [29282] (30130/0) Call[29282] access __x0__ = (AssignmentExpression "Evaluation")
  [29283] (30135/2) Normal[29283] return [? __x2__]
  [29284] (30131/0) Normal[29284] let exprRef = __x0__
  [29285] Exit[29285]
  [29286] (30132/1) Call[29286] app __x1__ = (GetValue exprRef)
Algo: YieldExpression[2,0].Evaluation [2652]
  [29287] (30141/1) Normal[29287] let exprRef = __x1__
  [29288] (30142/2) Call[29288] app __x2__ = (GetValue exprRef)
  [29289] (30251/48) Call[29289] app __x28__ = (IteratorValue innerReturnResult)
  [29290] (30252/48) Call[29290] app __x29__ = (AsyncGeneratorYield [? __x28__])
  [29291] (30222/38) If[29291] (= return undefined)
  [29292] (30224/39) If[29292] (= generatorKind ~async~)
  [29293] (30231/41) Call[29293] app __x24__ = (Call return iterator (new [received.Value]))
  [29294] (30241/44) Call[29294] app __x26__ = (IteratorComplete innerReturnResult)
  [29295] (30242/44) Normal[29295] let done = [? __x26__]
  [29296] (30226/39) Call[29296] app __x23__ = (Await received.Value)
  [29297] (30229/40) Normal[29297] return received
  [29298] (30255/49) Call[29298] app __x30__ = (GeneratorYield innerReturnResult)
  [29299] (30256/49) Normal[29299] received = __x30__
  [29300] (30249/48) If[29300] (= generatorKind ~async~)
  [29301] Entry[29301]
  [29302] (30137)Normal[29302] let YieldExpression = this
  [29303] LoopCont[29303]
  [29304] (30146/4) Normal[29304] let iterator = iteratorRecord.Iterator
  [29305] (30147/5) Call[29305] app __x4__ = (NormalCompletion undefined)
  [29306] (30210/31) If[29306] (= generatorKind ~async~)
  [29307] (30212/31) Call[29307] app __x20__ = (AsyncIteratorClose iteratorRecord closeCompletion)
  [29308] (30215/32) Call[29308] app __x21__ = (IteratorClose iteratorRecord closeCompletion)
  [29309] (30190/22) If[29309] (! (= (typeof innerResult) Object))
  [29310] (30191/22) Normal[29310] throw TypeError
  [29311] (30193/23) Call[29311] app __x15__ = (IteratorComplete innerResult)
  [29312] (30164/12) If[29312] (= done true)
  [29313] (30166/13) Call[29313] app __x8__ = (IteratorValue innerResult)
  [29314] (30169/14) If[29314] (= generatorKind ~async~)
  [29315] (30183/19) Call[29315] app __x13__ = (Call throw iterator (new [received.Value]))
  [29316] (30184/19) Normal[29316] let innerResult = [? __x13__]
  [29317] (30167/13) Normal[29317] return [? __x8__]
  [29318] (30204/26) Normal[29318] received = __x18__
  [29319] (30150/7) If[29319] (= received.Type ~normal~)
  [29320] (30152/8) Call[29320] app __x5__ = (Call iteratorRecord.NextMethod iteratorRecord.Iterator (new [received.Value]))
  [29321] (30177/7) If[29321] (= received.Type ~throw~)
  [29322] (30159/10) If[29322] (! (= (typeof innerResult) Object))
  [29323] (30160/10) Normal[29323] throw TypeError
  [29324] (30162/11) Call[29324] app __x7__ = (IteratorComplete innerResult)
  [29325] (30195/24) If[29325] (= done true)
  [29326] (30197/25) Call[29326] app __x16__ = (IteratorValue innerResult)
  [29327] (30200/26) If[29327] (= generatorKind ~async~)
  [29328] (30213/31) Normal[29328] [? __x20__]
  [29329] (30243/45) If[29329] (= done true)
  [29330] (30172/14) Call[29330] app __x10__ = (AsyncGeneratorYield [? __x9__])
  [29331] (30173/14) Normal[29331] received = __x10__
  [29332] (30217/34) Normal[29332] throw TypeError
  [29333] (30149/6) Loop[29333] true
  [29334] (30138/0) Call[29334] app __x0__ = (GetGeneratorKind)
  [29335] (30236/42) Normal[29335] innerReturnResult = [? __x25__]
  [29336] (30238/43) If[29336] (! (= (typeof innerReturnResult) Object))
  [29337] (30143/2) Normal[29337] let value = [? __x2__]
  [29338] (30216/32) Normal[29338] [? __x21__]
  [29339] (30253/48) Normal[29339] received = __x29__
  [29340] (30232/41) Normal[29340] let innerReturnResult = [? __x24__]
  [29341] (30179/17) Call[29341] app __x12__ = (GetMethod iterator "throw")
  [29342] (30219/36) Normal[29342] assert (= received.Type ~return~)
  [29343] (30171/14) Call[29343] app __x9__ = (IteratorValue innerResult)
  [29344] (30185/20) If[29344] (= generatorKind ~async~)
  [29345] (30145/3) Normal[29345] let iteratorRecord = [? __x3__]
  [29346] (30206/27) Call[29346] app __x19__ = (GeneratorYield innerResult)
  [29347] (30207/27) Normal[29347] received = __x19__
  [29348] Exit[29348]
  [29349] (30188/20) Normal[29349] innerResult = [? __x14__]
  [29350] (30235/42) Call[29350] app __x25__ = (Await innerReturnResult)
  [29351] (30139/0) Normal[29351] let generatorKind = [! __x0__]
  [29352] (30194/23) Normal[29352] let done = [? __x15__]
  [29353] (30221/37) Normal[29353] let return = [? __x22__]
  [29354] (30154/9) If[29354] (= generatorKind ~async~)
  [29355] (30156/9) Call[29355] app __x6__ = (Await innerResult)
  [29356] (30176/15) Normal[29356] received = __x11__
  [29357] (30180/17) Normal[29357] let throw = [? __x12__]
  [29358] (30163/11) Normal[29358] let done = [? __x7__]
  [29359] (30175/15) Call[29359] app __x11__ = (GeneratorYield innerResult)
  [29360] (30233/42) If[29360] (= generatorKind ~async~)
  [29361] (30148/5) Normal[29361] let received = __x4__
  [29362] (30202/26) Call[29362] app __x17__ = (IteratorValue innerResult)
  [29363] (30246/46) Normal[29363] let value = [? __x27__]
  [29364] (30247/47) Normal[29364] return (comp[~return~] value => ~empty~)
  [29365] (30239/43) Normal[29365] throw TypeError
  [29366] (30144/3) Call[29366] app __x3__ = (GetIterator value generatorKind)
  [29367] (30187/20) Call[29367] app __x14__ = (Await innerResult)
  [29368] (30140/1) Call[29368] access __x1__ = (AssignmentExpression "Evaluation")
  [29369] (30245/46) Call[29369] app __x27__ = (IteratorValue innerReturnResult)
  [29370] (30181/18) If[29370] (! (= throw undefined))
  [29371] (30198/25) Normal[29371] return [? __x16__]
  [29372] (30220/37) Call[29372] app __x22__ = (GetMethod iterator "return")
  [29373] (30157/9) Normal[29373] innerResult = [? __x6__]
  [29374] (30203/26) Call[29374] app __x18__ = (AsyncGeneratorYield [? __x17__])
  [29375] (30227/39) Normal[29375] received.Value = [? __x23__]
  [29376] (30153/8) Normal[29376] let innerResult = [? __x5__]
  [29377] (30209/30) Normal[29377] let closeCompletion = (comp[~normal~] ~empty~ => ~empty~)
Algo: msFromTime [2653]
  [29378] Entry[29378]
  [29379] (30257/0) Normal[29379] return (%% t 1000.0)
  [29380] Exit[29380]
Algo: msPerDay [2654]
  [29381] Entry[29381]
  [29382] (30258/0) Normal[29382] return 86400000i
  [29383] Exit[29383]
Algo: msPerHour [2655]
  [29384] Entry[29384]
  [29385] (30259/0) Normal[29385] return (* 60000.0 MinutesPerHour)
  [29386] Exit[29386]
Algo: msPerMinute [2656]
  [29387] Entry[29387]
  [29388] (30260/0) Normal[29388] return (* 1000.0 SecondsPerMinute)
  [29389] Exit[29389]
Algo: msPerSecond [2657]
  [29390] Entry[29390]
  [29391] (30261/0) Normal[29391] return 1000i
  [29392] Exit[29392]
Algo: thisBigIntValue [2658]
  [29393] Entry[29393]
  [29394] (30263/0) If[29394] (= (typeof value) BigInt)
  [29395] (30269/3) Normal[29395] return value.BigIntData
  [29396] (30271/4) Normal[29396] throw TypeError
  [29397] (30264/0) Normal[29397] return value
  [29398] (30266/1) If[29398] (&& (= (typeof value) Object) (! (= value.BigIntData absent)))
  [29399] Exit[29399]
  [29400] (30268/2) Normal[29400] assert (= (typeof value.BigIntData) BigInt)
Algo: thisBooleanValue [2659]
  [29401] Entry[29401]
  [29402] (30273/0) If[29402] (= (typeof value) Boolean)
  [29403] (30279/3) Normal[29403] assert (= (typeof b) Boolean)
  [29404] (30280/4) Normal[29404] return b
  [29405] (30274/0) Normal[29405] return value
  [29406] (30276/1) If[29406] (&& (= (typeof value) Object) (! (= value.BooleanData absent)))
  [29407] (30282/5) Normal[29407] throw TypeError
  [29408] Exit[29408]
  [29409] (30278/2) Normal[29409] let b = value.BooleanData
Algo: thisNumberValue [2660]
  [29410] Entry[29410]
  [29411] (30284/0) If[29411] (= (typeof value) Number)
  [29412] (30290/3) Normal[29412] assert (= (typeof n) Number)
  [29413] (30291/4) Normal[29413] return n
  [29414] (30285/0) Normal[29414] return value
  [29415] (30287/1) If[29415] (&& (= (typeof value) Object) (! (= value.NumberData absent)))
  [29416] (30293/5) Normal[29416] throw TypeError
  [29417] Exit[29417]
  [29418] (30289/2) Normal[29418] let n = value.NumberData
Algo: thisStringValue [2661]
  [29419] Entry[29419]
  [29420] (30295/0) If[29420] (= (typeof value) String)
  [29421] (30301/3) Normal[29421] assert (= (typeof s) String)
  [29422] (30302/4) Normal[29422] return s
  [29423] (30296/0) Normal[29423] return value
  [29424] (30298/1) If[29424] (&& (= (typeof value) Object) (! (= value.StringData absent)))
  [29425] (30304/5) Normal[29425] throw TypeError
  [29426] Exit[29426]
  [29427] (30300/2) Normal[29427] let s = value.StringData
Algo: thisSymbolValue [2662]
  [29428] Entry[29428]
  [29429] (30306/0) If[29429] (= (typeof value) Symbol)
  [29430] (30312/3) Normal[29430] assert (= (typeof s) Symbol)
  [29431] (30313/4) Normal[29431] return s
  [29432] (30307/0) Normal[29432] return value
  [29433] (30309/1) If[29433] (&& (= (typeof value) Object) (! (= value.SymbolData absent)))
  [29434] (30315/5) Normal[29434] throw TypeError
  [29435] Exit[29435]
  [29436] (30311/2) Normal[29436] let s = value.SymbolData
Algo: thisTimeValue [2663]
  [29437] Entry[29437]
  [29438] (30317/0) If[29438] (&& (= (typeof value) Object) (! (= value.DateValue absent)))
  [29439] (30318/1) Normal[29439] return value.DateValue
  [29440] (30320/2) Normal[29440] throw TypeError
  [29441] Exit[29441]
