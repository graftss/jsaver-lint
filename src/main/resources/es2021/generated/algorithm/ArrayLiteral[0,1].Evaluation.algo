def [SYNTAX] ArrayLiteral[0,1].Evaluation[R]<(Elision),true>() = 0:{
  0:app __x0__ = (ArrayCreate 0i)
  0:let array = [! __x0__]
  1:if (! (= Elision absent)) 1:{
    2:access __x1__ = (Elision "ArrayAccumulation" array 0i)
    2:let len = __x1__
    3:[? len]
  } else 1:{}
  4:return array
}
- id: "sec-array-initializer-runtime-semantics-evaluation"
- code:
          1. Let _array_ be ! ArrayCreate(0).
          1. If |Elision| is present, then
            1. Let _len_ be the result of performing ArrayAccumulation for |Elision| with arguments _array_ and 0.
            1. ReturnIfAbrupt(_len_).
          1. Return _array_.