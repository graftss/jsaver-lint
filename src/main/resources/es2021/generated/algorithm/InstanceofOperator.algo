def InstanceofOperator(V, target) = 0:{
  0:if (! (= (typeof target) Object)) 0:throw TypeError else 0:{}
  1:app __x0__ = (GetMethod target SYMBOL_hasInstance)
  1:let instOfHandler = [? __x0__]
  2:if (! (= instOfHandler undefined)) 2:{
    3:app __x1__ = (Call instOfHandler target (new [V]))
    3:app __x2__ = (ToBoolean [? __x1__])
    3:return [! __x2__]
  } else 2:{}
  4:app __x3__ = (IsCallable target)
  4:if (= __x3__ false) 4:throw TypeError else 4:{}
  5:app __x4__ = (OrdinaryHasInstance target V)
  5:return [? __x4__]
}
- id: "sec-instanceofoperator"
- code:
        1. If Type(_target_) is not Object, throw a *TypeError* exception.
        1. Let _instOfHandler_ be ? GetMethod(_target_, @@hasInstance).
        1. If _instOfHandler_ is not *undefined*, then
          1. Return ! ToBoolean(? Call(_instOfHandler_, _target_, « _V_ »)).
        1. [id="step-instanceof-check-function"] If IsCallable(_target_) is *false*, throw a *TypeError* exception.
        1. [id="step-instanceof-fallback"] Return ? OrdinaryHasInstance(_target_, _V_).