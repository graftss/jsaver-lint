def [BUILTIN] String.fromCodePoint(...codePoints) = 0:{
  0:let result = ""
  1:let __x0__ = codePoints
  1:let __x1__ = 0i
  1:while (< __x1__ __x0__.length) 1:{
    1:let next = __x0__[__x1__]
    1:__x1__ = (+ __x1__ 1i)
    2:app __x2__ = (ToNumber next)
    2:let nextCP = [? __x2__]
    3:app __x3__ = (IsIntegralNumber nextCP)
    3:if (= [! __x3__] false) 3:throw RangeError else 3:{}
    4:if (|| (< nextCP 0i) (< 1114111i nextCP)) 4:throw RangeError else 4:{}
    5:app __x4__ = (UTF16EncodeCodePoint nextCP)
    5:result = (+ result [! __x4__])
  }
  7:return result
}
- id: "sec-string.fromcodepoint"
- code:
          1. Let _result_ be the empty String.
          1. For each element _next_ of _codePoints_, do
            1. Let _nextCP_ be ? ToNumber(_next_).
            1. If ! IsIntegralNumber(_nextCP_) is *false*, throw a *RangeError* exception.
            1. If ℝ(_nextCP_) < 0 or ℝ(_nextCP_) > 0x10FFFF, throw a *RangeError* exception.
            1. Set _result_ to the string-concatenation of _result_ and ! UTF16EncodeCodePoint(ℝ(_nextCP_)).
          1. Assert: If _codePoints_ is empty, then _result_ is the empty String.
          1. Return _result_.