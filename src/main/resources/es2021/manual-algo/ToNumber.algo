def ToNumber (argument) = {
  if (= (typeof argument) Undefined) return NaN
  else if (= (typeof argument) Null) return 0
  else if (= (typeof argument) Boolean) if argument return 1 else return 0
  else if (= (typeof argument) Number) return argument
  else if (= (typeof argument) String) return (convert argument str2num)
  else if (= (typeof argument) Symbol) throw TypeError
  else if (= (typeof argument) BigInt) throw TypeError
  else {
    app __x0__  = (ToPrimitive argument ~number~)
    let primValue = [? __x0__]
    app __x1__ = (ToNumber primValue)
    return [? __x1__]
  }
}
- id: "table-tonumber-conversions"
- code:
        <table>
          <tbody>
          <tr>
            <th>
              Argument Type
            </th>
            <th>
              Result
            </th>
          </tr>
          <tr>
            <td>
              Undefined
            </td>
            <td>
              Return *NaN*.
            </td>
          </tr>
          <tr>
            <td>
              Null
            </td>
            <td>
              Return *+0*<sub>ùîΩ</sub>.
            </td>
          </tr>
          <tr>
            <td>
              Boolean
            </td>
            <td>
              If _argument_ is *true*, return *1*<sub>ùîΩ</sub>. If _argument_ is *false*, return *+0*<sub>ùîΩ</sub>.
            </td>
          </tr>
          <tr>
            <td>
              Number
            </td>
            <td>
              Return _argument_ (no conversion).
            </td>
          </tr>
          <tr>
            <td>
              String
            </td>
            <td>
              See grammar and conversion algorithm below.
            </td>
          </tr>
          <tr>
            <td>
              Symbol
            </td>
            <td>
              Throw a *TypeError* exception.
            </td>
          </tr>
          <tr>
            <td>
              BigInt
            </td>
            <td>
              Throw a *TypeError* exception.
            </td>
          </tr>
          <tr>
            <td>
              Object
            </td>
            <td>
              <p>Apply the following steps:</p>
              <emu-alg>
                1. Let _primValue_ be ? ToPrimitive(_argument_, ~number~).
                1. Return ? ToNumber(_primValue_).
              </emu-alg>
            </td>
          </tr>
          </tbody>
        </table>
