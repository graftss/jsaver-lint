def CopyDataProperties(target, source, excludedItems) = 0:{
  0:assert (= (typeof target) Object)
  2:if (|| (= source undefined) (= source null)) 2:return target else 2:{}
  3:app __x0__ = (ToObject source)
  3:let from = [! __x0__]
  4:app __x1__ = (from.OwnPropertyKeys from)
  4:let keys = [? __x1__]
  5:let __x2__ = keys
  5:let __x3__ = 0i
  5:while (< __x3__ __x2__.length) 5:{
    5:let nextKey = __x2__[__x3__]
    5:__x3__ = (+ __x3__ 1i)
    6:let excluded = false
    7:let __x4__ = excludedItems
    7:let __x5__ = 0i
    7:while (< __x5__ __x4__.length) 7:{
      7:let e = __x4__[__x5__]
      7:__x5__ = (+ __x5__ 1i)
      8:app __x6__ = (SameValue e nextKey)
      8:if (= __x6__ true) 9:excluded = true else 8:{}
    }
    10:if (= excluded false) 10:{
      11:app __x7__ = (from.GetOwnProperty from nextKey)
      11:let desc = [? __x7__]
      12:if (&& (! (= desc undefined)) (= desc.Enumerable true)) 12:{
        13:app __x8__ = (Get from nextKey)
        13:let propValue = [? __x8__]
        14:app __x9__ = (CreateDataPropertyOrThrow target nextKey propValue)
        14:[! __x9__]
      } else 12:{}
    } else 10:{}
  }
  15:return target
}
- id: "sec-copydataproperties"
- code:
        1. Assert: Type(_target_) is Object.
        1. Assert: _excludedItems_ is a List of property keys.
        1. If _source_ is *undefined* or *null*, return _target_.
        1. Let _from_ be ! ToObject(_source_).
        1. Let _keys_ be ? _from_.[[OwnPropertyKeys]]().
        1. For each element _nextKey_ of _keys_, do
          1. Let _excluded_ be *false*.
          1. For each element _e_ of _excludedItems_, do
            1. If SameValue(_e_, _nextKey_) is *true*, then
              1. Set _excluded_ to *true*.
          1. If _excluded_ is *false*, then
            1. Let _desc_ be ? _from_.[[GetOwnProperty]](_nextKey_).
            1. If _desc_ is not *undefined* and _desc_.[[Enumerable]] is *true*, then
              1. Let _propValue_ be ? Get(_from_, _nextKey_).
              1. Perform ! CreateDataPropertyOrThrow(_target_, _nextKey_, _propValue_).
        1. Return _target_.