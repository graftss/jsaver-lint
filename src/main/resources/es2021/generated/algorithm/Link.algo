def Link() = 0:{
  0:assert (! (|| (= module.Status ~linking~) (= module.Status ~evaluating~)))
  1:let stack = (new [])
  2:app __x0__ = (InnerModuleLinking module stack 0i)
  2:let result = __x0__
  3:app __x1__ = (IsAbruptCompletion result)
  3:if __x1__ 3:{
    4:let __x2__ = stack
    4:let __x3__ = 0i
    4:while (< __x3__ __x2__.length) 4:{
      4:let m = __x2__[__x3__]
      4:__x3__ = (+ __x3__ 1i)
      5:assert (= m.Status ~linking~)
      6:m.Status = ~unlinked~
      7:m.Environment = undefined
      8:m.DFSIndex = undefined
      9:m.DFSAncestorIndex = undefined
    }
    10:assert (= module.Status ~unlinked~)
    11:return result
  } else 3:{}
  12:assert (|| (= module.Status ~linked~) (= module.Status ~evaluated~))
  13:assert (= stack.length 0i)
  14:return undefined
}
- id: "sec-moduledeclarationlinking"
- code:
            1. Assert: _module_.[[Status]] is not ~linking~ or ~evaluating~.
            1. Let _stack_ be a new empty List.
            1. Let _result_ be InnerModuleLinking(_module_, _stack_, 0).
            1. If _result_ is an abrupt completion, then
              1. For each Cyclic Module Record _m_ of _stack_, do
                1. Assert: _m_.[[Status]] is ~linking~.
                1. Set _m_.[[Status]] to ~unlinked~.
                1. Set _m_.[[Environment]] to *undefined*.
                1. Set _m_.[[DFSIndex]] to *undefined*.
                1. Set _m_.[[DFSAncestorIndex]] to *undefined*.
              1. Assert: _module_.[[Status]] is ~unlinked~.
              1. Return _result_.
            1. Assert: _module_.[[Status]] is ~linked~ or ~evaluated~.
            1. Assert: _stack_ is empty.
            1. Return *undefined*.