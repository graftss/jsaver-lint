def [BUILTIN] BigInt.prototype.toString(radix?) = 0:{
  0:app __x0__ = (thisBigIntValue this)
  0:let x = [? __x0__]
  1:if (= radix undefined) 1:let radixMV = 10i else 2:{
    2:app __x1__ = (ToIntegerOrInfinity radix)
    2:let radixMV = [? __x1__]
  }
  3:if (|| (< radixMV 2i) (< 36i radixMV)) 3:throw RangeError else 3:{}
  4:if (== radixMV 10i) 4:{
    4:app __x2__ = (ToString x)
    4:return [! __x2__]
  } else 4:{}
  5:??? "Return the String representation of this Number value using the radix specified by id:{radixMV} . Letters code:{a} - code:{z} are used for digits with values 10 through 35 . The precise algorithm is implementation - defined , however the algorithm should be a generalization of that specified in link:{sec-numeric-types-bigint-tostring} ."
}
- id: "sec-bigint.prototype.tostring"
- code:
          1. Let _x_ be ? thisBigIntValue(*this* value).
          1. If _radix_ is *undefined*, let _radixMV_ be 10.
          1. Else, let _radixMV_ be ? ToIntegerOrInfinity(_radix_).
          1. If _radixMV_ < 2 or _radixMV_ > 36, throw a *RangeError* exception.
          1. If _radixMV_ = 10, return ! ToString(_x_).
          1. Return the String representation of this Number value using the radix specified by _radixMV_. Letters `a`-`z` are used for digits with values 10 through 35. The precise algorithm is implementation-defined, however the algorithm should be a generalization of that specified in <emu-xref href="#sec-numeric-types-bigint-tostring"></emu-xref>.