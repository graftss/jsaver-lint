def [BUILTIN] AsyncFromSyncIteratorPrototype.next(value?) = 0:{
  0:let O = this
  1:assert (&& (= (typeof O) Object) (! (= O.SyncIteratorRecord absent)))
  2:app __x0__ = (NewPromiseCapability INTRINSICS["%Promise%"])
  2:let promiseCapability = [! __x0__]
  3:let syncIteratorRecord = O.SyncIteratorRecord
  4:if (! (= value absent)) 4:{
    5:app __x1__ = (IteratorNext syncIteratorRecord value)
    5:let result = __x1__
  } else 6:{
    7:app __x2__ = (IteratorNext syncIteratorRecord)
    7:let result = __x2__
  }
  8:if (is-completion result) 8:if (= result.Type ~normal~) 8:result = result.Value else 9:{
    9:app __x3__ = (Call promiseCapability.Reject undefined (new [result.Value]))
    9:if (&& (is-completion __x3__) (! (= __x3__.Type ~normal~))) 9:return __x3__ else 9:{}
    9:return promiseCapability.Promise
  } else 8:{}
  8:result
  9:app __x4__ = (AsyncFromSyncIteratorContinuation result promiseCapability)
  9:return [! __x4__]
}
- id: "sec-%asyncfromsynciteratorprototype%.next"
- code:
            1. Let _O_ be the *this* value.
            1. Assert: Type(_O_) is Object and _O_ has a [[SyncIteratorRecord]] internal slot.
            1. Let _promiseCapability_ be ! NewPromiseCapability(%Promise%).
            1. Let _syncIteratorRecord_ be _O_.[[SyncIteratorRecord]].
            1. If _value_ is present, then
              1. Let _result_ be IteratorNext(_syncIteratorRecord_, _value_).
            1. Else,
              1. Let _result_ be IteratorNext(_syncIteratorRecord_).
            1. IfAbruptRejectPromise(_result_, _promiseCapability_).
            1. Return ! AsyncFromSyncIteratorContinuation(_result_, _promiseCapability_).