def OrdinaryObjectCreate(proto, additionalInternalSlotsList?) = 0:{
  0:let internalSlotsList = (new ["Prototype", "Extensible"])
  1:if (! (= additionalInternalSlotsList absent)) 1:{
    1:let __x0__ = additionalInternalSlotsList
    1:let __x1__ = 0i
    1:while (< __x1__ __x0__.length) 1:{
      1:let __x2__ = __x0__[__x1__]
      1:__x1__ = (+ __x1__ 1i)
      1:append __x2__ -> internalSlotsList
    }
  } else 1:{}
  2:app __x3__ = (MakeBasicObject internalSlotsList)
  2:let O = [! __x3__]
  3:O.Prototype = proto
  4:return O
}
- id: "sec-ordinaryobjectcreate"
- code:
        1. Let _internalSlotsList_ be « [[Prototype]], [[Extensible]] ».
        1. If _additionalInternalSlotsList_ is present, append each of its elements to _internalSlotsList_.
        1. Let _O_ be ! MakeBasicObject(_internalSlotsList_).
        1. Set _O_.[[Prototype]] to _proto_.
        1. Return _O_.