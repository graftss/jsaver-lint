def [BUILTIN] DefaultConstructorFunctions(...args) = 0:{
  0:if (= NewTarget undefined) 0:throw TypeError else 0:{}
  1:let F = CONTEXT.Function
  2:if (= F.ConstructorKind ~derived~) 2:{
    4:app __x0__ = (F.GetPrototypeOf F)
    4:let func = [! __x0__]
    5:app __x1__ = (IsConstructor func)
    5:if (= __x1__ false) 5:throw TypeError else 5:{}
    6:app __x2__ = (Construct func args NewTarget)
    6:return [? __x2__]
  } else 7:{
    9:app __x3__ = (OrdinaryCreateFromConstructor NewTarget "%Object.prototype%")
    9:return [? __x3__]
  }
}
- id: "sec-default-constructor-functions"
- code:
          1. If NewTarget is *undefined*, throw a *TypeError* exception.
          1. Let _F_ be the active function object.
          1. If _F_.[[ConstructorKind]] is ~derived~, then
            1. NOTE: This branch behaves similarly to `constructor(...args) { super(...args); }`. The most notable distinction is that while the aforementioned ECMAScript source text observably calls the @@iterator method on `%Array.prototype%`, a Default Constructor Function does not.
            1. Let _func_ be ! _F_.[[GetPrototypeOf]]().
            1. If IsConstructor(_func_) is *false*, throw a *TypeError* exception.
            1. Return ? Construct(_func_, _args_, NewTarget).
          1. Else,
            1. NOTE: This branch behaves similarly to `constructor() {}`.
            1. Return ? OrdinaryCreateFromConstructor(NewTarget, *"%Object.prototype%"*).