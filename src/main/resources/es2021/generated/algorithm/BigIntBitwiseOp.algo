def BigIntBitwiseOp(op, x, y) = 0:{
  0:assert (|| (|| (= op "&") (= op "^")) (= op "|"))
  1:x = x
  2:y = y
  3:let result = 0i
  4:let shift = 0i
  5:??? "Repeat , until ( id:{x} = 0 or id:{x} = - 1 ) and ( id:{y} = 0 or id:{y} = - 1 ) , in:{} out:{}"
  16:if (= op "&") 16:{
    16:app __x0__ = (BinaryAnd (%% x 2i) (%% y 2i))
    16:let tmp = __x0__
  } else 16:if (= op "|") 17:{
    17:app __x1__ = (BinaryOr (%% x 2i) (%% y 2i))
    17:let tmp = __x1__
  } else 18:{
    19:assert (= op "^")
    20:app __x2__ = (BinaryXor (%% x 2i) (%% y 2i))
    20:let tmp = __x2__
  }
  21:if (! (== tmp 0i)) 22:result = (- result (** 2i shift)) else 21:{}
  24:return (convert result num2bigint)
}
- id: "sec-bigintbitwiseop"
- code:
            1. Assert: _op_ is `&`, `^`, or `|`.
            1. Set _x_ to ℝ(_x_).
            1. Set _y_ to ℝ(_y_).
            1. Let _result_ be 0.
            1. Let _shift_ be 0.
            1. Repeat, until (_x_ = 0 or _x_ = -1) and (_y_ = 0 or _y_ = -1),
              1. Let _xDigit_ be _x_ modulo 2.
              1. Let _yDigit_ be _y_ modulo 2.
              1. If _op_ is `&`, set _result_ to _result_ + 2<sup>_shift_</sup> × BinaryAnd(_xDigit_, _yDigit_).
              1. Else if _op_ is `|`, set _result_ to _result_ + 2<sup>_shift_</sup> × BinaryOr(_xDigit_, _yDigit_).
              1. Else,
                1. Assert: _op_ is `^`.
                1. Set _result_ to _result_ + 2<sup>_shift_</sup> × BinaryXor(_xDigit_, _yDigit_).
              1. Set _shift_ to _shift_ + 1.
              1. Set _x_ to (_x_ - _xDigit_) / 2.
              1. Set _y_ to (_y_ - _yDigit_) / 2.
            1. If _op_ is `&`, let _tmp_ be BinaryAnd(_x_ modulo 2, _y_ modulo 2).
            1. Else if _op_ is `|`, let _tmp_ be BinaryOr(_x_ modulo 2, _y_ modulo 2).
            1. Else,
              1. Assert: _op_ is `^`.
              1. Let _tmp_ be BinaryXor(_x_ modulo 2, _y_ modulo 2).
            1. If _tmp_ ≠ 0, then
              1. Set _result_ to _result_ - 2<sup>_shift_</sup>.
              1. NOTE: This extends the sign.
            1. Return the BigInt value for _result_.