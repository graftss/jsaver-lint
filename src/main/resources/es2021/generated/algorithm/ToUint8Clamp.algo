def ToUint8Clamp(argument) = 0:{
  0:app __x0__ = (ToNumber argument)
  0:let number = [? __x0__]
  1:if (= number NaN) 1:return 0i else 1:{}
  2:if (! (< 0i number)) 2:return 0i else 2:{}
  3:if (! (< number 255i)) 3:return 255i else 3:{}
  4:app __x1__ = (floor number)
  4:let f = __x1__
  5:if (< (+ f 0.5) number) 5:return (+ f 1i) else 5:{}
  6:if (< number (+ f 0.5)) 6:return f else 6:{}
  7:if (= (% f 2i) 1i) 7:return (+ f 1i) else 7:{}
  8:return f
}
- id: "sec-touint8clamp"
- code:
        1. Let _number_ be ? ToNumber(_argument_).
        1. If _number_ is *NaN*, return *+0*<sub>𝔽</sub>.
        1. If ℝ(_number_) ≤ 0, return *+0*<sub>𝔽</sub>.
        1. If ℝ(_number_) ≥ 255, return *255*<sub>𝔽</sub>.
        1. Let _f_ be floor(ℝ(_number_)).
        1. If _f_ + 0.5 < ℝ(_number_), return 𝔽(_f_ + 1).
        1. If ℝ(_number_) < _f_ + 0.5, return 𝔽(_f_).
        1. If _f_ is odd, return 𝔽(_f_ + 1).
        1. Return 𝔽(_f_).