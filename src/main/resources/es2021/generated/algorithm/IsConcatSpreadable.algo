def IsConcatSpreadable(O) = 0:{
  0:if (! (= (typeof O) Object)) 0:return false else 0:{}
  1:app __x0__ = (Get O SYMBOL_isConcatSpreadable)
  1:let spreadable = [? __x0__]
  2:if (! (= spreadable undefined)) 2:{
    2:app __x1__ = (ToBoolean spreadable)
    2:return [! __x1__]
  } else 2:{}
  3:app __x2__ = (IsArray O)
  3:return [? __x2__]
}
- id: "sec-isconcatspreadable"
- code:
            1. If Type(_O_) is not Object, return *false*.
            1. Let _spreadable_ be ? Get(_O_, @@isConcatSpreadable).
            1. If _spreadable_ is not *undefined*, return ! ToBoolean(_spreadable_).
            1. Return ? IsArray(_O_).