def [BUILTIN] Array.prototype.fill(value, start?, end?) = 0:{
  0:app __x0__ = (ToObject this)
  0:let O = [? __x0__]
  1:app __x1__ = (LengthOfArrayLike O)
  1:let len = [? __x1__]
  2:app __x2__ = (ToIntegerOrInfinity start)
  2:let relativeStart = [? __x2__]
  3:if (= relativeStart -Infinity) 3:let k = 0i else 3:if (< relativeStart 0i) 4:{
    4:app __x3__ = (max (+ len relativeStart) 0i)
    4:let k = __x3__
  } else 5:{
    5:app __x4__ = (min relativeStart len)
    5:let k = __x4__
  }
  6:if (= end undefined) 6:let relativeEnd = len else 7:{
    7:app __x5__ = (ToIntegerOrInfinity end)
    7:let relativeEnd = [? __x5__]
  }
  7:if (= relativeEnd -Infinity) 7:let final = 0i else 7:if (< relativeEnd 0i) 8:{
    8:app __x6__ = (max (+ len relativeEnd) 0i)
    8:let final = __x6__
  } else 9:{
    9:app __x7__ = (min relativeEnd len)
    9:let final = __x7__
  }
  10:while (< k final) 10:{
    11:app __x8__ = (ToString k)
    11:let Pk = [! __x8__]
    12:app __x9__ = (Set O Pk value true)
    12:[? __x9__]
    13:k = (+ k 1i)
  }
  14:return O
}
- id: "sec-array.prototype.fill"
- code:
          1. Let _O_ be ? ToObject(*this* value).
          1. Let _len_ be ? LengthOfArrayLike(_O_).
          1. Let _relativeStart_ be ? ToIntegerOrInfinity(_start_).
          1. If _relativeStart_ is -∞, let _k_ be 0.
          1. Else if _relativeStart_ < 0, let _k_ be max(_len_ + _relativeStart_, 0).
          1. Else, let _k_ be min(_relativeStart_, _len_).
          1. If _end_ is *undefined*, let _relativeEnd_ be _len_; else let _relativeEnd_ be ? ToIntegerOrInfinity(_end_).
          1. If _relativeEnd_ is -∞, let _final_ be 0.
          1. Else if _relativeEnd_ < 0, let _final_ be max(_len_ + _relativeEnd_, 0).
          1. Else, let _final_ be min(_relativeEnd_, _len_).
          1. Repeat, while _k_ < _final_,
            1. Let _Pk_ be ! ToString(𝔽(_k_)).
            1. Perform ? Set(_O_, _Pk_, _value_, *true*).
            1. Set _k_ to _k_ + 1.
          1. Return _O_.