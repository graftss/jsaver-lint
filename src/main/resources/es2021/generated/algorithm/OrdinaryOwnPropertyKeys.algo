def OrdinaryOwnPropertyKeys(O) = {
  let keys = (new [])
  let generalKeys = (map-keys O.SubMap)
  let intKeys = (map-keys O.SubMap [int-sorted])
  let i = 0i
  while (< i intKeys.length) {
    let P = intKeys[i]
    app c = (IsArrayIndex P)
    if c append P -> keys else {}
    i = (+ i 1i)
  }
  i = 0i
  while (< i generalKeys.length) {
    let P = generalKeys[i]
    app c = (IsArrayIndex P)
    if (&& (= (typeof P) String) (! c)) append P -> keys else {}
    i = (+ i 1i)
  }
  i = 0i
  while (< i generalKeys.length) {
    let P = generalKeys[i]
    if (= (typeof P) Symbol) append P -> keys else {}
    i = (+ i 1i)
  }
  return keys
}
- id: "sec-ordinaryownpropertykeys"
- code:
          1. Let _keys_ be a new empty List.
          1. For each own property key _P_ of _O_ such that _P_ is an array index, in ascending numeric index order, do
            1. Add _P_ as the last element of _keys_.
          1. For each own property key _P_ of _O_ such that Type(_P_) is String and _P_ is not an array index, in ascending chronological order of property creation, do
            1. Add _P_ as the last element of _keys_.
          1. For each own property key _P_ of _O_ such that Type(_P_) is Symbol, in ascending chronological order of property creation, do
            1. Add _P_ as the last element of _keys_.
          1. Return _keys_.