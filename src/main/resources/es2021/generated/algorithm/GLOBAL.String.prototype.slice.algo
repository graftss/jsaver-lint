def [BUILTIN] String.prototype.slice(start, end) = 0:{
  0:app __x0__ = (RequireObjectCoercible this)
  0:let O = [? __x0__]
  1:app __x1__ = (ToString O)
  1:let S = [? __x1__]
  2:let len = S.length
  3:app __x2__ = (ToIntegerOrInfinity start)
  3:let intStart = [? __x2__]
  4:if (= intStart -Infinity) 4:let from = 0i else 4:if (< intStart 0i) 5:{
    5:app __x3__ = (max (+ len intStart) 0i)
    5:let from = __x3__
  } else 6:{
    6:app __x4__ = (min intStart len)
    6:let from = __x4__
  }
  7:if (= end undefined) 7:let intEnd = len else 8:{
    8:app __x5__ = (ToIntegerOrInfinity end)
    8:let intEnd = [? __x5__]
  }
  8:if (= intEnd -Infinity) 8:let to = 0i else 8:if (< intEnd 0i) 9:{
    9:app __x6__ = (max (+ len intEnd) 0i)
    9:let to = __x6__
  } else 10:{
    10:app __x7__ = (min intEnd len)
    10:let to = __x7__
  }
  11:if (! (< from to)) 11:return "" else 11:{}
  12:let __x8__ = ""
  12:let __x9__ = from
  12:while (< __x9__ to) 12:{
    12:access __x10__ = (S __x9__)
    12:__x8__ = (+ __x8__ __x10__)
    12:__x9__ = (+ __x9__ 1i)
  }
  12:return __x8__
}
- id: "sec-string.prototype.slice"
- code:
          1. Let _O_ be ? RequireObjectCoercible(*this* value).
          1. Let _S_ be ? ToString(_O_).
          1. Let _len_ be the length of _S_.
          1. Let _intStart_ be ? ToIntegerOrInfinity(_start_).
          1. If _intStart_ is -∞, let _from_ be 0.
          1. Else if _intStart_ < 0, let _from_ be max(_len_ + _intStart_, 0).
          1. Else, let _from_ be min(_intStart_, _len_).
          1. If _end_ is *undefined*, let _intEnd_ be _len_; else let _intEnd_ be ? ToIntegerOrInfinity(_end_).
          1. If _intEnd_ is -∞, let _to_ be 0.
          1. Else if _intEnd_ < 0, let _to_ be max(_len_ + _intEnd_, 0).
          1. Else, let _to_ be min(_intEnd_, _len_).
          1. If _from_ ≥ _to_, return the empty String.
          1. Return the substring of _S_ from _from_ to _to_.