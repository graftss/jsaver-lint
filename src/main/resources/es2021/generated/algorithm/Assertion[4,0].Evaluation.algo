def [SYNTAX] Assertion[4,0].Evaluation[R]<(Disjunction),true>() = 0:{
  0:access __x0__ = (Disjunction "Evaluation" 1i)
  0:let m = __x0__
  1:??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{m} and performs the following steps when called : in:{} out:{}"
}
- id: "sec-assertion"
- code:
          1. Evaluate |Disjunction| with 1 as its _direction_ argument to obtain a Matcher _m_.
          1. Return a new Matcher with parameters (_x_, _c_) that captures _m_ and performs the following steps when called:
            1. Assert: _x_ is a State.
            1. Assert: _c_ is a Continuation.
            1. Let _d_ be a new Continuation with parameters (_y_) that captures nothing and performs the following steps when called:
              1. Assert: _y_ is a State.
              1. Return _y_.
            1. Let _r_ be _m_(_x_, _d_).
            1. If _r_ is ~failure~, return ~failure~.
            1. Let _y_ be _r_'s State.
            1. Let _cap_ be _y_'s _captures_ List.
            1. Let _xe_ be _x_'s _endIndex_.
            1. Let _z_ be the State (_xe_, _cap_).
            1. Return _c_(_z_).