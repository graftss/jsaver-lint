def [METHOD] ModuleNamespaceExoticObject.DefineOwnProperty(O)(P, Desc) = 0:{
  0:if (= (typeof P) Symbol) 0:{
    0:app __x0__ = (OrdinaryDefineOwnProperty O P Desc)
    0:return __x0__
  } else 0:{}
  1:app __x1__ = (O.GetOwnProperty O P)
  1:let current = [? __x1__]
  2:if (= current undefined) 2:return false else 2:{}
  3:if (= Desc.Configurable true) 3:return false else 3:{}
  4:if (= Desc.Enumerable false) 4:return false else 4:{}
  5:app __x2__ = (IsAccessorDescriptor Desc)
  5:if (= [! __x2__] true) 5:return false else 5:{}
  6:if (= Desc.Writable false) 6:return false else 6:{}
  7:if (! (= Desc.Value absent)) 7:{
    7:app __x3__ = (SameValue Desc.Value current.Value)
    7:return __x3__
  } else 7:{}
  8:return true
}
- id: "sec-module-namespace-exotic-objects-defineownproperty-p-desc"
- code:
          1. If Type(_P_) is Symbol, return OrdinaryDefineOwnProperty(_O_, _P_, _Desc_).
          1. Let _current_ be ? _O_.[[GetOwnProperty]](_P_).
          1. If _current_ is *undefined*, return *false*.
          1. If _Desc_.[[Configurable]] is present and has value *true*, return *false*.
          1. If _Desc_.[[Enumerable]] is present and has value *false*, return *false*.
          1. If ! IsAccessorDescriptor(_Desc_) is *true*, return *false*.
          1. If _Desc_.[[Writable]] is present and has value *false*, return *false*.
          1. If _Desc_.[[Value]] is present, return SameValue(_Desc_.[[Value]], _current_.[[Value]]).
          1. Return *true*.