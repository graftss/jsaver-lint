def [BUILTIN] TypedArray.prototype.set(source, offset?) = 0:{
  0:let target = this
  1:app __x0__ = (RequireInternalSlot target "TypedArrayName")
  1:[? __x0__]
  2:assert (! (= target.ViewedArrayBuffer absent))
  3:app __x1__ = (ToIntegerOrInfinity offset)
  3:let targetOffset = [? __x1__]
  4:if (< targetOffset 0i) 4:throw RangeError else 4:{}
  5:??? "If id:{source} is an Object that has a [ [ TypedArrayName ] ] internal slot , then in:{} out:{}"
  7:??? "Else , in:{} out:{}"
  9:return undefined
}
- id: "sec-%typedarray%.prototype.set"
- code:
          1. Let _target_ be the *this* value.
          1. Perform ? RequireInternalSlot(_target_, [[TypedArrayName]]).
          1. Assert: _target_ has a [[ViewedArrayBuffer]] internal slot.
          1. Let _targetOffset_ be ? ToIntegerOrInfinity(_offset_).
          1. If _targetOffset_ < 0, throw a *RangeError* exception.
          1. If _source_ is an Object that has a [[TypedArrayName]] internal slot, then
            1. Perform ? SetTypedArrayFromTypedArray(_target_, _targetOffset_, _source_).
          1. Else,
            1. Perform ? SetTypedArrayFromArrayLike(_target_, _targetOffset_, _source_).
          1. Return *undefined*.