def [SYNTAX] AssignmentExpression[8,0].Evaluation[R]<(LeftHandSideExpression, AssignmentExpression),false>() = 0:{
  0:access __x0__ = (LeftHandSideExpression "Evaluation")
  0:let lref = __x0__
  1:app __x1__ = (GetValue lref)
  1:let lval = [? __x1__]
  2:if (! (|| (= lval undefined) (= lval null))) 2:return lval else 2:{}
  3:let __x2__ = true
  3:app __x3__ = (IsAnonymousFunctionDefinition AssignmentExpression)
  3:__x2__ = (= __x3__ true)
  3:if __x2__ 3:{
    3:access __x4__ = (LeftHandSideExpression "IsIdentifierRef")
    3:__x2__ = (= __x4__ true)
  } else 3:{}
  3:if __x2__ 3:{
    4:access __x5__ = (AssignmentExpression "NamedEvaluation" lref.ReferencedName)
    4:let rval = __x5__
  } else 5:{
    6:access __x6__ = (AssignmentExpression "Evaluation")
    6:let rref = __x6__
    7:app __x7__ = (GetValue rref)
    7:let rval = [? __x7__]
  }
  8:app __x8__ = (PutValue lref rval)
  8:[? __x8__]
  9:return rval
}
- id: "sec-assignment-operators-runtime-semantics-evaluation"
- code:
        1. Let _lref_ be the result of evaluating |LeftHandSideExpression|.
        1. [id="step-assignmentexpression-evaluation-lgcl-nullish-getvalue"] Let _lval_ be ? GetValue(_lref_).
        1. If _lval_ is neither *undefined* nor *null*, return _lval_.
        1. If IsAnonymousFunctionDefinition(|AssignmentExpression|) is *true* and IsIdentifierRef of |LeftHandSideExpression| is *true*, then
          1. Let _rval_ be NamedEvaluation of |AssignmentExpression| with argument _lref_.[[ReferencedName]].
        1. Else,
          1. Let _rref_ be the result of evaluating |AssignmentExpression|.
          1. Let _rval_ be ? GetValue(_rref_).
        1. [id="step-assignmentexpression-evaluation-lgcl-nullish-putvalue"] Perform ? PutValue(_lref_, _rval_).
        1. Return _rval_.