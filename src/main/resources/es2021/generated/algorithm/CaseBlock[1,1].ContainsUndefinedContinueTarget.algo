def [SYNTAX] CaseBlock[1,1].ContainsUndefinedContinueTarget[S]<(CaseClauses0, DefaultClause, CaseClauses1),true>(iterationSet, labelSet) = 0:{
  0:if (! (= CaseClauses0 absent)) 0:{
    1:access __x0__ = (CaseClauses0 "ContainsUndefinedContinueTarget" iterationSet (new []))
    1:let hasUndefinedLabels = __x0__
    2:if (= hasUndefinedLabels true) 2:return true else 2:{}
  } else 0:{}
  3:access __x1__ = (DefaultClause "ContainsUndefinedContinueTarget" iterationSet (new []))
  3:let hasUndefinedLabels = __x1__
  4:if (= hasUndefinedLabels true) 4:return true else 4:{}
  5:if (= CaseClauses1 absent) 5:return false else 5:{}
  6:access __x2__ = (CaseClauses1 "ContainsUndefinedContinueTarget" iterationSet (new []))
  6:return __x2__
}
- id: "sec-static-semantics-containsundefinedcontinuetarget"
- code:
        1. If the first |CaseClauses| is present, then
          1. Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of the first |CaseClauses| with arguments _iterationSet_ and « ».
          1. If _hasUndefinedLabels_ is *true*, return *true*.
        1. Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of |DefaultClause| with arguments _iterationSet_ and « ».
        1. If _hasUndefinedLabels_ is *true*, return *true*.
        1. If the second |CaseClauses| is not present, return *false*.
        1. Return ContainsUndefinedContinueTarget of the second |CaseClauses| with arguments _iterationSet_ and « ».