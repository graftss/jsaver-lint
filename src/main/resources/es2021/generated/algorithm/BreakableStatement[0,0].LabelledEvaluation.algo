def [SYNTAX] BreakableStatement[0,0].LabelledEvaluation[R]<(IterationStatement),true>(labelSet) = 0:{
  0:access __x0__ = (IterationStatement "LoopEvaluation" labelSet)
  0:let stmtResult = __x0__
  1:if (= stmtResult.Type ~break~) 2:if (= stmtResult.Target ~empty~) 3:if (= stmtResult.Value ~empty~) 3:{
    3:app __x1__ = (NormalCompletion undefined)
    3:stmtResult = __x1__
  } else 4:{
    4:app __x2__ = (NormalCompletion stmtResult.Value)
    4:stmtResult = __x2__
  } else 2:{} else 1:{}
  5:return stmtResult
}
- id: "sec-runtime-semantics-labelledevaluation"
- code:
        1. Let _stmtResult_ be LoopEvaluation of |IterationStatement| with argument _labelSet_.
        1. If _stmtResult_.[[Type]] is ~break~, then
          1. If _stmtResult_.[[Target]] is ~empty~, then
            1. If _stmtResult_.[[Value]] is ~empty~, set _stmtResult_ to NormalCompletion(*undefined*).
            1. Else, set _stmtResult_ to NormalCompletion(_stmtResult_.[[Value]]).
        1. Return Completion(_stmtResult_).