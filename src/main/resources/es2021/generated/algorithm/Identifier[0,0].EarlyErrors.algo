def [SYNTAX] Identifier[0,0].EarlyErrors[S]<(IdentifierName),true>() = 0:{
  0:??? "It is a Syntax Error if this phrase is contained in strict mode code and the StringValue of nt:{IdentifierName} is : value:{\"implements\"} , value:{\"interface\"} , value:{\"let\"} , value:{\"package\"} , value:{\"private\"} , value:{\"protected\"} , value:{\"public\"} , value:{\"static\"} , or value:{\"yield\"} ."
  1:let __x0__ = true
  1:let __x1__ = false
  1:if (= absent (parse-syntax this "Module")) 1:__x1__ = true else 1:{}
  1:__x0__ = __x1__
  1:if __x0__ 1:{
    1:access __x2__ = (IdentifierName "StringValue")
    1:__x0__ = (= __x2__ "await")
  } else 1:{}
  1:if __x0__ 1:throw SyntaxError else 1:{}
  2:??? "It is a Syntax Error if StringValue of nt:{IdentifierName} is the same String value as the StringValue of any nt:{ReservedWord} except for code:{yield} or code:{await} ."
}
- id: "sec-identifiers-static-semantics-early-errors"
- code:
        <li>
          It is a Syntax Error if this phrase is contained in strict mode code and the StringValue of |IdentifierName| is: *"implements"*, *"interface"*, *"let"*, *"package"*, *"private"*, *"protected"*, *"public"*, *"static"*, or *"yield"*.
        </li>
        <li>
          It is a Syntax Error if the goal symbol of the syntactic grammar is |Module| and the StringValue of |IdentifierName| is *"await"*.
        </li>
        <li>
          It is a Syntax Error if StringValue of |IdentifierName| is the same String value as the StringValue of any |ReservedWord| except for `yield` or `await`.
        </li>