def CreateListIteratorRecord(list) = 0:{
  0:clo __x0__ = ()[list] => 1:{
    1:let __x1__ = list
    1:let __x2__ = 0i
    1:while (< __x2__ __x1__.length) 1:{
      1:let E = __x1__[__x2__]
      1:__x2__ = (+ __x2__ 1i)
      2:app __x3__ = (Yield E)
      2:[? __x3__]
    }
    3:return undefined
  }
  0:let closure = __x0__
  4:app __x4__ = (CreateIteratorFromClosure closure ~empty~ INTRINSICS["%IteratorPrototype%"])
  4:let iterator = [! __x4__]
  5:return (new Record("Iterator" -> iterator, "NextMethod" -> INTRINSICS["%GeneratorFunction.prototype.prototype.next%"], "Done" -> false))
}
- id: "sec-createlistiteratorRecord"
- code:
        1. Let _closure_ be a new Abstract Closure with no parameters that captures _list_ and performs the following steps when called:
          1. For each element _E_ of _list_, do
            1. Perform ? Yield(_E_).
          1. Return *undefined*.
        1. Let _iterator_ be ! CreateIteratorFromClosure(_closure_, ~empty~, %IteratorPrototype%).
        1. Return Record { [[Iterator]]: _iterator_, [[NextMethod]]: %GeneratorFunction.prototype.prototype.next%, [[Done]]: *false* }.