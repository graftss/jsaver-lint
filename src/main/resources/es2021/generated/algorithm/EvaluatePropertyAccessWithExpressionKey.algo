def EvaluatePropertyAccessWithExpressionKey(baseValue, expression, strict) = 0:{
  0:access __x0__ = (expression "Evaluation")
  0:let propertyNameReference = __x0__
  1:app __x1__ = (GetValue propertyNameReference)
  1:let propertyNameValue = [? __x1__]
  2:app __x2__ = (RequireObjectCoercible baseValue)
  2:let bv = [? __x2__]
  3:app __x3__ = (ToPropertyKey propertyNameValue)
  3:let propertyKey = [? __x3__]
  4:return (new ReferenceRecord("Base" -> bv, "ReferencedName" -> propertyKey, "Strict" -> strict, "ThisValue" -> ~empty~))
}
- id: "sec-evaluate-property-access-with-expression-key"
- code:
        1. Let _propertyNameReference_ be the result of evaluating _expression_.
        1. Let _propertyNameValue_ be ? GetValue(_propertyNameReference_).
        1. Let _bv_ be ? RequireObjectCoercible(_baseValue_).
        1. Let _propertyKey_ be ? ToPropertyKey(_propertyNameValue_).
        1. Return the Reference Record { [[Base]]: _bv_, [[ReferencedName]]: _propertyKey_, [[Strict]]: _strict_, [[ThisValue]]: ~empty~ }.