def [BUILTIN] Function.prototype.toString() = {
  let func = this
  if (&& (= (typeof func) Object) (= (typeof func.SourceText) String)) {
    return func.SourceText
  } else {}
  if (is-instance-of func BuiltinFunctionObject) {
    return (+ (+ "function " func.InitialName) "() { [native code] }")
  } else {}
  app callable = (IsCallable func)
  if (&& (= (typeof func) Object) callable) {
    return "function () { [native code] }"
  } else {}
  throw TypeError
}
- id: "sec-function.prototype.tostring"
- code:
          1. Let _func_ be the *this* value.
          1. If Type(_func_) is Object and _func_ has a [[SourceText]] internal slot and _func_.[[SourceText]] is a sequence of Unicode code points and ! HostHasSourceTextAvailable(_func_) is *true*, then
            1. Return ! CodePointsToString(_func_.[[SourceText]]).
          1. If _func_ is a <emu-xref href="#sec-built-in-function-objects">built-in function object</emu-xref>, return an implementation-defined String source code representation of _func_. The representation must have the syntax of a |NativeFunction|. Additionally, if _func_ has an [[InitialName]] internal slot and _func_.[[InitialName]] is a String, the portion of the returned String that would be matched by |NativeFunctionAccessor?| |PropertyName| must be the value of _func_.[[InitialName]].
          1. If Type(_func_) is Object and IsCallable(_func_) is *true*, return an implementation-defined String source code representation of _func_. The representation must have the syntax of a |NativeFunction|.
          1. Throw a *TypeError* exception.