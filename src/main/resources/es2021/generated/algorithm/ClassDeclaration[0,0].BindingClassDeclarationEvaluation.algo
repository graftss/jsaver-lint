def [SYNTAX] ClassDeclaration[0,0].BindingClassDeclarationEvaluation[R]<(BindingIdentifier, ClassTail),true>() = 0:{
  0:access __x0__ = (BindingIdentifier "StringValue")
  0:let className = __x0__
  1:access __x1__ = (ClassTail "ClassDefinitionEvaluation" className className)
  1:let value = [? __x1__]
  2:value.SourceText = (get-syntax ClassDeclaration)
  3:let env = CONTEXT.LexicalEnvironment
  4:app __x2__ = (InitializeBoundName className value env)
  4:[? __x2__]
  5:return value
}
- id: "sec-runtime-semantics-bindingclassdeclarationevaluation"
- code:
        1. Let _className_ be StringValue of |BindingIdentifier|.
        1. Let _value_ be ? ClassDefinitionEvaluation of |ClassTail| with arguments _className_ and _className_.
        1. Set _value_.[[SourceText]] to the source text matched by |ClassDeclaration|.
        1. Let _env_ be the running execution context's LexicalEnvironment.
        1. Perform ? InitializeBoundName(_className_, _value_, _env_).
        1. Return _value_.