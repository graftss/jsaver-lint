def [METHOD] GlobalEnvironmentRecord.CreateGlobalVarBinding(envRec)(N, D) = 0:{
  0:let ObjRec = envRec.ObjectRecord
  1:let globalObject = ObjRec.BindingObject
  2:app __x0__ = (HasOwnProperty globalObject N)
  2:let hasProperty = [? __x0__]
  3:app __x1__ = (IsExtensible globalObject)
  3:let extensible = [? __x1__]
  4:if (&& (= hasProperty false) (= extensible true)) 4:{
    5:app __x2__ = (ObjRec.CreateMutableBinding ObjRec N D)
    5:[? __x2__]
    6:app __x3__ = (ObjRec.InitializeBinding ObjRec N undefined)
    6:[? __x3__]
  } else 4:{}
  7:let varDeclaredNames = envRec.VarNames
  8:if (! (contains varDeclaredNames N)) 9:append N -> varDeclaredNames else 8:{}
  10:return ~empty~
}
- id: "sec-createglobalvarbinding"
- code:
            1. Let _ObjRec_ be _envRec_.[[ObjectRecord]].
            1. Let _globalObject_ be the binding object for _ObjRec_.
            1. Let _hasProperty_ be ? HasOwnProperty(_globalObject_, _N_).
            1. Let _extensible_ be ? IsExtensible(_globalObject_).
            1. If _hasProperty_ is *false* and _extensible_ is *true*, then
              1. Perform ? _ObjRec_.CreateMutableBinding(_N_, _D_).
              1. Perform ? _ObjRec_.InitializeBinding(_N_, *undefined*).
            1. Let _varDeclaredNames_ be _envRec_.[[VarNames]].
            1. If _varDeclaredNames_ does not contain _N_, then
              1. Append _N_ to _varDeclaredNames_.
            1. Return NormalCompletion(~empty~).