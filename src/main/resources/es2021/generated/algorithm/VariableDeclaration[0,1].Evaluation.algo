def [SYNTAX] VariableDeclaration[0,1].Evaluation[R]<(BindingIdentifier, Initializer),true>() = 0:{
  0:access __x0__ = (BindingIdentifier "StringValue")
  0:let bindingId = __x0__
  1:app __x1__ = (ResolveBinding bindingId)
  1:let lhs = [? __x1__]
  2:app __x2__ = (IsAnonymousFunctionDefinition Initializer)
  2:if (= __x2__ true) 2:{
    3:access __x3__ = (Initializer "NamedEvaluation" bindingId)
    3:let value = __x3__
  } else 4:{
    5:access __x4__ = (Initializer "Evaluation")
    5:let rhs = __x4__
    6:app __x5__ = (GetValue rhs)
    6:let value = [? __x5__]
  }
  7:app __x6__ = (PutValue lhs value)
  7:return [? __x6__]
}
- id: "sec-variable-statement-runtime-semantics-evaluation"
- code:
          1. Let _bindingId_ be StringValue of |BindingIdentifier|.
          1. Let _lhs_ be ? ResolveBinding(_bindingId_).
          1. If IsAnonymousFunctionDefinition(|Initializer|) is *true*, then
            1. Let _value_ be NamedEvaluation of |Initializer| with argument _bindingId_.
          1. Else,
            1. Let _rhs_ be the result of evaluating |Initializer|.
            1. Let _value_ be ? GetValue(_rhs_).
          1. [id="step-vardecllist-evaluation-putvalue"] Return ? PutValue(_lhs_, _value_).