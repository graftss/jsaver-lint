def [SYNTAX] UnaryExpression[7,0].Evaluation[R]<(UnaryExpression),false>() = 0:{
  0:access __x0__ = (UnaryExpression "Evaluation")
  0:let expr = __x0__
  1:app __x1__ = (GetValue expr)
  1:app __x2__ = (ToBoolean [? __x1__])
  1:let oldValue = [! __x2__]
  2:if (= oldValue true) 2:return false else 2:{}
  3:return true
}
- id: "sec-logical-not-operator-runtime-semantics-evaluation"
- code:
          1. Let _expr_ be the result of evaluating |UnaryExpression|.
          1. Let _oldValue_ be ! ToBoolean(? GetValue(_expr_)).
          1. If _oldValue_ is *true*, return *false*.
          1. Return *true*.