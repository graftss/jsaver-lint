def [SYNTAX] CaseBlock[1,0].VarScopedDeclarations[S]<(CaseClauses0, DefaultClause, CaseClauses1),true>() = 0:{
  0:if (! (= CaseClauses0 absent)) 0:{
    0:access __x0__ = (CaseClauses0 "VarScopedDeclarations")
    0:let declarations = __x0__
  } else 0:let declarations = (new [])
  2:access __x1__ = (DefaultClause "VarScopedDeclarations")
  2:let __x2__ = __x1__
  2:let __x3__ = 0i
  2:while (< __x3__ __x2__.length) 2:{
    2:let __x4__ = __x2__[__x3__]
    2:__x3__ = (+ __x3__ 1i)
    2:append __x4__ -> declarations
  }
  3:if (= CaseClauses1 absent) 3:return declarations else 3:{}
  4:access decls = (CaseClauses1 "VarScopedDeclarations")
  4:let __i__ = 0i
  4:while (< __i__ decls.length) 4:{
    4:append decls[__i__] -> declarations
    4:__i__ = (+ __i__ 1i)
  }
  4:return decls
}
- id: "sec-static-semantics-varscopeddeclarations"
- code:
        1. If the first |CaseClauses| is present, let _declarations_ be the VarScopedDeclarations of the first |CaseClauses|.
        1. Else, let _declarations_ be a new empty List.
        1. Append to _declarations_ the elements of the VarScopedDeclarations of |DefaultClause|.
        1. If the second |CaseClauses| is not present, return _declarations_.
        1. Return the result of appending to _declarations_ the elements of the VarScopedDeclarations of the second |CaseClauses|.