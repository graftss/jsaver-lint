def [SYNTAX] Alternative[1,0].Evaluation[R]<(Alternative, Term),false>(direction) = 0:{
  0:access __x0__ = (Alternative "Evaluation" direction)
  0:let m1 = __x0__
  1:access __x1__ = (Term "Evaluation" direction)
  1:let m2 = __x1__
  2:if (== direction 1i) 3:??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{m1} and id:{m2} and performs the following steps when called : in:{} out:{}" else 4:{
    11:assert (= direction -1i)
    12:??? "Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{m1} and id:{m2} and performs the following steps when called : in:{} out:{}"
  }
}
- id: "sec-alternative"
- code:
          1. Evaluate |Alternative| with argument _direction_ to obtain a Matcher _m1_.
          1. Evaluate |Term| with argument _direction_ to obtain a Matcher _m2_.
          1. If _direction_ = 1, then
            1. Return a new Matcher with parameters (_x_, _c_) that captures _m1_ and _m2_ and performs the following steps when called:
              1. Assert: _x_ is a State.
              1. Assert: _c_ is a Continuation.
              1. Let _d_ be a new Continuation with parameters (_y_) that captures _c_ and _m2_ and performs the following steps when called:
                1. Assert: _y_ is a State.
                1. Return _m2_(_y_, _c_).
              1. Return _m1_(_x_, _d_).
          1. Else,
            1. Assert: _direction_ is -1.
            1. Return a new Matcher with parameters (_x_, _c_) that captures _m1_ and _m2_ and performs the following steps when called:
              1. Assert: _x_ is a State.
              1. Assert: _c_ is a Continuation.
              1. Let _d_ be a new Continuation with parameters (_y_) that captures _c_ and _m1_ and performs the following steps when called:
                1. Assert: _y_ is a State.
                1. Return _m1_(_y_, _c_).
              1. Return _m2_(_x_, _d_).