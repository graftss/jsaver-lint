def [BUILTIN] TypedArray.from(source, mapfn?, thisArg?) = 0:{
  0:let C = this
  1:app __x0__ = (IsConstructor C)
  1:if (= __x0__ false) 1:throw TypeError else 1:{}
  2:if (= mapfn undefined) 2:let mapping = false else 3:{
    4:app __x1__ = (IsCallable mapfn)
    4:if (= __x1__ false) 4:throw TypeError else 4:{}
    5:let mapping = true
  }
  6:app __x2__ = (GetMethod source SYMBOL_iterator)
  6:let usingIterator = [? __x2__]
  7:if (! (= usingIterator undefined)) 7:{
    8:app __x3__ = (IterableToList source usingIterator)
    8:let values = [? __x3__]
    9:let len = values.length
    10:app __x4__ = (TypedArrayCreate C (new [len]))
    10:let targetObj = [? __x4__]
    11:let k = 0i
    12:while (< k len) 12:{
      13:app __x5__ = (ToString k)
      13:let Pk = [! __x5__]
      14:let kValue = (pop values 0i)
      15:if (= mapping true) 15:{
        16:app __x6__ = (Call mapfn thisArg (new [kValue, k]))
        16:let mappedValue = [? __x6__]
      } else 15:let mappedValue = kValue
      18:app __x7__ = (Set targetObj Pk mappedValue true)
      18:[? __x7__]
      19:k = (+ k 1i)
    }
    21:return targetObj
  } else 7:{}
  23:app __x8__ = (ToObject source)
  23:let arrayLike = [! __x8__]
  24:app __x9__ = (LengthOfArrayLike arrayLike)
  24:let len = [? __x9__]
  25:app __x10__ = (TypedArrayCreate C (new [len]))
  25:let targetObj = [? __x10__]
  26:let k = 0i
  27:while (< k len) 27:{
    28:app __x11__ = (ToString k)
    28:let Pk = [! __x11__]
    29:app __x12__ = (Get arrayLike Pk)
    29:let kValue = [? __x12__]
    30:if (= mapping true) 30:{
      31:app __x13__ = (Call mapfn thisArg (new [kValue, k]))
      31:let mappedValue = [? __x13__]
    } else 30:let mappedValue = kValue
    33:app __x14__ = (Set targetObj Pk mappedValue true)
    33:[? __x14__]
    34:k = (+ k 1i)
  }
  35:return targetObj
}
- id: "sec-%typedarray%.from"
- code:
          1. Let _C_ be the *this* value.
          1. If IsConstructor(_C_) is *false*, throw a *TypeError* exception.
          1. If _mapfn_ is *undefined*, let _mapping_ be *false*.
          1. Else,
            1. If IsCallable(_mapfn_) is *false*, throw a *TypeError* exception.
            1. Let _mapping_ be *true*.
          1. Let _usingIterator_ be ? GetMethod(_source_, @@iterator).
          1. If _usingIterator_ is not *undefined*, then
            1. Let _values_ be ? IterableToList(_source_, _usingIterator_).
            1. Let _len_ be the number of elements in _values_.
            1. Let _targetObj_ be ? TypedArrayCreate(_C_, « 𝔽(_len_) »).
            1. Let _k_ be 0.
            1. Repeat, while _k_ < _len_,
              1. Let _Pk_ be ! ToString(𝔽(_k_)).
              1. Let _kValue_ be the first element of _values_ and remove that element from _values_.
              1. If _mapping_ is *true*, then
                1. Let _mappedValue_ be ? Call(_mapfn_, _thisArg_, « _kValue_, 𝔽(_k_) »).
              1. Else, let _mappedValue_ be _kValue_.
              1. Perform ? Set(_targetObj_, _Pk_, _mappedValue_, *true*).
              1. Set _k_ to _k_ + 1.
            1. Assert: _values_ is now an empty List.
            1. Return _targetObj_.
          1. NOTE: _source_ is not an Iterable so assume it is already an array-like object.
          1. Let _arrayLike_ be ! ToObject(_source_).
          1. Let _len_ be ? LengthOfArrayLike(_arrayLike_).
          1. Let _targetObj_ be ? TypedArrayCreate(_C_, « 𝔽(_len_) »).
          1. Let _k_ be 0.
          1. Repeat, while _k_ < _len_,
            1. Let _Pk_ be ! ToString(𝔽(_k_)).
            1. Let _kValue_ be ? Get(_arrayLike_, _Pk_).
            1. If _mapping_ is *true*, then
              1. Let _mappedValue_ be ? Call(_mapfn_, _thisArg_, « _kValue_, 𝔽(_k_) »).
            1. Else, let _mappedValue_ be _kValue_.
            1. Perform ? Set(_targetObj_, _Pk_, _mappedValue_, *true*).
            1. Set _k_ to _k_ + 1.
          1. Return _targetObj_.