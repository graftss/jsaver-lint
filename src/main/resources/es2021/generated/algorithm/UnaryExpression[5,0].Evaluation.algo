def [SYNTAX] UnaryExpression[5,0].Evaluation[R]<(UnaryExpression),false>() = 0:{
  0:access __x0__ = (UnaryExpression "Evaluation")
  0:let expr = __x0__
  1:app __x1__ = (GetValue expr)
  1:app __x2__ = (ToNumeric [? __x1__])
  1:let oldValue = [? __x2__]
  2:let T = (typeof oldValue)
  3:app __x3__ = (PRIMITIVE[T].unaryMinus oldValue)
  3:return [! __x3__]
}
- id: "sec-unary-minus-operator-runtime-semantics-evaluation"
- code:
          1. Let _expr_ be the result of evaluating |UnaryExpression|.
          1. Let _oldValue_ be ? ToNumeric(? GetValue(_expr_)).
          1. Let _T_ be Type(_oldValue_).
          1. Return ! _T_::unaryMinus(_oldValue_).