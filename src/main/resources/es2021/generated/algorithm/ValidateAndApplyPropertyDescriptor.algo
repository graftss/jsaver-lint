def ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current) = 1:{
  1:if (= current undefined) 1:{
    2:if (= extensible false) 2:return false else 2:{}
    3:assert (= extensible true)
    4:let __x0__ = true
    4:app __x1__ = (IsGenericDescriptor Desc)
    4:__x0__ = (= __x1__ true)
    4:if __x0__ 35:{} else 16:{
      16:app __x2__ = (IsDataDescriptor Desc)
      16:__x0__ = (= __x2__ true)
    }
    4:if __x0__ 5:if (! (= O undefined)) 5:{
      5:let dp = (new DataProperty())
      5:if (! (= absent Desc.Value)) 5:dp.Value = Desc.Value else 5:dp.Value = undefined
      5:if (! (= absent Desc.Writable)) 5:dp.Writable = Desc.Writable else 5:dp.Writable = false
      5:if (! (= absent Desc.Enumerable)) 5:dp.Enumerable = Desc.Enumerable else 5:dp.Enumerable = false
      5:if (! (= absent Desc.Configurable)) 5:dp.Configurable = Desc.Configurable else 5:dp.Configurable = false
      5:O.SubMap[P] = dp
    } else 5:{} else 6:{
      7:app __x3__ = (IsAccessorDescriptor Desc)
      7:assert (= [! __x3__] true)
      8:if (! (= O undefined)) 8:{
        8:let ap = (new AccessorProperty())
        8:if (= Desc.Get absent) 8:ap.Get = undefined else 8:ap.Get = Desc.Get
        8:if (= Desc.Set absent) 8:ap.Set = undefined else 8:ap.Set = Desc.Set
        8:if (= Desc.Enumerable absent) 8:ap.Enumerable = false else 8:ap.Enumerable = Desc.Enumerable
        8:if (= Desc.Configurable absent) 8:ap.Configurable = false else 8:ap.Configurable = Desc.Configurable
        8:O.SubMap[P] = ap
      } else 8:{}
    }
    9:return true
  } else 1:{}
  10:if (&& (= absent Desc.Value) (&& (= absent Desc.Writable) (&& (= absent Desc.Get) (&& (= absent Desc.Set) (&& (= absent Desc.Enumerable) (= absent Desc.Configurable)))))) 10:return true else 10:{}
  11:if (= current.Configurable false) 11:{
    12:if (= Desc.Configurable true) 12:return false else 12:{}
    13:let __x4__ = true
    13:__x4__ = (! (= Desc.Enumerable absent))
    13:if __x4__ 13:{
      13:app __x5__ = (SameValue Desc.Enumerable current.Enumerable)
      13:__x4__ = (= [! __x5__] false)
    } else 13:{}
    13:if __x4__ 13:return false else 13:{}
  } else 11:{}
  14:app __x6__ = (IsGenericDescriptor Desc)
  14:if (= [! __x6__] true) 14:{} else 17:{
    16:app __x7__ = (IsDataDescriptor current)
    16:app __x8__ = (IsDataDescriptor Desc)
    16:app __x9__ = (SameValue [! __x7__] [! __x8__])
    16:if (= [! __x9__] false) 16:{
      17:if (= current.Configurable false) 17:return false else 17:{}
      18:app __x10__ = (IsDataDescriptor current)
      18:if (= __x10__ true) 19:if (! (= O undefined)) 19:{
        19:let dp = O.SubMap[P]
        19:O.SubMap[P] = (new AccessorProperty("Get" -> undefined, "Set" -> undefined, "Configurable" -> dp.Configurable, "Enumerable" -> dp.Enumerable))
      } else 19:{} else 18:if (! (= O undefined)) 21:{
        21:let ap = O.SubMap[P]
        21:O.SubMap[P] = (new DataProperty("Value" -> undefined, "Writable" -> false, "Configurable" -> ap.Configurable, "Enumerable" -> ap.Enumerable))
      } else 18:{}
    } else 21:{
      22:app __x11__ = (IsDataDescriptor current)
      22:app __x12__ = (IsDataDescriptor Desc)
      22:if (&& (= __x11__ true) (= __x12__ true)) 23:if (&& (= current.Configurable false) (= current.Writable false)) 23:{
        24:if (&& (! (= Desc.Writable absent)) (= Desc.Writable true)) 24:return false else 24:{}
        25:let __x13__ = true
        25:__x13__ = (! (= Desc.Value absent))
        25:if __x13__ 25:{
          25:app __x14__ = (SameValue Desc.Value current.Value)
          25:__x13__ = (= __x14__ false)
        } else 25:{}
        25:if __x13__ 25:return false else 25:{}
        26:return true
      } else 23:{} else 24:{
        28:app __x15__ = (IsAccessorDescriptor current)
        28:app __x16__ = (IsAccessorDescriptor Desc)
        28:assert (&& (= [! __x15__] true) (= [! __x16__] true))
        29:if (= current.Configurable false) 29:{
          30:let __x17__ = true
          30:__x17__ = (! (= Desc.Set absent))
          30:if __x17__ 30:{
            30:app __x18__ = (SameValue Desc.Set current.Set)
            30:__x17__ = (= __x18__ false)
          } else 30:{}
          30:if __x17__ 30:return false else 30:{}
          31:let __x19__ = true
          31:__x19__ = (! (= Desc.Get absent))
          31:if __x19__ 31:{
            31:app __x20__ = (SameValue Desc.Get current.Get)
            31:__x19__ = (= __x20__ false)
          } else 31:{}
          31:if __x19__ 31:return false else 31:{}
          32:return true
        } else 29:{}
      }
    }
  }
  33:if (! (= O undefined)) 33:{
    34:let __keys__ = (map-keys Desc)
    34:let __i__ = 0i
    34:while (< __i__ __keys__.length) 34:{
      34:let __key__ = __keys__[__i__]
      34:O.SubMap[P][__key__] = Desc[__key__]
      34:__i__ = (+ __i__ 1i)
    }
  } else 33:{}
  35:return true
}
- id: "sec-validateandapplypropertydescriptor"
- code:
          1. Assert: If _O_ is not *undefined*, then IsPropertyKey(_P_) is *true*.
          1. If _current_ is *undefined*, then
            1. If _extensible_ is *false*, return *false*.
            1. Assert: _extensible_ is *true*.
            1. If IsGenericDescriptor(_Desc_) is *true* or IsDataDescriptor(_Desc_) is *true*, then
              1. If _O_ is not *undefined*, create an own data property named _P_ of object _O_ whose [[Value]], [[Writable]], [[Enumerable]], and [[Configurable]] attribute values are described by _Desc_. If the value of an attribute field of _Desc_ is absent, the attribute of the newly created property is set to its <emu-xref href="#table-default-attribute-values">default value</emu-xref>.
            1. Else,
              1. Assert: ! IsAccessorDescriptor(_Desc_) is *true*.
              1. If _O_ is not *undefined*, create an own accessor property named _P_ of object _O_ whose [[Get]], [[Set]], [[Enumerable]], and [[Configurable]] attribute values are described by _Desc_. If the value of an attribute field of _Desc_ is absent, the attribute of the newly created property is set to its <emu-xref href="#table-default-attribute-values">default value</emu-xref>.
            1. Return *true*.
          1. If every field in _Desc_ is absent, return *true*.
          1. If _current_.[[Configurable]] is *false*, then
            1. If _Desc_.[[Configurable]] is present and its value is *true*, return *false*.
            1. If _Desc_.[[Enumerable]] is present and ! SameValue(_Desc_.[[Enumerable]], _current_.[[Enumerable]]) is *false*, return *false*.
          1. If ! IsGenericDescriptor(_Desc_) is *true*, then
            1. NOTE: No further validation is required.
          1. Else if ! SameValue(! IsDataDescriptor(_current_), ! IsDataDescriptor(_Desc_)) is *false*, then
            1. If _current_.[[Configurable]] is *false*, return *false*.
            1. If IsDataDescriptor(_current_) is *true*, then
              1. If _O_ is not *undefined*, convert the property named _P_ of object _O_ from a data property to an accessor property. Preserve the existing values of the converted property's [[Configurable]] and [[Enumerable]] attributes and set the rest of the property's attributes to their <emu-xref href="#table-default-attribute-values">default values</emu-xref>.
            1. Else,
              1. If _O_ is not *undefined*, convert the property named _P_ of object _O_ from an accessor property to a data property. Preserve the existing values of the converted property's [[Configurable]] and [[Enumerable]] attributes and set the rest of the property's attributes to their <emu-xref href="#table-default-attribute-values">default values</emu-xref>.
          1. Else if IsDataDescriptor(_current_) and IsDataDescriptor(_Desc_) are both *true*, then
            1. If _current_.[[Configurable]] is *false* and _current_.[[Writable]] is *false*, then
              1. If _Desc_.[[Writable]] is present and _Desc_.[[Writable]] is *true*, return *false*.
              1. If _Desc_.[[Value]] is present and SameValue(_Desc_.[[Value]], _current_.[[Value]]) is *false*, return *false*.
              1. Return *true*.
          1. Else,
            1. Assert: ! IsAccessorDescriptor(_current_) and ! IsAccessorDescriptor(_Desc_) are both *true*.
            1. If _current_.[[Configurable]] is *false*, then
              1. If _Desc_.[[Set]] is present and SameValue(_Desc_.[[Set]], _current_.[[Set]]) is *false*, return *false*.
              1. If _Desc_.[[Get]] is present and SameValue(_Desc_.[[Get]], _current_.[[Get]]) is *false*, return *false*.
              1. Return *true*.
          1. If _O_ is not *undefined*, then
            1. For each field of _Desc_ that is present, set the corresponding attribute of the property named _P_ of object _O_ to the value of the field.
          1. Return *true*.