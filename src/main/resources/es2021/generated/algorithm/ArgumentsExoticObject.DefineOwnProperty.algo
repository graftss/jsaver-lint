def [METHOD] ArgumentsExoticObject.DefineOwnProperty(args)(P, Desc) = 0:{
  0:let map = args.ParameterMap
  1:app __x0__ = (HasOwnProperty map P)
  1:let isMapped = __x0__
  2:let newArgDesc = Desc
  3:let __x1__ = true
  3:__x1__ = (= isMapped true)
  3:if __x1__ 3:{
    3:app __x2__ = (IsDataDescriptor Desc)
    3:__x1__ = (= __x2__ true)
  } else 3:{}
  3:if __x1__ 4:if (&& (= Desc.Value absent) (= Desc.Writable false)) 4:{
    5:newArgDesc = (copy-obj Desc)
    6:app __x3__ = (Get map P)
    6:newArgDesc.Value = __x3__
  } else 4:{} else 3:{}
  7:app __x4__ = (OrdinaryDefineOwnProperty args P newArgDesc)
  7:let allowed = [? __x4__]
  8:if (= allowed false) 8:return false else 8:{}
  9:if (= isMapped true) 9:{
    10:app __x5__ = (IsAccessorDescriptor Desc)
    10:if (= __x5__ true) 10:{
      11:app __x6__ = (map.Delete map P)
      11:__x6__
    } else 12:{
      13:if (! (= Desc.Value absent)) 13:{
        14:app __x7__ = (Set map P Desc.Value false)
        14:let setStatus = __x7__
      } else 13:{}
      16:if (= Desc.Writable false) 16:{
        17:app __x8__ = (map.Delete map P)
        17:__x8__
      } else 16:{}
    }
  } else 9:{}
  18:return true
}
- id: "sec-arguments-exotic-objects-defineownproperty-p-desc"
- code:
          1. Let _map_ be _args_.[[ParameterMap]].
          1. Let _isMapped_ be HasOwnProperty(_map_, _P_).
          1. Let _newArgDesc_ be _Desc_.
          1. If _isMapped_ is *true* and IsDataDescriptor(_Desc_) is *true*, then
            1. If _Desc_.[[Value]] is not present and _Desc_.[[Writable]] is present and its value is *false*, then
              1. Set _newArgDesc_ to a copy of _Desc_.
              1. Set _newArgDesc_.[[Value]] to Get(_map_, _P_).
          1. Let _allowed_ be ? OrdinaryDefineOwnProperty(_args_, _P_, _newArgDesc_).
          1. If _allowed_ is *false*, return *false*.
          1. If _isMapped_ is *true*, then
            1. If IsAccessorDescriptor(_Desc_) is *true*, then
              1. Call _map_.[[Delete]](_P_).
            1. Else,
              1. If _Desc_.[[Value]] is present, then
                1. Let _setStatus_ be Set(_map_, _P_, _Desc_.[[Value]], *false*).
                1. Assert: _setStatus_ is *true* because formal parameters mapped by argument objects are always writable.
              1. If _Desc_.[[Writable]] is present and its value is *false*, then
                1. Call _map_.[[Delete]](_P_).
          1. Return *true*.