def [BUILTIN] TypedArray.prototype.lastIndexOf(searchElement, fromIndex?) = 0:{
  0:let O = this
  1:app __x0__ = (ValidateTypedArray O)
  1:[? __x0__]
  2:let len = O.ArrayLength
  3:if (= len 0i) 3:return -1i else 3:{}
  4:if (! (= fromIndex absent)) 4:{
    4:app __x1__ = (ToIntegerOrInfinity fromIndex)
    4:let n = [? __x1__]
  } else 4:let n = (- len 1i)
  5:if (= n -Infinity) 5:return -1i else 5:{}
  6:if (! (< n 0i)) 6:{
    7:app __x2__ = (min n (- len 1i))
    7:let k = __x2__
  } else 6:let k = (+ len n)
  10:while (! (< k 0i)) 10:{
    11:app __x3__ = (ToString k)
    11:app __x4__ = (HasProperty O [! __x3__])
    11:let kPresent = [! __x4__]
    12:if (= kPresent true) 12:{
      13:app __x5__ = (ToString k)
      13:app __x6__ = (Get O [! __x5__])
      13:let elementK = [! __x6__]
      14:app __x7__ = (StrictEqualityComparison searchElement elementK)
      14:let same = __x7__
      15:if (= same true) 15:return k else 15:{}
    } else 12:{}
    16:k = (- k 1i)
  }
  17:return -1i
}
- id: "sec-%typedarray%.prototype.lastindexof"
- code:
          1. Let _O_ be the *this* value.
          1. Perform ? ValidateTypedArray(_O_).
          1. Let _len_ be _O_.[[ArrayLength]].
          1. If _len_ is 0, return *-1*<sub>𝔽</sub>.
          1. If _fromIndex_ is present, let _n_ be ? ToIntegerOrInfinity(_fromIndex_); else let _n_ be _len_ - 1.
          1. If _n_ is -∞, return *-1*<sub>𝔽</sub>.
          1. If _n_ ≥ 0, then
            1. Let _k_ be min(_n_, _len_ - 1).
          1. Else,
            1. Let _k_ be _len_ + _n_.
          1. Repeat, while _k_ ≥ 0,
            1. Let _kPresent_ be ! HasProperty(_O_, ! ToString(𝔽(_k_))).
            1. If _kPresent_ is *true*, then
              1. Let _elementK_ be ! Get(_O_, ! ToString(𝔽(_k_))).
              1. Let _same_ be the result of performing Strict Equality Comparison _searchElement_ === _elementK_.
              1. If _same_ is *true*, return 𝔽(_k_).
            1. Set _k_ to _k_ - 1.
          1. Return *-1*<sub>𝔽</sub>.