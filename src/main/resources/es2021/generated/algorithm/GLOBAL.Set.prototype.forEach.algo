def [BUILTIN] Set.prototype.forEach(callbackfn, thisArg?) = 0:{
  0:let S = this
  1:app __x0__ = (RequireInternalSlot S "SetData")
  1:[? __x0__]
  2:app __x1__ = (IsCallable callbackfn)
  2:if (= __x1__ false) 2:throw TypeError else 2:{}
  3:let entries = S.SetData
  4:let __x2__ = entries
  4:let __x3__ = 0i
  4:while (< __x3__ __x2__.length) 4:{
    4:let e = __x2__[__x3__]
    4:__x3__ = (+ __x3__ 1i)
    5:if (! (= e ~empty~)) 5:{
      6:app __x4__ = (Call callbackfn thisArg (new [e, e, S]))
      6:[? __x4__]
    } else 5:{}
  }
  7:return undefined
}
- id: "sec-set.prototype.foreach"
- code:
          1. Let _S_ be the *this* value.
          1. Perform ? RequireInternalSlot(_S_, [[SetData]]).
          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.
          1. Let _entries_ be the List that is _S_.[[SetData]].
          1. For each element _e_ of _entries_, do
            1. If _e_ is not ~empty~, then
              1. Perform ? Call(_callbackfn_, _thisArg_, « _e_, _e_, _S_ »).
          1. Return *undefined*.