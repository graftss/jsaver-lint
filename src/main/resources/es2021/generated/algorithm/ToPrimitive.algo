def ToPrimitive(input, preferredType?) = 1:{
  1:if (= (typeof input) Object) 1:{
    2:app __x0__ = (GetMethod input SYMBOL_toPrimitive)
    2:let exoticToPrim = [? __x0__]
    3:if (! (= exoticToPrim undefined)) 3:{
      4:if (= preferredType absent) 4:let hint = "default" else 4:if (= preferredType ~string~) 5:let hint = "string" else 6:{
        7:assert (= preferredType ~number~)
        8:let hint = "number"
      }
      9:app __x1__ = (Call exoticToPrim input (new [hint]))
      9:let result = [? __x1__]
      10:if (! (= (typeof result) Object)) 10:return result else 10:{}
      11:throw TypeError
    } else 3:{}
    12:if (= preferredType absent) 12:let preferredType = ~number~ else 12:{}
    13:app __x2__ = (OrdinaryToPrimitive input preferredType)
    13:return [? __x2__]
  } else 1:{}
  14:return input
}
- id: "sec-toprimitive"
- code:
        1. Assert: _input_ is an ECMAScript language value.
        1. If Type(_input_) is Object, then
          1. Let _exoticToPrim_ be ? GetMethod(_input_, @@toPrimitive).
          1. If _exoticToPrim_ is not *undefined*, then
            1. If _preferredType_ is not present, let _hint_ be *"default"*.
            1. Else if _preferredType_ is ~string~, let _hint_ be *"string"*.
            1. Else,
              1. Assert: _preferredType_ is ~number~.
              1. Let _hint_ be *"number"*.
            1. Let _result_ be ? Call(_exoticToPrim_, _input_, « _hint_ »).
            1. If Type(_result_) is not Object, return _result_.
            1. Throw a *TypeError* exception.
          1. If _preferredType_ is not present, let _preferredType_ be ~number~.
          1. Return ? OrdinaryToPrimitive(_input_, _preferredType_).
        1. Return _input_.