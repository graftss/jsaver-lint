def [BUILTIN] Array.prototype.join(separator) = 0:{
  0:app __x0__ = (ToObject this)
  0:let O = [? __x0__]
  1:app __x1__ = (LengthOfArrayLike O)
  1:let len = [? __x1__]
  2:if (= separator undefined) 2:let sep = "," else 3:{
    3:app __x2__ = (ToString separator)
    3:let sep = [? __x2__]
  }
  4:let R = ""
  5:let k = 0i
  6:while (< k len) 6:{
    7:if (< 0i k) 7:R = (+ R sep) else 7:{}
    8:app __x3__ = (ToString k)
    8:app __x4__ = (Get O [! __x3__])
    8:let element = [? __x4__]
    9:if (|| (= element undefined) (= element null)) 9:let next = "" else 10:{
      10:app __x5__ = (ToString element)
      10:let next = [? __x5__]
    }
    10:R = (+ R next)
    11:k = (+ k 1i)
  }
  12:return R
}
- id: "sec-array.prototype.join"
- code:
          1. Let _O_ be ? ToObject(*this* value).
          1. Let _len_ be ? LengthOfArrayLike(_O_).
          1. If _separator_ is *undefined*, let _sep_ be the single-element String *","*.
          1. Else, let _sep_ be ? ToString(_separator_).
          1. Let _R_ be the empty String.
          1. Let _k_ be 0.
          1. Repeat, while _k_ < _len_,
            1. If _k_ > 0, set _R_ to the string-concatenation of _R_ and _sep_.
            1. Let _element_ be ? Get(_O_, ! ToString(ùîΩ(_k_))).
            1. If _element_ is *undefined* or *null*, let _next_ be the empty String; otherwise, let _next_ be ? ToString(_element_).
            1. Set _R_ to the string-concatenation of _R_ and _next_.
            1. Set _k_ to _k_ + 1.
          1. Return _R_.