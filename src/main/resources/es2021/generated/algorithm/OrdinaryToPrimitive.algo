def OrdinaryToPrimitive(O, hint) = 0:{
  0:assert (= (typeof O) Object)
  1:assert (|| (= hint ~string~) (= hint ~number~))
  2:if (= hint ~string~) 3:let methodNames = (new ["toString", "valueOf"]) else 2:let methodNames = (new ["valueOf", "toString"])
  6:let __x0__ = methodNames
  6:let __x1__ = 0i
  6:while (< __x1__ __x0__.length) 6:{
    6:let name = __x0__[__x1__]
    6:__x1__ = (+ __x1__ 1i)
    7:app __x2__ = (Get O name)
    7:let method = [? __x2__]
    8:app __x3__ = (IsCallable method)
    8:if (= __x3__ true) 8:{
      9:app __x4__ = (Call method O)
      9:let result = [? __x4__]
      10:if (! (= (typeof result) Object)) 10:return result else 10:{}
    } else 8:{}
  }
  11:throw TypeError
}
- id: "sec-ordinarytoprimitive"
- code:
          1. Assert: Type(_O_) is Object.
          1. Assert: _hint_ is either ~string~ or ~number~.
          1. If _hint_ is ~string~, then
            1. Let _methodNames_ be « *"toString"*, *"valueOf"* ».
          1. Else,
            1. Let _methodNames_ be « *"valueOf"*, *"toString"* ».
          1. For each element _name_ of _methodNames_, do
            1. Let _method_ be ? Get(_O_, _name_).
            1. If IsCallable(_method_) is *true*, then
              1. Let _result_ be ? Call(_method_, _O_).
              1. If Type(_result_) is not Object, return _result_.
          1. Throw a *TypeError* exception.