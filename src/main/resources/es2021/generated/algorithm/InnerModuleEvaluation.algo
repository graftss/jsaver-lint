def InnerModuleEvaluation(module, stack, index) = 0:{
  0:if (! (is-instance-of module CyclicModuleRecord)) 0:{
    1:app __x0__ = (module.Evaluate module)
    1:[? __x0__]
    2:return index
  } else 0:{}
  3:if (= module.Status ~evaluated~) 4:if (= module.EvaluationError undefined) 4:return index else 4:return module.EvaluationError else 3:{}
  6:if (= module.Status ~evaluating~) 6:return index else 6:{}
  7:assert (= module.Status ~linked~)
  8:module.Status = ~evaluating~
  9:module.DFSIndex = index
  10:module.DFSAncestorIndex = index
  11:index = (+ index 1i)
  12:append module -> stack
  13:let __x1__ = module.RequestedModules
  13:let __x2__ = 0i
  13:while (< __x2__ __x1__.length) 13:{
    13:let required = __x1__[__x2__]
    13:__x2__ = (+ __x2__ 1i)
    14:app __x3__ = (HostResolveImportedModule module required)
    14:let requiredModule = [! __x3__]
    16:app __x4__ = (InnerModuleEvaluation requiredModule stack index)
    16:index = [? __x4__]
    17:if (is-instance-of requiredModule CyclicModuleRecord) 17:{
      18:assert (|| (= requiredModule.Status ~evaluating~) (= requiredModule.Status ~evaluated~))
      20:if (= requiredModule.Status ~evaluating~) 20:{
        21:app __x5__ = (min module.DFSAncestorIndex requiredModule.DFSAncestorIndex)
        21:module.DFSAncestorIndex = __x5__
      } else 20:{}
    } else 17:{}
  }
  22:app __x6__ = (module.ExecuteModule module)
  22:[? __x6__]
  24:assert (! (< module.DFSIndex module.DFSAncestorIndex))
  25:if (== module.DFSAncestorIndex module.DFSIndex) 25:{
    26:let done = false
    27:while (= done false) 27:{
      28:let requiredModule = stack[(- stack.length 1i)]
      29:(pop stack (- stack.length 1i))
      30:assert (is-instance-of requiredModule CyclicModuleRecord)
      31:requiredModule.Status = ~evaluated~
      32:if (= requiredModule module) 32:done = true else 32:{}
    }
  } else 25:{}
  33:return index
}
- id: "sec-innermoduleevaluation"
- code:
              1. If _module_ is not a Cyclic Module Record, then
                1. Perform ? _module_.Evaluate().
                1. Return _index_.
              1. If _module_.[[Status]] is ~evaluated~, then
                1. If _module_.[[EvaluationError]] is *undefined*, return _index_.
                1. Otherwise, return _module_.[[EvaluationError]].
              1. If _module_.[[Status]] is ~evaluating~, return _index_.
              1. Assert: _module_.[[Status]] is ~linked~.
              1. Set _module_.[[Status]] to ~evaluating~.
              1. Set _module_.[[DFSIndex]] to _index_.
              1. Set _module_.[[DFSAncestorIndex]] to _index_.
              1. Set _index_ to _index_ + 1.
              1. Append _module_ to _stack_.
              1. For each String _required_ of _module_.[[RequestedModules]], do
                1. Let _requiredModule_ be ! HostResolveImportedModule(_module_, _required_).
                1. NOTE: Link must be completed successfully prior to invoking this method, so every requested module is guaranteed to resolve successfully.
                1. Set _index_ to ? InnerModuleEvaluation(_requiredModule_, _stack_, _index_).
                1. If _requiredModule_ is a Cyclic Module Record, then
                  1. Assert: _requiredModule_.[[Status]] is either ~evaluating~ or ~evaluated~.
                  1. Assert: _requiredModule_.[[Status]] is ~evaluating~ if and only if _requiredModule_ is in _stack_.
                  1. If _requiredModule_.[[Status]] is ~evaluating~, then
                    1. Set _module_.[[DFSAncestorIndex]] to min(_module_.[[DFSAncestorIndex]], _requiredModule_.[[DFSAncestorIndex]]).
              1. Perform ? _module_.ExecuteModule().
              1. Assert: _module_ occurs exactly once in _stack_.
              1. Assert: _module_.[[DFSAncestorIndex]] â‰¤ _module_.[[DFSIndex]].
              1. If _module_.[[DFSAncestorIndex]] = _module_.[[DFSIndex]], then
                1. Let _done_ be *false*.
                1. Repeat, while _done_ is *false*,
                  1. Let _requiredModule_ be the last element in _stack_.
                  1. Remove the last element of _stack_.
                  1. Assert: _requiredModule_ is a Cyclic Module Record.
                  1. Set _requiredModule_.[[Status]] to ~evaluated~.
                  1. If _requiredModule_ and _module_ are the same Module Record, set _done_ to *true*.
              1. Return _index_.