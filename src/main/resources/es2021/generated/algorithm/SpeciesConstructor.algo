def SpeciesConstructor(O, defaultConstructor) = 0:{
  0:assert (= (typeof O) Object)
  1:app __x0__ = (Get O "constructor")
  1:let C = [? __x0__]
  2:if (= C undefined) 2:return defaultConstructor else 2:{}
  3:if (! (= (typeof C) Object)) 3:throw TypeError else 3:{}
  4:app __x1__ = (Get C SYMBOL_species)
  4:let S = [? __x1__]
  5:if (|| (= S undefined) (= S null)) 5:return defaultConstructor else 5:{}
  6:app __x2__ = (IsConstructor S)
  6:if (= __x2__ true) 6:return S else 6:{}
  7:throw TypeError
}
- id: "sec-speciesconstructor"
- code:
        1. Assert: Type(_O_) is Object.
        1. Let _C_ be ? Get(_O_, *"constructor"*).
        1. If _C_ is *undefined*, return _defaultConstructor_.
        1. If Type(_C_) is not Object, throw a *TypeError* exception.
        1. Let _S_ be ? Get(_C_, @@species).
        1. If _S_ is either *undefined* or *null*, return _defaultConstructor_.
        1. If IsConstructor(_S_) is *true*, return _S_.
        1. Throw a *TypeError* exception.