def InitializeTypedArrayFromArrayBuffer(O, buffer, byteOffset, length) = 2:{
  2:let constructorName = O.TypedArrayName
  3:??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for id:{constructorName} ."
  4:app __x0__ = (ToIndex byteOffset)
  4:let offset = [? __x0__]
  5:if (! (== (%% offset elementSize) 0i)) 5:throw RangeError else 5:{}
  6:if (! (= length undefined)) 6:{
    7:app __x1__ = (ToIndex length)
    7:let newLength = [? __x1__]
  } else 6:{}
  8:app __x2__ = (IsDetachedBuffer buffer)
  8:if (= __x2__ true) 8:throw TypeError else 8:{}
  9:let bufferByteLength = buffer.ArrayBufferByteLength
  10:if (= length undefined) 10:{
    11:if (! (== (%% bufferByteLength elementSize) 0i)) 11:throw RangeError else 11:{}
    12:let newByteLength = (- bufferByteLength offset)
    13:if (< newByteLength 0i) 13:throw RangeError else 13:{}
  } else 14:{
    15:let newByteLength = (* newLength elementSize)
    16:if (< bufferByteLength (+ offset newByteLength)) 16:throw RangeError else 16:{}
  }
  17:O.ViewedArrayBuffer = buffer
  18:O.ByteLength = newByteLength
  19:O.ByteOffset = offset
  20:O.ArrayLength = (/ newByteLength elementSize)
}
- id: "sec-initializetypedarrayfromarraybuffer"
- code:
            1. Assert: _O_ is an Object that has a [[TypedArrayName]] internal slot.
            1. Assert: _buffer_ is an Object that has an [[ArrayBufferData]] internal slot.
            1. Let _constructorName_ be the String value of _O_.[[TypedArrayName]].
            1. Let _elementSize_ be the Element Size value specified in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for _constructorName_.
            1. Let _offset_ be ? ToIndex(_byteOffset_).
            1. If _offset_ modulo _elementSize_ ≠ 0, throw a *RangeError* exception.
            1. If _length_ is not *undefined*, then
              1. Let _newLength_ be ? ToIndex(_length_).
            1. If IsDetachedBuffer(_buffer_) is *true*, throw a *TypeError* exception.
            1. Let _bufferByteLength_ be _buffer_.[[ArrayBufferByteLength]].
            1. If _length_ is *undefined*, then
              1. If _bufferByteLength_ modulo _elementSize_ ≠ 0, throw a *RangeError* exception.
              1. Let _newByteLength_ be _bufferByteLength_ - _offset_.
              1. If _newByteLength_ < 0, throw a *RangeError* exception.
            1. Else,
              1. Let _newByteLength_ be _newLength_ × _elementSize_.
              1. If _offset_ + _newByteLength_ > _bufferByteLength_, throw a *RangeError* exception.
            1. Set _O_.[[ViewedArrayBuffer]] to _buffer_.
            1. Set _O_.[[ByteLength]] to _newByteLength_.
            1. Set _O_.[[ByteOffset]] to _offset_.
            1. Set _O_.[[ArrayLength]] to _newByteLength_ / _elementSize_.