def [BUILTIN] TypedArray.prototype.filter(callbackfn, thisArg?) = 0:{
  0:let O = this
  1:app __x0__ = (ValidateTypedArray O)
  1:[? __x0__]
  2:let len = O.ArrayLength
  3:app __x1__ = (IsCallable callbackfn)
  3:if (= __x1__ false) 3:throw TypeError else 3:{}
  4:let kept = (new [])
  5:let k = 0i
  6:let captured = 0i
  7:while (< k len) 7:{
    8:app __x2__ = (ToString k)
    8:let Pk = [! __x2__]
    9:app __x3__ = (Get O Pk)
    9:let kValue = [! __x3__]
    10:app __x4__ = (Call callbackfn thisArg (new [kValue, k, O]))
    10:app __x5__ = (ToBoolean [? __x4__])
    10:let selected = [! __x5__]
    11:if (= selected true) 11:{
      12:append kValue -> kept
      13:captured = (+ captured 1i)
    } else 11:{}
    14:k = (+ k 1i)
  }
  15:app __x6__ = (TypedArraySpeciesCreate O (new [captured]))
  15:let A = [? __x6__]
  16:let n = 0i
  17:let __x7__ = kept
  17:let __x8__ = 0i
  17:while (< __x8__ __x7__.length) 17:{
    17:let e = __x7__[__x8__]
    17:__x8__ = (+ __x8__ 1i)
    18:app __x9__ = (ToString n)
    18:app __x10__ = (Set A [! __x9__] e true)
    18:[! __x10__]
    19:n = (+ n 1i)
  }
  20:return A
}
- id: "sec-%typedarray%.prototype.filter"
- code:
          1. Let _O_ be the *this* value.
          1. Perform ? ValidateTypedArray(_O_).
          1. Let _len_ be _O_.[[ArrayLength]].
          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.
          1. Let _kept_ be a new empty List.
          1. Let _k_ be 0.
          1. Let _captured_ be 0.
          1. Repeat, while _k_ < _len_,
            1. Let _Pk_ be ! ToString(𝔽(_k_)).
            1. Let _kValue_ be ! Get(_O_, _Pk_).
            1. Let _selected_ be ! ToBoolean(? Call(_callbackfn_, _thisArg_, « _kValue_, 𝔽(_k_), _O_ »)).
            1. If _selected_ is *true*, then
              1. Append _kValue_ to the end of _kept_.
              1. Set _captured_ to _captured_ + 1.
            1. Set _k_ to _k_ + 1.
          1. Let _A_ be ? TypedArraySpeciesCreate(_O_, « 𝔽(_captured_) »).
          1. Let _n_ be 0.
          1. For each element _e_ of _kept_, do
            1. Perform ! Set(_A_, ! ToString(𝔽(_n_)), _e_, *true*).
            1. Set _n_ to _n_ + 1.
          1. Return _A_.