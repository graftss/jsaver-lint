def [SYNTAX] AtomEscape[3,0].Evaluation[R]<(GroupName),true>(direction) = 0:{
  0:??? "Search the enclosing nt:{Pattern} for an instance of a nt:{GroupSpecifier} containing a nt:{RegExpIdentifierName} which has a CapturingGroupName equal to the CapturingGroupName of the nt:{RegExpIdentifierName} contained in nt:{GroupName} ."
  2:??? "Let id:{parenIndex} be the number of left - capturing parentheses in the entire regular expression that occur to the left of the located nt:{GroupSpecifier} . This is the total number of grammar:{Atom4, [GroupSpecifier, Disjunction]} Parse Nodes prior to or enclosing the located nt:{GroupSpecifier} , including its immediately enclosing nt:{Atom} ."
  3:app __x0__ = (BackreferenceMatcher parenIndex direction)
  3:return [! __x0__]
}
- id: "sec-atomescape"
- code:
          1. Search the enclosing |Pattern| for an instance of a |GroupSpecifier| containing a |RegExpIdentifierName| which has a CapturingGroupName equal to the CapturingGroupName of the |RegExpIdentifierName| contained in |GroupName|.
          1. Assert: A unique such |GroupSpecifier| is found.
          1. Let _parenIndex_ be the number of left-capturing parentheses in the entire regular expression that occur to the left of the located |GroupSpecifier|. This is the total number of <emu-grammar>Atom :: `(` GroupSpecifier Disjunction `)`</emu-grammar> Parse Nodes prior to or enclosing the located |GroupSpecifier|, including its immediately enclosing |Atom|.
          1. Return ! BackreferenceMatcher(_parenIndex_, _direction_).