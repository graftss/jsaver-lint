def [SYNTAX] TemplateMiddleList[1,0].SubstitutionEvaluation[R]<(TemplateMiddleList, TemplateMiddle, Expression),false>() = 0:{
  0:access __x0__ = (TemplateMiddleList "SubstitutionEvaluation")
  0:let preceding = [? __x0__]
  1:access __x1__ = (Expression "Evaluation")
  1:let nextRef = __x1__
  2:app __x2__ = (GetValue nextRef)
  2:let next = [? __x2__]
  3:append next -> preceding
  4:return preceding
}
- id: "sec-runtime-semantics-substitutionevaluation"
- code:
          1. Let _preceding_ be ? SubstitutionEvaluation of |TemplateMiddleList|.
          1. Let _nextRef_ be the result of evaluating |Expression|.
          1. Let _next_ be ? GetValue(_nextRef_).
          1. Append _next_ as the last element of the List _preceding_.
          1. Return _preceding_.