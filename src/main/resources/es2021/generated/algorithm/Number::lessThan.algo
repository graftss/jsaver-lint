def Number::lessThan(x, y) = 0:{
  0:if (= x NaN) 0:return undefined else 0:{}
  1:if (= y NaN) 1:return undefined else 1:{}
  2:if (= x y) 2:return false else 2:{}
  3:if (&& (= x 0i) (= y -0.0)) 3:return false else 3:{}
  4:if (&& (= x -0.0) (= y 0i)) 4:return false else 4:{}
  5:if (= x Infinity) 5:return false else 5:{}
  6:if (= y Infinity) 6:return true else 6:{}
  7:if (= y -Infinity) 7:return false else 7:{}
  8:if (= x -Infinity) 8:return true else 8:{}
  10:if (< x y) 10:return true else 10:return false
}
- id: "sec-numeric-types-number-lessThan"
- code:
            1. If _x_ is *NaN*, return *undefined*.
            1. If _y_ is *NaN*, return *undefined*.
            1. If _x_ and _y_ are the same Number value, return *false*.
            1. If _x_ is *+0*<sub>𝔽</sub> and _y_ is *-0*<sub>𝔽</sub>, return *false*.
            1. If _x_ is *-0*<sub>𝔽</sub> and _y_ is *+0*<sub>𝔽</sub>, return *false*.
            1. If _x_ is *+∞*<sub>𝔽</sub>, return *false*.
            1. If _y_ is *+∞*<sub>𝔽</sub>, return *true*.
            1. If _y_ is *-∞*<sub>𝔽</sub>, return *false*.
            1. If _x_ is *-∞*<sub>𝔽</sub>, return *true*.
            1. Assert: _x_ and _y_ are finite and non-zero.
            1. If ℝ(_x_) < ℝ(_y_), return *true*. Otherwise, return *false*.