def [BUILTIN] TypedArray.prototype.fill(value, start?, end?) = 0:{
  0:let O = this
  1:app __x0__ = (ValidateTypedArray O)
  1:[? __x0__]
  2:let len = O.ArrayLength
  3:if (= O.ContentType ~BigInt~) 3:{
    3:app __x1__ = (ToBigInt value)
    3:value = [? __x1__]
  } else 4:{
    4:app __x2__ = (ToNumber value)
    4:value = [? __x2__]
  }
  5:app __x3__ = (ToIntegerOrInfinity start)
  5:let relativeStart = [? __x3__]
  6:if (= relativeStart -Infinity) 6:let k = 0i else 6:if (< relativeStart 0i) 7:{
    7:app __x4__ = (max (+ len relativeStart) 0i)
    7:let k = __x4__
  } else 8:{
    8:app __x5__ = (min relativeStart len)
    8:let k = __x5__
  }
  9:if (= end undefined) 9:let relativeEnd = len else 10:{
    10:app __x6__ = (ToIntegerOrInfinity end)
    10:let relativeEnd = [? __x6__]
  }
  10:if (= relativeEnd -Infinity) 10:let final = 0i else 10:if (< relativeEnd 0i) 11:{
    11:app __x7__ = (max (+ len relativeEnd) 0i)
    11:let final = __x7__
  } else 12:{
    12:app __x8__ = (min relativeEnd len)
    12:let final = __x8__
  }
  13:app __x9__ = (IsDetachedBuffer O.ViewedArrayBuffer)
  13:if (= __x9__ true) 13:throw TypeError else 13:{}
  14:while (< k final) 14:{
    15:app __x10__ = (ToString k)
    15:let Pk = [! __x10__]
    16:app __x11__ = (Set O Pk value true)
    16:[! __x11__]
    17:k = (+ k 1i)
  }
  18:return O
}
- id: "sec-%typedarray%.prototype.fill"
- code:
          1. Let _O_ be the *this* value.
          1. Perform ? ValidateTypedArray(_O_).
          1. Let _len_ be _O_.[[ArrayLength]].
          1. If _O_.[[ContentType]] is ~BigInt~, set _value_ to ? ToBigInt(_value_).
          1. Otherwise, set _value_ to ? ToNumber(_value_).
          1. Let _relativeStart_ be ? ToIntegerOrInfinity(_start_).
          1. If _relativeStart_ is -∞, let _k_ be 0.
          1. Else if _relativeStart_ < 0, let _k_ be max(_len_ + _relativeStart_, 0).
          1. Else, let _k_ be min(_relativeStart_, _len_).
          1. If _end_ is *undefined*, let _relativeEnd_ be _len_; else let _relativeEnd_ be ? ToIntegerOrInfinity(_end_).
          1. If _relativeEnd_ is -∞, let _final_ be 0.
          1. Else if _relativeEnd_ < 0, let _final_ be max(_len_ + _relativeEnd_, 0).
          1. Else, let _final_ be min(_relativeEnd_, _len_).
          1. If IsDetachedBuffer(_O_.[[ViewedArrayBuffer]]) is *true*, throw a *TypeError* exception.
          1. Repeat, while _k_ < _final_,
            1. Let _Pk_ be ! ToString(𝔽(_k_)).
            1. Perform ! Set(_O_, _Pk_, _value_, *true*).
            1. Set _k_ to _k_ + 1.
          1. Return _O_.