def Evaluate() = 1:{
  1:assert (|| (= module.Status ~linked~) (= module.Status ~evaluated~))
  2:let stack = (new [])
  3:app __x0__ = (InnerModuleEvaluation module stack 0i)
  3:let result = __x0__
  4:app __x1__ = (IsAbruptCompletion result)
  4:if __x1__ 4:{
    5:let __x2__ = stack
    5:let __x3__ = 0i
    5:while (< __x3__ __x2__.length) 5:{
      5:let m = __x2__[__x3__]
      5:__x3__ = (+ __x3__ 1i)
      6:assert (= m.Status ~evaluating~)
      7:m.Status = ~evaluated~
      8:m.EvaluationError = result
    }
    9:assert (&& (= module.Status ~evaluated~) (= module.EvaluationError result))
    10:return result
  } else 4:{}
  11:assert (&& (= module.Status ~evaluated~) (= module.EvaluationError undefined))
  12:assert (= stack.length 0i)
  13:return undefined
}
- id: "sec-moduleevaluation"
- code:
            1. Assert: This call to Evaluate is not happening at the same time as another call to Evaluate within the surrounding agent.
            1. Assert: _module_.[[Status]] is ~linked~ or ~evaluated~.
            1. Let _stack_ be a new empty List.
            1. Let _result_ be InnerModuleEvaluation(_module_, _stack_, 0).
            1. If _result_ is an abrupt completion, then
              1. For each Cyclic Module Record _m_ of _stack_, do
                1. Assert: _m_.[[Status]] is ~evaluating~.
                1. Set _m_.[[Status]] to ~evaluated~.
                1. Set _m_.[[EvaluationError]] to _result_.
              1. Assert: _module_.[[Status]] is ~evaluated~ and _module_.[[EvaluationError]] is _result_.
              1. Return _result_.
            1. Assert: _module_.[[Status]] is ~evaluated~ and _module_.[[EvaluationError]] is *undefined*.
            1. Assert: _stack_ is empty.
            1. Return *undefined*.