def [SYNTAX] AsyncArrowBindingIdentifier[0,0].IteratorBindingInitialization[R]<(BindingIdentifier),true>(iteratorRecord, environment) = 0:{
  0:assert (= iteratorRecord.Done false)
  1:app __x0__ = (IteratorStep iteratorRecord)
  1:let next = __x0__
  2:app __x1__ = (IsAbruptCompletion next)
  2:if __x1__ 2:iteratorRecord.Done = true else 2:{}
  3:[? next]
  4:if (= next false) 4:iteratorRecord.Done = true else 5:{
    6:app __x2__ = (IteratorValue next)
    6:let v = __x2__
    7:app __x3__ = (IsAbruptCompletion v)
    7:if __x3__ 7:iteratorRecord.Done = true else 7:{}
    8:[? v]
  }
  9:if (= iteratorRecord.Done true) 9:let v = undefined else 9:{}
  10:access __x4__ = (BindingIdentifier "BindingInitialization" v environment)
  10:return __x4__
}
- id: "sec-runtime-semantics-iteratorbindinginitialization"
- code:
        1. Assert: _iteratorRecord_.[[Done]] is *false*.
        1. Let _next_ be IteratorStep(_iteratorRecord_).
        1. If _next_ is an abrupt completion, set _iteratorRecord_.[[Done]] to *true*.
        1. ReturnIfAbrupt(_next_).
        1. If _next_ is *false*, set _iteratorRecord_.[[Done]] to *true*.
        1. Else,
          1. Let _v_ be IteratorValue(_next_).
          1. If _v_ is an abrupt completion, set _iteratorRecord_.[[Done]] to *true*.
          1. ReturnIfAbrupt(_v_).
        1. If _iteratorRecord_.[[Done]] is *true*, let _v_ be *undefined*.
        1. Return the result of performing BindingInitialization for |BindingIdentifier| using _v_ and _environment_ as the arguments.