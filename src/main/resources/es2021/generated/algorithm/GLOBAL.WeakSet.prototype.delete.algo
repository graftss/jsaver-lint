def [BUILTIN] WeakSet.prototype.delete(value) = 0:{
  0:let S = this
  1:app __x0__ = (RequireInternalSlot S "WeakSetData")
  1:[? __x0__]
  2:if (! (= (typeof value) Object)) 2:return false else 2:{}
  3:let entries = S.WeakSetData
  4:let __x1__ = entries
  4:let __x2__ = 0i
  4:while (< __x2__ __x1__.length) 4:{
    4:let e = __x1__[__x2__]
    4:__x2__ = (+ __x2__ 1i)
    5:let __x3__ = true
    5:__x3__ = (! (= e ~empty~))
    5:if __x3__ 5:{
      5:app __x4__ = (SameValue e value)
      5:__x3__ = (= __x4__ true)
    } else 5:{}
    5:if __x3__ 5:{
      6:??? "Replace the element of id:{entries} whose value is id:{e} with an element whose value is const:{empty} ."
      7:return true
    } else 5:{}
  }
  8:return false
}
- id: "sec-weakset.prototype.delete"
- code:
          1. Let _S_ be the *this* value.
          1. Perform ? RequireInternalSlot(_S_, [[WeakSetData]]).
          1. If Type(_value_) is not Object, return *false*.
          1. Let _entries_ be the List that is _S_.[[WeakSetData]].
          1. For each element _e_ of _entries_, do
            1. If _e_ is not ~empty~ and SameValue(_e_, _value_) is *true*, then
              1. Replace the element of _entries_ whose value is _e_ with an element whose value is ~empty~.
              1. Return *true*.
          1. Return *false*.