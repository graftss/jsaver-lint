def [SYNTAX] ArrayAssignmentPattern[0,1].DestructuringAssignmentEvaluation[R]<(Elision, AssignmentRestElement),true>(value) = 0:{
  0:app __x0__ = (GetIterator value)
  0:let iteratorRecord = [? __x0__]
  1:if (! (= Elision absent)) 1:{
    2:access __x1__ = (Elision "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
    2:let status = __x1__
    3:app __x2__ = (IsAbruptCompletion status)
    3:if __x2__ 3:{
      4:assert (= iteratorRecord.Done true)
      5:return status
    } else 3:{}
  } else 1:{}
  6:access __x3__ = (AssignmentRestElement "IteratorDestructuringAssignmentEvaluation" iteratorRecord)
  6:let result = __x3__
  7:if (= iteratorRecord.Done false) 7:{
    7:app __x4__ = (IteratorClose iteratorRecord result)
    7:return [? __x4__]
  } else 7:{}
  8:return result
}
- id: "sec-runtime-semantics-destructuringassignmentevaluation"
- code:
          1. Let _iteratorRecord_ be ? GetIterator(_value_).
          1. If |Elision| is present, then
            1. Let _status_ be IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_.
            1. If _status_ is an abrupt completion, then
              1. Assert: _iteratorRecord_.[[Done]] is *true*.
              1. Return Completion(_status_).
          1. Let _result_ be IteratorDestructuringAssignmentEvaluation of |AssignmentRestElement| with argument _iteratorRecord_.
          1. If _iteratorRecord_.[[Done]] is *false*, return ? IteratorClose(_iteratorRecord_, _result_).
          1. Return _result_.