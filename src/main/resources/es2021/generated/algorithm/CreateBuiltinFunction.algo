def CreateBuiltinFunction(steps, length, name, internalSlotsList, realm?, prototype?, prefix?) = 1:{
  1:if (|| (= realm absent) (= realm ~empty~)) 1:realm = REALM else 1:{}
  2:assert (is-instance-of realm RealmRecord)
  3:if (= prototype absent) 3:prototype = realm.Intrinsics["%Function.prototype%"] else 3:{}
  4:let func = (new BuiltinFunctionObject())
  4:func.Code = steps
  5:func.Realm = realm
  6:func.Prototype = prototype
  7:func.Extensible = true
  8:func.InitialName = null
  9:app __x0__ = (SetFunctionLength func length)
  9:[! __x0__]
  10:if (= prefix absent) 10:{
    11:app __x1__ = (SetFunctionName func name)
    11:[! __x1__]
  } else 12:{
    13:app __x2__ = (SetFunctionName func name prefix)
    13:[! __x2__]
  }
  14:return func
}
- id: "sec-createbuiltinfunction"
- code:
        1. Assert: _steps_ is either a set of algorithm steps or other definition of a function's behaviour provided in this specification.
        1. If _realm_ is not present or _realm_ is ~empty~, set _realm_ to the current Realm Record.
        1. Assert: _realm_ is a Realm Record.
        1. If _prototype_ is not present, set _prototype_ to _realm_.[[Intrinsics]].[[%Function.prototype%]].
        1. Let _func_ be a new built-in function object that when called performs the action described by _steps_. The new function object has internal slots whose names are the elements of _internalSlotsList_, and an [[InitialName]] internal slot.
        1. Set _func_.[[Realm]] to _realm_.
        1. Set _func_.[[Prototype]] to _prototype_.
        1. Set _func_.[[Extensible]] to *true*.
        1. Set _func_.[[InitialName]] to *null*.
        1. Perform ! SetFunctionLength(_func_, _length_).
        1. If _prefix_ is not present, then
          1. Perform ! SetFunctionName(_func_, _name_).
        1. Else,
          1. Perform ! SetFunctionName(_func_, _name_, _prefix_).
        1. Return _func_.