def [BUILTIN] BigInt.asIntN(bits, bigint) = 0:{
  0:app __x0__ = (ToIndex bits)
  0:bits = [? __x0__]
  1:app __x1__ = (ToBigInt bigint)
  1:bigint = [? __x1__]
  2:let mod = (%% bigint (** 2i bits))
  3:if (! (< mod (** 2i (- bits 1i)))) 3:return (convert (- mod (** 2i bits)) num2bigint) else 3:return (convert mod num2bigint)
}
- id: "sec-bigint.asintn"
- code:
          1. Set _bits_ to ? ToIndex(_bits_).
          1. Set _bigint_ to ? ToBigInt(_bigint_).
          1. Let _mod_ be ℝ(_bigint_) modulo 2<sup>_bits_</sup>.
          1. If _mod_ ≥ 2<sup>_bits_ - 1</sup>, return ℤ(_mod_ - 2<sup>_bits_</sup>); otherwise, return ℤ(_mod_).