def [BUILTIN] Math.min(...args) = 0:{
  0:let coerced = (new [])
  1:let __x0__ = args
  1:let __x1__ = 0i
  1:while (< __x1__ __x0__.length) 1:{
    1:let arg = __x0__[__x1__]
    1:__x1__ = (+ __x1__ 1i)
    2:app __x2__ = (ToNumber arg)
    2:let n = [? __x2__]
    3:append n -> coerced
  }
  4:let lowest = Infinity
  5:let __x3__ = coerced
  5:let __x4__ = 0i
  5:while (< __x4__ __x3__.length) 5:{
    5:let number = __x3__[__x4__]
    5:__x4__ = (+ __x4__ 1i)
    6:if (= number NaN) 6:return NaN else 6:{}
    7:if (&& (= number -0.0) (= lowest 0i)) 7:lowest = -0.0 else 7:{}
    8:if (< number lowest) 8:lowest = number else 8:{}
  }
  9:return lowest
}
- id: "sec-math.min"
- code:
          1. Let _coerced_ be a new empty List.
          1. For each element _arg_ of _args_, do
            1. Let _n_ be ? ToNumber(_arg_).
            1. Append _n_ to _coerced_.
          1. Let _lowest_ be *+∞*<sub>𝔽</sub>.
          1. For each element _number_ of _coerced_, do
            1. If _number_ is *NaN*, return *NaN*.
            1. If _number_ is *-0*<sub>𝔽</sub> and _lowest_ is *+0*<sub>𝔽</sub>, set _lowest_ to *-0*<sub>𝔽</sub>.
            1. If _number_ < _lowest_, set _lowest_ to _number_.
          1. Return _lowest_.