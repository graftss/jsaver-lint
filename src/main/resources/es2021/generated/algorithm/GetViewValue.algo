def GetViewValue(view, requestIndex, isLittleEndian, type) = 0:{
  0:app __x0__ = (RequireInternalSlot view "DataView")
  0:[? __x0__]
  1:assert (! (= view.ViewedArrayBuffer absent))
  2:app __x1__ = (ToIndex requestIndex)
  2:let getIndex = [? __x1__]
  3:app __x2__ = (ToBoolean isLittleEndian)
  3:isLittleEndian = [! __x2__]
  4:let buffer = view.ViewedArrayBuffer
  5:app __x3__ = (IsDetachedBuffer buffer)
  5:if (= __x3__ true) 5:throw TypeError else 5:{}
  6:let viewOffset = view.ByteOffset
  7:let viewSize = view.ByteLength
  8:??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for Element Type id:{type} ."
  9:if (< viewSize (+ getIndex elementSize)) 9:throw RangeError else 9:{}
  10:let bufferIndex = (+ getIndex viewOffset)
  11:app __x4__ = (GetValueFromBuffer buffer bufferIndex type false ~Unordered~ isLittleEndian)
  11:return __x4__
}
- id: "sec-getviewvalue"
- code:
          1. Perform ? RequireInternalSlot(_view_, [[DataView]]).
          1. Assert: _view_ has a [[ViewedArrayBuffer]] internal slot.
          1. Let _getIndex_ be ? ToIndex(_requestIndex_).
          1. Set _isLittleEndian_ to ! ToBoolean(_isLittleEndian_).
          1. Let _buffer_ be _view_.[[ViewedArrayBuffer]].
          1. If IsDetachedBuffer(_buffer_) is *true*, throw a *TypeError* exception.
          1. Let _viewOffset_ be _view_.[[ByteOffset]].
          1. Let _viewSize_ be _view_.[[ByteLength]].
          1. Let _elementSize_ be the Element Size value specified in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for Element Type _type_.
          1. If _getIndex_ + _elementSize_ > _viewSize_, throw a *RangeError* exception.
          1. Let _bufferIndex_ be _getIndex_ + _viewOffset_.
          1. Return GetValueFromBuffer(_buffer_, _bufferIndex_, _type_, *false*, ~Unordered~, _isLittleEndian_).