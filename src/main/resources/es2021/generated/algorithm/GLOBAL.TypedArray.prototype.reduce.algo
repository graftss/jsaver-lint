def [BUILTIN] TypedArray.prototype.reduce(callbackfn, initialValue?) = 0:{
  0:let O = this
  1:app __x0__ = (ValidateTypedArray O)
  1:[? __x0__]
  2:let len = O.ArrayLength
  3:app __x1__ = (IsCallable callbackfn)
  3:if (= __x1__ false) 3:throw TypeError else 3:{}
  4:if (&& (== len 0i) (= initialValue absent)) 4:throw TypeError else 4:{}
  5:let k = 0i
  6:let accumulator = undefined
  7:if (! (= initialValue absent)) 8:accumulator = initialValue else 9:{
    10:app __x2__ = (ToString k)
    10:let Pk = [! __x2__]
    11:app __x3__ = (Get O Pk)
    11:accumulator = [! __x3__]
    12:k = (+ k 1i)
  }
  13:while (< k len) 13:{
    14:app __x4__ = (ToString k)
    14:let Pk = [! __x4__]
    15:app __x5__ = (Get O Pk)
    15:let kValue = [! __x5__]
    16:app __x6__ = (Call callbackfn undefined (new [accumulator, kValue, k, O]))
    16:accumulator = [? __x6__]
    17:k = (+ k 1i)
  }
  18:return accumulator
}
- id: "sec-%typedarray%.prototype.reduce"
- code:
          1. Let _O_ be the *this* value.
          1. Perform ? ValidateTypedArray(_O_).
          1. Let _len_ be _O_.[[ArrayLength]].
          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.
          1. If _len_ = 0 and _initialValue_ is not present, throw a *TypeError* exception.
          1. Let _k_ be 0.
          1. Let _accumulator_ be *undefined*.
          1. If _initialValue_ is present, then
            1. Set _accumulator_ to _initialValue_.
          1. Else,
            1. Let _Pk_ be ! ToString(𝔽(_k_)).
            1. Set _accumulator_ to ! Get(_O_, _Pk_).
            1. Set _k_ to _k_ + 1.
          1. Repeat, while _k_ < _len_,
            1. Let _Pk_ be ! ToString(𝔽(_k_)).
            1. Let _kValue_ be ! Get(_O_, _Pk_).
            1. Set _accumulator_ to ? Call(_callbackfn_, *undefined*, « _accumulator_, _kValue_, 𝔽(_k_), _O_ »).
            1. Set _k_ to _k_ + 1.
          1. Return _accumulator_.