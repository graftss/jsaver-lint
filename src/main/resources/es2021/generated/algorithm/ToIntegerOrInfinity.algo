def ToIntegerOrInfinity(argument) = 0:{
  0:app __x0__ = (ToNumber argument)
  0:let number = [? __x0__]
  1:if (|| (|| (= number NaN) (= number 0i)) (= number -0.0)) 1:return 0i else 1:{}
  2:if (= number Infinity) 2:return Infinity else 2:{}
  3:if (= number -Infinity) 3:return -Infinity else 3:{}
  4:app __x1__ = (abs number)
  4:app __x2__ = (floor __x1__)
  4:let integer = __x2__
  5:if (< number 0i) 5:integer = (- integer) else 5:{}
  6:return integer
}
- id: "sec-tointegerorinfinity"
- code:
        1. Let _number_ be ? ToNumber(_argument_).
        1. If _number_ is *NaN*, *+0*<sub>𝔽</sub>, or *-0*<sub>𝔽</sub>, return 0.
        1. If _number_ is *+∞*<sub>𝔽</sub>, return +∞.
        1. If _number_ is *-∞*<sub>𝔽</sub>, return -∞.
        1. Let _integer_ be floor(abs(ℝ(_number_))).
        1. If _number_ < *+0*<sub>𝔽</sub>, set _integer_ to -_integer_.
        1. Return _integer_.