def SetIntegrityLevel(O, level) = 0:{
  0:assert (= (typeof O) Object)
  1:assert (|| (= level ~sealed~) (= level ~frozen~))
  2:app __x0__ = (O.PreventExtensions O)
  2:let status = [? __x0__]
  3:if (= status false) 3:return false else 3:{}
  4:app __x1__ = (O.OwnPropertyKeys O)
  4:let keys = [? __x1__]
  5:if (= level ~sealed~) 5:{
    6:let __x2__ = keys
    6:let __x3__ = 0i
    6:while (< __x3__ __x2__.length) 6:{
      6:let k = __x2__[__x3__]
      6:__x3__ = (+ __x3__ 1i)
      7:app __x4__ = (DefinePropertyOrThrow O k (new PropertyDescriptor("Configurable" -> false)))
      7:[? __x4__]
    }
  } else 7:{
    9:assert (= level ~frozen~)
    10:let __x5__ = keys
    10:let __x6__ = 0i
    10:while (< __x6__ __x5__.length) 10:{
      10:let k = __x5__[__x6__]
      10:__x6__ = (+ __x6__ 1i)
      11:app __x7__ = (O.GetOwnProperty O k)
      11:let currentDesc = [? __x7__]
      12:if (! (= currentDesc undefined)) 12:{
        13:app __x8__ = (IsAccessorDescriptor currentDesc)
        13:if (= __x8__ true) 14:let desc = (new PropertyDescriptor("Configurable" -> false)) else 13:let desc = (new PropertyDescriptor("Configurable" -> false, "Writable" -> false))
        17:app __x9__ = (DefinePropertyOrThrow O k desc)
        17:[? __x9__]
      } else 12:{}
    }
  }
  18:return true
}
- id: "sec-setintegritylevel"
- code:
        1. Assert: Type(_O_) is Object.
        1. Assert: _level_ is either ~sealed~ or ~frozen~.
        1. Let _status_ be ? _O_.[[PreventExtensions]]().
        1. If _status_ is *false*, return *false*.
        1. Let _keys_ be ? _O_.[[OwnPropertyKeys]]().
        1. If _level_ is ~sealed~, then
          1. For each element _k_ of _keys_, do
            1. Perform ? DefinePropertyOrThrow(_O_, _k_, PropertyDescriptor { [[Configurable]]: *false* }).
        1. Else,
          1. Assert: _level_ is ~frozen~.
          1. For each element _k_ of _keys_, do
            1. Let _currentDesc_ be ? _O_.[[GetOwnProperty]](_k_).
            1. If _currentDesc_ is not *undefined*, then
              1. If IsAccessorDescriptor(_currentDesc_) is *true*, then
                1. Let _desc_ be the PropertyDescriptor { [[Configurable]]: *false* }.
              1. Else,
                1. Let _desc_ be the PropertyDescriptor { [[Configurable]]: *false*, [[Writable]]: *false* }.
              1. Perform ? DefinePropertyOrThrow(_O_, _k_, _desc_).
        1. Return *true*.