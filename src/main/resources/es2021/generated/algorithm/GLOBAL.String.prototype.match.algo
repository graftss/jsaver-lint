def [BUILTIN] String.prototype.match(regexp) = 0:{
  0:app __x0__ = (RequireObjectCoercible this)
  0:let O = [? __x0__]
  1:if (! (|| (= regexp undefined) (= regexp null))) 1:{
    2:app __x1__ = (GetMethod regexp SYMBOL_match)
    2:let matcher = [? __x1__]
    3:if (! (= matcher undefined)) 3:{
      4:app __x2__ = (Call matcher regexp (new [O]))
      4:return [? __x2__]
    } else 3:{}
  } else 1:{}
  5:app __x3__ = (ToString O)
  5:let S = [? __x3__]
  6:app __x4__ = (RegExpCreate regexp undefined)
  6:let rx = [? __x4__]
  7:app __x5__ = (Invoke rx SYMBOL_match (new [S]))
  7:return [? __x5__]
}
- id: "sec-string.prototype.match"
- code:
          1. Let _O_ be ? RequireObjectCoercible(*this* value).
          1. If _regexp_ is neither *undefined* nor *null*, then
            1. Let _matcher_ be ? GetMethod(_regexp_, @@match).
            1. If _matcher_ is not *undefined*, then
              1. Return ? Call(_matcher_, _regexp_, « _O_ »).
          1. Let _S_ be ? ToString(_O_).
          1. Let _rx_ be ? RegExpCreate(_regexp_, *undefined*).
          1. Return ? Invoke(_rx_, @@match, « _S_ »).