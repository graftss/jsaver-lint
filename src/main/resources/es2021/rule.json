[
  {
    "tokens": "If no such execution context exists , return value:{null} . Otherwise , return id:{ec} ' s ScriptOrModule .",
    "inst": "if (= ec null) return null else return ec.ScriptOrModule"
  },
  {
    "tokens": "Create an immutable binding in id:{envRec} for id:{N} and record that it is uninitialized . If id:{S} is value:{true} , record that the newly created binding is a strict binding .",
    "inst": "envRec.SubMap[N] = (new ImmutableBinding(\"initialized\" -> false, \"strict\" -> S))"
  },
  {
    "tokens": "Let id:{internalSlotsList} be the internal slots listed in link:{table-internal-slots-of-ecmascript-function-objects} .",
    "inst": "let internalSlotsList = (new [\"Environment\", \"FormalParameters\", \"ECMAScriptCode\", \"ConstructorKind\", \"Realm\", \"ScriptOrModule\", \"ThisMode\", \"Strict\", \"HomeObject\", \"SourceText\", \"IsClassConstructor\"])"
  },
  {
    "tokens": "Let id:{ec} be the topmost execution context on the execution context stack whose ScriptOrModule component is not value:{null} .",
    "inst": "{ let ec = null let idx = EXECUTION_STACK.length while (&& (= ec null) (< 0i idx)) { idx = (- idx 1i) ec = EXECUTION_STACK[idx] if (= ec.ScriptOrModule absent) ec = null else {} } }"
  },
  {
    "tokens": "Return the String value consisting of the code units of the digits of the decimal representation of id:{x} .",
    "inst": "return (convert x num2str)"
  },
  {
    "tokens": "Set id:{constructor} to ParseText ( id:{constructorText} , | MethodDefinition [ ~ Yield , ~ Await ] | ) .",
    "inst": "constructor = (parse-syntax constructorText \"MethodDefinition\" false false)"
  },
  {
    "tokens": "If id:{declarationNames} does not include the element value:{\"*default*\"} , append value:{\"*default*\"} to id:{declarationNames} .",
    "inst": "if (contains declarationNames \"*default*\") {} else append \"*default*\" -> declarationNames"
  },
  {
    "tokens": "Append to id:{moduleNames} each element of id:{additionalNames} that is not already an element of id:{moduleNames} .",
    "inst": "{ let __i__ = 0i while (< __i__ additionalNames.length) if (contains moduleNames additionalNames[__i__]) {} else append additionalNames[__i__] -> moduleNames }"
  },
  {
    "tokens": "If id:{envRec} has a binding for the name that is the value of id:{N} , return value:{true} .",
    "inst": "if (= envRec.SubMap[N] absent) {} else return true"
  },
  {
    "tokens": "Let id:{mv} be ( the MV of nt:{NonZeroDigit} × 10 ) plus the MV of nt:{DecimalDigits} .",
    "inst": "{ access __nzd__ = (NonZeroDigit \"MV\") access __dds__ = (DecimalDigits \"MV\") let mv = (+ (* __nzd__ 10) __dds__) }"
  },
  {
    "tokens": "Set id:{proto} to id:{realm} ' s intrinsic object named id:{intrinsicDefaultProto} .",
    "inst": "proto = INTRINSICS[intrinsicDefaultProto]"
  },
  {
    "tokens": "Let id:{parseResult} be ParseText ( id:{patternText} , | Pattern [ ~ U , ~ N ] | ) .",
    "inst": "let parseResult = (parse-syntax patternText \"Pattern\" false false)"
  },
  {
    "tokens": "Let id:{parseResult} be ParseText ( id:{patternText} , | Pattern [ + U , + N ] | ) .",
    "inst": "let parseResult = (parse-syntax patternText \"Pattern\" true true)"
  },
  {
    "tokens": "If id:{parseResult} is a Parse Node and id:{parseResult} contains a nt:{GroupName} , then in:{} out:{}",
    "inst": "parseResult = (parse-syntax patternText \"Pattern\" false true)"
  },
  {
    "tokens": "If id:{O} is not value:{undefined} , create an own data property named id:{P} of object id:{O} whose [ [ Value ] ] , [ [ Writable ] ] , [ [ Enumerable ] ] , and [ [ Configurable ] ] attribute values are described by id:{Desc} . If the value of an attribute field of id:{Desc} is absent , the attribute of the newly created property is set to its < emu - xref href = \" # table - default - attribute - values \" > default value < / emu - xref > .",
    "inst": "if (! (= O undefined)) { let dp = (new DataProperty()) if (! (= absent Desc.Value)) dp.Value = Desc.Value else dp.Value = undefined if (! (= absent Desc.Writable)) dp.Writable = Desc.Writable else dp.Writable = false if (! (= absent Desc.Enumerable)) dp.Enumerable = Desc.Enumerable else dp.Enumerable = false if (! (= absent Desc.Configurable)) dp.Configurable = Desc.Configurable else dp.Configurable = false O.SubMap[P] = dp } else {}"
  },
  {
    "tokens": "If id:{O} is not value:{undefined} , create an own accessor property named id:{P} of object id:{O} whose [ [ Get ] ] , [ [ Set ] ] , [ [ Enumerable ] ] , and [ [ Configurable ] ] attribute values are described by id:{Desc} . If the value of an attribute field of id:{Desc} is absent , the attribute of the newly created property is set to its < emu - xref href = \" # table - default - attribute - values \" > default value < / emu - xref > .",
    "inst": "if (! (= O undefined)) { let ap = (new AccessorProperty()) if (= Desc.Get absent) ap.Get = undefined else ap.Get = Desc.Get if (= Desc.Set absent) ap.Set = undefined else ap.Set = Desc.Set if (= Desc.Enumerable absent) ap.Enumerable = false else ap.Enumerable = Desc.Enumerable if (= Desc.Configurable absent) ap.Configurable = false else ap.Configurable = Desc.Configurable O.SubMap[P] = ap } else {}"
  },
  {
    "tokens": "If id:{O} is not value:{undefined} , convert the property named id:{P} of object id:{O} from a data property to an accessor property . Preserve the existing values of the converted property ' s [ [ Configurable ] ] and [ [ Enumerable ] ] attributes and set the rest of the property ' s attributes to their < emu - xref href = \" # table - default - attribute - values \" > default values < / emu - xref > .",
    "inst": "if (! (= O undefined)) { let dp = O.SubMap[P] O.SubMap[P] = (new AccessorProperty(\"Get\" -> undefined, \"Set\" -> undefined, \"Configurable\" -> dp.Configurable, \"Enumerable\" -> dp.Enumerable)) } else {}"
  },
  {
    "tokens": "If id:{O} is not value:{undefined} , convert the property named id:{P} of object id:{O} from an accessor property to a data property . Preserve the existing values of the converted property ' s [ [ Configurable ] ] and [ [ Enumerable ] ] attributes and set the rest of the property ' s attributes to their < emu - xref href = \" # table - default - attribute - values \" > default values < / emu - xref > .",
    "inst": "if (! (= O undefined)) { let ap = O.SubMap[P] O.SubMap[P] = (new DataProperty(\"Value\" -> undefined, \"Writable\" -> false, \"Configurable\" -> ap.Configurable, \"Enumerable\" -> ap.Enumerable)) } else {}"
  },
  {
    "tokens": "Set id:{obj} . [ [ RegExpMatcher ] ] to the Abstract Closure that evaluates id:{parseResult} by applying the semantics provided in link:{sec-pattern-semantics} using id:{patternCharacters} as the pattern ' s List of nt:{SourceCharacter} values and id:{F} as the flag parameters .",
    "inst": "obj.RegExpMatcher = null"
  },
  {
    "tokens": "Let id:{name} be the string that is the only element of BoundNames of nt:{SingleNameBinding} .",
    "inst": "{ access __snb__ = (SingleNameBinding \"BoundNames\") let name = __snb__[0i] }"
  },
  {
    "tokens": "If id:{argument} is value:{true} , return value:{1} . If id:{argument} is value:{false} , return value:{+0} .",
    "inst": "{if (= argument true) return 1i else {} if (= argument false) return 0i else {}}"
  },
  {
    "tokens": "Return a new Boolean object whose [ [ BooleanData ] ] internal slot is set to id:{argument} . See link:{sec-boolean-objects} for a description of Boolean objects .",
    "inst": "{let obj = (new OrdinaryObject(\"Prototype\" -> INTRINSICS[\"%Boolean.prototype%\"], \"BooleanData\" -> argument, \"Extensible\" -> true)) return obj}"
  },
  {
    "tokens": "Return a new Number object whose [ [ NumberData ] ] internal slot is set to id:{argument} . See link:{sec-number-objects} for a description of Number objects .",
    "inst": "{let obj = (new OrdinaryObject(\"Prototype\" -> INTRINSICS[\"%Number.prototype%\"], \"NumberData\" -> argument, \"Extensible\" -> true)) return obj}"
  },
  {
    "tokens": "Return a new String object whose [ [ StringData ] ] internal slot is set to id:{argument} . See link:{sec-string-objects} for a description of String objects .",
    "inst": "{let obj = (new StringExoticObject(\"Prototype\" -> INTRINSICS[\"%String.prototype%\"], \"StringData\" -> argument, \"Extensible\" -> true)) obj.SubMap.length = (new DataProperty(\"Value\" -> argument.length, \"Writable\" -> false, \"Enumerable\" -> false, \"Configurable\" -> false)) return obj}"
  },
  {
    "tokens": "Return a new Symbol object whose [ [ SymbolData ] ] internal slot is set to id:{argument} . See link:{sec-symbol-objects} for a description of Symbol objects .",
    "inst": "{let obj = (new OrdinaryObject(\"Prototype\" -> INTRINSICS[\"%Symbol.prototype%\"], \"SymbolData\" -> argument, \"Extensible\" -> true)) return obj}"
  },
  {
    "tokens": "Return a new BigInt object whose [ [ BigIntData ] ] internal slot is set to id:{argument} . See link:{sec-bigint-objects} for a description of BigInt objects .",
    "inst": "{let obj = (new OrdinaryObject(\"Prototype\" -> INTRINSICS[\"%BigInt.prototype%\"], \"BigIntData\" -> argument, \"Extensible\" -> true)) return obj}"
  },
  {
    "tokens": "Let id:{operation} be the abstract operation associated with id:{opText} in the following table : in:{} out:{}",
    "inst": "{ let m = PRIMITIVE[T] if (= opText \"**\") let operation = m.exponentiate else if (= opText \"*\") let operation = m.multiply else if (= opText \"/\") let operation = m.divide else if (= opText \"%\") let operation = m.remainder else if (= opText \"+\") let operation = m.add else if (= opText \"-\") let operation = m.subtract else if (= opText \"<<\") let operation = m.leftShift else if (= opText \">>\") let operation = m.signedRightShift else if (= opText \">>>\") let operation = m.unsignedRightShift else if (= opText \"&\") let operation = m.bitwiseAND else if (= opText \"^\") let operation = m.bitwiseXOR else if (= opText \"|\") let operation = m.bitwiseOR else return 0i }"
  },
  {
    "tokens": "Let id:{lbits} be the 32 - bit two ' s complement bit string representing ℝ ( id:{lnum} ) .",
    "inst": "let lbits = lnum"
  },
  {
    "tokens": "Let id:{rbits} be the 32 - bit two ' s complement bit string representing ℝ ( id:{rnum} ) .",
    "inst": "let rbits = rnum"
  },
  {
    "tokens": "Else , id:{op} is code:{|} . Let id:{result} be the result of applying the bitwise inclusive OR operation to id:{lbits} and id:{rbits} .",
    "inst": "if (= op \"|\") let result = (| lbits rbits) else {}"
  },
  {
    "tokens": "Return the Number value for the integer represented by the 32 - bit two ' s complement bit string id:{result} .",
    "inst": "return result"
  },
  {
    "tokens": "Let id:{r} be the BigInt defined by the mathematical relation id:{r} = id:{n} - ( id:{d} × id:{q} ) where id:{q} is a BigInt that is negative only if id:{n} / id:{d} is negative and positive only if id:{n} / id:{d} is positive , and whose magnitude is as large as possible without exceeding the magnitude of the true mathematical quotient of id:{n} and id:{d} .",
    "inst": "let r = (% n d)"
  },
  {
    "tokens": "Let id:{elementType} be the Element Type value in link:{table-the-typedarray-constructors} for id:{arrayTypeName} .",
    "inst": "let elementType = ~Int8~"
  },
  {
    "tokens": "Return a List whose elements are id:{head} followed by the elements of id:{tail} .",
    "inst": "{ let list = (copy-obj tail) prepend head -> list return list }"
  },
  {
    "tokens": "Let id:{internalSlotsList} be the internal slots listed in link:{table-internal-slots-of-module-namespace-exotic-objects} .",
    "inst": "let internalSlotsList = (new [\"Module\", \"Exports\", \"Prototype\"])"
  },
  {
    "tokens": "Let id:{sortedExports} be a List whose elements are the elements of id:{exports} ordered as if an Array of the same values had been sorted using % Array . prototype . sort % using value:{undefined} as id:{comparefn} .",
    "inst": "let sortedExports = (copy-obj exports)"
  },
  {
    "tokens": "Return an Iterator object ( link:{sec-iterator-interface} ) whose code:{next} method iterates over all the String - valued keys of enumerable properties of id:{O} . The iterator object is never directly accessible to ECMAScript code . The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below .",
    "inst": "{ app iterator = (CreateForInIterator O) return iterator }"
  },
  {
    "tokens": "Return the result of appending to id:{declarations} the elements of the VarScopedDeclarations of the second nt:{CaseClauses} .",
    "inst": "{ access decls = (CaseClauses1 \"VarScopedDeclarations\") let __i__ = 0i while (< __i__ decls.length) { append decls[__i__] -> declarations __i__ = (+ __i__ 1i) } return decls }"
  },
  {
    "tokens": "Return the result of appending to id:{names} the elements of the VarDeclaredNames of the second nt:{CaseClauses} .",
    "inst": "{ access __names__ = (CaseClauses1 \"VarDeclaredNames\") let __i__ = 0i while (< __i__ __names__.length) { append __names__[__i__] -> names __i__ = (+ __i__ 1i) } return names }"
  },
  {
    "tokens": "Create own properties of id:{M} corresponding to the definitions in link:{sec-module-namespace-objects} .",
    "inst": "M.SubMap = (new SubMap())"
  },
  {
    "tokens": "Let id:{uncheckedResultKeys} be a List whose elements are the elements of id:{trapResult} .",
    "inst": "let uncheckedResultKeys = (copy-obj trapResult)"
  },
  {
    "tokens": "Let id:{x32} be the result of converting id:{x} to a value in IEEE 754 - 2019 binary32 format using roundTiesToEven mode .",
    "inst": "app x32 = (fround x)"
  },
  {
    "tokens": "Let id:{x64} be the result of converting id:{x32} to a value in IEEE 754 - 2019 binary64 format .",
    "inst": "let x64 = x32"
  },
  {
    "tokens": "Let id:{func} be a new built - in function object that when called performs the action described by id:{steps} . The new function object has internal slots whose names are the elements of id:{internalSlotsList} .",
    "inst": "let func = (new BuiltinFunctionObject())"
  },
  {
    "tokens": "Let id:{steps} be the algorithm steps defined in ListIterator code:{next} ( ListIteratornext ) .",
    "inst": "let steps = ListIteratornext"
  },
  {
    "tokens": "Let id:{func} be a new built - in function object that when called performs the action described by id:{steps} . The new function object has internal slots whose names are the elements of id:{internalSlotsList} . The initial value of each of those internal slots is value:{undefined} .",
    "inst": "let func = (new BuiltinFunctionObject())"
  },
  {
    "tokens": "Let id:{internalSlotsList} be the internal slots listed in link:{table-internal-slots-of-bound-function-exotic-objects} , plus [ [ Prototype ] ] and [ [ Extensible ] ] .",
    "inst": "let internalSlotsList = (new [\"BoundTargetFunction\", \"BoundThis\", \"BoundArguments\", \"Prototype\", \"Extensible\"])"
  },
  {
    "tokens": "If the mathematical value of id:{x} is equal to the mathematical value of id:{y} , return value:{true} ; otherwise return value:{false} .",
    "inst": "return (= x y)"
  },
  {
    "tokens": "Return { [ [ Job ] ] : id:{job} , [ [ Realm ] ] : id:{handlerRealm} } .",
    "inst": "return (new Record(\"Job\" -> job, \"Realm\" -> handlerRealm))"
  },
  {
    "tokens": "Record that the binding for id:{N} in id:{envRec} has been initialized .",
    "inst": "envRec.SubMap[N].initialized = true"
  },
  {
    "tokens": "It is an early Reference Error if AssignmentTargetType of nt:{UnaryExpression} is const:{invalid} .",
    "inst": "{ access __att__ = (UnaryExpression \"AssignmentTargetType\") if (= __att__ ~invalid~) throw ReferenceError else {} }"
  },
  {
    "tokens": "Perform ! DefinePropertyOrThrow ( id:{obj} , @ @ iterator , PropertyDescriptor { [ [ Value ] ] : % ArrayProto _ values % , [ [ Writable ] ] : value:{true} , [ [ Enumerable ] ] : value:{false} , [ [ Configurable ] ] : value:{true} } ) .",
    "inst": "app __x10__ = (DefinePropertyOrThrow obj SYMBOL_iterator (new PropertyDescriptor(\"Value\" -> INTRINSICS[\"%Array.prototype.values\"], \"Writable\" -> true, \"Enumerable\" -> false, \"Configurable\" -> true)))"
  },
  {
    "tokens": "If every field in id:{Desc} is absent , return value:{true} .",
    "inst": "if (&& (= absent Desc[\"Value\"]) (&& (= absent Desc[\"Writable\"]) (&& (= absent Desc[\"Get\"]) (&& (= absent Desc[\"Set\"]) (&& (= absent Desc[\"Enumerable\"]) (=     absent Desc[\"Configurable\"])))))) return true else {}"
  },
  {
    "tokens": "Set fields of id:{intrinsics} with the values listed in link:{table-well-known-intrinsic-objects} . The field names are the names listed in column one of the table . The value of each field is a new object value fully and recursively populated with property values as defined by the specification of each object in clauses link:{sec-global-object} through link:{sec-reflection} . All object property values are newly created object values . All values that are built - in function objects are created by performing CreateBuiltinFunction ( id:{steps} , id:{length} , id:{name} , id:{slots} , id:{realmRec} , id:{prototype} ) where id:{steps} is the definition of that function provided by this specification , id:{name} is the initial value of the function ' s code:{name} property , id:{length} is the initial value of the function ' s code:{length} property , id:{slots} is a list of the names , if any , of the function ' s specified internal slots , and id:{prototype} is the specified value of the function ' s [ [ Prototype ] ] internal slot . The creation of the intrinsics and their properties must be ordered to avoid any dependencies upon objects that have not yet been created .",
    "inst": "{ realmRec.Intrinsics = INTRINSICS intrinsics = INTRINSICS }"
  },
  {
    "tokens": "For each field of id:{Desc} that is present , set the corresponding attribute of the property named id:{P} of object id:{O} to the value of the field .",
    "inst": "{ let __keys__ = (map-keys Desc) let __i__ = 0i while (< __i__ __keys__.length) { let __key__ = __keys__[__i__] O.SubMap[P][__key__] = Desc[__key__] __i__ = (+ __i__ 1i) } }"
  },
  {
    "tokens": "If the host requires use of an exotic object to serve as id:{realm} ' s global object , let id:{global} be such an object created in a host - defined manner . Otherwise , let id:{global} be value:{undefined} , indicating that an ordinary object should be created as the global object .",
    "inst": "let global = undefined"
  },
  {
    "tokens": "If the host requires that the code:{this} binding in id:{realm} ' s global scope return an object other than the global object , let id:{thisValue} be such an object created in a host - defined manner . Otherwise , let id:{thisValue} be value:{undefined} , indicating that id:{realm} ' s global code:{this} binding should be the global object .",
    "inst": "let thisValue = undefined"
  },
  {
    "tokens": "For each property of the Global Object specified in clause link:{sec-global-object} , do in:{} out:{}",
    "inst": "{ let __keys__ = (map-keys GLOBAL.SubMap) let __i__ = 0i while (< __i__ __keys__[\"length\"]) { let name = __keys__[__i__] let desc = GLOBAL.SubMap[name] global.SubMap[name] = GLOBAL.SubMap[name] __i__ = (+ __i__ 1i) } global[\"SubMap\"][\"globalThis\"][\"Value\"] = global }"
  },
  {
    "tokens": "Create any host - defined global object properties on id:{globalObj} .",
    "inst": "{}"
  },
  {
    "tokens": "Let id:{result} be the Completion Record that is the result of evaluating id:{F} in a manner that conforms to the specification of id:{F} . id:{thisArgument} is the value:{this} value , id:{argumentsList} provides the named parameters , and the NewTarget value is value:{undefined} .",
    "inst": "app result = (F.Code thisArgument argumentsList undefined)"
  },
  {
    "tokens": "Return the String representation of this Number value using the radix specified by id:{radixMV} . Letters code:{a} - code:{z} are used for digits with values 10 through 35 . The precise algorithm is implementation - defined , however the algorithm should be a generalization of that specified in link:{sec-numeric-types-number-tostring} .",
    "inst": "return (convert x num2str radixMV)"
  },
  {
    "tokens": "If id:{x} and id:{y} are exactly the same sequence of code units ( same length and same code units at corresponding indices ) , return value:{true} ; otherwise , return value:{false} .",
    "inst": "return (= x y)"
  },
  {
    "tokens": "Create a mutable binding in id:{envRec} for id:{N} and record that it is uninitialized . If id:{D} is value:{true} , record that the newly created binding may be deleted by a subsequent DeleteBinding call .",
    "inst": "{ envRec.SubMap[N] = (new MutableBinding(\"initialized\" -> false)) if (= D true) envRec.SubMap[N].maybeDeleted = true else {} }"
  },
  {
    "tokens": "If the binding for id:{N} in id:{envRec} is an uninitialized binding , throw a value:{ReferenceError} exception .",
    "inst": "if (! envRec.SubMap[N].initialized) throw ReferenceError else {}"
  },
  {
    "tokens": "If id:{call} is not contained within a nt:{FunctionBody} , nt:{ConciseBody} , or nt:{AsyncConciseBody} , return value:{false} .",
    "inst": "{ let __contained__ = false let body = call while (&& (! __contained__) (! (= body absent))) { __contained__ = (|| __contained__ (is-instance-of body FunctionBody)) __contained__ = (|| __contained__ (is-instance-of body ConciseBody)) __contained__ = (|| __contained__ (is-instance-of body AsyncConciseBody)) access body = (body \"parent\") } if (! __contained__) return false else {} }"
  },
  {
    "tokens": "If id:{q} can be the string - concatenation of id:{p} and some other String id:{r} , return value:{true} . Otherwise , return value:{false} .",
    "inst": "return (< p q)"
  },
  {
    "tokens": "Let id:{opText} be the sequence of Unicode code points associated with id:{assignmentOpText} in the following table : in:{} out:{}",
    "inst": "let opText = (- assignmentOpText 1i)"
  },
  {
    "tokens": "If nt:{ScriptBody} is present and the Directive Prologue of nt:{ScriptBody} contains a Use Strict Directive , return value:{true} ; otherwise , return value:{false} .",
    "inst": "return true"
  },
  {
    "tokens": "Let id:{steps} be the algorithm steps defined in link:{sec-getcapabilitiesexecutor-functions} .",
    "inst": "let steps = ALGORITHM[\"GLOBAL.GetCapabilitiesExecutorFunctions\"]"
  },
  {
    "tokens": "Let id:{length} be the number of non - optional parameters of the function definition in link:{sec-getcapabilitiesexecutor-functions} .",
    "inst": "let length = 2i"
  },
  {
    "tokens": "Let id:{stepsResolve} be the algorithm steps defined in link:{sec-promise-resolve-functions} .",
    "inst": "let stepsResolve = ALGORITHM[\"GLOBAL.PromiseResolveFunctions\"]"
  },
  {
    "tokens": "Let id:{lengthResolve} be the number of non - optional parameters of the function definition in link:{sec-promise-resolve-functions} .",
    "inst": "let lengthResolve = 1i"
  },
  {
    "tokens": "Let id:{stepsReject} be the algorithm steps defined in link:{sec-promise-reject-functions} .",
    "inst": "let stepsReject = ALGORITHM[\"GLOBAL.PromiseRejectFunctions\"]"
  },
  {
    "tokens": "Let id:{lengthReject} be the number of non - optional parameters of the function definition in link:{sec-promise-reject-functions} .",
    "inst": "let lengthReject = 1i"
  },
  {
    "tokens": "Let id:{steps} be the algorithm steps defined in link:{sec-async-from-sync-iterator-value-unwrap-functions} .",
    "inst": "let steps = ALGORITHM[\"GLOBAL.AsyncfromSyncIteratorValueUnwrapFunctions\"]"
  },
  {
    "tokens": "Let id:{length} be the number of non - optional parameters of the function definition in link:{sec-async-from-sync-iterator-value-unwrap-functions} .",
    "inst": "let length = 1i"
  },
  {
    "tokens": "Let id:{stepsFulfilled} be the algorithm steps defined in link:{async-generator-resume-next-return-processor-fulfilled} .",
    "inst": "let stepsFulfilled = ALGORITHM[\"GLOBAL.AsyncGeneratorResumeNextReturnProcessorFulfilledFunctions\"]"
  },
  {
    "tokens": "Let id:{lengthFulfilled} be the number of non - optional parameters of the function definition in link:{async-generator-resume-next-return-processor-fulfilled} .",
    "inst": "let lengthFulfilled = 1i"
  },
  {
    "tokens": "Let id:{stepsRejected} be the algorithm steps defined in link:{async-generator-resume-next-return-processor-rejected} .",
    "inst": "let stepsRejected = ALGORITHM[\"GLOBAL.AsyncGeneratorResumeNextReturnProcessorRejectedFunctions\"]"
  },
  {
    "tokens": "Let id:{lengthRejected} be the number of non - optional parameters of the function definition in link:{async-generator-resume-next-return-processor-rejected} .",
    "inst": "let lengthRejected = 1i"
  },
  {
    "tokens": "Let id:{stepsFulfilled} be the algorithm steps defined in link:{await-fulfilled} .",
    "inst": "let stepsFulfilled = ALGORITHM[\"GLOBAL.AwaitFulfilledFunctions\"]"
  },
  {
    "tokens": "Let id:{lengthFulfilled} be the number of non - optional parameters of the function definition in link:{await-fulfilled} .",
    "inst": "let lengthFulfilled = 1i"
  },
  {
    "tokens": "Let id:{stepsRejected} be the algorithm steps defined in link:{await-rejected} .",
    "inst": "let stepsRejected = ALGORITHM[\"GLOBAL.AwaitRejectedFunctions\"]"
  },
  {
    "tokens": "Let id:{lengthRejected} be the number of non - optional parameters of the function definition in link:{await-rejected} .",
    "inst": "let lengthRejected = 1i"
  },
  {
    "tokens": "Let id:{stepsDefine} be the algorithm steps defined in link:{sec-create-data-property-on-object-functions} .",
    "inst": "let stepsDefine = ALGORITHM[\"GLOBAL.CreateDataPropertyOnObjectFunctions\"]"
  },
  {
    "tokens": "Let id:{lengthDefine} be the number of non - optional parameters of the function definition in link:{sec-create-data-property-on-object-functions} .",
    "inst": "let lengthDefine = 2i"
  },
  {
    "tokens": "Let id:{stepsThenFinally} be the algorithm steps defined in link:{sec-thenfinallyfunctions} .",
    "inst": "let stepsThenFinally = ALGORITHM[\"GLOBAL.ThenFinallyFunctions\"]"
  },
  {
    "tokens": "Let id:{lengthThenFinally} be the number of non - optional parameters of the function definition in link:{sec-thenfinallyfunctions} .",
    "inst": "let lengthThenFinally = 1i"
  },
  {
    "tokens": "Let id:{stepsCatchFinally} be the algorithm steps defined in link:{sec-catchfinallyfunctions} .",
    "inst": "let stepsCatchFinally = ALGORITHM[\"GLOBAL.CatchFinallyFunctions\"]"
  },
  {
    "tokens": "Let id:{lengthCatchFinally} be the number of non - optional parameters of the function definition in link:{sec-catchfinallyfunctions} .",
    "inst": "let lengthCatchFinally = 1i"
  },
  {
    "tokens": "Let id:{steps} be the algorithm steps defined in link:{sec-default-constructor-functions} .",
    "inst": "let steps = ALGORITHM[\"GLOBAL.DefaultConstructorFunctions\"]"
  },
  {
    "tokens": "Let id:{steps} be the algorithm steps defined in link:{sec-proxy-revocation-functions} .",
    "inst": "let steps = ALGORITHM[\"GLOBAL.ProxyRevocationFunctions\"]"
  },
  {
    "tokens": "Let id:{length} be the number of non - optional parameters of the function definition in link:{sec-proxy-revocation-functions} .",
    "inst": "let length = 0i"
  },
  {
    "tokens": "Let id:{func} be a new built - in function object that when called performs the action described by id:{steps} . The new function object has internal slots whose names are the elements of id:{internalSlotsList} , and an [ [ InitialName ] ] internal slot .",
    "inst": "{ let func = (new BuiltinFunctionObject()) func.Code = steps }"
  },
  {
    "tokens": "Let id:{thrower} be equivalent to a function that throws id:{reason} .",
    "inst": "{ clo closure = (this, V, argumentsList)[reason] => { app thrown = (ThrowCompletion reason) return thrown } let thrower = (new OrdinaryObject(\"Call\" -> closure )) }"
  },
  {
    "tokens": "Let id:{valueThunk} be equivalent to a function that returns id:{value} .",
    "inst": "{ clo closure = (this, V, argumentsList)[value] => return value let valueThunk = (new OrdinaryObject(\"Call\" -> closure)) }"
  },
  {
    "tokens": "If id:{N} is an element of id:{varNames} , remove that element from the id:{varNames} .",
    "inst": "{ let i = 0i while (&& (< i varNames.length) (! (= varNames[i] N))) i = (+ i 1i) if (< i varNames.length) (pop varNames i) else {} }"
  },
  {
    "tokens": "Return a new unique Symbol value whose [ [ Description ] ] value is id:{descString} .",
    "inst": "return (new 'descString)"
  },
  {
    "tokens": "Return a String according to link:{table-typeof-operator-results} .",
    "inst": "{ let t = (typeof val) if (= t Undefined) return \"undefined\" else if (= t Null) return \"object\" else if (= t Boolean) return \"boolean\" else if (= t Number) return \"number\" else if (= t String) return \"string\" else if (= t Symbol) return \"symbol\" else if (= t BigInt) return \"bigint\" else if (= t Object) { if (= val.Call absent) return \"object\" else return \"function\" } else ??? \"invalid for `typeof` operator\" }"
  },
  {
    "tokens": "Let id:{resultStr} be the String value of length 1 , containing one code unit from id:{str} , specifically the code unit at index ℝ ( id:{index} ) .",
    "inst": "let resultStr = str[index]"
  },
  {
    "tokens": "Return the String value of length 1 , containing one code unit from id:{S} , namely the code unit at index id:{position} .",
    "inst": "return S[position]"
  },
  {
    "tokens": "If Type ( id:{nextKey} ) is Symbol and id:{type} is const:{symbol} or Type ( id:{nextKey} ) is String and id:{type} is const:{string} , then in:{} out:{}",
    "inst": "if (|| (&& (= (typeof nextKey) Symbol) (= type ~symbol~)) (&& (= (typeof nextKey) String) (= type ~string~))) append nextKey -> nameList else {}"
  },
  {
    "tokens": "If there does not exist an element id:{v} of id:{visited} such that SameValue ( id:{r} , id:{v} ) is value:{true} , then in:{} out:{}",
    "inst": "if (! (contains visited r)) { app __x0__ = (object[\"GetOwnProperty\"] object r) let desc = [? __x0__] if (! (= desc undefined)) { append r -> visited if (= desc[\"Enumerable\"] true) { app __x1__ = (CreateIterResultObject r false) return __x1__ } else {} } else {} } else {}"
  }
]
