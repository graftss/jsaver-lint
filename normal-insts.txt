========================================
 parse phase
----------------------------------------
========================================
 analyze phase
----------------------------------------
let realmRec = REALM [7425] [Some(0)]
let intrinsics = (new Record()) [7248] [Some(0)]
realmRec.Intrinsics = intrinsics [7249] [Some(1)]
realmRec.Intrinsics = INTRINSICS [7250] [Some(2)]
intrinsics = INTRINSICS [7251] [Some(2)]
let thrower = realm.Intrinsics["%ThrowTypeError%"] [233] [Some(1)]
assert (= (typeof O) Object) [7961] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7963] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return false [22008] [Some(1)]
return true [21937] [Some(2)]
assert __x2__ [24592] [Some(8)]
D.Get = X.Get [24593] [Some(9)]
D.Set = X.Set [24594] [Some(10)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
return true [21937] [Some(2)]
return false [22008] [Some(1)]
return false [22029] [Some(2)]
return false [22008] [Some(1)]
return false [22008] [Some(1)]
assert (! (|| (= (typeof x) Number) (= (typeof x) BigInt))) [26816] [Some(0)]
assert (= (typeof x) (typeof y)) [26817] [Some(1)]
return true [26829] [Some(7)]
return [! __x1__] [26814] [Some(3)]
return false [22008] [Some(1)]
return false [22008] [Some(1)]
return true [21937] [Some(2)]
return true [21937] [Some(2)]
assert (&& (= [! __x15__] true) (= [! __x16__] true)) [29830] [Some(28)]
let __keys__ = (map-keys Desc) [29857] [Some(34)]
let __i__ = 0i [29858] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
return true [29865] [Some(35)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
let success = [? __x1__] [7965] [Some(2)]
return success [7969] [Some(4)]
[! __x0__] [235] [Some(2)]
assert (= (typeof O) Object) [7961] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7963] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return false [22008] [Some(1)]
return true [21937] [Some(2)]
assert __x2__ [24592] [Some(8)]
D.Get = X.Get [24593] [Some(9)]
D.Set = X.Set [24594] [Some(10)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
return true [21937] [Some(2)]
return false [22008] [Some(1)]
return false [22029] [Some(2)]
return false [22008] [Some(1)]
return false [22008] [Some(1)]
assert (! (|| (= (typeof x) Number) (= (typeof x) BigInt))) [26816] [Some(0)]
assert (= (typeof x) (typeof y)) [26817] [Some(1)]
return true [26829] [Some(7)]
return [! __x1__] [26814] [Some(3)]
return false [22008] [Some(1)]
return false [22008] [Some(1)]
return true [21937] [Some(2)]
return true [21937] [Some(2)]
assert (&& (= [! __x15__] true) (= [! __x16__] true)) [29830] [Some(28)]
let __keys__ = (map-keys Desc) [29857] [Some(34)]
let __i__ = 0i [29858] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
return true [29865] [Some(35)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
let success = [? __x1__] [7965] [Some(2)]
return success [7969] [Some(4)]
return [! __x1__] [237] [Some(3)]
__x0__ [7253] [Some(3)]
return intrinsics [7254] [Some(4)]
__x0__ [7427] [Some(1)]
realmRec.GlobalObject = undefined [7428] [Some(2)]
realmRec.GlobalEnv = undefined [7429] [Some(3)]
realmRec.TemplateMap = (new []) [7430] [Some(4)]
return realmRec [7431] [Some(5)]
let realm = __x0__ [21475] [Some(0)]
let newContext = (new ExecutionContext()) [21476] [Some(1)]
newContext.Function = null [21477] [Some(2)]
newContext.Realm = realm [21478] [Some(3)]
newContext.ScriptOrModule = null [21479] [Some(4)]
append newContext -> EXECUTION_STACK [21480] [Some(5)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [21481] [Some(5)]
let global = undefined [21482] [Some(6)]
let thisValue = undefined [21483] [Some(7)]
let intrinsics = realmRec.Intrinsics [27213] [Some(1)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
globalObj = [! __x0__] [27215] [Some(2)]
assert (= (typeof globalObj) Object) [27217] [Some(3)]
thisValue = globalObj [27219] [Some(4)]
realmRec.GlobalObject = globalObj [27221] [Some(5)]
let objRec = (new ObjectEnvironmentRecord("BindingObject" -> G, "withEnvironment" -> false)) [23754] [Some(0)]
let dclRec = (new DeclarativeEnvironmentRecord()) [23755] [Some(1)]
let env = (new GlobalEnvironmentRecord()) [23756] [Some(2)]
env.ObjectRecord = objRec [23757] [Some(3)]
env.GlobalThisValue = thisValue [23758] [Some(4)]
env.DeclarativeRecord = dclRec [23759] [Some(5)]
env.VarNames = (new []) [23760] [Some(6)]
env.OuterEnv = null [23761] [Some(7)]
return env [23762] [Some(8)]
let newGlobalEnv = __x1__ [27223] [Some(6)]
realmRec.GlobalEnv = newGlobalEnv [27224] [Some(7)]
return realmRec [27225] [Some(8)]
__x1__ [21485] [Some(8)]
let global = realmRec.GlobalObject [27127] [Some(0)]
let __keys__ = (map-keys GLOBAL.SubMap) [27128] [Some(1)]
let __i__ = 0i [27129] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
let name = __keys__[__i__] [27132] [Some(1)]
let desc = GLOBAL.SubMap[name] [27133] [Some(1)]
global.SubMap[name] = GLOBAL.SubMap[name] [27134] [Some(1)]
__i__ = (+ __i__ 1i) [27135] [Some(1)]
global.SubMap.globalThis.Value = global [27136] [Some(1)]
return global [27137] [Some(5)]
let globalObj = [? __x2__] [21487] [Some(9)]
return ~empty~ [21488] [Some(11)]
[? __x0__] [26767] [None]
let callerContext = CONTEXT [8317] [None]
let callerRealm = callerContext.Realm [8318] [None]
let callerScriptOrModule = callerContext.ScriptOrModule [8319] [None]
let pending = (new PendingJob("Job" -> job, "Arguments" -> arguments, "Realm" -> callerRealm, "ScriptOrModule" -> callerScriptOrModule, "HostDefined" -> undefined)) [8320] [None]
append pending -> JOB_QUEUE [8321] [None]
return ~empty~ [8322] [None]
let __x2__ = (- EXECUTION_STACK.length 1i) [26773] [None]
(pop EXECUTION_STACK __x2__) [26774] [None]
CONTEXT = null [26776] [None]
let nextQueue = JOB_QUEUE [26782] [None]
let nextPending = (pop nextQueue 0i) [26783] [None]
let newContext = (new ExecutionContext("SubMap" -> (new SubMap()))) [26784] [None]
newContext.Function = null [26785] [None]
newContext.Realm = nextPending.Realm [26786] [None]
newContext.ScriptOrModule = nextPending.ScriptOrModule [26787] [None]
append newContext -> EXECUTION_STACK [26788] [None]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [26789] [None]
let job = nextPending.Job [26790] [None]
let args = nextPending.Arguments [26791] [None]
let realm = REALM [26915] [None]
let body = sourceText [24886] [Some(1)]
return (new ScriptRecord("Realm" -> realm, "Environment" -> undefined, "ECMAScriptCode" -> body, "HostDefined" -> hostDefined)) [24887] [Some(3)]
let globalEnv = scriptRecord.Realm.GlobalEnv [26884] [Some(0)]
let scriptContext = (new ExecutionContext()) [26885] [Some(1)]
scriptContext.Function = null [26886] [Some(2)]
scriptContext.Realm = scriptRecord.Realm [26887] [Some(3)]
scriptContext.ScriptOrModule = scriptRecord [26888] [Some(4)]
scriptContext.VariableEnvironment = globalEnv [26889] [Some(5)]
scriptContext.LexicalEnvironment = globalEnv [26890] [Some(6)]
CONTEXT = null [26891] [Some(7)]
append scriptContext -> EXECUTION_STACK [26892] [Some(8)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [26893] [Some(8)]
let scriptBody = scriptRecord.ECMAScriptCode [26894] [Some(9)]
assert (is-instance-of env GlobalEnvironmentRecord) [20526] [Some(0)]
let ScriptBody = this [26868] [None]
let StatementListItem = this [27739] [None]
let LexicalDeclaration = this [22588] [None]
let LexicalBinding = this [22550] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [22552] [Some(0)]
return __x0__ [22590] [Some(0)]
return __x0__ [27746] [Some(2)]
let names = __x0__ [27846] [Some(0)]
let StatementListItem = this [27739] [None]
let LexicalDeclaration = this [22588] [None]
let LexicalBinding = this [22550] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [22552] [Some(0)]
return __x0__ [22590] [Some(0)]
return __x0__ [27746] [Some(2)]
let __x2__ = __x1__ [27848] [Some(1)]
let __x3__ = 0i [27849] [Some(1)]
let __x4__ = __x2__[__x3__] [27852] [Some(1)]
__x3__ = (+ __x3__ 1i) [27853] [Some(1)]
append __x4__ -> names [27854] [Some(1)]
return names [27855] [Some(2)]
let names = __x0__ [27846] [Some(0)]
let StatementListItem = this [27739] [None]
return (new []) [27743] [Some(1)]
let __x2__ = __x1__ [27848] [Some(1)]
let __x3__ = 0i [27849] [Some(1)]
return names [27855] [Some(2)]
let names = __x0__ [27846] [Some(0)]
let StatementListItem = this [27739] [None]
let LexicalDeclaration = this [22588] [None]
let LexicalBinding = this [22550] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [22552] [Some(0)]
return __x0__ [22590] [Some(0)]
return __x0__ [27746] [Some(2)]
let __x2__ = __x1__ [27848] [Some(1)]
let __x3__ = 0i [27849] [Some(1)]
let __x4__ = __x2__[__x3__] [27852] [Some(1)]
__x3__ = (+ __x3__ 1i) [27853] [Some(1)]
append __x4__ -> names [27854] [Some(1)]
return names [27855] [Some(2)]
return __x0__ [26870] [Some(0)]
let lexNames = __x0__ [20528] [Some(1)]
let ScriptBody = this [26876] [None]
let StatementListItem = this [27756] [None]
return (new []) [27763] [Some(2)]
let names = __x0__ [27870] [Some(0)]
let StatementListItem = this [27756] [None]
return (new []) [27763] [Some(2)]
let __x2__ = __x1__ [27872] [Some(1)]
let __x3__ = 0i [27873] [Some(1)]
return names [27879] [Some(2)]
let names = __x0__ [27870] [Some(0)]
let StatementListItem = this [27756] [None]
let FunctionDeclaration = this [11165] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [11167] [Some(0)]
return __x0__ [27761] [Some(1)]
let __x2__ = __x1__ [27872] [Some(1)]
let __x3__ = 0i [27873] [Some(1)]
let __x4__ = __x2__[__x3__] [27876] [Some(1)]
__x3__ = (+ __x3__ 1i) [27877] [Some(1)]
append __x4__ -> names [27878] [Some(1)]
return names [27879] [Some(2)]
let names = __x0__ [27870] [Some(0)]
let StatementListItem = this [27756] [None]
return (new []) [27763] [Some(2)]
let __x2__ = __x1__ [27872] [Some(1)]
let __x3__ = 0i [27873] [Some(1)]
return names [27879] [Some(2)]
return __x0__ [26878] [Some(0)]
let varNames = __x1__ [20530] [Some(2)]
let __x2__ = lexNames [20531] [Some(3)]
let __x3__ = 0i [20532] [Some(3)]
let name = __x2__[__x3__] [20535] [Some(3)]
__x3__ = (+ __x3__ 1i) [20536] [Some(3)]
let varDeclaredNames = envRec.VarNames [20804] [Some(0)]
return false [20808] [Some(2)]
let DclRec = envRec.DeclarativeRecord [20786] [Some(0)]
return false [7744] [Some(1)]
return __x0__ [20788] [Some(1)]
let ObjRec = envRec.ObjectRecord [20790] [Some(0)]
let globalObject = ObjRec.BindingObject [20791] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let existingProp = [? __x0__] [20793] [Some(2)]
return false [20795] [Some(3)]
let hasRestrictedGlobal = [? __x6__] [20546] [Some(6)]
let name = __x2__[__x3__] [20535] [Some(3)]
__x3__ = (+ __x3__ 1i) [20536] [Some(3)]
let varDeclaredNames = envRec.VarNames [20804] [Some(0)]
return false [20808] [Some(2)]
let DclRec = envRec.DeclarativeRecord [20786] [Some(0)]
return false [7744] [Some(1)]
return __x0__ [20788] [Some(1)]
let ObjRec = envRec.ObjectRecord [20790] [Some(0)]
let globalObject = ObjRec.BindingObject [20791] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let existingProp = [? __x0__] [20793] [Some(2)]
return false [20795] [Some(3)]
let hasRestrictedGlobal = [? __x6__] [20546] [Some(6)]
let name = __x2__[__x3__] [20535] [Some(3)]
__x3__ = (+ __x3__ 1i) [20536] [Some(3)]
let varDeclaredNames = envRec.VarNames [20804] [Some(0)]
return false [20808] [Some(2)]
let DclRec = envRec.DeclarativeRecord [20786] [Some(0)]
return false [7744] [Some(1)]
return __x0__ [20788] [Some(1)]
let ObjRec = envRec.ObjectRecord [20790] [Some(0)]
let globalObject = ObjRec.BindingObject [20791] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let existingProp = [? __x0__] [20793] [Some(2)]
return false [20795] [Some(3)]
let hasRestrictedGlobal = [? __x6__] [20546] [Some(6)]
let __x7__ = varNames [20550] [Some(8)]
let __x8__ = 0i [20551] [Some(8)]
let name = __x7__[__x8__] [20554] [Some(8)]
__x8__ = (+ __x8__ 1i) [20555] [Some(8)]
let DclRec = envRec.DeclarativeRecord [20786] [Some(0)]
return false [7744] [Some(1)]
return __x0__ [20788] [Some(1)]
let ScriptBody = this [26880] [None]
let StatementListItem = this [27765] [None]
return (new []) [27773] [Some(3)]
let declarations = __x0__ [27882] [Some(0)]
let StatementListItem = this [27765] [None]
return (new []) [27773] [Some(3)]
let __x2__ = __x1__ [27884] [Some(1)]
let __x3__ = 0i [27885] [Some(1)]
return declarations [27891] [Some(2)]
let declarations = __x0__ [27882] [Some(0)]
let StatementListItem = this [27765] [None]
let HoistableDeclaration = this [20849] [None]
return FunctionDeclaration [20850] [Some(0)]
let declaration = __x0__ [27770] [Some(1)]
return (new [declaration]) [27771] [Some(2)]
let __x2__ = __x1__ [27884] [Some(1)]
let __x3__ = 0i [27885] [Some(1)]
let __x4__ = __x2__[__x3__] [27888] [Some(1)]
__x3__ = (+ __x3__ 1i) [27889] [Some(1)]
append __x4__ -> declarations [27890] [Some(1)]
return declarations [27891] [Some(2)]
let declarations = __x0__ [27882] [Some(0)]
let StatementListItem = this [27765] [None]
return (new []) [27773] [Some(3)]
let __x2__ = __x1__ [27884] [Some(1)]
let __x3__ = 0i [27885] [Some(1)]
return declarations [27891] [Some(2)]
return __x0__ [26882] [Some(0)]
let varDeclarations = __x10__ [20561] [Some(10)]
let functionsToInitialize = (new []) [20562] [Some(11)]
let declaredFunctionNames = (new []) [20563] [Some(12)]
let __x11__ = varDeclarations [20564] [Some(13)]
let __x12__ = __x11__.length [20565] [Some(13)]
__x12__ = (- __x12__ 1i) [20568] [Some(13)]
let d = __x11__[__x12__] [20569] [Some(13)]
assert (|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration)) [20572] [Some(15)]
let FunctionDeclaration = this [11165] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [11167] [Some(0)]
let fn = __x13__[0i] [20574] [Some(17)]
let ObjRec = envRec.ObjectRecord [20659] [Some(0)]
let globalObject = ObjRec.BindingObject [20660] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let existingProp = [? __x0__] [20662] [Some(2)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
return [? __x1__] [20666] [Some(3)]
let fnDefinable = [? __x14__] [20578] [Some(19)]
append fn -> declaredFunctionNames [20582] [Some(21)]
prepend d -> functionsToInitialize [20583] [Some(22)]
let declaredVarNames = (new []) [20586] [Some(23)]
let __x15__ = varDeclarations [20587] [Some(24)]
let __x16__ = 0i [20588] [Some(24)]
let d = __x15__[__x16__] [20591] [Some(24)]
__x16__ = (+ __x16__ 1i) [20592] [Some(24)]
let ScriptBody = this [26872] [None]
let StatementListItem = this [27748] [None]
return (new [Declaration]) [27754] [Some(2)]
let declarations = __x0__ [27858] [Some(0)]
let StatementListItem = this [27748] [None]
return (new [Declaration]) [27754] [Some(2)]
let __x2__ = __x1__ [27860] [Some(1)]
let __x3__ = 0i [27861] [Some(1)]
let __x4__ = __x2__[__x3__] [27864] [Some(1)]
__x3__ = (+ __x3__ 1i) [27865] [Some(1)]
append __x4__ -> declarations [27866] [Some(1)]
return declarations [27867] [Some(2)]
let declarations = __x0__ [27858] [Some(0)]
let StatementListItem = this [27748] [None]
return (new []) [27752] [Some(1)]
let __x2__ = __x1__ [27860] [Some(1)]
let __x3__ = 0i [27861] [Some(1)]
return declarations [27867] [Some(2)]
let declarations = __x0__ [27858] [Some(0)]
let StatementListItem = this [27748] [None]
return (new [Declaration]) [27754] [Some(2)]
let __x2__ = __x1__ [27860] [Some(1)]
let __x3__ = 0i [27861] [Some(1)]
let __x4__ = __x2__[__x3__] [27864] [Some(1)]
__x3__ = (+ __x3__ 1i) [27865] [Some(1)]
append __x4__ -> declarations [27866] [Some(1)]
return declarations [27867] [Some(2)]
return __x0__ [26874] [Some(0)]
let lexDeclarations = __x21__ [20615] [Some(34)]
let __x22__ = lexDeclarations [20616] [Some(35)]
let __x23__ = 0i [20617] [Some(35)]
let d = __x22__[__x23__] [20620] [Some(35)]
__x23__ = (+ __x23__ 1i) [20621] [Some(35)]
let LexicalDeclaration = this [22588] [None]
let LexicalBinding = this [22550] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [22552] [Some(0)]
return __x0__ [22590] [Some(0)]
let __x25__ = __x24__ [20623] [Some(37)]
let __x26__ = 0i [20624] [Some(37)]
let dn = __x25__[__x26__] [20627] [Some(37)]
__x26__ = (+ __x26__ 1i) [20628] [Some(37)]
let LexicalDeclaration = this [22609] [None]
let LetOrConst = this [22533] [None]
return true [22534] [Some(0)]
return __x0__ [22611] [Some(0)]
let DclRec = envRec.DeclarativeRecord [20720] [Some(0)]
return false [7744] [Some(1)]
envRec.SubMap[N] = (new ImmutableBinding("initialized" -> false, "strict" -> S)) [7723] [Some(1)]
return ~empty~ [7724] [Some(2)]
return __x1__ [20726] [Some(2)]
[? __x28__] [20633] [Some(39)]
let d = __x22__[__x23__] [20620] [Some(35)]
__x23__ = (+ __x23__ 1i) [20621] [Some(35)]
let LexicalDeclaration = this [22588] [None]
let LexicalBinding = this [22550] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [22552] [Some(0)]
return __x0__ [22590] [Some(0)]
let __x25__ = __x24__ [20623] [Some(37)]
let __x26__ = 0i [20624] [Some(37)]
let dn = __x25__[__x26__] [20627] [Some(37)]
__x26__ = (+ __x26__ 1i) [20628] [Some(37)]
let LexicalDeclaration = this [22609] [None]
let LetOrConst = this [22530] [None]
return false [22531] [Some(0)]
return __x0__ [22611] [Some(0)]
let DclRec = envRec.DeclarativeRecord [20728] [Some(0)]
return false [7744] [Some(1)]
envRec.SubMap[N] = (new MutableBinding("initialized" -> false)) [7726] [Some(1)]
return ~empty~ [7730] [Some(2)]
return __x1__ [20734] [Some(2)]
[? __x29__] [20636] [Some(41)]
let d = __x22__[__x23__] [20620] [Some(35)]
__x23__ = (+ __x23__ 1i) [20621] [Some(35)]
let LexicalDeclaration = this [22588] [None]
let LexicalBinding = this [22550] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [22552] [Some(0)]
return __x0__ [22590] [Some(0)]
let __x25__ = __x24__ [20623] [Some(37)]
let __x26__ = 0i [20624] [Some(37)]
let dn = __x25__[__x26__] [20627] [Some(37)]
__x26__ = (+ __x26__ 1i) [20628] [Some(37)]
let LexicalDeclaration = this [22609] [None]
let LetOrConst = this [22533] [None]
return true [22534] [Some(0)]
return __x0__ [22611] [Some(0)]
let DclRec = envRec.DeclarativeRecord [20720] [Some(0)]
return false [7744] [Some(1)]
envRec.SubMap[N] = (new ImmutableBinding("initialized" -> false, "strict" -> S)) [7723] [Some(1)]
return ~empty~ [7724] [Some(2)]
return __x1__ [20726] [Some(2)]
[? __x28__] [20633] [Some(39)]
let __x30__ = functionsToInitialize [20637] [Some(42)]
let __x31__ = 0i [20638] [Some(42)]
let f = __x30__[__x31__] [20641] [Some(42)]
__x31__ = (+ __x31__ 1i) [20642] [Some(42)]
let FunctionDeclaration = this [11165] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [11167] [Some(0)]
let fn = __x32__[0i] [20644] [Some(43)]
let FunctionDeclaration = this [11229] [None]
let FunctionDeclaration = this [11233] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
let name = __x0__ [11235] [Some(0)]
let sourceText = (get-syntax FunctionDeclaration) [11236] [Some(1)]
assert (= (typeof functionPrototype) Object) [24522] [Some(0)]
let internalSlotsList = (new ["Environment", "FormalParameters", "ECMAScriptCode", "ConstructorKind", "Realm", "ScriptOrModule", "ThisMode", "Strict", "HomeObject", "SourceText", "IsClassConstructor"]) [24523] [Some(1)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let __x0__ = additionalInternalSlotsList [24683] [Some(1)]
let __x1__ = 0i [24684] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
let F = [! __x0__] [24525] [Some(2)]
F.Call = ALGORITHM["ECMAScriptFunctionObject.Call"] [24526] [Some(3)]
F.SourceText = sourceText [24527] [Some(4)]
F.FormalParameters = ParameterList [24528] [Some(5)]
F.ECMAScriptCode = Body [24529] [Some(6)]
let Strict = true [24531] [Some(7)]
F.Strict = Strict [24533] [Some(8)]
F.ThisMode = ~strict~ [24537] [Some(10)]
F.IsClassConstructor = false [24539] [Some(12)]
F.Environment = Scope [24540] [Some(13)]
let ec = null [20138] [Some(1)]
let idx = EXECUTION_STACK.length [20139] [Some(1)]
idx = (- idx 1i) [20142] [Some(1)]
ec = EXECUTION_STACK[idx] [20143] [Some(1)]
return ec.ScriptOrModule [20149] [Some(2)]
F.ScriptOrModule = __x1__ [24542] [Some(14)]
F.Realm = REALM [24543] [Some(15)]
F.HomeObject = undefined [24544] [Some(16)]
let FormalParameterList = this [10743] [None]
let SingleNameBinding = this [27418] [None]
return false [27419] [Some(0)]
return 1i [10748] [Some(1)]
let count = __x0__ [10770] [Some(0)]
let __x1__ = true [10771] [Some(1)]
let SingleNameBinding = this [27418] [None]
return false [27419] [Some(0)]
__x1__ = (= __x2__ true) [10773] [Some(1)]
let SingleNameBinding = this [27418] [None]
return false [27419] [Some(0)]
__x1__ = (= __x3__ true) [10778] [Some(10)]
return (+ count 1i) [10782] [Some(2)]
let count = __x0__ [10770] [Some(0)]
let __x1__ = true [10771] [Some(1)]
let SingleNameBinding = this [27418] [None]
return false [27419] [Some(0)]
let SingleNameBinding = this [27418] [None]
return false [27419] [Some(0)]
return __x1__ [10789] [Some(1)]
__x1__ = (= __x2__ true) [10773] [Some(1)]
let SingleNameBinding = this [27418] [None]
return false [27419] [Some(0)]
__x1__ = (= __x3__ true) [10778] [Some(10)]
return (+ count 1i) [10782] [Some(2)]
let len = __x2__ [24546] [Some(17)]
assert (= (typeof O) Object) [7961] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7963] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
let success = [? __x1__] [7965] [Some(2)]
return success [7969] [Some(4)]
return [! __x0__] [27140] [Some(1)]
[! __x3__] [24548] [Some(18)]
return F [24549] [Some(19)]
let F = __x1__ [11238] [Some(2)]
assert (|| (= (typeof name) Symbol) (= (typeof name) String)) [27142] [Some(1)]
assert (= (typeof O) Object) [7961] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7963] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
let success = [? __x1__] [7965] [Some(2)]
return success [7969] [Some(4)]
return [! __x0__] [27161] [Some(13)]
__x2__ [11240] [Some(3)]
return false [22002] [Some(2)]
assert (= __x0__ false) [22780] [Some(2)]
F.Construct = ALGORITHM["ECMAScriptFunctionObject.Construct"] [22781] [Some(4)]
F.ConstructorKind = ~base~ [22784] [Some(5)]
writablePrototype = true [22786] [None]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
prototype = [! __x1__] [22791] [Some(8)]
assert (= (typeof O) Object) [7961] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7963] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
let success = [? __x1__] [7965] [Some(2)]
return success [7969] [Some(4)]
[! __x2__] [22793] [Some(9)]
assert (= (typeof O) Object) [7961] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7963] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
let success = [? __x1__] [7965] [Some(2)]
return success [7969] [Some(4)]
[! __x3__] [22796] [Some(10)]
return undefined [22797] [Some(11)]
__x3__ [11242] [Some(4)]
return F [11243] [Some(5)]
return [? __x0__] [11231] [Some(0)]
let fo = __x33__ [20646] [Some(44)]
let ObjRec = envRec.ObjectRecord [20684] [Some(0)]
let globalObject = ObjRec.BindingObject [20685] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let existingProp = [? __x0__] [20687] [Some(2)]
let desc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> D)) [20689] [Some(4)]
assert (= (typeof O) Object) [7961] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7963] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
let success = [? __x1__] [7965] [Some(2)]
return success [7969] [Some(4)]
[? __x1__] [20692] [Some(7)]
assert (= (typeof O) Object) [27116] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [27118] [Some(1)]
assert (= (typeof Throw) Boolean) [27119] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24731] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let ownDesc = [? __x1__] [24733] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24762] [Some(0)]
return true [22010] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let existingDescriptor = [? __x4__] [24783] [Some(10)]
return false [21935] [Some(1)]
let valueDesc = (new PropertyDescriptor("Value" -> V)) [24793] [Some(14)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
let __x4__ = true [29771] [Some(13)]
__x4__ = (! (= Desc.Enumerable absent)) [29772] [Some(13)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
return true [22010] [Some(2)]
return true [22010] [Some(2)]
assert (! (|| (= (typeof x) Number) (= (typeof x) BigInt))) [26816] [Some(0)]
assert (= (typeof x) (typeof y)) [26817] [Some(1)]
return true [26829] [Some(7)]
return [! __x1__] [26814] [Some(3)]
return true [22010] [Some(2)]
return true [22010] [Some(2)]
let __keys__ = (map-keys Desc) [29857] [Some(34)]
let __i__ = 0i [29858] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
return true [29865] [Some(35)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x6__] [24795] [Some(15)]
return __x2__ [24735] [Some(2)]
return [? __x0__] [24675] [Some(0)]
let success = [? __x1__] [27121] [Some(3)]
return success [27125] [Some(5)]
[? __x2__] [20694] [Some(8)]
let varDeclaredNames = envRec.VarNames [20695] [Some(9)]
append N -> varDeclaredNames [20697] [Some(11)]
return ~empty~ [20699] [Some(12)]
[? __x34__] [20648] [Some(45)]
let __x35__ = declaredVarNames [20649] [Some(46)]
let __x36__ = 0i [20650] [Some(46)]
return ~empty~ [20657] [Some(48)]
let result = __x0__ [26896] [Some(10)]
let LexicalDeclaration = this [22603] [None]
let LexicalBinding = this [22557] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
let bindingId = __x0__ [22559] [Some(0)]
env = CONTEXT.LexicalEnvironment [26645] [Some(1)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
let DclRec = envRec.DeclarativeRecord [20777] [Some(0)]
return true [7743] [Some(0)]
return true [20780] [Some(1)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
let lhs = __x1__ [22561] [Some(1)]
let PrimaryExpression = this [25417] [None]
return false [25418] [Some(0)]
return false [21941] [Some(0)]
let ArrayLiteral = this [985] [None]
proto = INTRINSICS["%Array.prototype%"] [915] [Some(1)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let A = [! __x0__] [918] [Some(2)]
A.Prototype = proto [919] [Some(3)]
A.DefineOwnProperty = ALGORITHM["ArrayExoticObject.DefineOwnProperty"] [920] [Some(4)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
[! __x1__] [922] [Some(5)]
return A [923] [Some(6)]
let array = [! __x0__] [987] [Some(0)]
let ElementList = this [8131] [None]
let Literal = this [22680] [None]
return __x0__ [22682] [Some(0)]
let initResult = __x1__ [8139] [Some(3)]
[? V] [20466] [Some(0)]
return V [20468] [Some(1)]
let initValue = [? __x2__] [8141] [Some(4)]
return (convert x num2str) [24085] [None]
return [! __x0__] [29029] [Some(7)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [926] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
let oldLenDesc = [! __x3__] [936] [Some(4)]
return true [22010] [Some(2)]
assert (= [! __x4__] true) [938] [Some(5)]
assert (= oldLenDesc.Configurable false) [939] [Some(6)]
let oldLen = oldLenDesc.Value [940] [Some(7)]
return (convert argument str2num) [28849] [None]
let number = [? __x0__] [29061] [Some(0)]
return 0i [29063] [Some(1)]
let index = [! __x5__] [942] [Some(9)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
let succeeded = [! __x6__] [947] [Some(11)]
oldLenDesc.Value = (+ index 1i) [953] [Some(14)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
let __x4__ = true [29771] [Some(13)]
__x4__ = (! (= Desc.Enumerable absent)) [29772] [Some(13)]
assert (! (|| (= (typeof x) Number) (= (typeof x) BigInt))) [26816] [Some(0)]
assert (= (typeof x) (typeof y)) [26817] [Some(1)]
return true [26829] [Some(7)]
return [! __x1__] [26814] [Some(3)]
__x4__ = (= [! __x5__] false) [29776] [Some(13)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
return true [22010] [Some(2)]
return true [22010] [Some(2)]
assert (! (|| (= (typeof x) Number) (= (typeof x) BigInt))) [26816] [Some(0)]
assert (= (typeof x) (typeof y)) [26817] [Some(1)]
return true [26829] [Some(7)]
return [! __x1__] [26814] [Some(3)]
return true [22010] [Some(2)]
return true [22010] [Some(2)]
let __keys__ = (map-keys Desc) [29857] [Some(34)]
let __i__ = 0i [29858] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
return true [29865] [Some(35)]
return __x2__ [24506] [Some(2)]
let succeeded = __x7__ [955] [Some(15)]
assert (= succeeded true) [956] [Some(16)]
return true [958] [Some(17)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
let created = [! __x4__] [8144] [Some(5)]
return (+ nextIndex 1i) [8145] [Some(6)]
nextIndex = __x0__ [8184] [Some(0)]
[? nextIndex] [8185] [Some(1)]
let Literal = this [22680] [None]
return __x0__ [22682] [Some(0)]
let initResult = __x2__ [8193] [Some(5)]
[? V] [20466] [Some(0)]
return V [20468] [Some(1)]
let initValue = [? __x3__] [8195] [Some(6)]
return (convert x num2str) [24085] [None]
return [! __x0__] [29029] [Some(7)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [926] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
let oldLenDesc = [! __x3__] [936] [Some(4)]
return true [22010] [Some(2)]
assert (= [! __x4__] true) [938] [Some(5)]
assert (= oldLenDesc.Configurable false) [939] [Some(6)]
let oldLen = oldLenDesc.Value [940] [Some(7)]
return (convert argument str2num) [28849] [None]
let number = [? __x0__] [29061] [Some(0)]
let int = (convert number num2int) [29065] [Some(2)]
let int32bit = (%% int (** 2i 32i)) [29066] [Some(3)]
return int32bit [29067] [Some(4)]
let index = [! __x5__] [942] [Some(9)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
let succeeded = [! __x6__] [947] [Some(11)]
oldLenDesc.Value = (+ index 1i) [953] [Some(14)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
let __x4__ = true [29771] [Some(13)]
__x4__ = (! (= Desc.Enumerable absent)) [29772] [Some(13)]
assert (! (|| (= (typeof x) Number) (= (typeof x) BigInt))) [26816] [Some(0)]
assert (= (typeof x) (typeof y)) [26817] [Some(1)]
return true [26829] [Some(7)]
return [! __x1__] [26814] [Some(3)]
__x4__ = (= [! __x5__] false) [29776] [Some(13)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
return true [22010] [Some(2)]
return true [22010] [Some(2)]
assert (! (|| (= (typeof x) Number) (= (typeof x) BigInt))) [26816] [Some(0)]
assert (= (typeof x) (typeof y)) [26817] [Some(1)]
return true [26829] [Some(7)]
return [! __x1__] [26814] [Some(3)]
return true [22010] [Some(2)]
return true [22010] [Some(2)]
let __keys__ = (map-keys Desc) [29857] [Some(34)]
let __i__ = 0i [29858] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
return true [29865] [Some(35)]
return __x2__ [24506] [Some(2)]
let succeeded = __x7__ [955] [Some(15)]
assert (= succeeded true) [956] [Some(16)]
return true [958] [Some(17)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
let created = [! __x5__] [8198] [Some(7)]
return (+ nextIndex 1i) [8199] [Some(8)]
nextIndex = __x0__ [8184] [Some(0)]
[? nextIndex] [8185] [Some(1)]
let Literal = this [22680] [None]
return __x0__ [22682] [Some(0)]
let initResult = __x2__ [8193] [Some(5)]
[? V] [20466] [Some(0)]
return V [20468] [Some(1)]
let initValue = [? __x3__] [8195] [Some(6)]
return (convert x num2str) [24085] [None]
return [! __x0__] [29029] [Some(7)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [926] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
let oldLenDesc = [! __x3__] [936] [Some(4)]
return true [22010] [Some(2)]
assert (= [! __x4__] true) [938] [Some(5)]
assert (= oldLenDesc.Configurable false) [939] [Some(6)]
let oldLen = oldLenDesc.Value [940] [Some(7)]
return (convert argument str2num) [28849] [None]
let number = [? __x0__] [29061] [Some(0)]
let int = (convert number num2int) [29065] [Some(2)]
let int32bit = (%% int (** 2i 32i)) [29066] [Some(3)]
return int32bit [29067] [Some(4)]
let index = [! __x5__] [942] [Some(9)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
let succeeded = [! __x6__] [947] [Some(11)]
oldLenDesc.Value = (+ index 1i) [953] [Some(14)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
let __x4__ = true [29771] [Some(13)]
__x4__ = (! (= Desc.Enumerable absent)) [29772] [Some(13)]
assert (! (|| (= (typeof x) Number) (= (typeof x) BigInt))) [26816] [Some(0)]
assert (= (typeof x) (typeof y)) [26817] [Some(1)]
return true [26829] [Some(7)]
return [! __x1__] [26814] [Some(3)]
__x4__ = (= [! __x5__] false) [29776] [Some(13)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
return true [22010] [Some(2)]
return true [22010] [Some(2)]
assert (! (|| (= (typeof x) Number) (= (typeof x) BigInt))) [26816] [Some(0)]
assert (= (typeof x) (typeof y)) [26817] [Some(1)]
return true [26829] [Some(7)]
return [! __x1__] [26814] [Some(3)]
return true [22010] [Some(2)]
return true [22010] [Some(2)]
let __keys__ = (map-keys Desc) [29857] [Some(34)]
let __i__ = 0i [29858] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
return true [29865] [Some(35)]
return __x2__ [24506] [Some(2)]
let succeeded = __x7__ [955] [Some(15)]
assert (= succeeded true) [956] [Some(16)]
return true [958] [Some(17)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
let created = [! __x5__] [8198] [Some(7)]
return (+ nextIndex 1i) [8199] [Some(8)]
let len = __x1__ [989] [Some(1)]
[? len] [990] [Some(2)]
return array [991] [Some(3)]
let rhs = __x4__ [22569] [Some(5)]
[? V] [20466] [Some(0)]
return V [20468] [Some(1)]
let value = [? __x5__] [22571] [Some(6)]
[? V] [21490] [Some(0)]
[? W] [21491] [Some(1)]
assert (is-instance-of V ReferenceRecord) [21492] [Some(2)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (= __x0__ false) [21494] [Some(3)]
let base = V.Base [21495] [Some(4)]
assert (is-instance-of base EnvironmentRecord) [21496] [Some(5)]
let DclRec = envRec.DeclarativeRecord [20810] [Some(0)]
return true [7743] [Some(0)]
envRec.SubMap[N].BoundValue = V [7748] [Some(1)]
envRec.SubMap[N].initialized = true [7749] [Some(2)]
return ~empty~ [7750] [Some(3)]
return __x1__ [20815] [Some(2)]
return __x1__ [21498] [Some(6)]
return __x6__ [22573] [Some(7)]
let next = __x0__ [22605] [Some(0)]
[? next] [22606] [Some(1)]
return ~empty~ [22607] [Some(2)]
let sl = __x0__ [27806] [Some(0)]
[? sl] [27807] [Some(1)]
let LexicalDeclaration = this [22603] [None]
let LexicalBinding = this [22557] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
let bindingId = __x0__ [22559] [Some(0)]
env = CONTEXT.LexicalEnvironment [26645] [Some(1)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
let DclRec = envRec.DeclarativeRecord [20777] [Some(0)]
return true [7743] [Some(0)]
return true [20780] [Some(1)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
let lhs = __x1__ [22561] [Some(1)]
let PrimaryExpression = this [25405] [None]
return false [25406] [Some(0)]
return false [21941] [Some(0)]
let Literal = this [22680] [None]
return __x0__ [22682] [Some(0)]
let rhs = __x4__ [22569] [Some(5)]
[? V] [20466] [Some(0)]
return V [20468] [Some(1)]
let value = [? __x5__] [22571] [Some(6)]
[? V] [21490] [Some(0)]
[? W] [21491] [Some(1)]
assert (is-instance-of V ReferenceRecord) [21492] [Some(2)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (= __x0__ false) [21494] [Some(3)]
let base = V.Base [21495] [Some(4)]
assert (is-instance-of base EnvironmentRecord) [21496] [Some(5)]
let DclRec = envRec.DeclarativeRecord [20810] [Some(0)]
return true [7743] [Some(0)]
envRec.SubMap[N].BoundValue = V [7748] [Some(1)]
envRec.SubMap[N].initialized = true [7749] [Some(2)]
return ~empty~ [7750] [Some(3)]
return __x1__ [20815] [Some(2)]
return __x1__ [21498] [Some(6)]
return __x6__ [22573] [Some(7)]
let next = __x0__ [22605] [Some(0)]
[? next] [22606] [Some(1)]
return ~empty~ [22607] [Some(2)]
let s = __x1__ [27809] [Some(2)]
return (comp[completionRecord.Type] value => completionRecord.Target) [29580] [Some(2)]
return __x2__ [27811] [Some(3)]
let sl = __x0__ [27806] [Some(0)]
[? sl] [27807] [Some(1)]
let HoistableDeclaration = this [20852] [None]
let FunctionDeclaration = this [11226] [None]
return ~empty~ [11227] [Some(0)]
return __x0__ [20854] [Some(0)]
let s = __x1__ [27809] [Some(2)]
return (comp[completionRecord.Type] value => completionRecord.Target) [29580] [Some(2)]
return __x2__ [27811] [Some(3)]
let sl = __x0__ [27806] [Some(0)]
[? sl] [27807] [Some(1)]
let LexicalDeclaration = this [22603] [None]
let LexicalBinding = this [22557] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
let bindingId = __x0__ [22559] [Some(0)]
env = CONTEXT.LexicalEnvironment [26645] [Some(1)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
let DclRec = envRec.DeclarativeRecord [20777] [Some(0)]
return true [7743] [Some(0)]
return true [20780] [Some(1)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
let lhs = __x1__ [22561] [Some(1)]
let LeftHandSideExpression = this [22507] [None]
return false [22508] [Some(0)]
return false [21941] [Some(0)]
let CallExpression = this [4247] [None]
let CoverCallExpressionAndAsyncArrowHead = this [7003] [None]
return (parse-syntax CoverCallExpressionAndAsyncArrowHead "CallMemberExpression") [7004] [Some(0)]
let expr = __x0__ [4249] [Some(0)]
let memberExpr = __x1__ [4251] [Some(1)]
let arguments = __x2__ [4253] [Some(2)]
let IdentifierReference = this [20943] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
env = CONTEXT.LexicalEnvironment [26645] [Some(1)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
let DclRec = envRec.DeclarativeRecord [20777] [Some(0)]
return true [7743] [Some(0)]
return true [20780] [Some(1)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
return [? __x1__] [20946] [Some(0)]
let baseReference = __x0__ [22885] [Some(0)]
[? V] [20466] [Some(0)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (is-instance-of V ReferenceRecord) [22122] [Some(0)]
return false [22128] [Some(2)]
let base = V.Base [20483] [Some(7)]
assert (is-instance-of base EnvironmentRecord) [20484] [Some(8)]
let DclRec = envRec.DeclarativeRecord [20765] [Some(0)]
return true [7743] [Some(0)]
return envRec.SubMap[N].BoundValue [7739] [Some(2)]
return __x1__ [20770] [Some(2)]
return [? __x5__] [20486] [Some(9)]
let baseValue = [? __x1__] [22887] [Some(1)]
let strict = true [22889] [Some(2)]
assert (is-instance-of identifierName IdentifierName) [8678] [Some(0)]
return argument [26640] [Some(14)]
let bv = [? __x0__] [8680] [Some(1)]
let propertyNameString = __x1__ [8682] [Some(2)]
return (new ReferenceRecord("Base" -> bv, "ReferencedName" -> propertyNameString, "Strict" -> strict, "ThisValue" -> ~empty~)) [8683] [Some(3)]
return [? __x2__] [22892] [Some(3)]
let ref = __x3__ [4255] [Some(3)]
[? V] [20466] [Some(0)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (is-instance-of V ReferenceRecord) [22122] [Some(0)]
return true [22127] [Some(2)]
return argument [28901] [Some(14)]
let baseObj = [! __x2__] [20478] [Some(4)]
assert (is-instance-of V ReferenceRecord) [22122] [Some(0)]
return true [22127] [Some(2)]
assert (= __x0__ true) [20453] [Some(0)]
assert (is-instance-of V ReferenceRecord) [22159] [Some(0)]
return false [22162] [Some(1)]
return V.Base [20457] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return O.Prototype [24598] [Some(0)]
return [! __x0__] [24660] [Some(0)]
let parent = [? __x2__] [24558] [Some(3)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x3__] [24563] [Some(5)]
return [? __x0__] [24654] [Some(0)]
return [? __x4__] [20481] [Some(5)]
let func = [? __x4__] [4257] [Some(4)]
let __x5__ = true [4258] [Some(5)]
__x5__ = (is-instance-of ref ReferenceRecord) [4259] [Some(5)]
assert (is-instance-of V ReferenceRecord) [22122] [Some(0)]
return true [22127] [Some(2)]
__x5__ = (= __x6__ false) [4263] [Some(5)]
let thisCall = this [4287] [Some(13)]
let __c__ = false [22034] [None]
let __b__ = call [22035] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
__c__ = (|| __c__ (is-instance-of __b__ FunctionBody)) [22038] [None]
__c__ = (|| __c__ (is-instance-of __b__ ConciseBody)) [22039] [None]
__c__ = (|| __c__ (is-instance-of __b__ AsyncConciseBody)) [22040] [None]
return false [22045] [None]
let tailCall = __x10__ [4289] [Some(14)]
assert (is-instance-of V ReferenceRecord) [22122] [Some(0)]
return true [22127] [Some(2)]
assert (is-instance-of V ReferenceRecord) [22122] [Some(0)]
return true [22127] [Some(2)]
assert (= __x0__ true) [20453] [Some(0)]
assert (is-instance-of V ReferenceRecord) [22159] [Some(0)]
return false [22162] [Some(1)]
return V.Base [20457] [Some(1)]
let thisValue = __x1__ [8625] [Some(2)]
let ArgumentList = this [387] [None]
let IdentifierReference = this [20943] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
env = CONTEXT.LexicalEnvironment [26645] [Some(1)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
let DclRec = envRec.DeclarativeRecord [20777] [Some(0)]
return false [7744] [Some(1)]
let ObjRec = envRec.ObjectRecord [20782] [Some(2)]
let bindings = envRec.BindingObject [24282] [Some(0)]
assert (= (typeof O) Object) [20843] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20845] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24631] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let hasOwn = [? __x1__] [24633] [Some(1)]
return true [24635] [Some(2)]
return [? __x0__] [24663] [Some(0)]
return [? __x1__] [20847] [Some(2)]
let foundBinding = [? __x0__] [24284] [Some(1)]
return true [24289] [Some(3)]
return [? __x1__] [20784] [Some(3)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
return [? __x1__] [20946] [Some(0)]
let ref = __x0__ [389] [Some(0)]
[? V] [20466] [Some(0)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (is-instance-of V ReferenceRecord) [22122] [Some(0)]
return false [22128] [Some(2)]
let base = V.Base [20483] [Some(7)]
assert (is-instance-of base EnvironmentRecord) [20484] [Some(8)]
let DclRec = envRec.DeclarativeRecord [20765] [Some(0)]
return false [7744] [Some(1)]
let ObjRec = envRec.ObjectRecord [20772] [Some(3)]
let bindings = envRec.BindingObject [24271] [Some(0)]
assert (= (typeof O) Object) [20843] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20845] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24631] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let hasOwn = [? __x1__] [24633] [Some(1)]
return true [24635] [Some(2)]
return [? __x0__] [24663] [Some(0)]
return [? __x1__] [20847] [Some(2)]
let value = [? __x0__] [24273] [Some(1)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return [? __x1__] [24280] [Some(4)]
return [? __x2__] [20774] [Some(4)]
return [? __x5__] [20486] [Some(9)]
let arg = [? __x1__] [391] [Some(1)]
return (new [arg]) [392] [Some(2)]
let argList = [? __x3__] [8633] [Some(9)]
return true [21976] [Some(1)]
return true [21976] [Some(1)]
let callerContext = CONTEXT [4164] [Some(0)]
let calleeContext = (new ExecutionContext()) [4168] [Some(2)]
calleeContext.Function = F [4169] [Some(3)]
let calleeRealm = F.Realm [4170] [Some(4)]
calleeContext.Realm = calleeRealm [4171] [Some(5)]
calleeContext.ScriptOrModule = null [4172] [Some(6)]
append calleeContext -> EXECUTION_STACK [4173] [Some(8)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4174] [Some(8)]
map args: List(thisArgument, argumentsList, undefined)
  map arg array loc: #20:☊[Initializer/918584437][call: 0][loop: 1][call: 2][loop: 0]
  map arg array: [#2819:[call: 8][loop: 2]]
  arg array type: List
  ast hash=1057262726
return argument [28901] [Some(14)]
let O = [? __x0__] [12297] [Some(0)]
assert (= (typeof obj) Object) [22525] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return argument [28847] [None]
let number = [? __x0__] [28812] [Some(0)]
let integer = __x2__ [28824] [Some(4)]
return integer [28828] [Some(6)]
let len = [? __x0__] [28831] [Some(0)]
return __x1__ [28836] [Some(2)]
return [? __x1__] [22528] [Some(1)]
let len = [? __x1__] [12299] [Some(1)]
return true [21976] [Some(1)]
return true [21954] [Some(1)]
let isArray = [? __x0__] [1093] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return O.Prototype [24598] [Some(0)]
return [! __x0__] [24660] [Some(0)]
let parent = [? __x2__] [24558] [Some(3)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x3__] [24563] [Some(5)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
let C = [? __x2__] [1100] [Some(2)]
return true [22000] [Some(1)]
let thisRealm = REALM [1104] [Some(4)]
return true [21976] [Some(1)]
assert (= [! __x0__] true) [20198] [Some(0)]
return obj.Realm [20200] [Some(2)]
let realmC = [? __x4__] [1106] [Some(5)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22118] [Some(1)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22118] [Some(1)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22118] [Some(1)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return false [22008] [Some(1)]
return true [21937] [Some(2)]
assert __x2__ [24592] [Some(8)]
D.Get = X.Get [24593] [Some(9)]
D.Set = X.Set [24594] [Some(10)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return false [22008] [Some(1)]
return true [21937] [Some(2)]
assert (= __x5__ true) [24570] [Some(7)]
let getter = desc.Get [24571] [Some(8)]
argumentsList = (new []) [4235] [Some(0)]
return true [21976] [Some(1)]
let callerContext = CONTEXT [4164] [Some(0)]
let calleeContext = (new ExecutionContext()) [4168] [Some(2)]
calleeContext.Function = F [4169] [Some(3)]
let calleeRealm = F.Realm [4170] [Some(4)]
calleeContext.Realm = calleeRealm [4171] [Some(5)]
calleeContext.ScriptOrModule = null [4172] [Some(6)]
append calleeContext -> EXECUTION_STACK [4173] [Some(8)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4174] [Some(8)]
return this [13036] [Some(0)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [4177] [Some(10)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4179] [Some(10)]
return result [4180] [Some(11)]
return [? __x1__] [4242] [Some(2)]
return [? __x6__] [24576] [Some(10)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
C = [? __x6__] [1118] [Some(9)]
return true [22000] [Some(1)]
newTarget = F [6862] [Some(0)]
return true [22000] [Some(1)]
assert (= __x0__ true) [6868] [Some(2)]
return true [22000] [Some(1)]
assert (= __x1__ true) [6870] [Some(3)]
let callerContext = CONTEXT [4182] [Some(0)]
let calleeContext = (new ExecutionContext()) [4186] [Some(2)]
calleeContext.Function = F [4187] [Some(3)]
let calleeRealm = F.Realm [4188] [Some(4)]
calleeContext.Realm = calleeRealm [4189] [Some(5)]
calleeContext.ScriptOrModule = null [4190] [Some(6)]
append calleeContext -> EXECUTION_STACK [4191] [Some(8)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4192] [Some(8)]
let values = argumentsList [11612] [None]
let newTarget = NewTarget [11615] [Some(0)]
return true [21976] [Some(1)]
assert (= __x0__ true) [20369] [Some(1)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
let proto = [? __x1__] [20371] [Some(2)]
return proto [20378] [Some(6)]
let proto = [? __x0__] [11617] [Some(1)]
let numberOfArgs = values.length [11618] [Some(2)]
let len = values[0i] [11625] [Some(6)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let A = [! __x0__] [918] [Some(2)]
A.Prototype = proto [919] [Some(3)]
A.DefineOwnProperty = ALGORITHM["ArrayExoticObject.DefineOwnProperty"] [920] [Some(4)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
[! __x1__] [922] [Some(5)]
return A [923] [Some(6)]
let array = [! __x2__] [11627] [Some(7)]
return argument [28847] [None]
let number = [? __x0__] [29061] [Some(0)]
let int = (convert number num2int) [29065] [Some(2)]
let int32bit = (%% int (** 2i 32i)) [29066] [Some(3)]
return int32bit [29067] [Some(4)]
let intLen = [! __x4__] [11635] [Some(12)]
assert (= (typeof O) Object) [27116] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [27118] [Some(1)]
assert (= (typeof Throw) Boolean) [27119] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24731] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let ownDesc = [? __x1__] [24733] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24762] [Some(0)]
return true [22010] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let existingDescriptor = [? __x4__] [24783] [Some(10)]
return false [21935] [Some(1)]
let valueDesc = (new PropertyDescriptor("Value" -> V)) [24793] [Some(14)]
return true [22115] [Some(0)]
assert (= __x0__ true) [926] [Some(0)]
let newLenDesc = (copy-obj Desc) [1026] [Some(2)]
return argument [28847] [None]
let number = [? __x0__] [29061] [Some(0)]
let int = (convert number num2int) [29065] [Some(2)]
let int32bit = (%% int (** 2i 32i)) [29066] [Some(3)]
return int32bit [29067] [Some(4)]
let newLen = [? __x1__] [1028] [Some(3)]
return argument [28847] [None]
let numberLen = [? __x2__] [1030] [Some(4)]
return true [24071] [Some(3)]
return [! __x0__] [26847] [Some(2)]
newLenDesc.Value = newLen [1035] [Some(6)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
let oldLenDesc = [! __x4__] [1037] [Some(7)]
return true [22010] [Some(2)]
assert (= [! __x5__] true) [1039] [Some(8)]
assert (= oldLenDesc.Configurable false) [1040] [Some(9)]
let oldLen = oldLenDesc.Value [1041] [Some(10)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
let __x4__ = true [29771] [Some(13)]
__x4__ = (! (= Desc.Enumerable absent)) [29772] [Some(13)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
return true [22010] [Some(2)]
return true [22010] [Some(2)]
assert (! (|| (= (typeof x) Number) (= (typeof x) BigInt))) [26816] [Some(0)]
assert (= (typeof x) (typeof y)) [26817] [Some(1)]
return true [26829] [Some(7)]
return [! __x1__] [26814] [Some(3)]
return true [22010] [Some(2)]
return true [22010] [Some(2)]
let __keys__ = (map-keys Desc) [29857] [Some(34)]
let __i__ = 0i [29858] [Some(34)]
let __key__ = __keys__[__i__] [29861] [Some(34)]
O.SubMap[P][__key__] = Desc[__key__] [29862] [Some(34)]
__i__ = (+ __i__ 1i) [29863] [Some(34)]
return true [29865] [Some(35)]
return __x2__ [24506] [Some(2)]
return __x6__ [1045] [Some(12)]
return [? __x1__] [930] [Some(2)]
return [? __x6__] [24795] [Some(15)]
return __x2__ [24735] [Some(2)]
return [? __x0__] [24675] [Some(0)]
let success = [? __x1__] [27121] [Some(3)]
return success [27125] [Some(5)]
[! __x5__] [11640] [Some(14)]
return array [11641] [Some(15)]
let __x0__ = (- EXECUTION_STACK.length 1i) [4196] [Some(10)]
(pop EXECUTION_STACK __x0__) [4197] [Some(10)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4199] [Some(10)]
return result [4200] [Some(11)]
return [? __x2__] [6872] [Some(4)]
return [? __x9__] [1133] [Some(13)]
let A = [? __x3__] [12305] [Some(3)]
let k = 0i [12306] [Some(4)]
return (convert x num2str) [24085] [None]
return [! __x0__] [29029] [Some(7)]
let Pk = [! __x4__] [12310] [Some(6)]
assert (= (typeof O) Object) [20843] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20845] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24631] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let hasOwn = [? __x1__] [24633] [Some(1)]
return true [24635] [Some(2)]
return [? __x0__] [24663] [Some(0)]
return [? __x1__] [20847] [Some(2)]
let kPresent = [? __x5__] [12312] [Some(7)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
let kValue = [? __x6__] [12316] [Some(9)]
return true [21976] [Some(1)]
assert (is-instance-of F ECMAScriptFunctionObject) [8059] [Some(0)]
let callerContext = CONTEXT [8060] [Some(1)]
assert (|| (= (typeof newTarget) Undefined) (= (typeof newTarget) Object)) [25256] [Some(0)]
let callerContext = CONTEXT [25257] [Some(1)]
let calleeContext = (new ExecutionContext()) [25258] [Some(2)]
calleeContext.Function = F [25259] [Some(3)]
let calleeRealm = F.Realm [25260] [Some(4)]
calleeContext.Realm = calleeRealm [25261] [Some(5)]
calleeContext.ScriptOrModule = F.ScriptOrModule [25262] [Some(6)]
assert (is-instance-of F ECMAScriptFunctionObject) [23743] [Some(0)]
assert (|| (= (typeof newTarget) Undefined) (= (typeof newTarget) Object)) [23744] [Some(1)]
let env = (new FunctionEnvironmentRecord()) [23745] [Some(2)]
env.FunctionObject = F [23746] [Some(3)]
env.ThisBindingStatus = ~uninitialized~ [23749] [Some(4)]
env.NewTarget = newTarget [23750] [Some(6)]
env.OuterEnv = F.Environment [23751] [Some(7)]
return env [23752] [Some(8)]
let localEnv = __x0__ [25264] [Some(7)]
calleeContext.LexicalEnvironment = localEnv [25265] [Some(8)]
calleeContext.VariableEnvironment = localEnv [25266] [Some(9)]
append calleeContext -> EXECUTION_STACK [25270] [Some(11)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [25271] [Some(11)]
return calleeContext [25272] [Some(13)]
let calleeContext = __x0__ [8062] [Some(2)]
let thisMode = F.ThisMode [24472] [Some(0)]
let calleeRealm = F.Realm [24476] [Some(2)]
let localEnv = __x0__ [24478] [Some(3)]
let thisValue = thisArgument [24480] [Some(4)]
assert (is-instance-of localEnv FunctionEnvironmentRecord) [24489] [Some(13)]
assert (! (= envRec.ThisBindingStatus ~lexical~)) [11328] [Some(0)]
envRec.ThisValue = V [11332] [Some(2)]
envRec.ThisBindingStatus = ~initialized~ [11333] [Some(3)]
return V [11334] [Some(4)]
return __x2__ [24491] [Some(15)]
__x2__ [8074] [Some(9)]
let FunctionBody = this [10958] [None]
let FunctionBody = this [10962] [None]
let calleeContext = CONTEXT [10971] [Some(0)]
let code = func.ECMAScriptCode [10972] [Some(1)]
let strict = func.Strict [10973] [Some(2)]
let formals = func.FormalParameters [10974] [Some(3)]
let SingleNameBinding = this [27411] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [27413] [Some(0)]
let names = __x0__ [10751] [Some(0)]
let SingleNameBinding = this [27411] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [27413] [Some(0)]
let __x2__ = __x1__ [10753] [Some(1)]
let __x3__ = 0i [10754] [Some(1)]
let __x4__ = __x2__[__x3__] [10757] [Some(1)]
__x3__ = (+ __x3__ 1i) [10758] [Some(1)]
append __x4__ -> names [10759] [Some(1)]
return names [10760] [Some(2)]
let names = __x0__ [10751] [Some(0)]
let SingleNameBinding = this [27411] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [27413] [Some(0)]
let __x2__ = __x1__ [10753] [Some(1)]
let __x3__ = 0i [10754] [Some(1)]
let __x4__ = __x2__[__x3__] [10757] [Some(1)]
__x3__ = (+ __x3__ 1i) [10758] [Some(1)]
append __x4__ -> names [10759] [Some(1)]
return names [10760] [Some(2)]
let parameterNames = __x0__ [10976] [Some(4)]
let hasDuplicates = false [10980] [Some(5)]
let FormalParameter = this [10803] [None]
let SingleNameBinding = this [27421] [None]
return true [27422] [Some(0)]
return __x0__ [10805] [Some(0)]
let FormalParameter = this [10803] [None]
let SingleNameBinding = this [27421] [None]
return true [27422] [Some(0)]
return __x0__ [10805] [Some(0)]
return __x1__ [10796] [Some(1)]
let FormalParameter = this [10803] [None]
let SingleNameBinding = this [27421] [None]
return true [27422] [Some(0)]
return __x0__ [10805] [Some(0)]
return __x1__ [10796] [Some(1)]
let simpleParameterList = __x2__ [10982] [Some(6)]
let SingleNameBinding = this [27415] [None]
return false [27416] [Some(0)]
let SingleNameBinding = this [27415] [None]
return false [27416] [Some(0)]
return __x1__ [10767] [Some(1)]
let SingleNameBinding = this [27415] [None]
return false [27416] [Some(0)]
return __x1__ [10767] [Some(1)]
let hasParameterExpressions = __x3__ [10984] [Some(7)]
let FunctionStatementList = this [11568] [None]
let StatementListItem = this [27699] [None]
let Statement = this [28084] [None]
return (new []) [28085] [Some(0)]
return __x1__ [27707] [Some(1)]
return __x0__ [11570] [Some(0)]
let varNames = __x4__ [10986] [Some(8)]
let FunctionStatementList = this [11572] [None]
let StatementListItem = this [27709] [None]
let Statement = this [28087] [None]
return (new []) [28088] [Some(0)]
return __x1__ [27717] [Some(1)]
return __x0__ [11574] [Some(0)]
let varDeclarations = __x5__ [10988] [Some(9)]
let FunctionStatementList = this [11560] [None]
let StatementListItem = this [27693] [None]
return (new []) [27694] [Some(0)]
return __x0__ [11562] [Some(0)]
let lexicalNames = __x6__ [10990] [Some(10)]
let functionNames = (new []) [10991] [Some(11)]
let functionsToInitialize = (new []) [10992] [Some(12)]
let __x7__ = varDeclarations [10993] [Some(13)]
let __x8__ = __x7__.length [10994] [Some(13)]
let argumentsObjectNeeded = true [11010] [Some(21)]
let env = __x10__ [11023] [Some(32)]
let __x14__ = parameterNames [11032] [Some(39)]
let __x15__ = 0i [11033] [Some(39)]
let paramName = __x14__[__x15__] [11036] [Some(39)]
__x15__ = (+ __x15__ 1i) [11037] [Some(39)]
return false [7744] [Some(1)]
let alreadyDeclared = __x16__ [11039] [Some(40)]
envRec.SubMap[N] = (new MutableBinding("initialized" -> false)) [7726] [Some(1)]
return ~empty~ [7730] [Some(2)]
[! __x17__] [11043] [Some(43)]
let paramName = __x14__[__x15__] [11036] [Some(39)]
__x15__ = (+ __x15__ 1i) [11037] [Some(39)]
return false [7744] [Some(1)]
let alreadyDeclared = __x16__ [11039] [Some(40)]
envRec.SubMap[N] = (new MutableBinding("initialized" -> false)) [7726] [Some(1)]
return ~empty~ [7730] [Some(2)]
[! __x17__] [11043] [Some(43)]
let paramName = __x14__[__x15__] [11036] [Some(39)]
__x15__ = (+ __x15__ 1i) [11037] [Some(39)]
return false [7744] [Some(1)]
let alreadyDeclared = __x16__ [11039] [Some(40)]
envRec.SubMap[N] = (new MutableBinding("initialized" -> false)) [7726] [Some(1)]
return ~empty~ [7730] [Some(2)]
[! __x17__] [11043] [Some(43)]
let len = argumentsList.length [7528] [Some(0)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let __x0__ = additionalInternalSlotsList [24683] [Some(1)]
let __x1__ = 0i [24684] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
let obj = [! __x0__] [7530] [Some(1)]
obj.ParameterMap = undefined [7531] [Some(2)]
assert (= (typeof O) Object) [7961] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7963] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
let success = [? __x1__] [7965] [Some(2)]
return success [7969] [Some(4)]
__x1__ [7533] [Some(3)]
let index = 0i [7534] [Some(4)]
let val = argumentsList[index] [7537] [Some(6)]
return (convert x num2str) [24085] [None]
return [! __x0__] [29029] [Some(7)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x3__] [7540] [Some(7)]
index = (+ index 1i) [7541] [Some(8)]
let val = argumentsList[index] [7537] [Some(6)]
return (convert x num2str) [24085] [None]
return [! __x0__] [29029] [Some(7)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x3__] [7540] [Some(7)]
index = (+ index 1i) [7541] [Some(8)]
let val = argumentsList[index] [7537] [Some(6)]
return (convert x num2str) [24085] [None]
return [! __x0__] [29029] [Some(7)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x3__] [7540] [Some(7)]
index = (+ index 1i) [7541] [Some(8)]
assert (= (typeof O) Object) [7961] [Some(0)]
return true [22118] [Some(1)]
assert (= __x0__ true) [7963] [Some(1)]
return true [22118] [Some(1)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
let success = [? __x1__] [7965] [Some(2)]
return success [7969] [Some(4)]
[! __x4__] [7543] [Some(9)]
assert (= (typeof O) Object) [7961] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7963] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return true [21937] [Some(2)]
return false [22008] [Some(1)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return false [22008] [Some(1)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
return true [21937] [Some(2)]
assert (= [! __x3__] true) [29743] [Some(7)]
let ap = (new AccessorProperty()) [29746] [Some(8)]
ap.Get = Desc.Get [29749] [Some(8)]
ap.Set = Desc.Set [29752] [Some(8)]
ap.Enumerable = Desc.Enumerable [29755] [Some(8)]
ap.Configurable = Desc.Configurable [29758] [Some(8)]
O.SubMap[P] = ap [29759] [Some(8)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
let success = [? __x1__] [7965] [Some(2)]
return success [7969] [Some(4)]
[! __x5__] [7545] [Some(10)]
return obj [7546] [Some(11)]
let ao = __x19__ [11055] [Some(48)]
envRec.SubMap[N] = (new ImmutableBinding("initialized" -> false, "strict" -> S)) [7723] [Some(1)]
return ~empty~ [7724] [Some(2)]
[! __x21__] [11062] [Some(53)]
envRec.SubMap[N].BoundValue = V [7748] [Some(1)]
envRec.SubMap[N].initialized = true [7749] [Some(2)]
return ~empty~ [7750] [Some(3)]
__x23__ [11067] [Some(56)]
append "arguments" -> parameterNames [11068] [Some(57)]
let parameterBindings = parameterNames [11069] [Some(57)]
let closure = __x0__ [7308] [Some(0)]
let internalSlotsList = (new ["GeneratorState", "GeneratorContext", "GeneratorBrand"]) [7265] [Some(1)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let __x0__ = additionalInternalSlotsList [24683] [Some(1)]
let __x1__ = 0i [24684] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
let generator = [! __x0__] [7267] [Some(2)]
generator.GeneratorBrand = generatorBrand [7268] [Some(3)]
generator.GeneratorState = undefined [7269] [Some(4)]
assert (= generator.GeneratorState undefined) [20070] [Some(0)]
let genContext = CONTEXT [20071] [Some(1)]
genContext.Generator = generator [20072] [Some(2)]
genContext.ResumeCont = __x0__ [20097] [Some(3)]
generator.GeneratorContext = genContext [20098] [Some(19)]
generator.GeneratorState = ~suspendedStart~ [20099] [Some(20)]
return undefined [20100] [Some(21)]
[! __x1__] [7271] [Some(5)]
return generator [7272] [Some(6)]
let iterator = [! __x4__] [7310] [Some(4)]
return (new Record("Iterator" -> iterator, "NextMethod" -> INTRINSICS["%GeneratorFunction.prototype.prototype.next%"], "Done" -> false)) [7311] [Some(5)]
let iteratorRecord = __x24__ [11072] [Some(60)]
let SingleNameBinding = this [27424] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
let bindingId = __x0__ [27426] [Some(0)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
return true [7743] [Some(0)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
let lhs = [? __x1__] [27428] [Some(1)]
argumentsList = (new []) [4235] [Some(0)]
return true [21976] [Some(1)]
let callerContext = CONTEXT [4164] [Some(0)]
let calleeContext = (new ExecutionContext()) [4168] [Some(2)]
calleeContext.Function = F [4169] [Some(3)]
let calleeRealm = F.Realm [4170] [Some(4)]
calleeContext.Realm = calleeRealm [4171] [Some(5)]
calleeContext.ScriptOrModule = null [4172] [Some(6)]
append calleeContext -> EXECUTION_STACK [4173] [Some(8)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4174] [Some(8)]
let g = this [14713] [Some(0)]
[? __x0__] [20103] [Some(0)]
[? __x1__] [20105] [Some(1)]
let state = generator.GeneratorState [20109] [Some(4)]
return state [20113] [Some(6)]
let state = [? __x0__] [20015] [Some(0)]
assert (|| (= state ~suspendedStart~) (= state ~suspendedYield~)) [20021] [Some(2)]
let genContext = generator.GeneratorContext [20022] [Some(3)]
let methodContext = CONTEXT [20023] [Some(4)]
CONTEXT = null [20024] [Some(5)]
generator.GeneratorState = ~executing~ [20025] [Some(6)]
append genContext -> EXECUTION_STACK [20026] [Some(7)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20027] [Some(7)]
genContext.ReturnCont = (new []) [20032] [Some(8)]
append __x3__ -> genContext.ReturnCont [20034] [Some(8)]
let __x1__ = list [7299] [Some(1)]
let __x2__ = 0i [7300] [Some(1)]
let E = __x1__[__x2__] [7303] [Some(1)]
__x2__ = (+ __x2__ 1i) [7304] [Some(1)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
let generatorKind = [! __x0__] [30115] [Some(0)]
assert (= (typeof done) Boolean) [7256] [Some(0)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
let obj = [! __x0__] [7258] [Some(1)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x1__] [7260] [Some(2)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x2__] [7262] [Some(3)]
return obj [7263] [Some(4)]
let genContext = CONTEXT [20115] [Some(1)]
let generator = genContext.Generator [20116] [Some(3)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
assert (= __x0__ ~sync~) [20118] [Some(4)]
generator.GeneratorState = ~suspendedYield~ [20119] [Some(5)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [20121] [Some(6)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20123] [Some(6)]
genContext.ResumeCont = __x1__ [20126] [Some(7)]
return result [20036] [Some(10)]
return [? __x0__] [14715] [Some(1)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [4177] [Some(10)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4179] [Some(10)]
return result [4180] [Some(11)]
return [? __x1__] [4242] [Some(2)]
let result = [? __x0__] [22294] [Some(1)]
return result [22301] [Some(5)]
let result = [? __x0__] [22304] [Some(0)]
assert (= (typeof iterResult) Object) [22286] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return argument [28727] [Some(4)]
return [! __x1__] [22289] [Some(1)]
let done = [? __x1__] [22306] [Some(1)]
return result [22310] [Some(3)]
let next = __x2__ [27432] [Some(3)]
[? next] [27437] [Some(5)]
assert (= (typeof iterResult) Object) [22312] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return [? __x0__] [22314] [Some(1)]
let v = __x4__ [27442] [Some(8)]
[? v] [27447] [Some(10)]
[? V] [21490] [Some(0)]
[? W] [21491] [Some(1)]
assert (is-instance-of V ReferenceRecord) [21492] [Some(2)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (= __x0__ false) [21494] [Some(3)]
let base = V.Base [21495] [Some(4)]
assert (is-instance-of base EnvironmentRecord) [21496] [Some(5)]
envRec.SubMap[N].BoundValue = V [7748] [Some(1)]
envRec.SubMap[N].initialized = true [7749] [Some(2)]
return ~empty~ [7750] [Some(3)]
return __x1__ [21498] [Some(6)]
return __x11__ [27471] [Some(19)]
[? __x0__] [10799] [Some(0)]
let SingleNameBinding = this [27424] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
let bindingId = __x0__ [27426] [Some(0)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
return true [7743] [Some(0)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
let lhs = [? __x1__] [27428] [Some(1)]
argumentsList = (new []) [4235] [Some(0)]
return true [21976] [Some(1)]
let callerContext = CONTEXT [4164] [Some(0)]
let calleeContext = (new ExecutionContext()) [4168] [Some(2)]
calleeContext.Function = F [4169] [Some(3)]
let calleeRealm = F.Realm [4170] [Some(4)]
calleeContext.Realm = calleeRealm [4171] [Some(5)]
calleeContext.ScriptOrModule = null [4172] [Some(6)]
append calleeContext -> EXECUTION_STACK [4173] [Some(8)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4174] [Some(8)]
let g = this [14713] [Some(0)]
[? __x0__] [20103] [Some(0)]
[? __x1__] [20105] [Some(1)]
let state = generator.GeneratorState [20109] [Some(4)]
return state [20113] [Some(6)]
let state = [? __x0__] [20015] [Some(0)]
assert (|| (= state ~suspendedStart~) (= state ~suspendedYield~)) [20021] [Some(2)]
let genContext = generator.GeneratorContext [20022] [Some(3)]
let methodContext = CONTEXT [20023] [Some(4)]
CONTEXT = null [20024] [Some(5)]
generator.GeneratorState = ~executing~ [20025] [Some(6)]
append genContext -> EXECUTION_STACK [20026] [Some(7)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20027] [Some(7)]
append __x3__ -> genContext.ReturnCont [20034] [Some(8)]
return resumptionValue [20125] [Some(8)]
return [? __x3__] [30123] [Some(2)]
[? __x3__] [7306] [Some(2)]
let E = __x1__[__x2__] [7303] [Some(1)]
__x2__ = (+ __x2__ 1i) [7304] [Some(1)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
let generatorKind = [! __x0__] [30115] [Some(0)]
assert (= (typeof done) Boolean) [7256] [Some(0)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
let obj = [! __x0__] [7258] [Some(1)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x1__] [7260] [Some(2)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x2__] [7262] [Some(3)]
return obj [7263] [Some(4)]
let genContext = CONTEXT [20115] [Some(1)]
let generator = genContext.Generator [20116] [Some(3)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
assert (= __x0__ ~sync~) [20118] [Some(4)]
generator.GeneratorState = ~suspendedYield~ [20119] [Some(5)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [20121] [Some(6)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20123] [Some(6)]
genContext.ResumeCont = __x1__ [20126] [Some(7)]
return result [20036] [Some(10)]
return [? __x0__] [14715] [Some(1)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [4177] [Some(10)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4179] [Some(10)]
return result [4180] [Some(11)]
return [? __x1__] [4242] [Some(2)]
let result = [? __x0__] [22294] [Some(1)]
return result [22301] [Some(5)]
let result = [? __x0__] [22304] [Some(0)]
assert (= (typeof iterResult) Object) [22286] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return argument [28727] [Some(4)]
return [! __x1__] [22289] [Some(1)]
let done = [? __x1__] [22306] [Some(1)]
return result [22310] [Some(3)]
let next = __x2__ [27432] [Some(3)]
[? next] [27437] [Some(5)]
assert (= (typeof iterResult) Object) [22312] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return [? __x0__] [22314] [Some(1)]
let v = __x4__ [27442] [Some(8)]
[? v] [27447] [Some(10)]
[? V] [21490] [Some(0)]
[? W] [21491] [Some(1)]
assert (is-instance-of V ReferenceRecord) [21492] [Some(2)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (= __x0__ false) [21494] [Some(3)]
let base = V.Base [21495] [Some(4)]
assert (is-instance-of base EnvironmentRecord) [21496] [Some(5)]
envRec.SubMap[N].BoundValue = V [7748] [Some(1)]
envRec.SubMap[N].initialized = true [7749] [Some(2)]
return ~empty~ [7750] [Some(3)]
return __x1__ [21498] [Some(6)]
return __x11__ [27471] [Some(19)]
return __x1__ [10801] [Some(1)]
[? __x0__] [10799] [Some(0)]
let SingleNameBinding = this [27424] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
let bindingId = __x0__ [27426] [Some(0)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
return true [7743] [Some(0)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
let lhs = [? __x1__] [27428] [Some(1)]
argumentsList = (new []) [4235] [Some(0)]
return true [21976] [Some(1)]
let callerContext = CONTEXT [4164] [Some(0)]
let calleeContext = (new ExecutionContext()) [4168] [Some(2)]
calleeContext.Function = F [4169] [Some(3)]
let calleeRealm = F.Realm [4170] [Some(4)]
calleeContext.Realm = calleeRealm [4171] [Some(5)]
calleeContext.ScriptOrModule = null [4172] [Some(6)]
append calleeContext -> EXECUTION_STACK [4173] [Some(8)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4174] [Some(8)]
let g = this [14713] [Some(0)]
[? __x0__] [20103] [Some(0)]
[? __x1__] [20105] [Some(1)]
let state = generator.GeneratorState [20109] [Some(4)]
return state [20113] [Some(6)]
let state = [? __x0__] [20015] [Some(0)]
assert (|| (= state ~suspendedStart~) (= state ~suspendedYield~)) [20021] [Some(2)]
let genContext = generator.GeneratorContext [20022] [Some(3)]
let methodContext = CONTEXT [20023] [Some(4)]
CONTEXT = null [20024] [Some(5)]
generator.GeneratorState = ~executing~ [20025] [Some(6)]
append genContext -> EXECUTION_STACK [20026] [Some(7)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20027] [Some(7)]
append __x3__ -> genContext.ReturnCont [20034] [Some(8)]
return resumptionValue [20125] [Some(8)]
return [? __x3__] [30123] [Some(2)]
[? __x3__] [7306] [Some(2)]
let E = __x1__[__x2__] [7303] [Some(1)]
__x2__ = (+ __x2__ 1i) [7304] [Some(1)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
let generatorKind = [! __x0__] [30115] [Some(0)]
assert (= (typeof done) Boolean) [7256] [Some(0)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
let obj = [! __x0__] [7258] [Some(1)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x1__] [7260] [Some(2)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x2__] [7262] [Some(3)]
return obj [7263] [Some(4)]
let genContext = CONTEXT [20115] [Some(1)]
let generator = genContext.Generator [20116] [Some(3)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
assert (= __x0__ ~sync~) [20118] [Some(4)]
generator.GeneratorState = ~suspendedYield~ [20119] [Some(5)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [20121] [Some(6)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20123] [Some(6)]
genContext.ResumeCont = __x1__ [20126] [Some(7)]
return result [20036] [Some(10)]
return [? __x0__] [14715] [Some(1)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [4177] [Some(10)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4179] [Some(10)]
return result [4180] [Some(11)]
return [? __x1__] [4242] [Some(2)]
let result = [? __x0__] [22294] [Some(1)]
return result [22301] [Some(5)]
let result = [? __x0__] [22304] [Some(0)]
assert (= (typeof iterResult) Object) [22286] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return argument [28727] [Some(4)]
return [! __x1__] [22289] [Some(1)]
let done = [? __x1__] [22306] [Some(1)]
return result [22310] [Some(3)]
let next = __x2__ [27432] [Some(3)]
[? next] [27437] [Some(5)]
assert (= (typeof iterResult) Object) [22312] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return [? __x0__] [22314] [Some(1)]
let v = __x4__ [27442] [Some(8)]
[? v] [27447] [Some(10)]
[? V] [21490] [Some(0)]
[? W] [21491] [Some(1)]
assert (is-instance-of V ReferenceRecord) [21492] [Some(2)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (= __x0__ false) [21494] [Some(3)]
let base = V.Base [21495] [Some(4)]
assert (is-instance-of base EnvironmentRecord) [21496] [Some(5)]
envRec.SubMap[N].BoundValue = V [7748] [Some(1)]
envRec.SubMap[N].initialized = true [7749] [Some(2)]
return ~empty~ [7750] [Some(3)]
return __x1__ [21498] [Some(6)]
return __x11__ [27471] [Some(19)]
return __x1__ [10801] [Some(1)]
[? __x26__] [11079] [Some(64)]
let instantiatedVarNames = (copy-obj parameterBindings) [11082] [Some(67)]
let __x27__ = varNames [11083] [Some(68)]
let __x28__ = 0i [11084] [Some(68)]
let varEnv = env [11097] [Some(73)]
let lexEnv = varEnv [11126] [Some(89)]
calleeContext.LexicalEnvironment = lexEnv [11127] [Some(93)]
let FunctionStatementList = this [11564] [None]
let StatementListItem = this [27696] [None]
return (new []) [27697] [Some(0)]
return __x0__ [11566] [Some(0)]
let lexDeclarations = __x38__ [11129] [Some(94)]
let __x39__ = lexDeclarations [11130] [Some(95)]
let __x40__ = 0i [11131] [Some(95)]
let __x47__ = functionsToInitialize [11151] [Some(102)]
let __x48__ = 0i [11152] [Some(102)]
return ~empty~ [11163] [Some(106)]
[? __x0__] [10964] [Some(0)]
let ReturnStatement = this [26749] [None]
let opText = (get-syntax MultiplicativeOperator) [23701] [Some(0)]
let IdentifierReference = this [20943] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
env = CONTEXT.LexicalEnvironment [26645] [Some(1)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
return true [7743] [Some(0)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
return [? __x1__] [20946] [Some(0)]
let lref = __x0__ [8686] [Some(0)]
[? V] [20466] [Some(0)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (is-instance-of V ReferenceRecord) [22122] [Some(0)]
return false [22128] [Some(2)]
let base = V.Base [20483] [Some(7)]
assert (is-instance-of base EnvironmentRecord) [20484] [Some(8)]
return envRec.SubMap[N].BoundValue [7739] [Some(2)]
return [? __x5__] [20486] [Some(9)]
let lval = [? __x1__] [8688] [Some(1)]
let Literal = this [22680] [None]
return __x0__ [22682] [Some(0)]
let rref = __x2__ [8690] [Some(2)]
[? V] [20466] [Some(0)]
return V [20468] [Some(1)]
let rval = [? __x3__] [8692] [Some(3)]
return input [28931] [Some(14)]
let primValue = [? __x0__] [28861] [Some(0)]
return argument [28847] [None]
return [? __x1__] [28866] [Some(2)]
let lnum = [? __x4__] [351] [Some(11)]
return input [28931] [Some(14)]
let primValue = [? __x0__] [28861] [Some(0)]
return argument [28847] [None]
return [? __x1__] [28866] [Some(2)]
let rnum = [? __x5__] [353] [Some(12)]
let T = (typeof lnum) [357] [Some(14)]
let m = PRIMITIVE[T] [358] [Some(15)]
let operation = m.multiply [362] [Some(16)]
return (* x y) [24044] [None]
return [? __x6__] [385] [Some(35)]
return [? __x4__] [8694] [Some(4)]
return [? __x0__] [23703] [Some(1)]
let exprRef = __x0__ [26751] [Some(0)]
[? V] [20466] [Some(0)]
return V [20468] [Some(1)]
let exprValue = [? __x1__] [26753] [Some(1)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
return (comp[~return~] exprValue => ~empty~) [26760] [Some(3)]
return __x1__ [10966] [Some(1)]
return [? __x0__] [10960] [Some(0)]
return __x0__ [24494] [Some(0)]
let result = __x3__ [8076] [Some(10)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [8078] [Some(11)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [8080] [Some(11)]
return result.Value [8082] [Some(12)]
return [? __x1__] [4242] [Some(2)]
let mappedValue = [? __x7__] [12318] [Some(10)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [926] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
let oldLenDesc = [! __x3__] [936] [Some(4)]
return true [22010] [Some(2)]
assert (= [! __x4__] true) [938] [Some(5)]
assert (= oldLenDesc.Configurable false) [939] [Some(6)]
let oldLen = oldLenDesc.Value [940] [Some(7)]
return (convert argument str2num) [28849] [None]
let number = [? __x0__] [29061] [Some(0)]
return 0i [29063] [Some(1)]
let index = [! __x5__] [942] [Some(9)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
let succeeded = [! __x6__] [947] [Some(11)]
return true [958] [Some(17)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[? __x8__] [12320] [Some(11)]
k = (+ k 1i) [12322] [Some(12)]
return (convert x num2str) [24085] [None]
return [! __x0__] [29029] [Some(7)]
let Pk = [! __x4__] [12310] [Some(6)]
assert (= (typeof O) Object) [20843] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20845] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24631] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let hasOwn = [? __x1__] [24633] [Some(1)]
return true [24635] [Some(2)]
return [? __x0__] [24663] [Some(0)]
return [? __x1__] [20847] [Some(2)]
let kPresent = [? __x5__] [12312] [Some(7)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
let kValue = [? __x6__] [12316] [Some(9)]
return true [21976] [Some(1)]
assert (is-instance-of F ECMAScriptFunctionObject) [8059] [Some(0)]
let callerContext = CONTEXT [8060] [Some(1)]
assert (|| (= (typeof newTarget) Undefined) (= (typeof newTarget) Object)) [25256] [Some(0)]
let callerContext = CONTEXT [25257] [Some(1)]
let calleeContext = (new ExecutionContext()) [25258] [Some(2)]
calleeContext.Function = F [25259] [Some(3)]
let calleeRealm = F.Realm [25260] [Some(4)]
calleeContext.Realm = calleeRealm [25261] [Some(5)]
calleeContext.ScriptOrModule = F.ScriptOrModule [25262] [Some(6)]
assert (is-instance-of F ECMAScriptFunctionObject) [23743] [Some(0)]
assert (|| (= (typeof newTarget) Undefined) (= (typeof newTarget) Object)) [23744] [Some(1)]
let env = (new FunctionEnvironmentRecord()) [23745] [Some(2)]
env.FunctionObject = F [23746] [Some(3)]
env.ThisBindingStatus = ~uninitialized~ [23749] [Some(4)]
env.NewTarget = newTarget [23750] [Some(6)]
env.OuterEnv = F.Environment [23751] [Some(7)]
return env [23752] [Some(8)]
let localEnv = __x0__ [25264] [Some(7)]
calleeContext.LexicalEnvironment = localEnv [25265] [Some(8)]
calleeContext.VariableEnvironment = localEnv [25266] [Some(9)]
append calleeContext -> EXECUTION_STACK [25270] [Some(11)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [25271] [Some(11)]
return calleeContext [25272] [Some(13)]
let calleeContext = __x0__ [8062] [Some(2)]
let thisMode = F.ThisMode [24472] [Some(0)]
let calleeRealm = F.Realm [24476] [Some(2)]
let localEnv = __x0__ [24478] [Some(3)]
let thisValue = thisArgument [24480] [Some(4)]
assert (is-instance-of localEnv FunctionEnvironmentRecord) [24489] [Some(13)]
assert (! (= envRec.ThisBindingStatus ~lexical~)) [11328] [Some(0)]
envRec.ThisValue = V [11332] [Some(2)]
envRec.ThisBindingStatus = ~initialized~ [11333] [Some(3)]
return V [11334] [Some(4)]
return __x2__ [24491] [Some(15)]
__x2__ [8074] [Some(9)]
let FunctionBody = this [10958] [None]
let FunctionBody = this [10962] [None]
let calleeContext = CONTEXT [10971] [Some(0)]
let code = func.ECMAScriptCode [10972] [Some(1)]
let strict = func.Strict [10973] [Some(2)]
let formals = func.FormalParameters [10974] [Some(3)]
let SingleNameBinding = this [27411] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [27413] [Some(0)]
let names = __x0__ [10751] [Some(0)]
let SingleNameBinding = this [27411] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [27413] [Some(0)]
let __x2__ = __x1__ [10753] [Some(1)]
let __x3__ = 0i [10754] [Some(1)]
let __x4__ = __x2__[__x3__] [10757] [Some(1)]
__x3__ = (+ __x3__ 1i) [10758] [Some(1)]
append __x4__ -> names [10759] [Some(1)]
return names [10760] [Some(2)]
let names = __x0__ [10751] [Some(0)]
let SingleNameBinding = this [27411] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [27413] [Some(0)]
let __x2__ = __x1__ [10753] [Some(1)]
let __x3__ = 0i [10754] [Some(1)]
let __x4__ = __x2__[__x3__] [10757] [Some(1)]
__x3__ = (+ __x3__ 1i) [10758] [Some(1)]
append __x4__ -> names [10759] [Some(1)]
return names [10760] [Some(2)]
let parameterNames = __x0__ [10976] [Some(4)]
let hasDuplicates = false [10980] [Some(5)]
let FormalParameter = this [10803] [None]
let SingleNameBinding = this [27421] [None]
return true [27422] [Some(0)]
return __x0__ [10805] [Some(0)]
let FormalParameter = this [10803] [None]
let SingleNameBinding = this [27421] [None]
return true [27422] [Some(0)]
return __x0__ [10805] [Some(0)]
return __x1__ [10796] [Some(1)]
let FormalParameter = this [10803] [None]
let SingleNameBinding = this [27421] [None]
return true [27422] [Some(0)]
return __x0__ [10805] [Some(0)]
return __x1__ [10796] [Some(1)]
let simpleParameterList = __x2__ [10982] [Some(6)]
let SingleNameBinding = this [27415] [None]
return false [27416] [Some(0)]
let SingleNameBinding = this [27415] [None]
return false [27416] [Some(0)]
return __x1__ [10767] [Some(1)]
let SingleNameBinding = this [27415] [None]
return false [27416] [Some(0)]
return __x1__ [10767] [Some(1)]
let hasParameterExpressions = __x3__ [10984] [Some(7)]
let FunctionStatementList = this [11568] [None]
let StatementListItem = this [27699] [None]
let Statement = this [28084] [None]
return (new []) [28085] [Some(0)]
return __x1__ [27707] [Some(1)]
return __x0__ [11570] [Some(0)]
let varNames = __x4__ [10986] [Some(8)]
let FunctionStatementList = this [11572] [None]
let StatementListItem = this [27709] [None]
let Statement = this [28087] [None]
return (new []) [28088] [Some(0)]
return __x1__ [27717] [Some(1)]
return __x0__ [11574] [Some(0)]
let varDeclarations = __x5__ [10988] [Some(9)]
let FunctionStatementList = this [11560] [None]
let StatementListItem = this [27693] [None]
return (new []) [27694] [Some(0)]
return __x0__ [11562] [Some(0)]
let lexicalNames = __x6__ [10990] [Some(10)]
let functionNames = (new []) [10991] [Some(11)]
let functionsToInitialize = (new []) [10992] [Some(12)]
let __x7__ = varDeclarations [10993] [Some(13)]
let __x8__ = __x7__.length [10994] [Some(13)]
let argumentsObjectNeeded = true [11010] [Some(21)]
let env = __x10__ [11023] [Some(32)]
let __x14__ = parameterNames [11032] [Some(39)]
let __x15__ = 0i [11033] [Some(39)]
let paramName = __x14__[__x15__] [11036] [Some(39)]
__x15__ = (+ __x15__ 1i) [11037] [Some(39)]
return false [7744] [Some(1)]
let alreadyDeclared = __x16__ [11039] [Some(40)]
envRec.SubMap[N] = (new MutableBinding("initialized" -> false)) [7726] [Some(1)]
return ~empty~ [7730] [Some(2)]
[! __x17__] [11043] [Some(43)]
let paramName = __x14__[__x15__] [11036] [Some(39)]
__x15__ = (+ __x15__ 1i) [11037] [Some(39)]
return false [7744] [Some(1)]
let alreadyDeclared = __x16__ [11039] [Some(40)]
envRec.SubMap[N] = (new MutableBinding("initialized" -> false)) [7726] [Some(1)]
return ~empty~ [7730] [Some(2)]
[! __x17__] [11043] [Some(43)]
let paramName = __x14__[__x15__] [11036] [Some(39)]
__x15__ = (+ __x15__ 1i) [11037] [Some(39)]
return false [7744] [Some(1)]
let alreadyDeclared = __x16__ [11039] [Some(40)]
envRec.SubMap[N] = (new MutableBinding("initialized" -> false)) [7726] [Some(1)]
return ~empty~ [7730] [Some(2)]
[! __x17__] [11043] [Some(43)]
let len = argumentsList.length [7528] [Some(0)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let __x0__ = additionalInternalSlotsList [24683] [Some(1)]
let __x1__ = 0i [24684] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
let obj = [! __x0__] [7530] [Some(1)]
obj.ParameterMap = undefined [7531] [Some(2)]
assert (= (typeof O) Object) [7961] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7963] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
let success = [? __x1__] [7965] [Some(2)]
return success [7969] [Some(4)]
__x1__ [7533] [Some(3)]
let index = 0i [7534] [Some(4)]
let val = argumentsList[index] [7537] [Some(6)]
return (convert x num2str) [24085] [None]
return [! __x0__] [29029] [Some(7)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x3__] [7540] [Some(7)]
index = (+ index 1i) [7541] [Some(8)]
let val = argumentsList[index] [7537] [Some(6)]
return (convert x num2str) [24085] [None]
return [! __x0__] [29029] [Some(7)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x3__] [7540] [Some(7)]
index = (+ index 1i) [7541] [Some(8)]
let val = argumentsList[index] [7537] [Some(6)]
return (convert x num2str) [24085] [None]
return [! __x0__] [29029] [Some(7)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x3__] [7540] [Some(7)]
index = (+ index 1i) [7541] [Some(8)]
assert (= (typeof O) Object) [7961] [Some(0)]
return true [22118] [Some(1)]
assert (= __x0__ true) [7963] [Some(1)]
return true [22118] [Some(1)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
let success = [? __x1__] [7965] [Some(2)]
return success [7969] [Some(4)]
[! __x4__] [7543] [Some(9)]
assert (= (typeof O) Object) [7961] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7963] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return true [21937] [Some(2)]
return false [22008] [Some(1)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return false [22008] [Some(1)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
return true [21937] [Some(2)]
assert (= [! __x3__] true) [29743] [Some(7)]
let ap = (new AccessorProperty()) [29746] [Some(8)]
ap.Get = Desc.Get [29749] [Some(8)]
ap.Set = Desc.Set [29752] [Some(8)]
ap.Enumerable = Desc.Enumerable [29755] [Some(8)]
ap.Configurable = Desc.Configurable [29758] [Some(8)]
O.SubMap[P] = ap [29759] [Some(8)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
let success = [? __x1__] [7965] [Some(2)]
return success [7969] [Some(4)]
[! __x5__] [7545] [Some(10)]
return obj [7546] [Some(11)]
let ao = __x19__ [11055] [Some(48)]
envRec.SubMap[N] = (new ImmutableBinding("initialized" -> false, "strict" -> S)) [7723] [Some(1)]
return ~empty~ [7724] [Some(2)]
[! __x21__] [11062] [Some(53)]
envRec.SubMap[N].BoundValue = V [7748] [Some(1)]
envRec.SubMap[N].initialized = true [7749] [Some(2)]
return ~empty~ [7750] [Some(3)]
__x23__ [11067] [Some(56)]
append "arguments" -> parameterNames [11068] [Some(57)]
let parameterBindings = parameterNames [11069] [Some(57)]
let closure = __x0__ [7308] [Some(0)]
let internalSlotsList = (new ["GeneratorState", "GeneratorContext", "GeneratorBrand"]) [7265] [Some(1)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let __x0__ = additionalInternalSlotsList [24683] [Some(1)]
let __x1__ = 0i [24684] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
let generator = [! __x0__] [7267] [Some(2)]
generator.GeneratorBrand = generatorBrand [7268] [Some(3)]
generator.GeneratorState = undefined [7269] [Some(4)]
assert (= generator.GeneratorState undefined) [20070] [Some(0)]
let genContext = CONTEXT [20071] [Some(1)]
genContext.Generator = generator [20072] [Some(2)]
genContext.ResumeCont = __x0__ [20097] [Some(3)]
generator.GeneratorContext = genContext [20098] [Some(19)]
generator.GeneratorState = ~suspendedStart~ [20099] [Some(20)]
return undefined [20100] [Some(21)]
[! __x1__] [7271] [Some(5)]
return generator [7272] [Some(6)]
let iterator = [! __x4__] [7310] [Some(4)]
return (new Record("Iterator" -> iterator, "NextMethod" -> INTRINSICS["%GeneratorFunction.prototype.prototype.next%"], "Done" -> false)) [7311] [Some(5)]
let iteratorRecord = __x24__ [11072] [Some(60)]
let SingleNameBinding = this [27424] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
let bindingId = __x0__ [27426] [Some(0)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
return true [7743] [Some(0)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
let lhs = [? __x1__] [27428] [Some(1)]
argumentsList = (new []) [4235] [Some(0)]
return true [21976] [Some(1)]
let callerContext = CONTEXT [4164] [Some(0)]
let calleeContext = (new ExecutionContext()) [4168] [Some(2)]
calleeContext.Function = F [4169] [Some(3)]
let calleeRealm = F.Realm [4170] [Some(4)]
calleeContext.Realm = calleeRealm [4171] [Some(5)]
calleeContext.ScriptOrModule = null [4172] [Some(6)]
append calleeContext -> EXECUTION_STACK [4173] [Some(8)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4174] [Some(8)]
let g = this [14713] [Some(0)]
[? __x0__] [20103] [Some(0)]
[? __x1__] [20105] [Some(1)]
let state = generator.GeneratorState [20109] [Some(4)]
return state [20113] [Some(6)]
let state = [? __x0__] [20015] [Some(0)]
assert (|| (= state ~suspendedStart~) (= state ~suspendedYield~)) [20021] [Some(2)]
let genContext = generator.GeneratorContext [20022] [Some(3)]
let methodContext = CONTEXT [20023] [Some(4)]
CONTEXT = null [20024] [Some(5)]
generator.GeneratorState = ~executing~ [20025] [Some(6)]
append genContext -> EXECUTION_STACK [20026] [Some(7)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20027] [Some(7)]
genContext.ReturnCont = (new []) [20032] [Some(8)]
append __x3__ -> genContext.ReturnCont [20034] [Some(8)]
let __x1__ = list [7299] [Some(1)]
let __x2__ = 0i [7300] [Some(1)]
let E = __x1__[__x2__] [7303] [Some(1)]
__x2__ = (+ __x2__ 1i) [7304] [Some(1)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
let generatorKind = [! __x0__] [30115] [Some(0)]
assert (= (typeof done) Boolean) [7256] [Some(0)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
let obj = [! __x0__] [7258] [Some(1)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x1__] [7260] [Some(2)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x2__] [7262] [Some(3)]
return obj [7263] [Some(4)]
let genContext = CONTEXT [20115] [Some(1)]
let generator = genContext.Generator [20116] [Some(3)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
assert (= __x0__ ~sync~) [20118] [Some(4)]
generator.GeneratorState = ~suspendedYield~ [20119] [Some(5)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [20121] [Some(6)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20123] [Some(6)]
genContext.ResumeCont = __x1__ [20126] [Some(7)]
return result [20036] [Some(10)]
return [? __x0__] [14715] [Some(1)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [4177] [Some(10)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4179] [Some(10)]
return result [4180] [Some(11)]
return [? __x1__] [4242] [Some(2)]
let result = [? __x0__] [22294] [Some(1)]
return result [22301] [Some(5)]
let result = [? __x0__] [22304] [Some(0)]
assert (= (typeof iterResult) Object) [22286] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return argument [28727] [Some(4)]
return [! __x1__] [22289] [Some(1)]
let done = [? __x1__] [22306] [Some(1)]
return result [22310] [Some(3)]
let next = __x2__ [27432] [Some(3)]
[? next] [27437] [Some(5)]
assert (= (typeof iterResult) Object) [22312] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return [? __x0__] [22314] [Some(1)]
let v = __x4__ [27442] [Some(8)]
[? v] [27447] [Some(10)]
[? V] [21490] [Some(0)]
[? W] [21491] [Some(1)]
assert (is-instance-of V ReferenceRecord) [21492] [Some(2)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (= __x0__ false) [21494] [Some(3)]
let base = V.Base [21495] [Some(4)]
assert (is-instance-of base EnvironmentRecord) [21496] [Some(5)]
envRec.SubMap[N].BoundValue = V [7748] [Some(1)]
envRec.SubMap[N].initialized = true [7749] [Some(2)]
return ~empty~ [7750] [Some(3)]
return __x1__ [21498] [Some(6)]
return __x11__ [27471] [Some(19)]
[? __x0__] [10799] [Some(0)]
let SingleNameBinding = this [27424] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
let bindingId = __x0__ [27426] [Some(0)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
return true [7743] [Some(0)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
let lhs = [? __x1__] [27428] [Some(1)]
argumentsList = (new []) [4235] [Some(0)]
return true [21976] [Some(1)]
let callerContext = CONTEXT [4164] [Some(0)]
let calleeContext = (new ExecutionContext()) [4168] [Some(2)]
calleeContext.Function = F [4169] [Some(3)]
let calleeRealm = F.Realm [4170] [Some(4)]
calleeContext.Realm = calleeRealm [4171] [Some(5)]
calleeContext.ScriptOrModule = null [4172] [Some(6)]
append calleeContext -> EXECUTION_STACK [4173] [Some(8)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4174] [Some(8)]
let g = this [14713] [Some(0)]
[? __x0__] [20103] [Some(0)]
[? __x1__] [20105] [Some(1)]
let state = generator.GeneratorState [20109] [Some(4)]
return state [20113] [Some(6)]
let state = [? __x0__] [20015] [Some(0)]
assert (|| (= state ~suspendedStart~) (= state ~suspendedYield~)) [20021] [Some(2)]
let genContext = generator.GeneratorContext [20022] [Some(3)]
let methodContext = CONTEXT [20023] [Some(4)]
CONTEXT = null [20024] [Some(5)]
generator.GeneratorState = ~executing~ [20025] [Some(6)]
append genContext -> EXECUTION_STACK [20026] [Some(7)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20027] [Some(7)]
append __x3__ -> genContext.ReturnCont [20034] [Some(8)]
return resumptionValue [20125] [Some(8)]
return [? __x3__] [30123] [Some(2)]
[? __x3__] [7306] [Some(2)]
let E = __x1__[__x2__] [7303] [Some(1)]
__x2__ = (+ __x2__ 1i) [7304] [Some(1)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
let generatorKind = [! __x0__] [30115] [Some(0)]
assert (= (typeof done) Boolean) [7256] [Some(0)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
let obj = [! __x0__] [7258] [Some(1)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x1__] [7260] [Some(2)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x2__] [7262] [Some(3)]
return obj [7263] [Some(4)]
let genContext = CONTEXT [20115] [Some(1)]
let generator = genContext.Generator [20116] [Some(3)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
assert (= __x0__ ~sync~) [20118] [Some(4)]
generator.GeneratorState = ~suspendedYield~ [20119] [Some(5)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [20121] [Some(6)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20123] [Some(6)]
genContext.ResumeCont = __x1__ [20126] [Some(7)]
return result [20036] [Some(10)]
return [? __x0__] [14715] [Some(1)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [4177] [Some(10)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4179] [Some(10)]
return result [4180] [Some(11)]
return [? __x1__] [4242] [Some(2)]
let result = [? __x0__] [22294] [Some(1)]
return result [22301] [Some(5)]
let result = [? __x0__] [22304] [Some(0)]
assert (= (typeof iterResult) Object) [22286] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return argument [28727] [Some(4)]
return [! __x1__] [22289] [Some(1)]
let done = [? __x1__] [22306] [Some(1)]
return result [22310] [Some(3)]
let next = __x2__ [27432] [Some(3)]
[? next] [27437] [Some(5)]
assert (= (typeof iterResult) Object) [22312] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return [? __x0__] [22314] [Some(1)]
let v = __x4__ [27442] [Some(8)]
[? v] [27447] [Some(10)]
[? V] [21490] [Some(0)]
[? W] [21491] [Some(1)]
assert (is-instance-of V ReferenceRecord) [21492] [Some(2)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (= __x0__ false) [21494] [Some(3)]
let base = V.Base [21495] [Some(4)]
assert (is-instance-of base EnvironmentRecord) [21496] [Some(5)]
envRec.SubMap[N].BoundValue = V [7748] [Some(1)]
envRec.SubMap[N].initialized = true [7749] [Some(2)]
return ~empty~ [7750] [Some(3)]
return __x1__ [21498] [Some(6)]
return __x11__ [27471] [Some(19)]
return __x1__ [10801] [Some(1)]
[? __x0__] [10799] [Some(0)]
let SingleNameBinding = this [27424] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
let bindingId = __x0__ [27426] [Some(0)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
return true [7743] [Some(0)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
let lhs = [? __x1__] [27428] [Some(1)]
argumentsList = (new []) [4235] [Some(0)]
return true [21976] [Some(1)]
let callerContext = CONTEXT [4164] [Some(0)]
let calleeContext = (new ExecutionContext()) [4168] [Some(2)]
calleeContext.Function = F [4169] [Some(3)]
let calleeRealm = F.Realm [4170] [Some(4)]
calleeContext.Realm = calleeRealm [4171] [Some(5)]
calleeContext.ScriptOrModule = null [4172] [Some(6)]
append calleeContext -> EXECUTION_STACK [4173] [Some(8)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4174] [Some(8)]
let g = this [14713] [Some(0)]
[? __x0__] [20103] [Some(0)]
[? __x1__] [20105] [Some(1)]
let state = generator.GeneratorState [20109] [Some(4)]
return state [20113] [Some(6)]
let state = [? __x0__] [20015] [Some(0)]
assert (|| (= state ~suspendedStart~) (= state ~suspendedYield~)) [20021] [Some(2)]
let genContext = generator.GeneratorContext [20022] [Some(3)]
let methodContext = CONTEXT [20023] [Some(4)]
CONTEXT = null [20024] [Some(5)]
generator.GeneratorState = ~executing~ [20025] [Some(6)]
append genContext -> EXECUTION_STACK [20026] [Some(7)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20027] [Some(7)]
append __x3__ -> genContext.ReturnCont [20034] [Some(8)]
return resumptionValue [20125] [Some(8)]
return [? __x3__] [30123] [Some(2)]
[? __x3__] [7306] [Some(2)]
let E = __x1__[__x2__] [7303] [Some(1)]
__x2__ = (+ __x2__ 1i) [7304] [Some(1)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
let generatorKind = [! __x0__] [30115] [Some(0)]
assert (= (typeof done) Boolean) [7256] [Some(0)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
let obj = [! __x0__] [7258] [Some(1)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x1__] [7260] [Some(2)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x2__] [7262] [Some(3)]
return obj [7263] [Some(4)]
let genContext = CONTEXT [20115] [Some(1)]
let generator = genContext.Generator [20116] [Some(3)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
assert (= __x0__ ~sync~) [20118] [Some(4)]
generator.GeneratorState = ~suspendedYield~ [20119] [Some(5)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [20121] [Some(6)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20123] [Some(6)]
genContext.ResumeCont = __x1__ [20126] [Some(7)]
return result [20036] [Some(10)]
return [? __x0__] [14715] [Some(1)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [4177] [Some(10)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4179] [Some(10)]
return result [4180] [Some(11)]
return [? __x1__] [4242] [Some(2)]
let result = [? __x0__] [22294] [Some(1)]
return result [22301] [Some(5)]
let result = [? __x0__] [22304] [Some(0)]
assert (= (typeof iterResult) Object) [22286] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return argument [28727] [Some(4)]
return [! __x1__] [22289] [Some(1)]
let done = [? __x1__] [22306] [Some(1)]
return result [22310] [Some(3)]
let next = __x2__ [27432] [Some(3)]
[? next] [27437] [Some(5)]
assert (= (typeof iterResult) Object) [22312] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return [? __x0__] [22314] [Some(1)]
let v = __x4__ [27442] [Some(8)]
[? v] [27447] [Some(10)]
[? V] [21490] [Some(0)]
[? W] [21491] [Some(1)]
assert (is-instance-of V ReferenceRecord) [21492] [Some(2)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (= __x0__ false) [21494] [Some(3)]
let base = V.Base [21495] [Some(4)]
assert (is-instance-of base EnvironmentRecord) [21496] [Some(5)]
envRec.SubMap[N].BoundValue = V [7748] [Some(1)]
envRec.SubMap[N].initialized = true [7749] [Some(2)]
return ~empty~ [7750] [Some(3)]
return __x1__ [21498] [Some(6)]
return __x11__ [27471] [Some(19)]
return __x1__ [10801] [Some(1)]
[? __x26__] [11079] [Some(64)]
let instantiatedVarNames = (copy-obj parameterBindings) [11082] [Some(67)]
let __x27__ = varNames [11083] [Some(68)]
let __x28__ = 0i [11084] [Some(68)]
let varEnv = env [11097] [Some(73)]
let lexEnv = varEnv [11126] [Some(89)]
calleeContext.LexicalEnvironment = lexEnv [11127] [Some(93)]
let FunctionStatementList = this [11564] [None]
let StatementListItem = this [27696] [None]
return (new []) [27697] [Some(0)]
return __x0__ [11566] [Some(0)]
let lexDeclarations = __x38__ [11129] [Some(94)]
let __x39__ = lexDeclarations [11130] [Some(95)]
let __x40__ = 0i [11131] [Some(95)]
let __x47__ = functionsToInitialize [11151] [Some(102)]
let __x48__ = 0i [11152] [Some(102)]
return ~empty~ [11163] [Some(106)]
[? __x0__] [10964] [Some(0)]
let ReturnStatement = this [26749] [None]
let opText = (get-syntax MultiplicativeOperator) [23701] [Some(0)]
let IdentifierReference = this [20943] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
env = CONTEXT.LexicalEnvironment [26645] [Some(1)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
return true [7743] [Some(0)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
return [? __x1__] [20946] [Some(0)]
let lref = __x0__ [8686] [Some(0)]
[? V] [20466] [Some(0)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (is-instance-of V ReferenceRecord) [22122] [Some(0)]
return false [22128] [Some(2)]
let base = V.Base [20483] [Some(7)]
assert (is-instance-of base EnvironmentRecord) [20484] [Some(8)]
return envRec.SubMap[N].BoundValue [7739] [Some(2)]
return [? __x5__] [20486] [Some(9)]
let lval = [? __x1__] [8688] [Some(1)]
let Literal = this [22680] [None]
return __x0__ [22682] [Some(0)]
let rref = __x2__ [8690] [Some(2)]
[? V] [20466] [Some(0)]
return V [20468] [Some(1)]
let rval = [? __x3__] [8692] [Some(3)]
return input [28931] [Some(14)]
let primValue = [? __x0__] [28861] [Some(0)]
return argument [28847] [None]
return [? __x1__] [28866] [Some(2)]
let lnum = [? __x4__] [351] [Some(11)]
return input [28931] [Some(14)]
let primValue = [? __x0__] [28861] [Some(0)]
return argument [28847] [None]
return [? __x1__] [28866] [Some(2)]
let rnum = [? __x5__] [353] [Some(12)]
let T = (typeof lnum) [357] [Some(14)]
let m = PRIMITIVE[T] [358] [Some(15)]
let operation = m.multiply [362] [Some(16)]
return (* x y) [24044] [None]
return [? __x6__] [385] [Some(35)]
return [? __x4__] [8694] [Some(4)]
return [? __x0__] [23703] [Some(1)]
let exprRef = __x0__ [26751] [Some(0)]
[? V] [20466] [Some(0)]
return V [20468] [Some(1)]
let exprValue = [? __x1__] [26753] [Some(1)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
return (comp[~return~] exprValue => ~empty~) [26760] [Some(3)]
return __x1__ [10966] [Some(1)]
return [? __x0__] [10960] [Some(0)]
return __x0__ [24494] [Some(0)]
let result = __x3__ [8076] [Some(10)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [8078] [Some(11)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [8080] [Some(11)]
return result.Value [8082] [Some(12)]
return [? __x1__] [4242] [Some(2)]
let mappedValue = [? __x7__] [12318] [Some(10)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [926] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
let oldLenDesc = [! __x3__] [936] [Some(4)]
return true [22010] [Some(2)]
assert (= [! __x4__] true) [938] [Some(5)]
assert (= oldLenDesc.Configurable false) [939] [Some(6)]
let oldLen = oldLenDesc.Value [940] [Some(7)]
return (convert argument str2num) [28849] [None]
let number = [? __x0__] [29061] [Some(0)]
let int = (convert number num2int) [29065] [Some(2)]
let int32bit = (%% int (** 2i 32i)) [29066] [Some(3)]
return int32bit [29067] [Some(4)]
let index = [! __x5__] [942] [Some(9)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
let succeeded = [! __x6__] [947] [Some(11)]
return true [958] [Some(17)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[? __x8__] [12320] [Some(11)]
k = (+ k 1i) [12322] [Some(12)]
return (convert x num2str) [24085] [None]
return [! __x0__] [29029] [Some(7)]
let Pk = [! __x4__] [12310] [Some(6)]
assert (= (typeof O) Object) [20843] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20845] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24631] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let hasOwn = [? __x1__] [24633] [Some(1)]
return true [24635] [Some(2)]
return [? __x0__] [24663] [Some(0)]
return [? __x1__] [20847] [Some(2)]
let kPresent = [? __x5__] [12312] [Some(7)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
let kValue = [? __x6__] [12316] [Some(9)]
return true [21976] [Some(1)]
assert (is-instance-of F ECMAScriptFunctionObject) [8059] [Some(0)]
let callerContext = CONTEXT [8060] [Some(1)]
assert (|| (= (typeof newTarget) Undefined) (= (typeof newTarget) Object)) [25256] [Some(0)]
let callerContext = CONTEXT [25257] [Some(1)]
let calleeContext = (new ExecutionContext()) [25258] [Some(2)]
calleeContext.Function = F [25259] [Some(3)]
let calleeRealm = F.Realm [25260] [Some(4)]
calleeContext.Realm = calleeRealm [25261] [Some(5)]
calleeContext.ScriptOrModule = F.ScriptOrModule [25262] [Some(6)]
assert (is-instance-of F ECMAScriptFunctionObject) [23743] [Some(0)]
assert (|| (= (typeof newTarget) Undefined) (= (typeof newTarget) Object)) [23744] [Some(1)]
let env = (new FunctionEnvironmentRecord()) [23745] [Some(2)]
env.FunctionObject = F [23746] [Some(3)]
env.ThisBindingStatus = ~uninitialized~ [23749] [Some(4)]
env.NewTarget = newTarget [23750] [Some(6)]
env.OuterEnv = F.Environment [23751] [Some(7)]
return env [23752] [Some(8)]
let localEnv = __x0__ [25264] [Some(7)]
calleeContext.LexicalEnvironment = localEnv [25265] [Some(8)]
calleeContext.VariableEnvironment = localEnv [25266] [Some(9)]
append calleeContext -> EXECUTION_STACK [25270] [Some(11)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [25271] [Some(11)]
return calleeContext [25272] [Some(13)]
let calleeContext = __x0__ [8062] [Some(2)]
let thisMode = F.ThisMode [24472] [Some(0)]
let calleeRealm = F.Realm [24476] [Some(2)]
let localEnv = __x0__ [24478] [Some(3)]
let thisValue = thisArgument [24480] [Some(4)]
assert (is-instance-of localEnv FunctionEnvironmentRecord) [24489] [Some(13)]
assert (! (= envRec.ThisBindingStatus ~lexical~)) [11328] [Some(0)]
envRec.ThisValue = V [11332] [Some(2)]
envRec.ThisBindingStatus = ~initialized~ [11333] [Some(3)]
return V [11334] [Some(4)]
return __x2__ [24491] [Some(15)]
__x2__ [8074] [Some(9)]
let FunctionBody = this [10958] [None]
let FunctionBody = this [10962] [None]
let calleeContext = CONTEXT [10971] [Some(0)]
let code = func.ECMAScriptCode [10972] [Some(1)]
let strict = func.Strict [10973] [Some(2)]
let formals = func.FormalParameters [10974] [Some(3)]
let SingleNameBinding = this [27411] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [27413] [Some(0)]
let names = __x0__ [10751] [Some(0)]
let SingleNameBinding = this [27411] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [27413] [Some(0)]
let __x2__ = __x1__ [10753] [Some(1)]
let __x3__ = 0i [10754] [Some(1)]
let __x4__ = __x2__[__x3__] [10757] [Some(1)]
__x3__ = (+ __x3__ 1i) [10758] [Some(1)]
append __x4__ -> names [10759] [Some(1)]
return names [10760] [Some(2)]
let names = __x0__ [10751] [Some(0)]
let SingleNameBinding = this [27411] [None]
let BindingIdentifier = this [3681] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
return (new [__x0__]) [3683] [Some(0)]
return __x0__ [27413] [Some(0)]
let __x2__ = __x1__ [10753] [Some(1)]
let __x3__ = 0i [10754] [Some(1)]
let __x4__ = __x2__[__x3__] [10757] [Some(1)]
__x3__ = (+ __x3__ 1i) [10758] [Some(1)]
append __x4__ -> names [10759] [Some(1)]
return names [10760] [Some(2)]
let parameterNames = __x0__ [10976] [Some(4)]
let hasDuplicates = false [10980] [Some(5)]
let FormalParameter = this [10803] [None]
let SingleNameBinding = this [27421] [None]
return true [27422] [Some(0)]
return __x0__ [10805] [Some(0)]
let FormalParameter = this [10803] [None]
let SingleNameBinding = this [27421] [None]
return true [27422] [Some(0)]
return __x0__ [10805] [Some(0)]
return __x1__ [10796] [Some(1)]
let FormalParameter = this [10803] [None]
let SingleNameBinding = this [27421] [None]
return true [27422] [Some(0)]
return __x0__ [10805] [Some(0)]
return __x1__ [10796] [Some(1)]
let simpleParameterList = __x2__ [10982] [Some(6)]
let SingleNameBinding = this [27415] [None]
return false [27416] [Some(0)]
let SingleNameBinding = this [27415] [None]
return false [27416] [Some(0)]
return __x1__ [10767] [Some(1)]
let SingleNameBinding = this [27415] [None]
return false [27416] [Some(0)]
return __x1__ [10767] [Some(1)]
let hasParameterExpressions = __x3__ [10984] [Some(7)]
let FunctionStatementList = this [11568] [None]
let StatementListItem = this [27699] [None]
let Statement = this [28084] [None]
return (new []) [28085] [Some(0)]
return __x1__ [27707] [Some(1)]
return __x0__ [11570] [Some(0)]
let varNames = __x4__ [10986] [Some(8)]
let FunctionStatementList = this [11572] [None]
let StatementListItem = this [27709] [None]
let Statement = this [28087] [None]
return (new []) [28088] [Some(0)]
return __x1__ [27717] [Some(1)]
return __x0__ [11574] [Some(0)]
let varDeclarations = __x5__ [10988] [Some(9)]
let FunctionStatementList = this [11560] [None]
let StatementListItem = this [27693] [None]
return (new []) [27694] [Some(0)]
return __x0__ [11562] [Some(0)]
let lexicalNames = __x6__ [10990] [Some(10)]
let functionNames = (new []) [10991] [Some(11)]
let functionsToInitialize = (new []) [10992] [Some(12)]
let __x7__ = varDeclarations [10993] [Some(13)]
let __x8__ = __x7__.length [10994] [Some(13)]
let argumentsObjectNeeded = true [11010] [Some(21)]
let env = __x10__ [11023] [Some(32)]
let __x14__ = parameterNames [11032] [Some(39)]
let __x15__ = 0i [11033] [Some(39)]
let paramName = __x14__[__x15__] [11036] [Some(39)]
__x15__ = (+ __x15__ 1i) [11037] [Some(39)]
return false [7744] [Some(1)]
let alreadyDeclared = __x16__ [11039] [Some(40)]
envRec.SubMap[N] = (new MutableBinding("initialized" -> false)) [7726] [Some(1)]
return ~empty~ [7730] [Some(2)]
[! __x17__] [11043] [Some(43)]
let paramName = __x14__[__x15__] [11036] [Some(39)]
__x15__ = (+ __x15__ 1i) [11037] [Some(39)]
return false [7744] [Some(1)]
let alreadyDeclared = __x16__ [11039] [Some(40)]
envRec.SubMap[N] = (new MutableBinding("initialized" -> false)) [7726] [Some(1)]
return ~empty~ [7730] [Some(2)]
[! __x17__] [11043] [Some(43)]
let paramName = __x14__[__x15__] [11036] [Some(39)]
__x15__ = (+ __x15__ 1i) [11037] [Some(39)]
return false [7744] [Some(1)]
let alreadyDeclared = __x16__ [11039] [Some(40)]
envRec.SubMap[N] = (new MutableBinding("initialized" -> false)) [7726] [Some(1)]
return ~empty~ [7730] [Some(2)]
[! __x17__] [11043] [Some(43)]
let len = argumentsList.length [7528] [Some(0)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let __x0__ = additionalInternalSlotsList [24683] [Some(1)]
let __x1__ = 0i [24684] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
let obj = [! __x0__] [7530] [Some(1)]
obj.ParameterMap = undefined [7531] [Some(2)]
assert (= (typeof O) Object) [7961] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7963] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
let success = [? __x1__] [7965] [Some(2)]
return success [7969] [Some(4)]
__x1__ [7533] [Some(3)]
let index = 0i [7534] [Some(4)]
let val = argumentsList[index] [7537] [Some(6)]
return (convert x num2str) [24085] [None]
return [! __x0__] [29029] [Some(7)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x3__] [7540] [Some(7)]
index = (+ index 1i) [7541] [Some(8)]
let val = argumentsList[index] [7537] [Some(6)]
return (convert x num2str) [24085] [None]
return [! __x0__] [29029] [Some(7)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x3__] [7540] [Some(7)]
index = (+ index 1i) [7541] [Some(8)]
let val = argumentsList[index] [7537] [Some(6)]
return (convert x num2str) [24085] [None]
return [! __x0__] [29029] [Some(7)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x3__] [7540] [Some(7)]
index = (+ index 1i) [7541] [Some(8)]
assert (= (typeof O) Object) [7961] [Some(0)]
return true [22118] [Some(1)]
assert (= __x0__ true) [7963] [Some(1)]
return true [22118] [Some(1)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
let success = [? __x1__] [7965] [Some(2)]
return success [7969] [Some(4)]
[! __x4__] [7543] [Some(9)]
assert (= (typeof O) Object) [7961] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7963] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return true [21937] [Some(2)]
return false [22008] [Some(1)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return false [22008] [Some(1)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
return true [21937] [Some(2)]
assert (= [! __x3__] true) [29743] [Some(7)]
let ap = (new AccessorProperty()) [29746] [Some(8)]
ap.Get = Desc.Get [29749] [Some(8)]
ap.Set = Desc.Set [29752] [Some(8)]
ap.Enumerable = Desc.Enumerable [29755] [Some(8)]
ap.Configurable = Desc.Configurable [29758] [Some(8)]
O.SubMap[P] = ap [29759] [Some(8)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
let success = [? __x1__] [7965] [Some(2)]
return success [7969] [Some(4)]
[! __x5__] [7545] [Some(10)]
return obj [7546] [Some(11)]
let ao = __x19__ [11055] [Some(48)]
envRec.SubMap[N] = (new ImmutableBinding("initialized" -> false, "strict" -> S)) [7723] [Some(1)]
return ~empty~ [7724] [Some(2)]
[! __x21__] [11062] [Some(53)]
envRec.SubMap[N].BoundValue = V [7748] [Some(1)]
envRec.SubMap[N].initialized = true [7749] [Some(2)]
return ~empty~ [7750] [Some(3)]
__x23__ [11067] [Some(56)]
append "arguments" -> parameterNames [11068] [Some(57)]
let parameterBindings = parameterNames [11069] [Some(57)]
let closure = __x0__ [7308] [Some(0)]
let internalSlotsList = (new ["GeneratorState", "GeneratorContext", "GeneratorBrand"]) [7265] [Some(1)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let __x0__ = additionalInternalSlotsList [24683] [Some(1)]
let __x1__ = 0i [24684] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let __x2__ = __x0__[__x1__] [24687] [Some(1)]
__x1__ = (+ __x1__ 1i) [24688] [Some(1)]
append __x2__ -> internalSlotsList [24689] [Some(1)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
let generator = [! __x0__] [7267] [Some(2)]
generator.GeneratorBrand = generatorBrand [7268] [Some(3)]
generator.GeneratorState = undefined [7269] [Some(4)]
assert (= generator.GeneratorState undefined) [20070] [Some(0)]
let genContext = CONTEXT [20071] [Some(1)]
genContext.Generator = generator [20072] [Some(2)]
genContext.ResumeCont = __x0__ [20097] [Some(3)]
generator.GeneratorContext = genContext [20098] [Some(19)]
generator.GeneratorState = ~suspendedStart~ [20099] [Some(20)]
return undefined [20100] [Some(21)]
[! __x1__] [7271] [Some(5)]
return generator [7272] [Some(6)]
let iterator = [! __x4__] [7310] [Some(4)]
return (new Record("Iterator" -> iterator, "NextMethod" -> INTRINSICS["%GeneratorFunction.prototype.prototype.next%"], "Done" -> false)) [7311] [Some(5)]
let iteratorRecord = __x24__ [11072] [Some(60)]
let SingleNameBinding = this [27424] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
let bindingId = __x0__ [27426] [Some(0)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
return true [7743] [Some(0)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
let lhs = [? __x1__] [27428] [Some(1)]
argumentsList = (new []) [4235] [Some(0)]
return true [21976] [Some(1)]
let callerContext = CONTEXT [4164] [Some(0)]
let calleeContext = (new ExecutionContext()) [4168] [Some(2)]
calleeContext.Function = F [4169] [Some(3)]
let calleeRealm = F.Realm [4170] [Some(4)]
calleeContext.Realm = calleeRealm [4171] [Some(5)]
calleeContext.ScriptOrModule = null [4172] [Some(6)]
append calleeContext -> EXECUTION_STACK [4173] [Some(8)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4174] [Some(8)]
let g = this [14713] [Some(0)]
[? __x0__] [20103] [Some(0)]
[? __x1__] [20105] [Some(1)]
let state = generator.GeneratorState [20109] [Some(4)]
return state [20113] [Some(6)]
let state = [? __x0__] [20015] [Some(0)]
assert (|| (= state ~suspendedStart~) (= state ~suspendedYield~)) [20021] [Some(2)]
let genContext = generator.GeneratorContext [20022] [Some(3)]
let methodContext = CONTEXT [20023] [Some(4)]
CONTEXT = null [20024] [Some(5)]
generator.GeneratorState = ~executing~ [20025] [Some(6)]
append genContext -> EXECUTION_STACK [20026] [Some(7)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20027] [Some(7)]
genContext.ReturnCont = (new []) [20032] [Some(8)]
append __x3__ -> genContext.ReturnCont [20034] [Some(8)]
let __x1__ = list [7299] [Some(1)]
let __x2__ = 0i [7300] [Some(1)]
let E = __x1__[__x2__] [7303] [Some(1)]
__x2__ = (+ __x2__ 1i) [7304] [Some(1)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
let generatorKind = [! __x0__] [30115] [Some(0)]
assert (= (typeof done) Boolean) [7256] [Some(0)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
let obj = [! __x0__] [7258] [Some(1)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x1__] [7260] [Some(2)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x2__] [7262] [Some(3)]
return obj [7263] [Some(4)]
let genContext = CONTEXT [20115] [Some(1)]
let generator = genContext.Generator [20116] [Some(3)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
assert (= __x0__ ~sync~) [20118] [Some(4)]
generator.GeneratorState = ~suspendedYield~ [20119] [Some(5)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [20121] [Some(6)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20123] [Some(6)]
genContext.ResumeCont = __x1__ [20126] [Some(7)]
return result [20036] [Some(10)]
return [? __x0__] [14715] [Some(1)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [4177] [Some(10)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4179] [Some(10)]
return result [4180] [Some(11)]
return [? __x1__] [4242] [Some(2)]
let result = [? __x0__] [22294] [Some(1)]
return result [22301] [Some(5)]
let result = [? __x0__] [22304] [Some(0)]
assert (= (typeof iterResult) Object) [22286] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return argument [28727] [Some(4)]
return [! __x1__] [22289] [Some(1)]
let done = [? __x1__] [22306] [Some(1)]
return result [22310] [Some(3)]
let next = __x2__ [27432] [Some(3)]
[? next] [27437] [Some(5)]
assert (= (typeof iterResult) Object) [22312] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return [? __x0__] [22314] [Some(1)]
let v = __x4__ [27442] [Some(8)]
[? v] [27447] [Some(10)]
[? V] [21490] [Some(0)]
[? W] [21491] [Some(1)]
assert (is-instance-of V ReferenceRecord) [21492] [Some(2)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (= __x0__ false) [21494] [Some(3)]
let base = V.Base [21495] [Some(4)]
assert (is-instance-of base EnvironmentRecord) [21496] [Some(5)]
envRec.SubMap[N].BoundValue = V [7748] [Some(1)]
envRec.SubMap[N].initialized = true [7749] [Some(2)]
return ~empty~ [7750] [Some(3)]
return __x1__ [21498] [Some(6)]
return __x11__ [27471] [Some(19)]
[? __x0__] [10799] [Some(0)]
let SingleNameBinding = this [27424] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
let bindingId = __x0__ [27426] [Some(0)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
return true [7743] [Some(0)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
let lhs = [? __x1__] [27428] [Some(1)]
argumentsList = (new []) [4235] [Some(0)]
return true [21976] [Some(1)]
let callerContext = CONTEXT [4164] [Some(0)]
let calleeContext = (new ExecutionContext()) [4168] [Some(2)]
calleeContext.Function = F [4169] [Some(3)]
let calleeRealm = F.Realm [4170] [Some(4)]
calleeContext.Realm = calleeRealm [4171] [Some(5)]
calleeContext.ScriptOrModule = null [4172] [Some(6)]
append calleeContext -> EXECUTION_STACK [4173] [Some(8)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4174] [Some(8)]
let g = this [14713] [Some(0)]
[? __x0__] [20103] [Some(0)]
[? __x1__] [20105] [Some(1)]
let state = generator.GeneratorState [20109] [Some(4)]
return state [20113] [Some(6)]
let state = [? __x0__] [20015] [Some(0)]
assert (|| (= state ~suspendedStart~) (= state ~suspendedYield~)) [20021] [Some(2)]
let genContext = generator.GeneratorContext [20022] [Some(3)]
let methodContext = CONTEXT [20023] [Some(4)]
CONTEXT = null [20024] [Some(5)]
generator.GeneratorState = ~executing~ [20025] [Some(6)]
append genContext -> EXECUTION_STACK [20026] [Some(7)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20027] [Some(7)]
append __x3__ -> genContext.ReturnCont [20034] [Some(8)]
return resumptionValue [20125] [Some(8)]
return [? __x3__] [30123] [Some(2)]
[? __x3__] [7306] [Some(2)]
let E = __x1__[__x2__] [7303] [Some(1)]
__x2__ = (+ __x2__ 1i) [7304] [Some(1)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
let generatorKind = [! __x0__] [30115] [Some(0)]
assert (= (typeof done) Boolean) [7256] [Some(0)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
let obj = [! __x0__] [7258] [Some(1)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x1__] [7260] [Some(2)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x2__] [7262] [Some(3)]
return obj [7263] [Some(4)]
let genContext = CONTEXT [20115] [Some(1)]
let generator = genContext.Generator [20116] [Some(3)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
assert (= __x0__ ~sync~) [20118] [Some(4)]
generator.GeneratorState = ~suspendedYield~ [20119] [Some(5)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [20121] [Some(6)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20123] [Some(6)]
genContext.ResumeCont = __x1__ [20126] [Some(7)]
return result [20036] [Some(10)]
return [? __x0__] [14715] [Some(1)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [4177] [Some(10)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4179] [Some(10)]
return result [4180] [Some(11)]
return [? __x1__] [4242] [Some(2)]
let result = [? __x0__] [22294] [Some(1)]
return result [22301] [Some(5)]
let result = [? __x0__] [22304] [Some(0)]
assert (= (typeof iterResult) Object) [22286] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return argument [28727] [Some(4)]
return [! __x1__] [22289] [Some(1)]
let done = [? __x1__] [22306] [Some(1)]
return result [22310] [Some(3)]
let next = __x2__ [27432] [Some(3)]
[? next] [27437] [Some(5)]
assert (= (typeof iterResult) Object) [22312] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return [? __x0__] [22314] [Some(1)]
let v = __x4__ [27442] [Some(8)]
[? v] [27447] [Some(10)]
[? V] [21490] [Some(0)]
[? W] [21491] [Some(1)]
assert (is-instance-of V ReferenceRecord) [21492] [Some(2)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (= __x0__ false) [21494] [Some(3)]
let base = V.Base [21495] [Some(4)]
assert (is-instance-of base EnvironmentRecord) [21496] [Some(5)]
envRec.SubMap[N].BoundValue = V [7748] [Some(1)]
envRec.SubMap[N].initialized = true [7749] [Some(2)]
return ~empty~ [7750] [Some(3)]
return __x1__ [21498] [Some(6)]
return __x11__ [27471] [Some(19)]
return __x1__ [10801] [Some(1)]
[? __x0__] [10799] [Some(0)]
let SingleNameBinding = this [27424] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
let bindingId = __x0__ [27426] [Some(0)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
return true [7743] [Some(0)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
let lhs = [? __x1__] [27428] [Some(1)]
argumentsList = (new []) [4235] [Some(0)]
return true [21976] [Some(1)]
let callerContext = CONTEXT [4164] [Some(0)]
let calleeContext = (new ExecutionContext()) [4168] [Some(2)]
calleeContext.Function = F [4169] [Some(3)]
let calleeRealm = F.Realm [4170] [Some(4)]
calleeContext.Realm = calleeRealm [4171] [Some(5)]
calleeContext.ScriptOrModule = null [4172] [Some(6)]
append calleeContext -> EXECUTION_STACK [4173] [Some(8)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4174] [Some(8)]
let g = this [14713] [Some(0)]
[? __x0__] [20103] [Some(0)]
[? __x1__] [20105] [Some(1)]
let state = generator.GeneratorState [20109] [Some(4)]
return state [20113] [Some(6)]
let state = [? __x0__] [20015] [Some(0)]
assert (|| (= state ~suspendedStart~) (= state ~suspendedYield~)) [20021] [Some(2)]
let genContext = generator.GeneratorContext [20022] [Some(3)]
let methodContext = CONTEXT [20023] [Some(4)]
CONTEXT = null [20024] [Some(5)]
generator.GeneratorState = ~executing~ [20025] [Some(6)]
append genContext -> EXECUTION_STACK [20026] [Some(7)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20027] [Some(7)]
append __x3__ -> genContext.ReturnCont [20034] [Some(8)]
return resumptionValue [20125] [Some(8)]
return [? __x3__] [30123] [Some(2)]
[? __x3__] [7306] [Some(2)]
let E = __x1__[__x2__] [7303] [Some(1)]
__x2__ = (+ __x2__ 1i) [7304] [Some(1)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
let generatorKind = [! __x0__] [30115] [Some(0)]
assert (= (typeof done) Boolean) [7256] [Some(0)]
let internalSlotsList = (new ["Prototype", "Extensible"]) [24680] [Some(0)]
let obj = (new OrdinaryObject()) [22759] [Some(1)]
let __x0__ = internalSlotsList [22760] [Some(1)]
let __x1__ = 0i [22761] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
let __x2__ = __x0__[__x1__] [22764] [Some(1)]
__x1__ = (+ __x1__ 1i) [22765] [Some(1)]
obj[__x2__] = undefined [22766] [Some(1)]
obj.Extensible = true [22768] [Some(5)]
return obj [22770] [Some(6)]
let O = [! __x3__] [24692] [Some(2)]
O.Prototype = proto [24693] [Some(3)]
return O [24694] [Some(4)]
let obj = [! __x0__] [7258] [Some(1)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x1__] [7260] [Some(2)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
return [? __x0__] [24648] [Some(0)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[! __x2__] [7262] [Some(3)]
return obj [7263] [Some(4)]
let genContext = CONTEXT [20115] [Some(1)]
let generator = genContext.Generator [20116] [Some(3)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
assert (= __x0__ ~sync~) [20118] [Some(4)]
generator.GeneratorState = ~suspendedYield~ [20119] [Some(5)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [20121] [Some(6)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [20123] [Some(6)]
genContext.ResumeCont = __x1__ [20126] [Some(7)]
return result [20036] [Some(10)]
return [? __x0__] [14715] [Some(1)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [4177] [Some(10)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4179] [Some(10)]
return result [4180] [Some(11)]
return [? __x1__] [4242] [Some(2)]
let result = [? __x0__] [22294] [Some(1)]
return result [22301] [Some(5)]
let result = [? __x0__] [22304] [Some(0)]
assert (= (typeof iterResult) Object) [22286] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return argument [28727] [Some(4)]
return [! __x1__] [22289] [Some(1)]
let done = [? __x1__] [22306] [Some(1)]
return result [22310] [Some(3)]
let next = __x2__ [27432] [Some(3)]
[? next] [27437] [Some(5)]
assert (= (typeof iterResult) Object) [22312] [Some(0)]
assert (= (typeof O) Object) [20129] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [20131] [Some(1)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24552] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
return [! __x0__] [24657] [Some(0)]
let desc = [? __x1__] [24554] [Some(1)]
return true [22010] [Some(2)]
return desc.Value [24567] [Some(6)]
return [? __x0__] [24654] [Some(0)]
return [? __x1__] [20133] [Some(2)]
return [? __x0__] [22314] [Some(1)]
let v = __x4__ [27442] [Some(8)]
[? v] [27447] [Some(10)]
[? V] [21490] [Some(0)]
[? W] [21491] [Some(1)]
assert (is-instance-of V ReferenceRecord) [21492] [Some(2)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (= __x0__ false) [21494] [Some(3)]
let base = V.Base [21495] [Some(4)]
assert (is-instance-of base EnvironmentRecord) [21496] [Some(5)]
envRec.SubMap[N].BoundValue = V [7748] [Some(1)]
envRec.SubMap[N].initialized = true [7749] [Some(2)]
return ~empty~ [7750] [Some(3)]
return __x1__ [21498] [Some(6)]
return __x11__ [27471] [Some(19)]
return __x1__ [10801] [Some(1)]
[? __x26__] [11079] [Some(64)]
let instantiatedVarNames = (copy-obj parameterBindings) [11082] [Some(67)]
let __x27__ = varNames [11083] [Some(68)]
let __x28__ = 0i [11084] [Some(68)]
let varEnv = env [11097] [Some(73)]
let lexEnv = varEnv [11126] [Some(89)]
calleeContext.LexicalEnvironment = lexEnv [11127] [Some(93)]
let FunctionStatementList = this [11564] [None]
let StatementListItem = this [27696] [None]
return (new []) [27697] [Some(0)]
return __x0__ [11566] [Some(0)]
let lexDeclarations = __x38__ [11129] [Some(94)]
let __x39__ = lexDeclarations [11130] [Some(95)]
let __x40__ = 0i [11131] [Some(95)]
let __x47__ = functionsToInitialize [11151] [Some(102)]
let __x48__ = 0i [11152] [Some(102)]
return ~empty~ [11163] [Some(106)]
[? __x0__] [10964] [Some(0)]
let ReturnStatement = this [26749] [None]
let opText = (get-syntax MultiplicativeOperator) [23701] [Some(0)]
let IdentifierReference = this [20943] [None]
let Identifier = this [21003] [None]
return __x0__ [21005] [Some(0)]
env = CONTEXT.LexicalEnvironment [26645] [Some(1)]
assert (is-instance-of env EnvironmentRecord) [26647] [Some(2)]
let strict = true [26649] [Some(3)]
return true [7743] [Some(0)]
let exists = [? __x0__] [20235] [Some(2)]
return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) [20237] [Some(4)]
return [? __x0__] [26652] [Some(4)]
return [? __x1__] [20946] [Some(0)]
let lref = __x0__ [8686] [Some(0)]
[? V] [20466] [Some(0)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (is-instance-of V ReferenceRecord) [22122] [Some(0)]
return false [22128] [Some(2)]
let base = V.Base [20483] [Some(7)]
assert (is-instance-of base EnvironmentRecord) [20484] [Some(8)]
return envRec.SubMap[N].BoundValue [7739] [Some(2)]
return [? __x5__] [20486] [Some(9)]
let lval = [? __x1__] [8688] [Some(1)]
let Literal = this [22680] [None]
return __x0__ [22682] [Some(0)]
let rref = __x2__ [8690] [Some(2)]
[? V] [20466] [Some(0)]
return V [20468] [Some(1)]
let rval = [? __x3__] [8692] [Some(3)]
return input [28931] [Some(14)]
let primValue = [? __x0__] [28861] [Some(0)]
return argument [28847] [None]
return [? __x1__] [28866] [Some(2)]
let lnum = [? __x4__] [351] [Some(11)]
return input [28931] [Some(14)]
let primValue = [? __x0__] [28861] [Some(0)]
return argument [28847] [None]
return [? __x1__] [28866] [Some(2)]
let rnum = [? __x5__] [353] [Some(12)]
let T = (typeof lnum) [357] [Some(14)]
let m = PRIMITIVE[T] [358] [Some(15)]
let operation = m.multiply [362] [Some(16)]
return (* x y) [24044] [None]
return [? __x6__] [385] [Some(35)]
return [? __x4__] [8694] [Some(4)]
return [? __x0__] [23703] [Some(1)]
let exprRef = __x0__ [26751] [Some(0)]
[? V] [20466] [Some(0)]
return V [20468] [Some(1)]
let exprValue = [? __x1__] [26753] [Some(1)]
let genContext = CONTEXT [20219] [Some(0)]
let generator = genContext.Generator [20223] [Some(2)]
return ~sync~ [20226] [Some(3)]
return (comp[~return~] exprValue => ~empty~) [26760] [Some(3)]
return __x1__ [10966] [Some(1)]
return [? __x0__] [10960] [Some(0)]
return __x0__ [24494] [Some(0)]
let result = __x3__ [8076] [Some(10)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [8078] [Some(11)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [8080] [Some(11)]
return result.Value [8082] [Some(12)]
return [? __x1__] [4242] [Some(2)]
let mappedValue = [? __x7__] [12318] [Some(10)]
assert (= (typeof O) Object) [7147] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7149] [Some(1)]
assert (= (typeof O) Object) [7140] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [7142] [Some(1)]
let newDesc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true)) [7143] [Some(2)]
return true [22115] [Some(0)]
assert (= __x0__ true) [926] [Some(0)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
let D = (new PropertyDescriptor()) [24583] [Some(2)]
let X = O.SubMap[P] [24584] [Some(3)]
return true [22010] [Some(2)]
D.Value = X.Value [24588] [Some(5)]
D.Writable = X.Writable [24589] [Some(6)]
D.Enumerable = X.Enumerable [24595] [Some(11)]
D.Configurable = X.Configurable [24596] [Some(12)]
return D [24597] [Some(13)]
let oldLenDesc = [! __x3__] [936] [Some(4)]
return true [22010] [Some(2)]
assert (= [! __x4__] true) [938] [Some(5)]
assert (= oldLenDesc.Configurable false) [939] [Some(6)]
let oldLen = oldLenDesc.Value [940] [Some(7)]
return (convert argument str2num) [28849] [None]
let number = [? __x0__] [29061] [Some(0)]
let int = (convert number num2int) [29065] [Some(2)]
let int32bit = (%% int (** 2i 32i)) [29066] [Some(3)]
return int32bit [29067] [Some(4)]
let index = [! __x5__] [942] [Some(9)]
return true [22115] [Some(0)]
assert (= __x0__ true) [24579] [Some(0)]
return undefined [24581] [Some(1)]
return [! __x0__] [24657] [Some(0)]
let current = [? __x0__] [24502] [Some(0)]
assert (= (typeof O) Object) [22017] [Some(0)]
return O.Extensible [24645] [Some(0)]
return [! __x0__] [24666] [Some(0)]
return [? __x0__] [22019] [Some(1)]
let extensible = [? __x1__] [24504] [Some(1)]
assert (= extensible true) [29714] [Some(3)]
let __x0__ = true [29715] [Some(4)]
return false [21935] [Some(1)]
return true [22010] [Some(2)]
return false [22029] [Some(2)]
__x0__ = (= __x1__ true) [29717] [Some(4)]
return true [22010] [Some(2)]
__x0__ = (= __x2__ true) [29722] [Some(16)]
let dp = (new DataProperty()) [29726] [Some(5)]
dp.Value = Desc.Value [29728] [Some(5)]
dp.Writable = Desc.Writable [29731] [Some(5)]
dp.Enumerable = Desc.Enumerable [29734] [Some(5)]
dp.Configurable = Desc.Configurable [29737] [Some(5)]
O.SubMap[P] = dp [29739] [Some(5)]
return true [29761] [Some(9)]
return __x2__ [24506] [Some(2)]
let succeeded = [! __x6__] [947] [Some(11)]
return true [958] [Some(17)]
return [? __x1__] [7145] [Some(3)]
let success = [? __x1__] [7151] [Some(2)]
return success [7155] [Some(4)]
[? __x8__] [12320] [Some(11)]
k = (+ k 1i) [12322] [Some(12)]
return A [12323] [Some(13)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [4177] [Some(10)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [4179] [Some(10)]
return result [4180] [Some(11)]
return [? __x1__] [4242] [Some(2)]
let result = __x6__ [8647] [Some(13)]
return result [8648] [Some(16)]
return [? __x11__] [4291] [Some(15)]
let rhs = __x4__ [22569] [Some(5)]
[? V] [20466] [Some(0)]
return V [20468] [Some(1)]
let value = [? __x5__] [22571] [Some(6)]
[? V] [21490] [Some(0)]
[? W] [21491] [Some(1)]
assert (is-instance-of V ReferenceRecord) [21492] [Some(2)]
assert (is-instance-of V ReferenceRecord) [22169] [Some(0)]
return false [22172] [Some(1)]
assert (= __x0__ false) [21494] [Some(3)]
let base = V.Base [21495] [Some(4)]
assert (is-instance-of base EnvironmentRecord) [21496] [Some(5)]
let DclRec = envRec.DeclarativeRecord [20810] [Some(0)]
return true [7743] [Some(0)]
envRec.SubMap[N].BoundValue = V [7748] [Some(1)]
envRec.SubMap[N].initialized = true [7749] [Some(2)]
return ~empty~ [7750] [Some(3)]
return __x1__ [20815] [Some(2)]
return __x1__ [21498] [Some(6)]
return __x6__ [22573] [Some(7)]
let next = __x0__ [22605] [Some(0)]
[? next] [22606] [Some(1)]
return ~empty~ [22607] [Some(2)]
let s = __x1__ [27809] [Some(2)]
return (comp[completionRecord.Type] value => completionRecord.Target) [29580] [Some(2)]
return __x2__ [27811] [Some(3)]
result = __x1__ [26900] [Some(12)]
result = __x2__ [26905] [Some(14)]
CONTEXT = null [26907] [Some(15)]
(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) [26909] [Some(15)]
assert (< 0i EXECUTION_STACK.length) [26911] [Some(16)]
CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] [26912] [Some(17)]
return result [26913] [Some(18)]
[? __x1__] [26918] [None]
return undefined [26919] [None]
let result = __x3__ [26799] [None]
let __x2__ = (- EXECUTION_STACK.length 1i) [26773] [None]
(pop EXECUTION_STACK __x2__) [26774] [None]
CONTEXT = null [26776] [None]
return undefined [26780] [None]
========================================
 lint phase
----------------------------------------
func defs: Map(383005108 -> FuncDefInfo(383005108,Some(File),?), 1057262726 -> FuncDefInfo(1057262726,Some(double),?))
