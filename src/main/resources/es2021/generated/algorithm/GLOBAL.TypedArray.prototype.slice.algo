def [BUILTIN] TypedArray.prototype.slice(start, end) = 0:{
  0:let O = this
  1:app __x0__ = (ValidateTypedArray O)
  1:[? __x0__]
  2:let len = O.ArrayLength
  3:app __x1__ = (ToIntegerOrInfinity start)
  3:let relativeStart = [? __x1__]
  4:if (= relativeStart -Infinity) 4:let k = 0i else 4:if (< relativeStart 0i) 5:{
    5:app __x2__ = (max (+ len relativeStart) 0i)
    5:let k = __x2__
  } else 6:{
    6:app __x3__ = (min relativeStart len)
    6:let k = __x3__
  }
  7:if (= end undefined) 7:let relativeEnd = len else 8:{
    8:app __x4__ = (ToIntegerOrInfinity end)
    8:let relativeEnd = [? __x4__]
  }
  8:if (= relativeEnd -Infinity) 8:let final = 0i else 8:if (< relativeEnd 0i) 9:{
    9:app __x5__ = (max (+ len relativeEnd) 0i)
    9:let final = __x5__
  } else 10:{
    10:app __x6__ = (min relativeEnd len)
    10:let final = __x6__
  }
  11:app __x7__ = (max (- final k) 0i)
  11:let count = __x7__
  12:app __x8__ = (TypedArraySpeciesCreate O (new [count]))
  12:let A = [? __x8__]
  13:if (< 0i count) 13:{
    14:app __x9__ = (IsDetachedBuffer O.ViewedArrayBuffer)
    14:if (= __x9__ true) 14:throw TypeError else 14:{}
    15:let srcName = O.TypedArrayName
    16:??? "Let id:{srcType} be the Element Type value in link:{table-the-typedarray-constructors} for id:{srcName} ."
    17:let targetName = A.TypedArrayName
    18:??? "Let id:{targetType} be the Element Type value in link:{table-the-typedarray-constructors} for id:{targetName} ."
    19:if (! (= srcType targetType)) 19:{
      20:let n = 0i
      21:while (< k final) 21:{
        22:app __x10__ = (ToString k)
        22:let Pk = [! __x10__]
        23:app __x11__ = (Get O Pk)
        23:let kValue = [! __x11__]
        24:app __x12__ = (ToString n)
        24:app __x13__ = (Set A [! __x12__] kValue true)
        24:[! __x13__]
        25:k = (+ k 1i)
        26:n = (+ n 1i)
      }
    } else 22:{
      28:let srcBuffer = O.ViewedArrayBuffer
      29:let targetBuffer = A.ViewedArrayBuffer
      30:??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for Element Type id:{srcType} ."
      32:let srcByteOffset = O.ByteOffset
      33:let targetByteIndex = A.ByteOffset
      34:let srcByteIndex = (+ (* k elementSize) srcByteOffset)
      35:let limit = (* (+ targetByteIndex count) elementSize)
      36:while (< targetByteIndex limit) 36:{
        37:app __x14__ = (GetValueFromBuffer srcBuffer srcByteIndex ~Uint8~ true ~Unordered~)
        37:let value = __x14__
        38:app __x15__ = (SetValueInBuffer targetBuffer targetByteIndex ~Uint8~ value true ~Unordered~)
        38:__x15__
        39:srcByteIndex = (+ srcByteIndex 1i)
        40:targetByteIndex = (+ targetByteIndex 1i)
      }
    }
  } else 13:{}
  41:return A
}
- id: "sec-%typedarray%.prototype.slice"
- code:
          1. Let _O_ be the *this* value.
          1. Perform ? ValidateTypedArray(_O_).
          1. Let _len_ be _O_.[[ArrayLength]].
          1. Let _relativeStart_ be ? ToIntegerOrInfinity(_start_).
          1. If _relativeStart_ is -∞, let _k_ be 0.
          1. Else if _relativeStart_ < 0, let _k_ be max(_len_ + _relativeStart_, 0).
          1. Else, let _k_ be min(_relativeStart_, _len_).
          1. If _end_ is *undefined*, let _relativeEnd_ be _len_; else let _relativeEnd_ be ? ToIntegerOrInfinity(_end_).
          1. If _relativeEnd_ is -∞, let _final_ be 0.
          1. Else if _relativeEnd_ < 0, let _final_ be max(_len_ + _relativeEnd_, 0).
          1. Else, let _final_ be min(_relativeEnd_, _len_).
          1. Let _count_ be max(_final_ - _k_, 0).
          1. Let _A_ be ? TypedArraySpeciesCreate(_O_, « 𝔽(_count_) »).
          1. If _count_ > 0, then
            1. If IsDetachedBuffer(_O_.[[ViewedArrayBuffer]]) is *true*, throw a *TypeError* exception.
            1. Let _srcName_ be the String value of _O_.[[TypedArrayName]].
            1. Let _srcType_ be the Element Type value in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for _srcName_.
            1. Let _targetName_ be the String value of _A_.[[TypedArrayName]].
            1. Let _targetType_ be the Element Type value in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for _targetName_.
            1. If _srcType_ is different from _targetType_, then
              1. Let _n_ be 0.
              1. Repeat, while _k_ < _final_,
                1. Let _Pk_ be ! ToString(𝔽(_k_)).
                1. Let _kValue_ be ! Get(_O_, _Pk_).
                1. Perform ! Set(_A_, ! ToString(𝔽(_n_)), _kValue_, *true*).
                1. Set _k_ to _k_ + 1.
                1. Set _n_ to _n_ + 1.
            1. Else,
              1. Let _srcBuffer_ be _O_.[[ViewedArrayBuffer]].
              1. Let _targetBuffer_ be _A_.[[ViewedArrayBuffer]].
              1. Let _elementSize_ be the Element Size value specified in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for Element Type _srcType_.
              1. NOTE: If _srcType_ and _targetType_ are the same, the transfer must be performed in a manner that preserves the bit-level encoding of the source data.
              1. Let _srcByteOffset_ be _O_.[[ByteOffset]].
              1. Let _targetByteIndex_ be _A_.[[ByteOffset]].
              1. Let _srcByteIndex_ be (_k_ × _elementSize_) + _srcByteOffset_.
              1. Let _limit_ be _targetByteIndex_ + _count_ × _elementSize_.
              1. Repeat, while _targetByteIndex_ < _limit_,
                1. Let _value_ be GetValueFromBuffer(_srcBuffer_, _srcByteIndex_, ~Uint8~, *true*, ~Unordered~).
                1. Perform SetValueInBuffer(_targetBuffer_, _targetByteIndex_, ~Uint8~, _value_, *true*, ~Unordered~).
                1. Set _srcByteIndex_ to _srcByteIndex_ + 1.
                1. Set _targetByteIndex_ to _targetByteIndex_ + 1.
          1. Return _A_.