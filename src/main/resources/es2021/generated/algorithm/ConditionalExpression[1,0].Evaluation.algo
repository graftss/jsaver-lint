def [SYNTAX] ConditionalExpression[1,0].Evaluation[R]<(ShortCircuitExpression, AssignmentExpression0, AssignmentExpression1),true>() = 0:{
  0:access __x0__ = (ShortCircuitExpression "Evaluation")
  0:let lref = __x0__
  1:app __x1__ = (GetValue lref)
  1:app __x2__ = (ToBoolean [? __x1__])
  1:let lval = [! __x2__]
  2:if (= lval true) 2:{
    3:access __x3__ = (AssignmentExpression0 "Evaluation")
    3:let trueRef = __x3__
    4:app __x4__ = (GetValue trueRef)
    4:return [? __x4__]
  } else 5:{
    6:access __x5__ = (AssignmentExpression1 "Evaluation")
    6:let falseRef = __x5__
    7:app __x6__ = (GetValue falseRef)
    7:return [? __x6__]
  }
}
- id: "sec-conditional-operator-runtime-semantics-evaluation"
- code:
        1. Let _lref_ be the result of evaluating |ShortCircuitExpression|.
        1. Let _lval_ be ! ToBoolean(? GetValue(_lref_)).
        1. If _lval_ is *true*, then
          1. Let _trueRef_ be the result of evaluating the first |AssignmentExpression|.
          1. Return ? GetValue(_trueRef_).
        1. Else,
          1. Let _falseRef_ be the result of evaluating the second |AssignmentExpression|.
          1. Return ? GetValue(_falseRef_).