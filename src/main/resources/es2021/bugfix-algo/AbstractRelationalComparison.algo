
def AbstractRelationalComparison(x, y, LeftFirst?) = {
  0:if (= LeftFirst true) 0:{
    1:app __x0__ = (ToPrimitive x ~number~)
    1:let px = [? __x0__]
    2:app __x1__ = (ToPrimitive y ~number~)
    2:let py = [? __x1__]
  } else 3:{
    5:app __x2__ = (ToPrimitive y ~number~)
    5:let py = [? __x2__]
    6:app __x3__ = (ToPrimitive x ~number~)
    6:let px = [? __x3__]
  }
  7:if (&& (= (typeof px) String) (= (typeof py) String)) 7:{
    8:app __x4__ = (IsStringPrefix py px)
    8:if (= __x4__ true) 8:return false else 8:{}
    9:app __x5__ = (IsStringPrefix px py)
    9:if (= __x5__ true) 9:return true else 9:{}
    10:??? "Let id:{k} be the smallest non - negative integer such that the code unit at index id:{k} within id:{px} is different from the code unit at index id:{k} within id:{py} . ( There must be such a id:{k} , for neither String is a prefix of the other . )"
    11:??? "Let id:{m} be the integer that is the numeric value of the code unit at index id:{k} within id:{px} ."
    12:??? "Let id:{n} be the integer that is the numeric value of the code unit at index id:{k} within id:{py} ."
    13:if (< m n) 13:return true else 13:return false
  } else 14:{
    15:if (&& (= (typeof px) BigInt) (= (typeof py) String)) 15:{
      16:app __x6__ = (StringToBigInt py)
      16:let ny = [! __x6__]
      17:if (= ny NaN) 17:return undefined else 17:{}
      18:app __x7__ = (PRIMITIVE[BigInt]["lessThan"] px ny)
      18:return __x7__
    } else 15:{}
    19:if (&& (= (typeof px) String) (= (typeof py) BigInt)) 19:{
      20:app __x8__ = (StringToBigInt px)
      20:let nx = [! __x8__]
      21:if (= nx NaN) 21:return undefined else 21:{}
      22:app __x9__ = (PRIMITIVE[BigInt]["lessThan"] nx py)
      22:return __x9__
    } else 19:{}
    24:app __x10__ = (ToNumeric px)
    24:let nx = [? __x10__]
    25:app __x11__ = (ToNumeric py)
    25:let ny = [? __x11__]
    26:if (= (typeof nx) (typeof ny)) 26:{
      26:app __x12__ = (PRIMITIVE[(typeof nx)]["lessThan"] nx ny)
      26:return __x12__
    } else 26:{}
    27:assert (|| (&& (= (typeof nx) BigInt) (= (typeof ny) Number)) (&& (= (typeof nx) Number) (= (typeof ny) BigInt)))
    28:if (|| (= nx NaN) (= ny NaN)) 28:return undefined else 28:{}
    29:if (|| (= nx -Infinity) (= ny Infinity)) 29:return true else 29:{}
    30:if (|| (= nx Infinity) (= ny -Infinity)) 30:return false else 30:{}
    31:if (< nx ny) 31:return true else 31:return false
  }
}
- id: "sec-abstract-relational-comparison"
- code:
        1. If the _LeftFirst_ flag is *true*, then
          1. Let _px_ be ? ToPrimitive(_x_, ~number~).
          1. Let _py_ be ? ToPrimitive(_y_, ~number~).
        1. Else,
          1. NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.
          1. Let _py_ be ? ToPrimitive(_y_, ~number~).
          1. Let _px_ be ? ToPrimitive(_x_, ~number~).
        1. [id="step-arc-string-check"] If Type(_px_) is String and Type(_py_) is String, then
          1. If IsStringPrefix(_py_, _px_) is *true*, return *false*.
          1. If IsStringPrefix(_px_, _py_) is *true*, return *true*.
          1. Let _k_ be the smallest non-negative integer such that the code unit at index _k_ within _px_ is different from the code unit at index _k_ within _py_. (There must be such a _k_, for neither String is a prefix of the other.)
          1. Let _m_ be the integer that is the numeric value of the code unit at index _k_ within _px_.
          1. Let _n_ be the integer that is the numeric value of the code unit at index _k_ within _py_.
          1. If _m_ < _n_, return *true*. Otherwise, return *false*.
        1. Else,
          1. If Type(_px_) is BigInt and Type(_py_) is String, then
            1. Let _ny_ be ! StringToBigInt(_py_).
            1. If _ny_ is *NaN*, return *undefined*.
            1. Return BigInt::lessThan(_px_, _ny_).
          1. If Type(_px_) is String and Type(_py_) is BigInt, then
            1. Let _nx_ be ! StringToBigInt(_px_).
            1. If _nx_ is *NaN*, return *undefined*.
            1. Return BigInt::lessThan(_nx_, _py_).
          1. NOTE: Because _px_ and _py_ are primitive values, evaluation order is not important.
          1. Let _nx_ be ? ToNumeric(_px_).
          1. Let _ny_ be ? ToNumeric(_py_).
          1. If Type(_nx_) is the same as Type(_ny_), return Type(_nx_)::lessThan(_nx_, _ny_).
          1. Assert: Type(_nx_) is BigInt and Type(_ny_) is Number, or Type(_nx_) is Number and Type(_ny_) is BigInt.
          1. If _nx_ or _ny_ is *NaN*, return *undefined*.
          1. If _nx_ is *-∞*<sub>𝔽</sub> or _ny_ is *+∞*<sub>𝔽</sub>, return *true*.
          1. If _nx_ is *+∞*<sub>𝔽</sub> or _ny_ is *-∞*<sub>𝔽</sub>, return *false*.
          1. If ℝ(_nx_) < ℝ(_ny_), return *true*; otherwise return *false*.
