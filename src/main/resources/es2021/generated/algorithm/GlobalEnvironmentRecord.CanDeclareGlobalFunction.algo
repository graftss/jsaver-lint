def [METHOD] GlobalEnvironmentRecord.CanDeclareGlobalFunction(envRec)(N) = 0:{
  0:let ObjRec = envRec.ObjectRecord
  1:let globalObject = ObjRec.BindingObject
  2:app __x0__ = (globalObject.GetOwnProperty globalObject N)
  2:let existingProp = [? __x0__]
  3:if (= existingProp undefined) 3:{
    3:app __x1__ = (IsExtensible globalObject)
    3:return [? __x1__]
  } else 3:{}
  4:if (= existingProp.Configurable true) 4:return true else 4:{}
  5:??? "If IsDataDescriptor ( id:{existingProp} ) is value:{true} and id:{existingProp} has attribute values { [ [ Writable ] ] : value:{true} , [ [ Enumerable ] ] : value:{true} } , return value:{true} ."
  6:return false
}
- id: "sec-candeclareglobalfunction"
- code:
            1. Let _ObjRec_ be _envRec_.[[ObjectRecord]].
            1. Let _globalObject_ be the binding object for _ObjRec_.
            1. Let _existingProp_ be ? _globalObject_.[[GetOwnProperty]](_N_).
            1. If _existingProp_ is *undefined*, return ? IsExtensible(_globalObject_).
            1. If _existingProp_.[[Configurable]] is *true*, return *true*.
            1. If IsDataDescriptor(_existingProp_) is *true* and _existingProp_ has attribute values { [[Writable]]: *true*, [[Enumerable]]: *true* }, return *true*.
            1. Return *false*.