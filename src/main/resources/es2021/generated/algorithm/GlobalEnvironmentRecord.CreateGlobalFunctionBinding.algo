def [METHOD] GlobalEnvironmentRecord.CreateGlobalFunctionBinding(envRec)(N, V, D) = 0:{
  0:let ObjRec = envRec.ObjectRecord
  1:let globalObject = ObjRec.BindingObject
  2:app __x0__ = (globalObject.GetOwnProperty globalObject N)
  2:let existingProp = [? __x0__]
  3:if (|| (= existingProp undefined) (= existingProp.Configurable true)) 4:let desc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> D)) else 3:let desc = (new PropertyDescriptor("Value" -> V))
  7:app __x1__ = (DefinePropertyOrThrow globalObject N desc)
  7:[? __x1__]
  8:app __x2__ = (Set globalObject N V false)
  8:[? __x2__]
  9:let varDeclaredNames = envRec.VarNames
  10:if (! (contains varDeclaredNames N)) 11:append N -> varDeclaredNames else 10:{}
  12:return ~empty~
}
- id: "sec-createglobalfunctionbinding"
- code:
            1. Let _ObjRec_ be _envRec_.[[ObjectRecord]].
            1. Let _globalObject_ be the binding object for _ObjRec_.
            1. Let _existingProp_ be ? _globalObject_.[[GetOwnProperty]](_N_).
            1. If _existingProp_ is *undefined* or _existingProp_.[[Configurable]] is *true*, then
              1. Let _desc_ be the PropertyDescriptor { [[Value]]: _V_, [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: _D_ }.
            1. Else,
              1. Let _desc_ be the PropertyDescriptor { [[Value]]: _V_ }.
            1. Perform ? DefinePropertyOrThrow(_globalObject_, _N_, _desc_).
            1. [id="step-createglobalfunctionbinding-set"] Perform ? Set(_globalObject_, _N_, _V_, *false*).
            1. Let _varDeclaredNames_ be _envRec_.[[VarNames]].
            1. If _varDeclaredNames_ does not contain _N_, then
              1. Append _N_ to _varDeclaredNames_.
            1. Return NormalCompletion(~empty~).