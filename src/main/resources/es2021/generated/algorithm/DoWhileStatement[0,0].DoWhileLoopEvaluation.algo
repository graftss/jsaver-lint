def [SYNTAX] DoWhileStatement[0,0].DoWhileLoopEvaluation[R]<(Statement, Expression),true>(labelSet) = 0:{
  0:let V = undefined
  1:while true 1:{
    2:access __x0__ = (Statement "Evaluation")
    2:let stmtResult = __x0__
    3:app __x1__ = (LoopContinues stmtResult labelSet)
    3:if (= __x1__ false) 3:{
      3:app __x2__ = (UpdateEmpty stmtResult V)
      3:return __x2__
    } else 3:{}
    4:if (! (= stmtResult.Value ~empty~)) 4:V = stmtResult.Value else 4:{}
    5:access __x3__ = (Expression "Evaluation")
    5:let exprRef = __x3__
    6:app __x4__ = (GetValue exprRef)
    6:let exprValue = [? __x4__]
    7:app __x5__ = (ToBoolean exprValue)
    7:if (= [! __x5__] false) 7:return V else 7:{}
  }
}
- id: "sec-runtime-semantics-dowhileloopevaluation"
- code:
          1. Let _V_ be *undefined*.
          1. Repeat,
            1. Let _stmtResult_ be the result of evaluating |Statement|.
            1. If LoopContinues(_stmtResult_, _labelSet_) is *false*, return Completion(UpdateEmpty(_stmtResult_, _V_)).
            1. If _stmtResult_.[[Value]] is not ~empty~, set _V_ to _stmtResult_.[[Value]].
            1. Let _exprRef_ be the result of evaluating |Expression|.
            1. Let _exprValue_ be ? GetValue(_exprRef_).
            1. If ! ToBoolean(_exprValue_) is *false*, return NormalCompletion(_V_).