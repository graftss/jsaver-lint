def [BUILTIN] FinalizationRegistry.prototype.register(target, heldValue, unregisterToken?) = 0:{
  0:let finalizationRegistry = this
  1:app __x0__ = (RequireInternalSlot finalizationRegistry "Cells")
  1:[? __x0__]
  2:if (! (= (typeof target) Object)) 2:throw TypeError else 2:{}
  3:app __x1__ = (SameValue target heldValue)
  3:if (= __x1__ true) 3:throw TypeError else 3:{}
  4:if (! (= (typeof unregisterToken) Object)) 4:{
    5:if (! (= unregisterToken undefined)) 5:throw TypeError else 5:{}
    6:unregisterToken = ~empty~
  } else 4:{}
  7:let cell = (new Record("WeakRefTarget" -> target, "HeldValue" -> heldValue, "UnregisterToken" -> unregisterToken))
  8:append cell -> finalizationRegistry.Cells
  9:return undefined
}
- id: "sec-finalization-registry.prototype.register"
- code:
          1. Let _finalizationRegistry_ be the *this* value.
          1. Perform ? RequireInternalSlot(_finalizationRegistry_, [[Cells]]).
          1. If Type(_target_) is not Object, throw a *TypeError* exception.
          1. If SameValue(_target_, _heldValue_) is *true*, throw a *TypeError* exception.
          1. If Type(_unregisterToken_) is not Object, then
            1. If _unregisterToken_ is not *undefined*, throw a *TypeError* exception.
            1. Set _unregisterToken_ to ~empty~.
          1. Let _cell_ be the Record { [[WeakRefTarget]]: _target_, [[HeldValue]]: _heldValue_, [[UnregisterToken]]: _unregisterToken_ }.
          1. Append _cell_ to _finalizationRegistry_.[[Cells]].
          1. Return *undefined*.