def [BUILTIN] ForInIteratorPrototype.next() = 0:{
  0:let O = this
  1:assert (= (typeof O) Object)
  3:let object = O.Object
  4:let visited = O.VisitedKeys
  5:let remaining = O.RemainingKeys
  6:while true 6:{
    7:if (= O.ObjectWasVisited false) 7:{
      8:app __x0__ = (object.OwnPropertyKeys object)
      8:let keys = [? __x0__]
      9:let __x1__ = keys
      9:let __x2__ = 0i
      9:while (< __x2__ __x1__.length) 9:{
        9:let key = __x1__[__x2__]
        9:__x2__ = (+ __x2__ 1i)
        10:if (= (typeof key) String) 11:append key -> remaining else 10:{}
      }
      12:O.ObjectWasVisited = true
    } else 7:{}
    13:while (< 0i remaining.length) 13:{
      14:let r = remaining[0i]
      15:let __x3__ = (pop remaining 0i)
      16:if (! (contains visited r)) 16:{
        16:app __x4__ = (object.GetOwnProperty object r)
        16:let desc = [? __x4__]
        16:if (! (= desc undefined)) 16:{
          16:append r -> visited
          16:if (= desc.Enumerable true) 16:{
            16:app __x5__ = (CreateIterResultObject r false)
            16:return __x5__
          } else 16:{}
        } else 16:{}
      } else 16:{}
    }
    21:app __x6__ = (object.GetPrototypeOf object)
    21:object = [? __x6__]
    22:O.Object = object
    23:O.ObjectWasVisited = false
    24:if (= object null) 24:{
      24:app __x7__ = (CreateIterResultObject undefined true)
      24:return __x7__
    } else 24:{}
  }
}
- id: "sec-%foriniteratorprototype%.next"
- code:
              1. Let _O_ be the *this* value.
              1. Assert: Type(_O_) is Object.
              1. Assert: _O_ has all of the internal slots of a For-In Iterator Instance (<emu-xref href="#sec-properties-of-for-in-iterator-instances"></emu-xref>).
              1. Let _object_ be _O_.[[Object]].
              1. Let _visited_ be _O_.[[VisitedKeys]].
              1. Let _remaining_ be _O_.[[RemainingKeys]].
              1. Repeat,
                1. If _O_.[[ObjectWasVisited]] is *false*, then
                  1. Let _keys_ be ? _object_.[[OwnPropertyKeys]]().
                  1. For each element _key_ of _keys_, do
                    1. If Type(_key_) is String, then
                      1. Append _key_ to _remaining_.
                  1. Set _O_.[[ObjectWasVisited]] to *true*.
                1. Repeat, while _remaining_ is not empty,
                  1. Let _r_ be the first element of _remaining_.
                  1. Remove the first element from _remaining_.
                  1. If there does not exist an element _v_ of _visited_ such that SameValue(_r_, _v_) is *true*, then
                    1. Let _desc_ be ? _object_.[[GetOwnProperty]](_r_).
                    1. If _desc_ is not *undefined*, then
                      1. Append _r_ to _visited_.
                      1. If _desc_.[[Enumerable]] is *true*, return CreateIterResultObject(_r_, *false*).
                1. Set _object_ to ? _object_.[[GetPrototypeOf]]().
                1. Set _O_.[[Object]] to _object_.
                1. Set _O_.[[ObjectWasVisited]] to *false*.
                1. If _object_ is *null*, return CreateIterResultObject(*undefined*, *true*).