def [METHOD] BoundFunctionExoticObject.Call(F)(thisArgument, argumentsList) = 0:{
  0:let target = F.BoundTargetFunction
  1:let boundThis = F.BoundThis
  2:let boundArgs = F.BoundArguments
  3:let __x0__ = (copy-obj boundArgs)
  3:let __x1__ = argumentsList
  3:let __x2__ = 0i
  3:while (< __x2__ __x1__.length) 3:{
    3:let __x3__ = __x1__[__x2__]
    3:__x2__ = (+ __x2__ 1i)
    3:append __x3__ -> __x0__
  }
  3:let args = __x0__
  4:app __x4__ = (Call target boundThis args)
  4:return [? __x4__]
}
- id: "sec-bound-function-exotic-objects-call-thisargument-argumentslist"
- code:
          1. Let _target_ be _F_.[[BoundTargetFunction]].
          1. Let _boundThis_ be _F_.[[BoundThis]].
          1. Let _boundArgs_ be _F_.[[BoundArguments]].
          1. Let _args_ be a List whose elements are the elements of _boundArgs_, followed by the elements of _argumentsList_.
          1. Return ? Call(_target_, _boundThis_, _args_).