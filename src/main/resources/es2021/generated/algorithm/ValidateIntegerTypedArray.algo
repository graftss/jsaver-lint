def ValidateIntegerTypedArray(typedArray, waitable?) = 0:{
  0:if (= waitable absent) 0:waitable = false else 0:{}
  1:app __x0__ = (ValidateTypedArray typedArray)
  1:let buffer = [? __x0__]
  2:let typeName = typedArray.TypedArrayName
  3:??? "Let id:{type} be the Element Type value in link:{table-the-typedarray-constructors} for id:{typeName} ."
  4:if (= waitable true) 5:if (! (|| (= typeName "Int32Array") (= typeName "BigInt64Array"))) 5:throw TypeError else 5:{} else 6:{
    7:let __x1__ = true
    7:app __x2__ = (IsUnclampedIntegerElementType type)
    7:__x1__ = (= [! __x2__] false)
    7:if __x1__ 7:{
      7:app __x3__ = (IsBigIntElementType type)
      7:__x1__ = (= [! __x3__] false)
    } else 7:{}
    7:if __x1__ 7:throw TypeError else 7:{}
  }
  8:return buffer
}
- id: "sec-validateintegertypedarray"
- code:
          1. If _waitable_ is not present, set _waitable_ to *false*.
          1. Let _buffer_ be ? ValidateTypedArray(_typedArray_).
          1. Let _typeName_ be _typedArray_.[[TypedArrayName]].
          1. Let _type_ be the Element Type value in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for _typeName_.
          1. If _waitable_ is *true*, then
            1. If _typeName_ is not *"Int32Array"* or *"BigInt64Array"*, throw a *TypeError* exception.
          1. Else,
            1. If ! IsUnclampedIntegerElementType(_type_) is *false* and ! IsBigIntElementType(_type_) is *false*, throw a *TypeError* exception.
          1. Return _buffer_.