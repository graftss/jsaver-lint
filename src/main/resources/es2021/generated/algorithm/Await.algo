def Await(value) = 0:{
  0:let asyncContext = CONTEXT
  1:app __x0__ = (PromiseResolve INTRINSICS["%Promise%"] value)
  1:let promise = [? __x0__]
  2:let stepsFulfilled = ALGORITHM["GLOBAL.AwaitFulfilledFunctions"]
  3:let lengthFulfilled = 1i
  4:app __x1__ = (CreateBuiltinFunction stepsFulfilled lengthFulfilled "" (new ["AsyncContext"]))
  4:let onFulfilled = [! __x1__]
  5:onFulfilled.AsyncContext = asyncContext
  6:let stepsRejected = ALGORITHM["GLOBAL.AwaitRejectedFunctions"]
  7:let lengthRejected = 1i
  8:app __x2__ = (CreateBuiltinFunction stepsRejected lengthRejected "" (new ["AsyncContext"]))
  8:let onRejected = [! __x2__]
  9:onRejected.AsyncContext = asyncContext
  10:app __x3__ = (PerformPromiseThen promise onFulfilled onRejected)
  10:[! __x3__]
  11:if (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] asyncContext) 11:(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) else 11:{}
  11:CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  12:RET_CONT = (pop asyncContext.ReturnCont 0i)
  12:cont __x4__ = (completion) [=>] 12:return completion
  12:asyncContext.ResumeCont = __x4__
  14:app _ = (RET_CONT undefined)
}
- id: "await"
- code:
          1. Let _asyncContext_ be the running execution context.
          1. Let _promise_ be ? PromiseResolve(%Promise%, _value_).
          1. Let _stepsFulfilled_ be the algorithm steps defined in <emu-xref href="#await-fulfilled" title></emu-xref>.
          1. Let _lengthFulfilled_ be the number of non-optional parameters of the function definition in <emu-xref href="#await-fulfilled" title></emu-xref>.
          1. Let _onFulfilled_ be ! CreateBuiltinFunction(_stepsFulfilled_, _lengthFulfilled_, *""*, « [[AsyncContext]] »).
          1. Set _onFulfilled_.[[AsyncContext]] to _asyncContext_.
          1. Let _stepsRejected_ be the algorithm steps defined in <emu-xref href="#await-rejected" title></emu-xref>.
          1. Let _lengthRejected_ be the number of non-optional parameters of the function definition in <emu-xref href="#await-rejected" title></emu-xref>.
          1. Let _onRejected_ be ! CreateBuiltinFunction(_stepsRejected_, _lengthRejected_, *""*, « [[AsyncContext]] »).
          1. Set _onRejected_.[[AsyncContext]] to _asyncContext_.
          1. Perform ! PerformPromiseThen(_promise_, _onFulfilled_, _onRejected_).
          1. Remove _asyncContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.
          1. Set the code evaluation state of _asyncContext_ such that when evaluation is resumed with a Completion _completion_, the following steps of the algorithm that invoked Await will be performed, with _completion_ available.
          1. Return.
          1. NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of _asyncContext_.