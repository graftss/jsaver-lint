def [METHOD] IntegerIndexedExoticObject.OwnPropertyKeys(O)() = 0:{
  0:let keys = (new [])
  2:app __x0__ = (IsDetachedBuffer O.ViewedArrayBuffer)
  2:if (= __x0__ false) 2:{
    3:let i = (+ 0i 0i)
    3:let __x1__ = (+ O.ArrayLength 0i)
    3:while (< i __x1__) 3:{
      3:app __x2__ = (ToString i)
      3:append [! __x2__] -> keys
      3:i = (+ i 1i)
    }
  } else 2:{}
  5:??? "For each own property key id:{P} of id:{O} such that Type ( id:{P} ) is String and id:{P} is not an integer index , in ascending chronological order of property creation , do in:{} out:{}"
  7:??? "For each own property key id:{P} of id:{O} such that Type ( id:{P} ) is Symbol , in ascending chronological order of property creation , do in:{} out:{}"
  9:return keys
}
- id: "sec-integer-indexed-exotic-objects-ownpropertykeys"
- code:
          1. Let _keys_ be a new empty List.
          1. Assert: _O_ is an Integer-Indexed exotic object.
          1. If IsDetachedBuffer(_O_.[[ViewedArrayBuffer]]) is *false*, then
            1. For each integer _i_ starting with 0 such that _i_ < _O_.[[ArrayLength]], in ascending order, do
              1. Add ! ToString(𝔽(_i_)) as the last element of _keys_.
          1. For each own property key _P_ of _O_ such that Type(_P_) is String and _P_ is not an integer index, in ascending chronological order of property creation, do
            1. Add _P_ as the last element of _keys_.
          1. For each own property key _P_ of _O_ such that Type(_P_) is Symbol, in ascending chronological order of property creation, do
            1. Add _P_ as the last element of _keys_.
          1. Return _keys_.