def [BUILTIN] Array.prototype.reduceRight(callbackfn, initialValue?) = 0:{
  0:app __x0__ = (ToObject this)
  0:let O = [? __x0__]
  1:app __x1__ = (LengthOfArrayLike O)
  1:let len = [? __x1__]
  2:app __x2__ = (IsCallable callbackfn)
  2:if (= __x2__ false) 2:throw TypeError else 2:{}
  3:if (&& (= len 0i) (= initialValue absent)) 3:throw TypeError else 3:{}
  4:let k = (- len 1i)
  5:let accumulator = undefined
  6:if (! (= initialValue absent)) 7:accumulator = initialValue else 8:{
    9:let kPresent = false
    10:while (&& (= kPresent false) (! (< k 0i))) 10:{
      11:app __x3__ = (ToString k)
      11:let Pk = [! __x3__]
      12:app __x4__ = (HasProperty O Pk)
      12:kPresent = [? __x4__]
      13:if (= kPresent true) 13:{
        14:app __x5__ = (Get O Pk)
        14:accumulator = [? __x5__]
      } else 13:{}
      15:k = (- k 1i)
    }
    16:if (= kPresent false) 16:throw TypeError else 16:{}
  }
  17:while (! (< k 0i)) 17:{
    18:app __x6__ = (ToString k)
    18:let Pk = [! __x6__]
    19:app __x7__ = (HasProperty O Pk)
    19:let kPresent = [? __x7__]
    20:if (= kPresent true) 20:{
      21:app __x8__ = (Get O Pk)
      21:let kValue = [? __x8__]
      22:app __x9__ = (Call callbackfn undefined (new [accumulator, kValue, k, O]))
      22:accumulator = [? __x9__]
    } else 20:{}
    23:k = (- k 1i)
  }
  24:return accumulator
}
- id: "sec-array.prototype.reduceright"
- code:
          1. Let _O_ be ? ToObject(*this* value).
          1. Let _len_ be ? LengthOfArrayLike(_O_).
          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.
          1. If _len_ is 0 and _initialValue_ is not present, throw a *TypeError* exception.
          1. Let _k_ be _len_ - 1.
          1. Let _accumulator_ be *undefined*.
          1. If _initialValue_ is present, then
            1. Set _accumulator_ to _initialValue_.
          1. Else,
            1. Let _kPresent_ be *false*.
            1. Repeat, while _kPresent_ is *false* and _k_ ≥ 0,
              1. Let _Pk_ be ! ToString(𝔽(_k_)).
              1. Set _kPresent_ to ? HasProperty(_O_, _Pk_).
              1. If _kPresent_ is *true*, then
                1. Set _accumulator_ to ? Get(_O_, _Pk_).
              1. Set _k_ to _k_ - 1.
            1. If _kPresent_ is *false*, throw a *TypeError* exception.
          1. Repeat, while _k_ ≥ 0,
            1. Let _Pk_ be ! ToString(𝔽(_k_)).
            1. Let _kPresent_ be ? HasProperty(_O_, _Pk_).
            1. If _kPresent_ is *true*, then
              1. Let _kValue_ be ? Get(_O_, _Pk_).
              1. Set _accumulator_ to ? Call(_callbackfn_, *undefined*, « _accumulator_, _kValue_, 𝔽(_k_), _O_ »).
            1. Set _k_ to _k_ - 1.
          1. Return _accumulator_.