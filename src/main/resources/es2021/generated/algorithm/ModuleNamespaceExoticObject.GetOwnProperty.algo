def [METHOD] ModuleNamespaceExoticObject.GetOwnProperty(O)(P) = 0:{
  0:if (= (typeof P) Symbol) 0:{
    0:app __x0__ = (OrdinaryGetOwnProperty O P)
    0:return __x0__
  } else 0:{}
  1:let exports = O.Exports
  2:if (! (contains exports P)) 2:return undefined else 2:{}
  3:app __x1__ = (O.Get O P O)
  3:let value = [? __x1__]
  4:return (new PropertyDescriptor("Value" -> value, "Writable" -> true, "Enumerable" -> true, "Configurable" -> false))
}
- id: "sec-module-namespace-exotic-objects-getownproperty-p"
- code:
          1. If Type(_P_) is Symbol, return OrdinaryGetOwnProperty(_O_, _P_).
          1. Let _exports_ be _O_.[[Exports]].
          1. If _P_ is not an element of _exports_, return *undefined*.
          1. Let _value_ be ? _O_.[[Get]](_P_, _O_).
          1. Return PropertyDescriptor { [[Value]]: _value_, [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: *false* }.