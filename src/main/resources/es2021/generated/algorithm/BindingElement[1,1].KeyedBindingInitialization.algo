def [SYNTAX] BindingElement[1,1].KeyedBindingInitialization[R]<(BindingPattern, Initializer),true>(value, environment, propertyName) = 0:{
  0:app __x0__ = (GetV value propertyName)
  0:let v = [? __x0__]
  1:if (&& (! (= Initializer absent)) (= v undefined)) 1:{
    2:access __x1__ = (Initializer "Evaluation")
    2:let defaultValue = __x1__
    3:app __x2__ = (GetValue defaultValue)
    3:v = [? __x2__]
  } else 1:{}
  4:access __x3__ = (BindingPattern "BindingInitialization" v environment)
  4:return __x3__
}
- id: "sec-runtime-semantics-keyedbindinginitialization"
- code:
          1. Let _v_ be ? GetV(_value_, _propertyName_).
          1. If |Initializer| is present and _v_ is *undefined*, then
            1. Let _defaultValue_ be the result of evaluating |Initializer|.
            1. Set _v_ to ? GetValue(_defaultValue_).
          1. Return the result of performing BindingInitialization for |BindingPattern| passing _v_ and _environment_ as arguments.