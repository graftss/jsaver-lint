def [BUILTIN] TypedArray.prototype.indexOf(searchElement, fromIndex?) = 0:{
  0:let O = this
  1:app __x0__ = (ValidateTypedArray O)
  1:[? __x0__]
  2:let len = O.ArrayLength
  3:if (= len 0i) 3:return -1i else 3:{}
  4:app __x1__ = (ToIntegerOrInfinity fromIndex)
  4:let n = [? __x1__]
  6:if (= n Infinity) 6:return -1i else 6:if (= n -Infinity) 7:n = 0i else 6:{}
  8:if (! (< n 0i)) 9:let k = n else 10:{
    11:let k = (+ len n)
    12:if (< k 0i) 12:k = 0i else 12:{}
  }
  13:while (< k len) 13:{
    14:app __x2__ = (ToString k)
    14:app __x3__ = (HasProperty O [! __x2__])
    14:let kPresent = [! __x3__]
    15:if (= kPresent true) 15:{
      16:app __x4__ = (ToString k)
      16:app __x5__ = (Get O [! __x4__])
      16:let elementK = [! __x5__]
      17:app __x6__ = (StrictEqualityComparison searchElement elementK)
      17:let same = __x6__
      18:if (= same true) 18:return k else 18:{}
    } else 15:{}
    19:k = (+ k 1i)
  }
  20:return -1i
}
- id: "sec-%typedarray%.prototype.indexof"
- code:
          1. Let _O_ be the *this* value.
          1. Perform ? ValidateTypedArray(_O_).
          1. Let _len_ be _O_.[[ArrayLength]].
          1. If _len_ is 0, return *-1*<sub>𝔽</sub>.
          1. Let _n_ be ? ToIntegerOrInfinity(_fromIndex_).
          1. Assert: If _fromIndex_ is *undefined*, then _n_ is 0.
          1. If _n_ is +∞, return *-1*<sub>𝔽</sub>.
          1. Else if _n_ is -∞, set _n_ to 0.
          1. If _n_ ≥ 0, then
            1. Let _k_ be _n_.
          1. Else,
            1. Let _k_ be _len_ + _n_.
            1. If _k_ < 0, set _k_ to 0.
          1. Repeat, while _k_ < _len_,
            1. Let _kPresent_ be ! HasProperty(_O_, ! ToString(𝔽(_k_))).
            1. If _kPresent_ is *true*, then
              1. Let _elementK_ be ! Get(_O_, ! ToString(𝔽(_k_))).
              1. Let _same_ be the result of performing Strict Equality Comparison _searchElement_ === _elementK_.
              1. If _same_ is *true*, return 𝔽(_k_).
            1. Set _k_ to _k_ + 1.
          1. Return *-1*<sub>𝔽</sub>.