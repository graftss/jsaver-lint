def [METHOD] ECMAScriptFunctionObject.Call(F)(thisArgument, argumentsList) = 0:{
  0:assert (is-instance-of F ECMAScriptFunctionObject)
  1:let callerContext = CONTEXT
  2:app __x0__ = (PrepareForOrdinaryCall F undefined)
  2:let calleeContext = __x0__
  4:if (= F.IsClassConstructor true) 4:{
    5:let error = (new OrdinaryObject("Prototype" -> INTRINSICS["%TypeError.prototype%"], "ErrorData" -> undefined))
    7:if (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] calleeContext) 7:(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) else 7:{}
    7:CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
    8:app __x1__ = (ThrowCompletion error)
    8:return __x1__
  } else 4:{}
  9:app __x2__ = (OrdinaryCallBindThis F calleeContext thisArgument)
  9:__x2__
  10:app __x3__ = (OrdinaryCallEvaluateBody F argumentsList)
  10:let result = __x3__
  11:if (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] calleeContext) 11:(pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) else 11:{}
  11:CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  12:if (= result.Type ~return~) 12:return result.Value else 12:{}
  13:[? result]
  14:return undefined
}
- id: "sec-ecmascript-function-objects-call-thisargument-argumentslist"
- code:
        1. Assert: _F_ is an ECMAScript function object.
        1. Let _callerContext_ be the running execution context.
        1. Let _calleeContext_ be PrepareForOrdinaryCall(_F_, *undefined*).
        1. Assert: _calleeContext_ is now the running execution context.
        1. If _F_.[[IsClassConstructor]] is *true*, then
          1. Let _error_ be a newly created *TypeError* object.
          1. NOTE: _error_ is created in _calleeContext_ with _F_'s associated Realm Record.
          1. Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.
          1. Return ThrowCompletion(_error_).
        1. Perform OrdinaryCallBindThis(_F_, _calleeContext_, _thisArgument_).
        1. Let _result_ be OrdinaryCallEvaluateBody(_F_, _argumentsList_).
        1. [id="step-call-pop-context-stack"] Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.
        1. If _result_.[[Type]] is ~return~, return NormalCompletion(_result_.[[Value]]).
        1. ReturnIfAbrupt(_result_).
        1. Return NormalCompletion(*undefined*).