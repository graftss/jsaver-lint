def CreateMapIterator(map, kind) = 0:{
  0:assert (|| (|| (= kind ~key+value~) (= kind ~key~)) (= kind ~value~))
  1:app __x0__ = (RequireInternalSlot map "MapData")
  1:[? __x0__]
  2:clo __x1__ = ()[map, kind] => 3:{
    3:let entries = map.MapData
    4:let index = 0i
    5:let numEntries = entries.length
    6:while (< index numEntries) 6:{
      7:??? "Let id:{e} be the Record { [ [ Key ] ] , [ [ Value ] ] } that is the value of id:{entries} [ id:{index} ] ."
      8:index = (+ index 1i)
      9:if (! (= e.Key ~empty~)) 9:{
        10:if (= kind ~key~) 10:let result = e.Key else 10:if (= kind ~value~) 11:let result = e.Value else 12:{
          13:assert (= kind ~key+value~)
          14:app __x2__ = (CreateArrayFromList (new [e.Key, e.Value]))
          14:let result = [! __x2__]
        }
        15:app __x3__ = (Yield result)
        15:[? __x3__]
        17:numEntries = entries.length
      } else 9:{}
    }
    18:return undefined
  }
  2:let closure = __x1__
  19:app __x4__ = (CreateIteratorFromClosure closure "%MapIteratorPrototype%" INTRINSICS["%MapIteratorPrototype%"])
  19:return [! __x4__]
}
- id: "sec-createmapiterator"
- code:
          1. Assert: _kind_ is ~key+value~, ~key~, or ~value~.
          1. Perform ? RequireInternalSlot(_map_, [[MapData]]).
          1. Let _closure_ be a new Abstract Closure with no parameters that captures _map_ and _kind_ and performs the following steps when called:
            1. Let _entries_ be the List that is _map_.[[MapData]].
            1. Let _index_ be 0.
            1. Let _numEntries_ be the number of elements of _entries_.
            1. Repeat, while _index_ < _numEntries_,
              1. Let _e_ be the Record { [[Key]], [[Value]] } that is the value of _entries_[_index_].
              1. Set _index_ to _index_ + 1.
              1. If _e_.[[Key]] is not ~empty~, then
                1. If _kind_ is ~key~, let _result_ be _e_.[[Key]].
                1. Else if _kind_ is ~value~, let _result_ be _e_.[[Value]].
                1. Else,
                  1. Assert: _kind_ is ~key+value~.
                  1. Let _result_ be ! CreateArrayFromList(« _e_.[[Key]], _e_.[[Value]] »).
                1. Perform ? Yield(_result_).
                1. NOTE: the number of elements in _entries_ may have changed while execution of this abstract operation was paused by Yield.
                1. Set _numEntries_ to the number of elements of _entries_.
            1. Return *undefined*.
          1. Return ! CreateIteratorFromClosure(_closure_, *"%MapIteratorPrototype%"*, %MapIteratorPrototype%).