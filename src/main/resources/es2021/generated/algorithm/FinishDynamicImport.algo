def FinishDynamicImport(referencingScriptOrModule, specifier, promiseCapability, completion) = 0:{
  0:app __x0__ = (IsAbruptCompletion completion)
  0:if __x0__ 0:{
    0:app __x1__ = (Call promiseCapability.Reject undefined (new [completion.Value]))
    0:[! __x1__]
  } else 1:{
    3:app __x2__ = (HostResolveImportedModule referencingScriptOrModule specifier)
    3:let moduleRecord = [! __x2__]
    5:app __x3__ = (GetModuleNamespace moduleRecord)
    5:let namespace = __x3__
    6:app __x4__ = (IsAbruptCompletion namespace)
    6:if __x4__ 6:{
      6:app __x5__ = (Call promiseCapability.Reject undefined (new [namespace.Value]))
      6:[! __x5__]
    } else 7:{
      7:app __x6__ = (Call promiseCapability.Resolve undefined (new [namespace.Value]))
      7:[! __x6__]
    }
  }
}
- id: "sec-finishdynamicimport"
- code:
          1. If _completion_ is an abrupt completion, perform ! Call(_promiseCapability_.[[Reject]], *undefined*, « _completion_.[[Value]] »).
          1. Else,
            1. Assert: _completion_ is a normal completion and _completion_.[[Value]] is *undefined*.
            1. Let _moduleRecord_ be ! HostResolveImportedModule(_referencingScriptOrModule_, _specifier_).
            1. Assert: Evaluate has already been invoked on _moduleRecord_ and successfully completed.
            1. Let _namespace_ be GetModuleNamespace(_moduleRecord_).
            1. If _namespace_ is an abrupt completion, perform ! Call(_promiseCapability_.[[Reject]], *undefined*, « _namespace_.[[Value]] »).
            1. Else, perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, « _namespace_.[[Value]] »).