def GeneratorResume(generator, value, generatorBrand) = 0:{
  0:app __x0__ = (GeneratorValidate generator generatorBrand)
  0:let state = [? __x0__]
  1:if (= state ~completed~) 1:{
    1:app __x1__ = (CreateIterResultObject undefined true)
    1:return __x1__
  } else 1:{}
  2:assert (|| (= state ~suspendedStart~) (= state ~suspendedYield~))
  3:let genContext = generator.GeneratorContext
  4:let methodContext = CONTEXT
  5:CONTEXT = null
  6:generator.GeneratorState = ~executing~
  7:append genContext -> EXECUTION_STACK
  7:CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  8:app __x2__ = (NormalCompletion value)
  8:withcont __x3__ (result) = 8:{
    8:if (= genContext.ReturnCont absent) 8:genContext.ReturnCont = (new []) else 8:{}
    8:append __x3__ -> genContext.ReturnCont
    8:app _ = (genContext.ResumeCont __x2__)
  }
  10:return result
}
- id: "sec-generatorresume"
- code:
          1. Let _state_ be ? GeneratorValidate(_generator_, _generatorBrand_).
          1. If _state_ is ~completed~, return CreateIterResultObject(*undefined*, *true*).
          1. Assert: _state_ is either ~suspendedStart~ or ~suspendedYield~.
          1. Let _genContext_ be _generator_.[[GeneratorContext]].
          1. Let _methodContext_ be the running execution context.
          1. Suspend _methodContext_.
          1. Set _generator_.[[GeneratorState]] to ~executing~.
          1. Push _genContext_ onto the execution context stack; _genContext_ is now the running execution context.
          1. Resume the suspended evaluation of _genContext_ using NormalCompletion(_value_) as the result of the operation that suspended it. Let _result_ be the value returned by the resumed computation.
          1. Assert: When we return here, _genContext_ has already been removed from the execution context stack and _methodContext_ is the currently running execution context.
          1. Return Completion(_result_).