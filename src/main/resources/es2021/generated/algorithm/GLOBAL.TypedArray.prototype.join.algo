def [BUILTIN] TypedArray.prototype.join(separator) = 0:{
  0:let O = this
  1:app __x0__ = (ValidateTypedArray O)
  1:[? __x0__]
  2:let len = O.ArrayLength
  3:if (= separator undefined) 3:let sep = "," else 4:{
    4:app __x1__ = (ToString separator)
    4:let sep = [? __x1__]
  }
  5:let R = ""
  6:let k = 0i
  7:while (< k len) 7:{
    8:if (< 0i k) 8:R = (+ R sep) else 8:{}
    9:app __x2__ = (ToString k)
    9:app __x3__ = (Get O [! __x2__])
    9:let element = [! __x3__]
    10:if (= element undefined) 10:let next = "" else 11:{
      11:app __x4__ = (ToString element)
      11:let next = [! __x4__]
    }
    11:R = (+ R next)
    12:k = (+ k 1i)
  }
  13:return R
}
- id: "sec-%typedarray%.prototype.join"
- code:
          1. Let _O_ be the *this* value.
          1. Perform ? ValidateTypedArray(_O_).
          1. Let _len_ be _O_.[[ArrayLength]].
          1. If _separator_ is *undefined*, let _sep_ be the single-element String *","*.
          1. Else, let _sep_ be ? ToString(_separator_).
          1. Let _R_ be the empty String.
          1. Let _k_ be 0.
          1. Repeat, while _k_ < _len_,
            1. If _k_ > 0, set _R_ to the string-concatenation of _R_ and _sep_.
            1. Let _element_ be ! Get(_O_, ! ToString(ùîΩ(_k_))).
            1. If _element_ is *undefined*, let _next_ be the empty String; otherwise, let _next_ be ! ToString(_element_).
            1. Set _R_ to the string-concatenation of _R_ and _next_.
            1. Set _k_ to _k_ + 1.
          1. Return _R_.