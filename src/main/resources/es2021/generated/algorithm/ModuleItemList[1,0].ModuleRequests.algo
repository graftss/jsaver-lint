def [SYNTAX] ModuleItemList[1,0].ModuleRequests[S]<(ModuleItemList, ModuleItem),false>() = 0:{
  0:access __x0__ = (ModuleItemList "ModuleRequests")
  0:let moduleNames = __x0__
  1:access __x1__ = (ModuleItem "ModuleRequests")
  1:let additionalNames = __x1__
  2:let __i__ = 0i
  2:while (< __i__ additionalNames.length) 2:if (contains moduleNames additionalNames[__i__]) 2:{} else 2:append additionalNames[__i__] -> moduleNames
  3:return moduleNames
}
- id: "sec-static-semantics-modulerequests"
- code:
          1. Let _moduleNames_ be ModuleRequests of |ModuleItemList|.
          1. Let _additionalNames_ be ModuleRequests of |ModuleItem|.
          1. Append to _moduleNames_ each element of _additionalNames_ that is not already an element of _moduleNames_.
          1. Return _moduleNames_.