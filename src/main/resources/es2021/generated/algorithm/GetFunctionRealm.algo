def GetFunctionRealm(obj) = 0:{
  0:app __x0__ = (IsCallable obj)
  0:assert (= [! __x0__] true)
  1:if (! (= obj.Realm absent)) 2:return obj.Realm else 1:{}
  3:if (is-instance-of obj BoundFunctionExoticObject) 3:{
    4:let target = obj.BoundTargetFunction
    5:app __x1__ = (GetFunctionRealm target)
    5:return [? __x1__]
  } else 3:{}
  6:if (is-instance-of obj ProxyExoticObject) 6:{
    7:if (= obj.ProxyHandler null) 7:throw TypeError else 7:{}
    8:let proxyTarget = obj.ProxyTarget
    9:app __x2__ = (GetFunctionRealm proxyTarget)
    9:return [? __x2__]
  } else 6:{}
  10:return REALM
}
- id: "sec-getfunctionrealm"
- code:
        1. Assert: ! IsCallable(_obj_) is *true*.
        1. If _obj_ has a [[Realm]] internal slot, then
          1. Return _obj_.[[Realm]].
        1. If _obj_ is a bound function exotic object, then
          1. Let _target_ be _obj_.[[BoundTargetFunction]].
          1. Return ? GetFunctionRealm(_target_).
        1. If _obj_ is a Proxy exotic object, then
          1. If _obj_.[[ProxyHandler]] is *null*, throw a *TypeError* exception.
          1. Let _proxyTarget_ be _obj_.[[ProxyTarget]].
          1. Return ? GetFunctionRealm(_proxyTarget_).
        1. [id="step-getfunctionrealm-default-return"] Return the current Realm Record.