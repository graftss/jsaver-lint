def [BUILTIN] TypedArray.of(...items) = 0:{
  0:let len = items.length
  1:let C = this
  2:app __x0__ = (IsConstructor C)
  2:if (= __x0__ false) 2:throw TypeError else 2:{}
  3:app __x1__ = (TypedArrayCreate C (new [len]))
  3:let newObj = [? __x1__]
  4:let k = 0i
  5:while (< k len) 5:{
    6:let kValue = items[k]
    7:app __x2__ = (ToString k)
    7:let Pk = [! __x2__]
    8:app __x3__ = (Set newObj Pk kValue true)
    8:[? __x3__]
    9:k = (+ k 1i)
  }
  10:return newObj
}
- id: "sec-%typedarray%.of"
- code:
          1. Let _len_ be the number of elements in _items_.
          1. Let _C_ be the *this* value.
          1. If IsConstructor(_C_) is *false*, throw a *TypeError* exception.
          1. Let _newObj_ be ? TypedArrayCreate(_C_, « 𝔽(_len_) »).
          1. Let _k_ be 0.
          1. Repeat, while _k_ < _len_,
            1. Let _kValue_ be _items_[_k_].
            1. Let _Pk_ be ! ToString(𝔽(_k_)).
            1. Perform ? Set(_newObj_, _Pk_, _kValue_, *true*).
            1. Set _k_ to _k_ + 1.
          1. Return _newObj_.