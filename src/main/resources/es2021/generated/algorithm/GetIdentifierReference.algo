def GetIdentifierReference(env, name, strict) = 0:{
  0:if (= env null) 1:return (new ReferenceRecord("Base" -> ~unresolvable~, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) else 0:{}
  2:app __x0__ = (env.HasBinding env name)
  2:let exists = [? __x0__]
  3:if (= exists true) 4:return (new ReferenceRecord("Base" -> env, "ReferencedName" -> name, "Strict" -> strict, "ThisValue" -> ~empty~)) else 5:{
    6:let outer = env.OuterEnv
    7:app __x1__ = (GetIdentifierReference outer name strict)
    7:return [? __x1__]
  }
}
- id: "sec-getidentifierreference"
- code:
          1. If _env_ is the value *null*, then
            1. Return the Reference Record { [[Base]]: ~unresolvable~, [[ReferencedName]]: _name_, [[Strict]]: _strict_, [[ThisValue]]: ~empty~ }.
          1. Let _exists_ be ? _env_.HasBinding(_name_).
          1. If _exists_ is *true*, then
            1. Return the Reference Record { [[Base]]: _env_, [[ReferencedName]]: _name_, [[Strict]]: _strict_, [[ThisValue]]: ~empty~ }.
          1. Else,
            1. Let _outer_ be _env_.[[OuterEnv]].
            1. Return ? GetIdentifierReference(_outer_, _name_, _strict_).