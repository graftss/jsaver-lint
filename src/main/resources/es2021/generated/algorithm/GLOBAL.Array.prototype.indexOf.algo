def [BUILTIN] Array.prototype.indexOf(searchElement, fromIndex?) = 0:{
  0:app __x0__ = (ToObject this)
  0:let O = [? __x0__]
  1:app __x1__ = (LengthOfArrayLike O)
  1:let len = [? __x1__]
  2:if (= len 0i) 2:return -1i else 2:{}
  3:app __x2__ = (ToIntegerOrInfinity fromIndex)
  3:let n = [? __x2__]
  5:if (= n Infinity) 5:return -1i else 5:if (= n -Infinity) 6:n = 0i else 5:{}
  7:if (! (< n 0i)) 8:let k = n else 9:{
    10:let k = (+ len n)
    11:if (< k 0i) 11:k = 0i else 11:{}
  }
  12:while (< k len) 12:{
    13:app __x3__ = (ToString k)
    13:app __x4__ = (HasProperty O [! __x3__])
    13:let kPresent = [? __x4__]
    14:if (= kPresent true) 14:{
      15:app __x5__ = (ToString k)
      15:app __x6__ = (Get O [! __x5__])
      15:let elementK = [? __x6__]
      16:app __x7__ = (StrictEqualityComparison searchElement elementK)
      16:let same = __x7__
      17:if (= same true) 17:return k else 17:{}
    } else 14:{}
    18:k = (+ k 1i)
  }
  19:return -1i
}
- id: "sec-array.prototype.indexof"
- code:
          1. Let _O_ be ? ToObject(*this* value).
          1. Let _len_ be ? LengthOfArrayLike(_O_).
          1. If _len_ is 0, return *-1*<sub>𝔽</sub>.
          1. Let _n_ be ? ToIntegerOrInfinity(_fromIndex_).
          1. Assert: If _fromIndex_ is *undefined*, then _n_ is 0.
          1. If _n_ is +∞, return *-1*<sub>𝔽</sub>.
          1. Else if _n_ is -∞, set _n_ to 0.
          1. If _n_ ≥ 0, then
            1. Let _k_ be _n_.
          1. Else,
            1. Let _k_ be _len_ + _n_.
            1. If _k_ < 0, set _k_ to 0.
          1. Repeat, while _k_ < _len_,
            1. Let _kPresent_ be ? HasProperty(_O_, ! ToString(𝔽(_k_))).
            1. If _kPresent_ is *true*, then
              1. Let _elementK_ be ? Get(_O_, ! ToString(𝔽(_k_))).
              1. Let _same_ be the result of performing Strict Equality Comparison _searchElement_ === _elementK_.
              1. If _same_ is *true*, return 𝔽(_k_).
            1. Set _k_ to _k_ + 1.
          1. Return *-1*<sub>𝔽</sub>.