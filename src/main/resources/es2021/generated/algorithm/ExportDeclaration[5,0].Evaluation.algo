def [SYNTAX] ExportDeclaration[5,0].Evaluation[R]<(ClassDeclaration),true>() = 0:{
  0:access __x0__ = (ClassDeclaration "BindingClassDeclarationEvaluation")
  0:let value = [? __x0__]
  1:access __x1__ = (ClassDeclaration "BoundNames")
  1:let className = __x1__[0i]
  2:if (= className "*default*") 2:{
    3:let env = CONTEXT.LexicalEnvironment
    4:app __x2__ = (InitializeBoundName "*default*" value env)
    4:[? __x2__]
  } else 2:{}
  5:return ~empty~
}
- id: "sec-exports-runtime-semantics-evaluation"
- code:
          1. Let _value_ be ? BindingClassDeclarationEvaluation of |ClassDeclaration|.
          1. Let _className_ be the sole element of BoundNames of |ClassDeclaration|.
          1. If _className_ is *"\*default\*"*, then
            1. Let _env_ be the running execution context's LexicalEnvironment.
            1. Perform ? InitializeBoundName(*"\*default\*"*, _value_, _env_).
          1. Return NormalCompletion(~empty~).