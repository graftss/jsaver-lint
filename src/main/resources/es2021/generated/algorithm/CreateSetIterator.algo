def CreateSetIterator(set, kind) = 0:{
  0:assert (|| (= kind ~key+value~) (= kind ~value~))
  1:app __x0__ = (RequireInternalSlot set "SetData")
  1:[? __x0__]
  2:clo __x1__ = ()[set, kind] => 3:{
    3:let index = 0i
    4:let entries = set.SetData
    5:let numEntries = entries.length
    6:while (< index numEntries) 6:{
      7:let e = entries[index]
      8:index = (+ index 1i)
      9:if (! (= e ~empty~)) 9:{
        10:if (= kind ~key+value~) 10:{
          11:app __x2__ = (CreateArrayFromList (new [e, e]))
          11:app __x3__ = (Yield [! __x2__])
          11:[? __x3__]
        } else 12:{
          13:assert (= kind ~value~)
          14:app __x4__ = (Yield e)
          14:[? __x4__]
        }
        16:numEntries = entries.length
      } else 9:{}
    }
    17:return undefined
  }
  2:let closure = __x1__
  18:app __x5__ = (CreateIteratorFromClosure closure "%SetIteratorPrototype%" INTRINSICS["%SetIteratorPrototype%"])
  18:return [! __x5__]
}
- id: "sec-createsetiterator"
- code:
          1. Assert: _kind_ is ~key+value~ or ~value~.
          1. Perform ? RequireInternalSlot(_set_, [[SetData]]).
          1. Let _closure_ be a new Abstract Closure with no parameters that captures _set_ and _kind_ and performs the following steps when called:
            1. Let _index_ be 0.
            1. Let _entries_ be the List that is _set_.[[SetData]].
            1. Let _numEntries_ be the number of elements of _entries_.
            1. Repeat, while _index_ < _numEntries_,
              1. Let _e_ be _entries_[_index_].
              1. Set _index_ to _index_ + 1.
              1. If _e_ is not ~empty~, then
                1. If _kind_ is ~key+value~, then
                  1. Perform ? Yield(! CreateArrayFromList(« _e_, _e_ »)).
                1. Else,
                  1. Assert: _kind_ is ~value~.
                  1. Perform ? Yield(_e_).
                1. NOTE: the number of elements in _entries_ may have changed while execution of this abstract operation was paused by Yield.
                1. Set _numEntries_ to the number of elements of _entries_.
            1. Return *undefined*.
          1. Return ! CreateIteratorFromClosure(_closure_, *"%SetIteratorPrototype%"*, %SetIteratorPrototype%).