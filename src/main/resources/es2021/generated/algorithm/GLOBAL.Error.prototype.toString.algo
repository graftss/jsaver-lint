def [BUILTIN] Error.prototype.toString() = 0:{
  0:let O = this
  1:if (! (= (typeof O) Object)) 1:throw TypeError else 1:{}
  2:app __x0__ = (Get O "name")
  2:let name = [? __x0__]
  3:if (= name undefined) 3:name = "Error" else 4:{
    4:app __x1__ = (ToString name)
    4:name = [? __x1__]
  }
  4:app __x2__ = (Get O "message")
  4:let msg = [? __x2__]
  5:if (= msg undefined) 5:msg = "" else 6:{
    6:app __x3__ = (ToString msg)
    6:msg = [? __x3__]
  }
  6:if (= name "") 6:return msg else 6:{}
  7:if (= msg "") 7:return name else 7:{}
  8:return (+ (+ (+ name ":") " ") msg)
}
- id: "sec-error.prototype.tostring"
- code:
          1. Let _O_ be the *this* value.
          1. If Type(_O_) is not Object, throw a *TypeError* exception.
          1. Let _name_ be ? Get(_O_, *"name"*).
          1. If _name_ is *undefined*, set _name_ to *"Error"*; otherwise set _name_ to ? ToString(_name_).
          1. Let _msg_ be ? Get(_O_, *"message"*).
          1. If _msg_ is *undefined*, set _msg_ to the empty String; otherwise set _msg_ to ? ToString(_msg_).
          1. If _name_ is the empty String, return _msg_.
          1. If _msg_ is the empty String, return _name_.
          1. Return the string-concatenation of _name_, the code unit 0x003A (COLON), the code unit 0x0020 (SPACE), and _msg_.