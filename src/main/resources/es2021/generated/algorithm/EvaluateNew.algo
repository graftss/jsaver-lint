def EvaluateNew(constructExpr, arguments) = 0:{
  0:assert (|| (is-instance-of constructExpr NewExpression) (is-instance-of constructExpr MemberExpression))
  1:assert (|| (= arguments ~empty~) (is-instance-of arguments Arguments))
  2:access __x0__ = (constructExpr "Evaluation")
  2:let ref = __x0__
  3:app __x1__ = (GetValue ref)
  3:let constructor = [? __x1__]
  4:if (= arguments ~empty~) 4:let argList = (new []) else 5:{
    6:access __x2__ = (arguments "ArgumentListEvaluation")
    6:let argList = [? __x2__]
  }
  7:app __x3__ = (IsConstructor constructor)
  7:if (= __x3__ false) 7:throw TypeError else 7:{}
  8:app __x4__ = (Construct constructor argList)
  8:return [? __x4__]
}
- id: "sec-evaluatenew"
- code:
            1. Assert: _constructExpr_ is either a |NewExpression| or a |MemberExpression|.
            1. Assert: _arguments_ is either ~empty~ or an |Arguments|.
            1. Let _ref_ be the result of evaluating _constructExpr_.
            1. Let _constructor_ be ? GetValue(_ref_).
            1. If _arguments_ is ~empty~, let _argList_ be a new empty List.
            1. Else,
              1. Let _argList_ be ? ArgumentListEvaluation of _arguments_.
            1. If IsConstructor(_constructor_) is *false*, throw a *TypeError* exception.
            1. Return ? Construct(_constructor_, _argList_).