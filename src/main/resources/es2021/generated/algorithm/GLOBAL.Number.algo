def [BUILTIN] Number(value) = 0:{
  0:if (! (= value absent)) 0:{
    1:app __x0__ = (ToNumeric value)
    1:let prim = [? __x0__]
    2:if (= (typeof prim) BigInt) 2:let n = prim else 2:let n = prim
  } else 0:let n = 0i
  6:if (= NewTarget undefined) 6:return n else 6:{}
  7:app __x1__ = (OrdinaryCreateFromConstructor NewTarget "%Number.prototype%" (new ["NumberData"]))
  7:let O = [? __x1__]
  8:O.NumberData = n
  9:return O
}
- id: "sec-number-constructor-number-value"
- code:
          1. If _value_ is present, then
            1. Let _prim_ be ? ToNumeric(_value_).
            1. If Type(_prim_) is BigInt, let _n_ be 𝔽(ℝ(_prim_)).
            1. Otherwise, let _n_ be _prim_.
          1. Else,
            1. Let _n_ be *+0*<sub>𝔽</sub>.
          1. If NewTarget is *undefined*, return _n_.
          1. Let _O_ be ? OrdinaryCreateFromConstructor(NewTarget, *"%Number.prototype%"*, « [[NumberData]] »).
          1. Set _O_.[[NumberData]] to _n_.
          1. Return _O_.