def [BUILTIN] TypedArray.prototype.map(callbackfn, thisArg?) = 0:{
  0:let O = this
  1:app __x0__ = (ValidateTypedArray O)
  1:[? __x0__]
  2:let len = O.ArrayLength
  3:app __x1__ = (IsCallable callbackfn)
  3:if (= __x1__ false) 3:throw TypeError else 3:{}
  4:app __x2__ = (TypedArraySpeciesCreate O (new [len]))
  4:let A = [? __x2__]
  5:let k = 0i
  6:while (< k len) 6:{
    7:app __x3__ = (ToString k)
    7:let Pk = [! __x3__]
    8:app __x4__ = (Get O Pk)
    8:let kValue = [! __x4__]
    9:app __x5__ = (Call callbackfn thisArg (new [kValue, k, O]))
    9:let mappedValue = [? __x5__]
    10:app __x6__ = (Set A Pk mappedValue true)
    10:[? __x6__]
    11:k = (+ k 1i)
  }
  12:return A
}
- id: "sec-%typedarray%.prototype.map"
- code:
          1. Let _O_ be the *this* value.
          1. Perform ? ValidateTypedArray(_O_).
          1. Let _len_ be _O_.[[ArrayLength]].
          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.
          1. Let _A_ be ? TypedArraySpeciesCreate(_O_, « 𝔽(_len_) »).
          1. Let _k_ be 0.
          1. Repeat, while _k_ < _len_,
            1. Let _Pk_ be ! ToString(𝔽(_k_)).
            1. Let _kValue_ be ! Get(_O_, _Pk_).
            1. Let _mappedValue_ be ? Call(_callbackfn_, _thisArg_, « _kValue_, 𝔽(_k_), _O_ »).
            1. Perform ? Set(_A_, _Pk_, _mappedValue_, *true*).
            1. Set _k_ to _k_ + 1.
          1. Return _A_.