def ForInOfHeadEvaluation(uninitializedBoundNames, expr, iterationKind) = 0:{
  0:let oldEnv = CONTEXT.LexicalEnvironment
  1:if (< 0i uninitializedBoundNames.length) 1:{
    3:app __x0__ = (NewDeclarativeEnvironment oldEnv)
    3:let newEnv = __x0__
    4:let __x1__ = uninitializedBoundNames
    4:let __x2__ = 0i
    4:while (< __x2__ __x1__.length) 4:{
      4:let name = __x1__[__x2__]
      4:__x2__ = (+ __x2__ 1i)
      5:app __x3__ = (newEnv.CreateMutableBinding newEnv name false)
      5:[! __x3__]
    }
    6:CONTEXT.LexicalEnvironment = newEnv
  } else 1:{}
  7:access __x4__ = (expr "Evaluation")
  7:let exprRef = __x4__
  8:CONTEXT.LexicalEnvironment = oldEnv
  9:app __x5__ = (GetValue exprRef)
  9:let exprValue = [? __x5__]
  10:if (= iterationKind ~enumerate~) 10:{
    11:if (|| (= exprValue undefined) (= exprValue null)) 12:return (comp[~break~] ~empty~ => ~empty~) else 11:{}
    13:app __x6__ = (ToObject exprValue)
    13:let obj = [! __x6__]
    14:app __x7__ = (EnumerateObjectProperties obj)
    14:let iterator = [? __x7__]
    15:app __x8__ = (GetV iterator "next")
    15:let nextMethod = [! __x8__]
    16:return (new Record("Iterator" -> iterator, "NextMethod" -> nextMethod, "Done" -> false))
  } else 17:{
    18:assert (|| (= iterationKind ~iterate~) (= iterationKind ~async-iterate~))
    19:if (= iterationKind ~async-iterate~) 19:let iteratorHint = ~async~ else 19:let iteratorHint = ~sync~
    21:app __x9__ = (GetIterator exprValue iteratorHint)
    21:return [? __x9__]
  }
}
- id: "sec-runtime-semantics-forinofheadevaluation"
- code:
          1. Let _oldEnv_ be the running execution context's LexicalEnvironment.
          1. If _uninitializedBoundNames_ is not an empty List, then
            1. Assert: _uninitializedBoundNames_ has no duplicate entries.
            1. Let _newEnv_ be NewDeclarativeEnvironment(_oldEnv_).
            1. For each String _name_ of _uninitializedBoundNames_, do
              1. Perform ! _newEnv_.CreateMutableBinding(_name_, *false*).
            1. Set the running execution context's LexicalEnvironment to _newEnv_.
          1. Let _exprRef_ be the result of evaluating _expr_.
          1. Set the running execution context's LexicalEnvironment to _oldEnv_.
          1. Let _exprValue_ be ? GetValue(_exprRef_).
          1. If _iterationKind_ is ~enumerate~, then
            1. If _exprValue_ is *undefined* or *null*, then
              1. Return Completion { [[Type]]: ~break~, [[Value]]: ~empty~, [[Target]]: ~empty~ }.
            1. Let _obj_ be ! ToObject(_exprValue_).
            1. Let _iterator_ be ? EnumerateObjectProperties(_obj_).
            1. Let _nextMethod_ be ! GetV(_iterator_, *"next"*).
            1. Return the Record { [[Iterator]]: _iterator_, [[NextMethod]]: _nextMethod_, [[Done]]: *false* }.
          1. Else,
            1. Assert: _iterationKind_ is ~iterate~ or ~async-iterate~.
            1. If _iterationKind_ is ~async-iterate~, let _iteratorHint_ be ~async~.
            1. Else, let _iteratorHint_ be ~sync~.
            1. Return ? GetIterator(_exprValue_, _iteratorHint_).